<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ios - 修改定位</title>
      <link href="/2022/01/05/owhn2e/"/>
      <url>/2022/01/05/owhn2e/</url>
      
        <content type="html"><![CDATA[<h2 id="ios模拟定位随时随地打卡"><a href="#ios模拟定位随时随地打卡" class="headerlink" title="ios模拟定位随时随地打卡"></a>ios模拟定位随时随地打卡</h2><h4 id="下载爱思助手"><a href="#下载爱思助手" class="headerlink" title="下载爱思助手"></a>下载爱思助手</h4><p>下载地址 <a href="https://www.i4.cn/">https://www.i4.cn/</a><br>下载好以后通过数据线连接手机</p><h4 id="点击上方的工具箱"><a href="#点击上方的工具箱" class="headerlink" title="点击上方的工具箱"></a>点击上方的工具箱</h4><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1641348351000.png" loading="lazy"></p><h4 id="在工具箱里面找到虚拟定位"><a href="#在工具箱里面找到虚拟定位" class="headerlink" title="在工具箱里面找到虚拟定位"></a>在工具箱里面找到虚拟定位</h4><p>如果是window好好找一找虚拟定位<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1641348559000.png" loading="lazy"></p><h4 id="搜索定位位置并修改"><a href="#搜索定位位置并修改" class="headerlink" title="搜索定位位置并修改"></a>搜索定位位置并修改</h4><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1641348768000.png" loading="lazy"></p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>1、修改位置失效时间差不多在2天左右<br>2、修改位置会导致你的手机一直处于那个位置，比如你在别的地方打车定位还是在公司<br>3、修改位置怎么恢复 重启手机或者打开爱思助手还原真实位置<br>4、祝可爱的你不在迟到，我是高彩鹏，爱我更爱你</p>]]></content>
      
      
      <categories>
          
          <category> ios </category>
          
          <category> ios改定位 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ios </tag>
            
            <tag> 修改定位 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序 - 反编译</title>
      <link href="/2021/12/29/nwhi2e/"/>
      <url>/2021/12/29/nwhi2e/</url>
      
        <content type="html"><![CDATA[<h2 id="先拿小程序源码包"><a href="#先拿小程序源码包" class="headerlink" title="先拿小程序源码包"></a>先拿小程序源码包</h2><h3 id="第一步：下载模拟器"><a href="#第一步：下载模拟器" class="headerlink" title="第一步：下载模拟器"></a>第一步：下载模拟器</h3><p>什么模拟器都可以，我电脑是mac的下载的模拟器是Mumu 模拟器<br>下载地址：<a href="http://mumu.163.com/360/">http://mumu.163.com/360/</a> 下载完成后对应安装好<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/20211229151656.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"></p><h3 id="第二步：下载和安装应用：微信，RE文件管理器"><a href="#第二步：下载和安装应用：微信，RE文件管理器" class="headerlink" title="第二步：下载和安装应用：微信，RE文件管理器"></a>第二步：下载和安装应用：微信，RE文件管理器</h3><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/20211229151707.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"></p><h3 id="第三步：开启Root权限，然后保存"><a href="#第三步：开启Root权限，然后保存" class="headerlink" title="第三步：开启Root权限，然后保存"></a>第三步：开启Root权限，然后保存</h3><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1640744889000.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1640762441000.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"></p><h3 id="第四步：打开RE文件管理器，获取超级用户访问权限"><a href="#第四步：打开RE文件管理器，获取超级用户访问权限" class="headerlink" title="第四步：打开RE文件管理器，获取超级用户访问权限"></a>第四步：打开RE文件管理器，获取超级用户访问权限</h3><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/20211229152311.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"></p><p><strong>基本环境已经配置完成了，接下来打开微信，搜索对应的微信小程序</strong></p><h3 id="第五步：打开要爬取的小程序，我爬的这个小程序叫（虎年头像生成制作）"><a href="#第五步：打开要爬取的小程序，我爬的这个小程序叫（虎年头像生成制作）" class="headerlink" title="第五步：打开要爬取的小程序，我爬的这个小程序叫（虎年头像生成制作）"></a>第五步：打开要爬取的小程序，我爬的这个小程序叫（虎年头像生成制作）</h3><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1640762818000.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"></p><h3 id="第六步：打开RE文件管理器，定位到目录"><a href="#第六步：打开RE文件管理器，定位到目录" class="headerlink" title="第六步：打开RE文件管理器，定位到目录"></a>第六步：打开RE文件管理器，定位到目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/data/data/com.tencent.mm/MicroMsg/6943bc538a088dbe4f1544a31a6005b6/appbrand/pkg</span><br></pre></td></tr></table></figure><p><strong>（6943bc538a088dbe4f1544a31a6005b6这一块一般都是乱码找到打开就行，每个人都不一样）</strong></p><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1640763018000.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"></p><p><strong>以上就是小程序程序包，接下来我们需要将程序包取出来，可以通过模拟器里的微信发送，也可以通过模拟器共享文件夹发送出来</strong></p><p><strong>注意事项：超过3m以上的比如图片中的那个15M那就是他的依赖包，不是源码，源码就是那个小于3m的400多k文件</strong></p><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1640763183000.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"></p><h2 id="反编译小程序源码"><a href="#反编译小程序源码" class="headerlink" title="反编译小程序源码"></a>反编译小程序源码</h2><h3 id="第一步：下载wxappUnpacker"><a href="#第一步：下载wxappUnpacker" class="headerlink" title="第一步：下载wxappUnpacker"></a>第一步：下载wxappUnpacker</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">github地址：https:<span class="comment">//github.com/gaocaipeng/wxappUnpacker.git</span></span><br><span class="line">下载地址：https:<span class="comment">//gaoxiaotian.lanzoup.com/b06bntpid</span></span><br><span class="line">下载密码：<span class="number">6666</span></span><br></pre></td></tr></table></figure><h3 id="第二步：打开wxappUnpacker，npm-install-下载对应依赖，执行对应指令"><a href="#第二步：打开wxappUnpacker，npm-install-下载对应依赖，执行对应指令" class="headerlink" title="第二步：打开wxappUnpacker，npm install 下载对应依赖，执行对应指令"></a>第二步：打开wxappUnpacker，npm install 下载对应依赖，执行对应指令</h3><p><strong>当检测到 wxapkg 为子包时, 添加-s 参数指定主包源码路径即可自动将子包的 wxss,wxml,js 解析到主包的对应位置下. 完整流程大致如下</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 获取主包和若干子包</span><br><span class="line"><span class="number">2.</span> 解包主包</span><br><span class="line">    - windows系统使用: <span class="string">`./bingo.bat /master-xxx.wxapkg`</span></span><br><span class="line">    - Linux系统使用: <span class="string">`./bingo.sh /master-xxx.wxapkg`</span></span><br><span class="line"><span class="number">3.</span> 解包子包</span><br><span class="line">    - windows系统使用: <span class="string">`./bingo.bat /sub-1-xxx.wxapkg -s=../master-xxx`</span></span><br><span class="line">    - Linux系统使用:  <span class="string">`./bingo.sh /sub-1-xxx.wxapkg -s=../master-xxx`</span></span><br></pre></td></tr></table></figure><p><strong>注意事项：./bingo.sh是你要执行的程序后面的地址是你存放抓取下来的压缩包的地址</strong></p><h3 id="第三步：执行命令-bingo-sh-1706599111-2-wxapkg"><a href="#第三步：执行命令-bingo-sh-1706599111-2-wxapkg" class="headerlink" title="第三步：执行命令./bingo.sh ../_1706599111_2.wxapkg"></a>第三步：执行命令./bingo.sh ../_1706599111_2.wxapkg</h3><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1640765077000.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1640765175000.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"></p><p><strong>到这已经完成了，我们可以打开微信开发者工具看一看</strong></p><h2 id="导入微信开发者工具"><a href="#导入微信开发者工具" class="headerlink" title="导入微信开发者工具"></a>导入微信开发者工具</h2><h3 id="第一步：打开微信开发者工具，选择文件夹，下面选择测试号"><a href="#第一步：打开微信开发者工具，选择文件夹，下面选择测试号" class="headerlink" title="第一步：打开微信开发者工具，选择文件夹，下面选择测试号"></a>第一步：打开微信开发者工具，选择文件夹，下面选择测试号</h3><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1640765369000.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"></p><h3 id="第二步：一个重要的设置：设置-》项目设置-》不校验合法域名，这个要勾选上"><a href="#第二步：一个重要的设置：设置-》项目设置-》不校验合法域名，这个要勾选上" class="headerlink" title="第二步：一个重要的设置：设置-》项目设置-》不校验合法域名，这个要勾选上"></a>第二步：一个重要的设置：设置-》项目设置-》不校验合法域名，这个要勾选上</h3><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1640766239647.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"><br><strong>继续看这个小程序他打开报错</strong><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1640766455667.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"></p><h3 id="常见的编译报错"><a href="#常见的编译报错" class="headerlink" title="常见的编译报错"></a>常见的编译报错</h3><h3 id="当点了编译后，在控制台一般会输出几种报错，需要自己处理一下"><a href="#当点了编译后，在控制台一般会输出几种报错，需要自己处理一下" class="headerlink" title="当点了编译后，在控制台一般会输出几种报错，需要自己处理一下"></a>当点了编译后，在控制台一般会输出几种报错，需要自己处理一下</h3><p><strong>报错1</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;[ WXML 文件编译错误] ./pages/search/index/index.wxml Bad attr filterStyle with message 20 | &#123;&#123;&#x27;</span><span class="string">&#x27;+item.name+&#x27;</span><span class="string">&#x27;&#125;&#125; 21 | 22 |&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>解决方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">找到对应文件位置，将filterStyle=&quot;&#123;&#123;top:0&#125;&#125;&quot; 修改为 filterStyle=&quot;top:0&quot;, filterStyle多了两个大括号</span><br></pre></td></tr></table></figure><p><strong>报错2</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;TypeError: _typeof3 is not a function at _typeof (typeof.js? [sm]:2)&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>解决方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@babel\runtime\helpers文件夹下面的typeof.js报错,因为本地装过这个包npm install --save @babel/runtime,直接进去拷一份typeof.js覆就好了,新typeof.js如下</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_typeof</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="string">&quot;@babel/helpers - typeof&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> === <span class="string">&quot;function&quot;</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Symbol</span>.iterator === <span class="string">&quot;symbol&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">module</span>.exports = _typeof = <span class="function"><span class="keyword">function</span> <span class="title">_typeof</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> obj;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">module</span>.exports[<span class="string">&quot;default&quot;</span>] = <span class="built_in">module</span>.exports, <span class="built_in">module</span>.exports.__esModule = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">module</span>.exports = _typeof = <span class="function"><span class="keyword">function</span> <span class="title">_typeof</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> obj &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Symbol</span> === <span class="string">&quot;function&quot;</span> &amp;&amp; obj.constructor === <span class="built_in">Symbol</span> &amp;&amp; obj !== <span class="built_in">Symbol</span>.prototype ? <span class="string">&quot;symbol&quot;</span> : <span class="keyword">typeof</span> obj;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">module</span>.exports[<span class="string">&quot;default&quot;</span>] = <span class="built_in">module</span>.exports, <span class="built_in">module</span>.exports.__esModule = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> _typeof(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = _typeof;</span><br><span class="line"><span class="built_in">module</span>.exports[<span class="string">&quot;default&quot;</span>] = <span class="built_in">module</span>.exports, <span class="built_in">module</span>.exports.__esModule = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="那接下来我们替换一下：-babel-runtime-helpers文件夹下面的typeof-js"><a href="#那接下来我们替换一下：-babel-runtime-helpers文件夹下面的typeof-js" class="headerlink" title="那接下来我们替换一下：@babel\runtime\helpers文件夹下面的typeof.js"></a>那接下来我们替换一下：@babel\runtime\helpers文件夹下面的typeof.js</h3><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1640766760810.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"></p><p>一个完整的反编译小程序</p>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
          <category> 小程序反编译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序反编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虎牙军规</title>
      <link href="/2021/06/15/gzfg52/"/>
      <url>/2021/06/15/gzfg52/</url>
      
        <content type="html"><![CDATA[<h1 id="1-尽量减少-HTTP-请求"><a href="#1-尽量减少-HTTP-请求" class="headerlink" title="1.尽量减少 HTTP 请求"></a>1.尽量减少 HTTP 请求</h1><p>80%的终端用户响应时间都花在了前端上，其中大部分时间都在下载页面上的各种组件：图片，样式表，脚本，Flash 等等。减少组件数必然能够减少页面提交的 HTTP 请求数。这是让页面更快的关键。</p><p>减少页面组件数的一种方式是简化页面设计。但有没有一种方法可以在构建复杂的页面同时加快响应时间呢？嗯，确实有鱼和熊掌兼得的办法。</p><p>合并文件是通过把所有脚本放在一个文件中的方式来减少请求数的，当然，也可以合并所有的 CSS。如果各个页面的脚本和样式不一样的话，合并文件就是一项比较麻烦的工作了，但把这个作为站点发布过程的一部分确实可以提高响应时间。</p><p>CSS Sprites 是减少图片请求数量的首选方式。把背景图片都整合到一张图片中，然后用 CSS 的 background-image 和 background-position 属性来定位要显示的部分。</p><p>图像映射可以把多张图片合并成单张图片，总大小是一样的，但减少了请求数并加速了页面加载。图片映射只有在图像在页面中连续的时候才有用，比如导航条。给 image map 设置坐标的过程既无聊又容易出错，用 image map 来做导航也不容易，所以不推荐用这种方式。</p><p>行内图片（Base64 编码）用 data: URL 模式来把图片嵌入页面。这样会增加 HTML 文件的大小，把行内图片放在（缓存的）样式表中是个好办法，而且成功避免了页面变“重”。但目前主流浏览器并不能很好地支持行内图片。</p><p>减少页面的 HTTP 请求数是个起点，这是提升站点首次访问速度的重要指导原则。</p><h1 id="2-减少-DNS-查找"><a href="#2-减少-DNS-查找" class="headerlink" title="2.减少 DNS 查找"></a>2.减少 DNS 查找</h1><p>域名系统建立了主机名和 IP 地址间的映射，就像电话簿上人名和号码的映射一样。当你在浏览器输入<a href="http://www.yahoo.com的时候,浏览器就会联系dns解析器返回服务器的ip地址.dns是有成本的,它需要20到120毫秒去查找给定主机名的ip地址.在dns查找完成之前,浏览器无法从主机名下载任何东西./">www.yahoo.com的时候，浏览器就会联系DNS解析器返回服务器的IP地址。DNS是有成本的，它需要20到120毫秒去查找给定主机名的IP地址。在DNS查找完成之前，浏览器无法从主机名下载任何东西。</a></p><p>DNS 查找被缓存起来更高效，由用户的 ISP（网络服务提供商）或者本地网络存在一个特殊的缓存服务器上，但还可以缓存在个人用户的计算机上。DNS 信息被保存在操作系统的 DNS cache(微软 Windows 上的”DNS 客户端服务”)里。大多数浏览器有独立于操作系统的自己的 cache。只要浏览器在自己的 cache 里还保留着这条记录，它就不会向操作系统查询 DNS。</p><p>IE 默认缓存 DNS 查找 30 分钟，写在 DnsCacheTimeout 注册表设置中。Firefox 缓存 1 分钟，可以用 network.dnsCacheExpiration 配置项设置。(Fasterfox 把缓存时间改成了 1 小时 P.S. Fasterfox 是 FF 的一个提速插件)</p><p>如果客户端的 DNS cache 是空的（包括浏览器的和操作系统的），DNS 查找数等于页面上不同的主机名数，包括页面 URL，图片，脚本文件，样式表，Flash 对象等等组件中的主机名，减少不同的主机名就可以减少 DNS 查找。</p><p>减少不同主机名的数量同时也减少了页面能够并行下载的组件数量，避免 DNS 查找削减了响应时间，而减少并行下载数量却增加了响应时间。我的原则是把组件分散在 2 到 4 个主机名下，这是同时减少 DNS 查找和允许高并发下载的折中方案。</p><h1 id="3-避免重定向"><a href="#3-避免重定向" class="headerlink" title="3.避免重定向"></a>3.避免重定向</h1><p>重定向用 301 和 302 状态码，下面是一个有 301 状态码的 HTTP 头：</p><p>HTTP/1.1 301 Moved Permanently<br>Location: <a href="http://example.com/newuri">http://example.com/newuri</a><br>Content-Type: text/html<br>浏览器会自动跳转到 Location 域指明的 URL。重定向需要的所有信息都在 HTTP 头部，而响应体一般是空的。其实额外的 HTTP 头，比如 Expires 和 Cache-Control 也表示重定向。除此之外还有别的跳转方式：refresh 元标签和 JavaScript，但如果你必须得做重定向，最好用标准的 3xxHTTP 状态码，主要是为了让返回按钮能正常使用。</p><p>牢记重定向会拖慢用户体验，在用户和 HTML 文档之间插入重定向会延迟页面上的所有东西，页面无法渲染，组件也无法开始下载，直到 HTML 文档被送达浏览器。</p><p>有一种常见的极其浪费资源的重定向，而且 web 开发人员一般都意识不到这一点，就是 URL 尾部缺少一个斜线的时候。例如，跳转到<a href="http://astrology.yahoo.com/astrology">http://astrology.yahoo.com/astrology</a>会返回一个重定向到<a href="http://astrology.yahoo.com/astrology/">http://astrology.yahoo.com/astrology/</a>的 301 响应（注意添在尾部的斜线）。在 Apache 中可以用 Alias，mod_rewrite 或者 DirectorySlash 指令来取消不必要的重定向。</p><p>重定向最常见的用途是把旧站点连接到新的站点，还可以连接同一站点的不同部分，针对用户的不同情况（浏览器类型，用户帐号类型等等）做一些处理。用重定向来连接两个网站是最简单的，只需要少量的额外代码。虽然在这些时候使用重定向减少了开发人员的开发复杂度，但降低了用户体验。一种替代方案是用 Alias 和 mod_rewrite，前提是两个代码路径都在相同的服务器上。如果是因为域名变化而使用了重定向，就可以创建一条 CNAME（创建一个指向另一个域名的 DNS 记录作为别名）结合 Alias 或者 mod_rewrite 指令。</p><h1 id="4-让-Ajax-可缓存"><a href="#4-让-Ajax-可缓存" class="headerlink" title="4.让 Ajax 可缓存"></a>4.让 Ajax 可缓存</h1><p>Ajax 的一个好处是可以给用户提供即时反馈，因为它能够从后台服务器异步请求信息。然而，用了 Ajax 就无法保证用户在等待异步 JavaScript 和 XML 响应返回期间不会非常无聊。在很多应用程序中，用户能够一直等待取决于如何使用 Ajax。例如，在基于 web 的电子邮件客户端中，用户为了寻找符合他们搜索标准的邮件消息，将会保持对 Ajax 请求返回结果的关注。重要的是，要记得“异步”并不意味着“即时”。</p><p>要提高性能，优化这些 Ajax 响应至关重要。最重要的提高 Ajax 性能的方法就是让响应变得可缓存，就像在添上 Expires 或者 Cache-Control HTTP 头中讨论的一样。下面适用于 Ajax 的其它规则：</p><p>Gzip 组件<br>减少 DNS 查找<br>压缩 JavaScript<br>避免重定向<br>配置 ETags<br>我们一起看看例子，一个 Web 2.0 的电子邮件客户端用了 Ajax 来下载用户的通讯录，以便实现自动完成功能。如果用户从上一次使用之后再没有修改过她的通讯录，而且 Ajax 响应是可缓存的，有尚未过期的 Expires 或者 Cache-Control HTTP 头，那么之前的通讯录就可以从缓存中读出。必须通知浏览器，应该继续使用之前缓存的通讯录响应，还是去请求一个新的。可以通过给通讯录的 Ajax URL 里添加一个表明用户通讯录最后修改时间的时间戳来实现，例如&amp;t=1190241612。如果通讯录从上一次下载之后再没有被修改过，时间戳不变，通讯录就将从浏览器缓存中直接读出，从而避免一次额外的 HTTP 往返消耗。如果用户已经修改了通讯录，时间戳也可以确保新的 URL 不会匹配缓存的响应，浏览器将请求新的通讯录条目。</p><p>即使 Ajax 响应是动态创建的，而且可能只适用于单用户，它们也可以被缓存，而这样会让你的 Web 2.0 应用更快。</p><h1 id="5-延迟加载组件"><a href="#5-延迟加载组件" class="headerlink" title="5.延迟加载组件"></a>5.延迟加载组件</h1><p>可以凑近看看页面并问自己：什么才是一开始渲染页面所必须的？其余内容都可以等会儿。</p><p>JavaScript 是分隔 onload 事件之前和之后的一个理想选择。例如，如果有 JavaScript 代码和支持拖放以及动画的库，这些都可以先等会儿，因为拖放元素是在页面最初渲染之后的。其它可以延迟加载的部分包括隐藏内容（在某个交互动作之后才出现的内容）和折叠的图片。</p><p>工具可帮你减轻工作量：YUI Image Loader 可以延迟加载折叠的图片，还有 YUI Get utility 是一种引入 JS 和 CSS 的简单方法。Yahoo!主页就是一个例子，可以打开 Firebug 的网络面板仔细看看。</p><p>最好让性能目标符合其它 web 开发最佳实践，比如“渐进增强”。如果客户端支持 JavaScript，可以提高用户体验，但必须确保页面在不支持 JavaScript 时也能正常工作。所以，在确定页面运行正常之后，可以用一些延迟加载脚本增强它，以支持一些拖放和动画之类的华丽效果。</p><h1 id="6-预加载组件"><a href="#6-预加载组件" class="headerlink" title="6.预加载组件"></a>6.预加载组件</h1><p>预加载可能看起来和延迟加载是相反的，但它其实有不同的目标。通过预加载组件可以充分利用浏览器空闲的时间来请求将来会用到的组件（图片，样式和脚本）。用户访问下一页的时候，大部分组件都已经在缓存里了，所以在用户看来页面会加载得更快。</p><p>实际应用中有以下几种预加载的类型：</p><p>无条件预加载——尽快开始加载，获取一些额外的组件。google.com 就是一个 sprite 图片预加载的好例子，这个 sprite 图片并不是 google.com 主页需要的，而是搜索结果页面上的内容。<br>条件性预加载——根据用户操作猜测用户将要跳转到哪里并据此预加载。在 search.yahoo.com 的输入框里键入内容后，可以看到那些额外组件是怎样请求加载的。<br>提前预加载——在推出新设计之前预加载。经常在重新设计之后会听到：“这个新网站不错，但比以前更慢了”，一部分原因是用户访问先前的页面都是有旧缓存的，但新的却是一种空缓存状态下的体验。可以通过在将要推出新设计之前预加载一些组件来减轻这种负面影响，老站可以利用浏览器空闲的时间来请求那些新站需要的图片和脚本。</p><h1 id="7-减少-DOM-元素的数量"><a href="#7-减少-DOM-元素的数量" class="headerlink" title="7.减少 DOM 元素的数量"></a>7.减少 DOM 元素的数量</h1><p>一个复杂的页面意味着要下载更多的字节，而且用 JavaScript 访问 DOM 也会更慢。举个例子，想要添加一个事件处理器的时候，循环遍历页面上的 500 个 DOM 元素和 5000 个 DOM 元素是有区别的。</p><p>大量的 DOM 元素是一种征兆——页面上有些内容无关的标记需要清理。正在用嵌套表格来布局吗？还是为了修复布局问题而添了一堆的</p><p>YUI CSS utilities 对布局有很大帮助：grids.css 针对整体布局，fonts.css 和 reset.css 可以用来去除浏览器的默认格式。这是个开始清理和思考标记的好机会，例如只在语义上有意义的时候使用</p><p>DOM 元素的数量很容易测试，只需要在 Firebug 的控制台里输入：</p><p>document.getElementsByTagName(‘*‘).length</p><p>那么多少 DOM 元素才算是太多呢？可以参考其它类似的标记良好的页面，例如 Yahoo!主页是一个相当繁忙的页面，但只有不到 700 个元素（HTML 标签）。</p><h1 id="8-跨域分离组件"><a href="#8-跨域分离组件" class="headerlink" title="8.跨域分离组件"></a>8.跨域分离组件</h1><p>分离组件可以最大化并行下载，但要确保只用不超过 2-4 个域，因为存在 DNS 查找的代价。例如，可以把 HTML 和动态内容部署在<a href="http://www.example.org,而把静态组件分离到static1.example.org和static2.example.org./">www.example.org，而把静态组件分离到static1.example.org和static2.example.org。</a></p><h1 id="9-尽量少用-iframe"><a href="#9-尽量少用-iframe" class="headerlink" title="9.尽量少用 iframe"></a>9.尽量少用 iframe</h1><p>用 iframe 可以把一个 HTML 文档插入到父文档里，重要的是明白 iframe 是如何工作的并高效地使用它。<br>引入缓慢的第三方内容，比如标志和广告<br>安全沙箱<br>并行下载脚本<br>代价高昂，即使是空白的 iframe<br>阻塞页面加载<br>非语义</p><h1 id="10-杜绝-404"><a href="#10-杜绝-404" class="headerlink" title="10.杜绝 404"></a>10.杜绝 404</h1><p>HTTP 请求代价高昂，完全没有必要用一个 HTTP 请求去获取一个无用的响应（比如 404 Not Found），只会拖慢用户体验而没有任何好处。</p><p>有些站点用的是有帮助的 404——“你的意思是 xxx？”，这样做有利于用户体验，，但也浪费了服务器资源（比如数据库等等）。最糟糕的是链接到的外部 JavaScript 有错误而且结果是 404。首先，这种下载将阻塞并行下载。其次，浏览器会试图解析 404 响应体，因为它是 JavaScript 代码，需要找出其中可用的部分。</p><p>​</p><p>css 部分</p><h1 id="11-避免使用-CSS-表达式"><a href="#11-避免使用-CSS-表达式" class="headerlink" title="11.避免使用 CSS 表达式"></a>11.避免使用 CSS 表达式</h1><p>用 CSS 表达式动态设置 CSS 属性，是一种强大又危险的方式。从 IE5 开始支持，但从 IE8 起就不推荐使用了。例如，可以用 CSS 表达式把背景颜色设置成按小时交替的：</p><p>1<br>background-color: expression( (new Date()).getHours()%2 ? “#B8D4FF” : “#F08A00” );</p><h1 id="12-选择舍弃-import"><a href="#12-选择舍弃-import" class="headerlink" title="12.选择舍弃@import"></a>12.选择舍弃<a href="https://www.yuque.com/import">@import</a></h1><p>前面提到了一个最佳实践：为了实现逐步渲染，CSS 应该放在顶部。</p><p>在 IE 中用@import 与在底部用效果一样，所以最好不要用它。</p><h1 id="13-避免使用滤镜"><a href="#13-避免使用滤镜" class="headerlink" title="13.避免使用滤镜"></a>13.避免使用滤镜</h1><p>IE 专有的 AlphaImageLoader 滤镜可以用来修复 IE7 之前的版本中半透明 PNG 图片的问题。在图片加载过程中，这个滤镜会阻塞渲染，卡住浏览器，还会增加内存消耗而且是被应用到每个元素的，而不是每个图片，所以会存在一大堆问题。</p><p>最好的方法是干脆不要用 AlphaImageLoader，而优雅地降级到用在 IE 中支持性很好的 PNG8 图片来代替。如果非要用 AlphaImageLoader，应该用下划线 hack：_filter 来避免影响 IE7 及更高版本的用户。</p><h1 id="14-把样式表放在顶部"><a href="#14-把样式表放在顶部" class="headerlink" title="14.把样式表放在顶部"></a>14.把样式表放在顶部</h1><p>在 Yahoo!研究性能的时候，我们发现把样式表放到文档的 HEAD 部分能让页面看起来加载地更快。这是因为把样式表放在 head 里能让页面逐步渲染。</p><p>关注性能的前端工程师想让页面逐步渲染。也就是说，我们想让浏览器尽快显示已有内容，这在页面上有一大堆内容或者用户网速很慢时显得尤为重要。给用户显示反馈（比如进度指标）的重要性已经被广泛研究过，并且被记录下来了。在我们的例子中，HTML 页面就是进度指标！当浏览器逐渐加载页面头部，导航条，顶部 logo 等等内容的时候，这些都被正在等待页面加载的用户当作反馈，能够提高整体用户体验。<br>​</p><p>js 部分</p><h1 id="15-去除重复脚本"><a href="#15-去除重复脚本" class="headerlink" title="15.去除重复脚本"></a>15.去除重复脚本</h1><p>页面含有重复的脚本文件会影响性能，这可能和你想象的不一样。在对美国前 10 大 web 站点的评审中，发现只有 2 个站点含有重复脚本。两个主要原因增加了在单一页面中出现重复脚本的几率：团队大小和脚本数量。在这种情况下，重复脚本会创建不必要的 HTTP 请求，执行无用的 JavaScript 代码，而影响页面性能。</p><p>IE 会产生不必要的 HTTP 请求，而 Firefox 不会。在 IE 中，如果一个不可缓存的外部脚本被页面引入了两次，它会在页面加载时产生两个 HTTP 请求。即使脚本是可缓存的，在用户重新加载页面时也会产生额外的 HTTP 请求。</p><p>除了产生没有意义的 HTTP 请求之外，多次对脚本求值也会浪费时间。因为无论脚本是否可缓存，在 Firefox 和 IE 中都会执行冗余的 JavaScript 代码。</p><p>避免不小心把相同脚本引入两次的一种方法就是在模版系统中实现脚本管理模块。典型的脚本引入方法就是在 HTML 页面中用 SCRIPT 标签：</p><p>1</p><h1 id="16-尽量减少-DOM-访问"><a href="#16-尽量减少-DOM-访问" class="headerlink" title="16.尽量减少 DOM 访问"></a>16.尽量减少 DOM 访问</h1><p>用 JavaScript 访问 DOM 元素是很慢的，所以，为了让页面反应更迅速，应该：</p><p>缓存已访问过的元素的索引<br>先“离线”更新节点，再把它们添到 DOM 树上<br>避免用 JavaScript 修复布局问题</p><h1 id="17-用智能的事件处理器"><a href="#17-用智能的事件处理器" class="headerlink" title="17.用智能的事件处理器"></a>17.用智能的事件处理器</h1><p>有时候感觉页面反映不够灵敏，是因为有太多频繁执行的事件处理器被添加到了 DOM 树的不同元素上，这就是推荐使用事件委托的原因。如果一个 div 里面有 10 个按钮，应该只给 div 容器添加一个事件处理器，而不是给每个按钮都添加一个。事件能够冒泡，所以可以捕获事件并得知哪个按钮是事件源。</p><h1 id="18-把脚本放在底部"><a href="#18-把脚本放在底部" class="headerlink" title="18.把脚本放在底部"></a>18.把脚本放在底部</h1><p>脚本会阻塞并行下载，HTTP/1.1 官方文档建议浏览器每个主机名下并行下载的组件数不要超过两个，如果图片来自多个主机名，并行下载的数量就可以超过两个。如果脚本正在下载，浏览器就不开始任何其它下载任务，即使是在不同主机名下的。</p><p>有时候，并不容易把脚本移动到底部。举个例子，如果脚本是用 document.write 插入到页面内容中的，就没办法再往下移了。还可能存在作用域问题，在多数情况下，这些问题都是可以解决的。</p><p>一个常见的建议是用推迟（deferred）脚本，有 DEFER 属性的脚本意味着不能含有 document.write，并且提示浏览器告诉他们可以继续渲染。不幸的是，Firefox 不支持 DEFER 属性。在 IE 中，脚本可能被推迟，但不尽如人意。如果脚本可以推迟，我们就可以把它放到页面底部，页面就可以更快地载入。</p><p>​</p><p>javascript, css</p><h1 id="19-把-JavaScript-和-CSS-放到外面"><a href="#19-把-JavaScript-和-CSS-放到外面" class="headerlink" title="19.把 JavaScript 和 CSS 放到外面"></a>19.把 JavaScript 和 CSS 放到外面</h1><p>很多性能原则都是关于如何管理外部组件的，然而，在这些顾虑出现之前你应该问一个更基础的问题：应该把 JavaScript 和 CSS 放到外部文件中还是直接写在页面里？</p><p>实际上，用外部文件可以让页面更快，因为 JavaScript 和 CSS 文件会被缓存在浏览器。HTML 文档中的行内 JavaScript 和 CSS 在每次请求该 HTML 文档的时候都会重新下载。这样做减少了所需的 HTTP 请求数，但增加了 HTML 文档的大小。另一方面，如果 JavaScript 和 CSS 在外部文件中，并且已经被浏览器缓存起来了，那么我们就成功地把 HTML 文档变小了，而且还没有增加 HTTP 请求数。</p><h1 id="20-压缩-JavaScript-和-CSS"><a href="#20-压缩-JavaScript-和-CSS" class="headerlink" title="20.压缩 JavaScript 和 CSS"></a>20.压缩 JavaScript 和 CSS</h1><p>压缩具体来说就是从代码中去除不必要的字符以减少大小，从而提升加载速度。代码最小化就是去掉所有注释和不必要的空白字符（空格，换行和 tab）。在 JavaScript 中这样做能够提高响应性能，因为要下载的文件变小了。两个最常用的 JavaScript 代码压缩工具是 JSMin 和 YUI Compressor，YUI compressor 还可以压缩 CSS。</p><p>混淆是一种可选的源码优化措施，要比压缩更复杂，所以混淆过程也更容易产生 bug。在对美国前十的网站调查中，压缩可以缩小 21%，而混淆能缩小 25%。虽然混淆的缩小程度更高，但比压缩风险更大。</p><p>除了压缩外部脚本和样式，行内的</p><h3 id="数"><a href="#数" class="headerlink" title="数"></a>数</h3><p>80%的终端用户响应时间都花在了前端上，其中大部分时间都在下载页面上的各种组件：图片，样式表，脚本，Flash 等等。减少组件数必然能够减少页面提交的 HTTP 请求数。这是让页面更快的关键。<br>减少页面组件数的一种方式是简化页面设计。但有没有一种方法可以在构建复杂的页面同时加快响应时间呢？嗯，确实有鱼和熊掌兼得的办法。<br><strong>合并文件</strong>是通过把所有脚本放在一个文件中的方式来减少请求数的，当然，也可以合并所有的 CSS。如果各个页面的脚本和样式不一样的话，合并文件就是一项比较麻烦的工作了，但把这个作为站点发布过程的一部分确实可以提高响应时间。<br><strong>CSS Sprites</strong>是减少图片请求数量的首选方式。把背景图片都整合到一张图片中，然后用 CSS 的 background-image 和 background-position 属性来定位要显示的部分。<br><strong>图像映射</strong>可以把多张图片合并成单张图片，总大小是一样的，但减少了请求数并加速了页面加载。图片映射只有在图像在页面中连续的时候才有用，比如导航条。给 image map 设置坐标的过程既无聊又容易出错，用 image map 来做导航也不容易，所以不推荐用这种方式。<br><strong>行内图片（Base64 编码）</strong>用<a href="http://tools.ietf.org/html/rfc2397">data:</a><a href="http://tools.ietf.org/html/rfc2397">URL 模式</a>来把图片嵌入页面。这样会增加 HTML 文件的大小，把行内图片放在（缓存的）样式表中是个好办法，而且成功避免了页面变“重”。但目前主流浏览器并不能很好地支持行内图片。<br>减少页面的 HTTP 请求数是个起点，这是提升站点首次访问速度的重要指导原则。<br>​</p><h3 id="2-减少-DNS-查找-1"><a href="#2-减少-DNS-查找-1" class="headerlink" title="2.减少 DNS 查找"></a>2.减少 DNS 查找</h3><p>域名系统建立了主机名和 IP 地址间的映射，就像电话簿上人名和号码的映射一样。当你在浏览器输入<a href="http://www.yahoo.com的时候,浏览器就会联系dns解析器返回服务器的ip地址.dns是有成本的,它需要20到120毫秒去查找给定主机名的ip地址.在dns查找完成之前,浏览器无法从主机名下载任何东西./">www.yahoo.com的时候，浏览器就会联系DNS解析器返回服务器的IP地址。DNS是有成本的，它需要20到120毫秒去查找给定主机名的IP地址。在DNS查找完成之前，浏览器无法从主机名下载任何东西。</a><br>DNS 查找被缓存起来更高效，由用户的 ISP（网络服务提供商）或者本地网络存在一个特殊的缓存服务器上，但还可以缓存在个人用户的计算机上。DNS 信息被保存在操作系统的 DNS cache(微软 Windows 上的”DNS 客户端服务”)里。大多数浏览器有独立于操作系统的自己的 cache。只要浏览器在自己的 cache 里还保留着这条记录，它就不会向操作系统查询 DNS。<br>IE 默认缓存 DNS 查找 30 分钟，写在 DnsCacheTimeout 注册表设置中。Firefox 缓存 1 分钟，可以用 network.dnsCacheExpiration 配置项设置。(Fasterfox 把缓存时间改成了 1 小时 P.S. Fasterfox 是 FF 的一个提速插件)<br>如果客户端的 DNS cache 是空的（包括浏览器的和操作系统的），DNS 查找数等于页面上不同的主机名数，包括页面 URL，图片，脚本文件，样式表，Flash 对象等等组件中的主机名，减少不同的主机名就可以减少 DNS 查找。<br>减少不同主机名的数量同时也减少了页面能够并行下载的组件数量，避免 DNS 查找削减了响应时间，而减少并行下载数量却增加了响应时间。我的原则是把组件分散在 2 到 4 个主机名下，这是同时减少 DNS 查找和允许高并发下载的折中方案。<br>​</p><h3 id="3-避免重定向-1"><a href="#3-避免重定向-1" class="headerlink" title="3.避免重定向"></a>3.避免重定向</h3><p>重定向用 301 和 302 状态码，下面是一个有 301 状态码的 HTTP 头：<br>HTTP/1.1 301 Moved Permanently<br>Location: <a href="http://example.com/newuri">http://example.com/newuri</a><br>Content-Type: text/html<br>浏览器会自动跳转到 Location 域指明的 URL。重定向需要的所有信息都在 HTTP 头部，而响应体一般是空的。其实额外的 HTTP 头，比如 Expires 和 Cache-Control 也表示重定向。除此之外还有别的跳转方式：refresh 元标签和 JavaScript，但如果你必须得做重定向，最好用标准的 3xxHTTP 状态码，主要是为了让返回按钮能正常使用。<br>牢记重定向会拖慢用户体验，在用户和 HTML 文档之间插入重定向会延迟页面上的所有东西，页面无法渲染，组件也无法开始下载，直到 HTML 文档被送达浏览器。<br>有一种常见的极其浪费资源的重定向，而且 web 开发人员一般都意识不到这一点，就是 URL 尾部缺少一个斜线的时候。例如，跳转到<a href="http://astrology.yahoo.com/astrology">http://astrology.yahoo.com/astrology</a>会返回一个重定向到<a href="http://astrology.yahoo.com/astrology/">http://astrology.yahoo.com/astrology/</a>的 301 响应（注意添在尾部的斜线）。在 Apache 中可以用 Alias，mod_rewrite 或者 DirectorySlash 指令来取消不必要的重定向。<br>重定向最常见的用途是把旧站点连接到新的站点，还可以连接同一站点的不同部分，针对用户的不同情况（浏览器类型，用户帐号类型等等）做一些处理。用重定向来连接两个网站是最简单的，只需要少量的额外代码。虽然在这些时候使用重定向减少了开发人员的开发复杂度，但降低了用户体验。一种替代方案是用 Alias 和 mod_rewrite，前提是两个代码路径都在相同的服务器上。如果是因为域名变化而使用了重定向，就可以创建一条 CNAME（创建一个指向另一个域名的 DNS 记录作为别名）结合 Alias 或者 mod_rewrite 指令。<br>​</p><h3 id="4-让-Ajax-可缓存-1"><a href="#4-让-Ajax-可缓存-1" class="headerlink" title="4.让 Ajax 可缓存"></a>4.让 Ajax 可缓存</h3><p>Ajax 的一个好处是可以给用户提供即时反馈，因为它能够从后台服务器异步请求信息。然而，用了 Ajax 就无法保证用户在等待异步 JavaScript 和 XML 响应返回期间不会非常无聊。在很多应用程序中，用户能够一直等待取决于如何使用 Ajax。例如，在基于 web 的电子邮件客户端中，用户为了寻找符合他们搜索标准的邮件消息，将会保持对 Ajax 请求返回结果的关注。重要的是，要记得“异步”并不意味着“即时”。<br>要提高性能，优化这些 Ajax 响应至关重要。最重要的提高 Ajax 性能的方法就是让响应变得可缓存，就像在<a href="https://developer.yahoo.com/performance/rules.html#expires">添上 Expires 或者 Cache-Control HTTP 头</a>中讨论的一样。下面适用于 Ajax 的其它规则：</p><ul><li><a href="https://developer.yahoo.com/performance/rules.html#gzip">Gzip 组件</a></li><li><a href="https://developer.yahoo.com/performance/rules.html#dns_lookups">减少 DNS 查找</a></li><li><a href="https://developer.yahoo.com/performance/rules.html#minify">压缩 JavaScript</a></li><li><a href="https://developer.yahoo.com/performance/rules.html#redirects">避免重定向</a></li><li><a href="https://developer.yahoo.com/performance/rules.html#etags">配置 ETags</a></li></ul><p>我们一起看看例子，一个 Web 2.0 的电子邮件客户端用了 Ajax 来下载用户的通讯录，以便实现自动完成功能。如果用户从上一次使用之后再没有修改过她的通讯录，而且 Ajax 响应是可缓存的，有尚未过期的 Expires 或者 Cache-Control HTTP 头，那么之前的通讯录就可以从缓存中读出。必须通知浏览器，应该继续使用之前缓存的通讯录响应，还是去请求一个新的。可以通过给通讯录的 Ajax URL 里添加一个表明用户通讯录最后修改时间的时间戳来实现，例如&amp;t=1190241612。如果通讯录从上一次下载之后再没有被修改过，时间戳不变，通讯录就将从浏览器缓存中直接读出，从而避免一次额外的 HTTP 往返消耗。如果用户已经修改了通讯录，时间戳也可以确保新的 URL 不会匹配缓存的响应，浏览器将请求新的通讯录条目。<br>即使 Ajax 响应是动态创建的，而且可能只适用于单用户，它们也可以被缓存，而这样会让你的 Web 2.0 应用更快。<br>​</p><h3 id="5-延迟加载组件-1"><a href="#5-延迟加载组件-1" class="headerlink" title="5.延迟加载组件"></a>5.延迟加载组件</h3><p>可以凑近看看页面并问自己：什么才是一开始渲染页面所必须的？其余内容都可以等会儿。<br>JavaScript 是分隔 onload 事件之前和之后的一个理想选择。例如，如果有 JavaScript 代码和支持拖放以及动画的库，这些都可以先等会儿，因为拖放元素是在页面最初渲染之后的。其它可以延迟加载的部分包括隐藏内容（在某个交互动作之后才出现的内容）和折叠的图片。<br>工具可帮你减轻工作量：<a href="https://developer.yahoo.com/yui/imageloader/">YUI Image Loader</a>可以延迟加载折叠的图片，还有<a href="https://developer.yahoo.com/yui/get/">YUI Get utility</a>是一种引入 JS 和 CSS 的简单方法。<a href="http://www.yahoo.com/">Yahoo!主页</a>就是一个例子，可以打开 Firebug 的网络面板仔细看看。<br>最好让性能目标符合其它 web 开发最佳实践，比如“渐进增强”。如果客户端支持 JavaScript，可以提高用户体验，但必须确保页面在不支持 JavaScript 时也能正常工作。所以，在确定页面运行正常之后，可以用一些延迟加载脚本增强它，以支持一些拖放和动画之类的华丽效果。</p><h3 id="​"><a href="#​" class="headerlink" title="​"></a>​</h3><h3 id="6-预加载组件-1"><a href="#6-预加载组件-1" class="headerlink" title="6.预加载组件"></a>6.预加载组件</h3><p>预加载可能看起来和延迟加载是相反的，但它其实有不同的目标。通过预加载组件可以充分利用浏览器空闲的时间来请求将来会用到的组件（图片，样式和脚本）。用户访问下一页的时候，大部分组件都已经在缓存里了，所以在用户看来页面会加载得更快。<br>实际应用中有以下几种预加载的类型：</p><ul><li>无条件预加载——尽快开始加载，获取一些额外的组件。google.com 就是一个 sprite 图片预加载的好例子，这个 sprite 图片并不是 google.com 主页需要的，而是搜索结果页面上的内容。</li><li>条件性预加载——根据用户操作猜测用户将要跳转到哪里并据此预加载。在<a href="http://search.yahoo.com/">search.yahoo.com</a>的输入框里键入内容后，可以看到那些额外组件是怎样请求加载的。</li><li>提前预加载——在推出新设计之前预加载。经常在重新设计之后会听到：“这个新网站不错，但比以前更慢了”，一部分原因是用户访问先前的页面都是有旧缓存的，但新的却是一种空缓存状态下的体验。可以通过在将要推出新设计之前预加载一些组件来减轻这种负面影响，老站可以利用浏览器空闲的时间来请求那些新站需要的图片和脚本。</li></ul><h3 id="​-1"><a href="#​-1" class="headerlink" title="​"></a>​</h3><h3 id="7-减少-DOM-元素的数量-1"><a href="#7-减少-DOM-元素的数量-1" class="headerlink" title="7.减少 DOM 元素的数量"></a>7.减少 DOM 元素的数量</h3><p>一个复杂的页面意味着要下载更多的字节，而且用 JavaScript 访问 DOM 也会更慢。举个例子，想要添加一个事件处理器的时候，循环遍历页面上的 500 个 DOM 元素和 5000 个 DOM 元素是有区别的。<br>大量的 DOM 元素是一种征兆——页面上有些内容无关的标记需要清理。正在用嵌套表格来布局吗？还是为了修复布局问题而添了一堆的<div>s？或许应该用更好的语义化标记。<br><a href="https://developer.yahoo.com/yui/">YUI CSS utilities</a>对布局有很大帮助：grids.css 针对整体布局，fonts.css 和 reset.css 可以用来去除浏览器的默认格式。这是个开始清理和思考标记的好机会，例如只在语义上有意义的时候使用<div>，而不是因为它能够渲染一个新行。<br>DOM 元素的数量很容易测试，只需要在 Firebug 的控制台里输入：</p><p>document.getElementsByTagName(‘*‘).length<br>​</p><p>那么多少 DOM 元素才算是太多呢？可以参考其它类似的标记良好的页面，例如<a href="http://www.yahoo.com/">Yahoo!主页</a>是一个相当繁忙的页面，但只有不到 700 个元素（HTML 标签）。</p><h3 id="​-2"><a href="#​-2" class="headerlink" title="​"></a>​</h3><h3 id="8-跨域分离组件-1"><a href="#8-跨域分离组件-1" class="headerlink" title="8.跨域分离组件"></a>8.跨域分离组件</h3><p>分离组件可以最大化并行下载，但要确保只用不超过 2-4 个域，因为存在 DNS 查找的代价。例如，可以把 HTML 和动态内容部署在<a href="http://www.example.org,而把静态组件分离到static1.example.org和static2.example.org./">www.example.org，而把静态组件分离到static1.example.org和static2.example.org。</a><br>​</p><h3 id="9-尽量少用-iframe-1"><a href="#9-尽量少用-iframe-1" class="headerlink" title="9.尽量少用 iframe"></a>9.尽量少用 iframe</h3><p>用 iframe 可以把一个 HTML 文档插入到父文档里，重要的是明白 iframe 是如何工作的并高效地使用它。</p><iframe>的优点：<ul><li>引入缓慢的第三方内容，比如标志和广告</li><li>安全沙箱</li><li>并行下载脚本</li></ul><iframe>的缺点：<ul><li>代价高昂，即使是空白的 iframe</li><li>阻塞页面加载</li><li>非语义</li></ul><h3 id="​-3"><a href="#​-3" class="headerlink" title="​"></a>​</h3><h3 id="10-杜绝-404-1"><a href="#10-杜绝-404-1" class="headerlink" title="10.杜绝 404"></a>10.杜绝 404</h3><p>HTTP 请求代价高昂，完全没有必要用一个 HTTP 请求去获取一个无用的响应（比如 404 Not Found），只会拖慢用户体验而没有任何好处。<br>有些站点用的是有帮助的 404——“你的意思是 xxx？”，这样做有利于用户体验，，但也浪费了服务器资源（比如数据库等等）。最糟糕的是链接到的外部 JavaScript 有错误而且结果是 404。首先，这种下载将阻塞并行下载。其次，浏览器会试图解析 404 响应体，因为它是 JavaScript 代码，需要找出其中可用的部分。<br>​</p><p>​</p><p><a href="https://www.cnblogs.com/xianyulaodi/p/5755079.html#_labelTop"></a></p><h2 id="css-部分"><a href="#css-部分" class="headerlink" title="css 部分"></a>css 部分</h2><p>​</p><h3 id="11-避免使用-CSS-表达式-1"><a href="#11-避免使用-CSS-表达式-1" class="headerlink" title="11.避免使用 CSS 表达式"></a>11.避免使用 CSS 表达式</h3><p>​</p><p>用 CSS 表达式动态设置 CSS 属性，是一种强大又危险的方式。从 IE5 开始支持，但从 IE8 起就不推荐使用了。例如，可以用 CSS 表达式把背景颜色设置成按小时交替的：</p><table><thead><tr><th>1</th><th>background-color: expression( (new Date()).getHours()%2? “#B8D4FF”: “#F08A00”);</th></tr></thead></table><p>​</p><h3 id="12-选择舍弃-import-1"><a href="#12-选择舍弃-import-1" class="headerlink" title="12.选择舍弃@import"></a>12.选择<link>舍弃@import</h3><p>前面提到了一个最佳实践：为了实现逐步渲染，CSS 应该放在顶部。<br>在 IE 中用@import 与在底部用<link>效果一样，所以最好不要用它。<br>​</p><h3 id="13-避免使用滤镜-1"><a href="#13-避免使用滤镜-1" class="headerlink" title="13.避免使用滤镜"></a>13.避免使用滤镜</h3><p>IE 专有的 AlphaImageLoader 滤镜可以用来修复 IE7 之前的版本中半透明 PNG 图片的问题。在图片加载过程中，这个滤镜会阻塞渲染，卡住浏览器，还会增加内存消耗而且是被应用到每个元素的，而不是每个图片，所以会存在一大堆问题。<br>最好的方法是干脆不要用 AlphaImageLoader，而优雅地降级到用在 IE 中支持性很好的 PNG8 图片来代替。如果非要用 AlphaImageLoader，应该用下划线 hack：_filter 来避免影响 IE7 及更高版本的用户。<br>​</p><h3 id="14-把样式表放在顶部-1"><a href="#14-把样式表放在顶部-1" class="headerlink" title="14.把样式表放在顶部"></a>14.把样式表放在顶部</h3><p>在 Yahoo!研究性能的时候，我们发现把样式表放到文档的 HEAD 部分能让页面看起来加载地更快。这是因为把样式表放在 head 里能让页面逐步渲染。<br>关注性能的前端工程师想让页面逐步渲染。也就是说，我们想让浏览器尽快显示已有内容，这在页面上有一大堆内容或者用户网速很慢时显得尤为重要。给用户显示反馈（比如进度指标）的重要性已经被广泛研究过，并且被<a href="http://www.useit.com/papers/responsetime.html">记录</a>下来了。在我们的例子中，HTML 页面就是进度指标！当浏览器逐渐加载页面头部，导航条，顶部 logo 等等内容的时候，这些都被正在等待页面加载的用户当作反馈，能够提高整体用户体验。<br>​</p><p>​</p><p><a href="https://www.cnblogs.com/xianyulaodi/p/5755079.html#_labelTop"></a></p><h2 id="js-部分"><a href="#js-部分" class="headerlink" title="js 部分"></a>js 部分</h2><p>​</p><h3 id="15-去除重复脚本-1"><a href="#15-去除重复脚本-1" class="headerlink" title="15.去除重复脚本"></a>15.去除重复脚本</h3><p>页面含有重复的脚本文件会影响性能，这可能和你想象的不一样。在对美国前 10 大 web 站点的评审中，发现只有 2 个站点含有重复脚本。两个主要原因增加了在单一页面中出现重复脚本的几率：团队大小和脚本数量。在这种情况下，重复脚本会创建不必要的 HTTP 请求，执行无用的 JavaScript 代码，而影响页面性能。<br>IE 会产生不必要的 HTTP 请求，而 Firefox 不会。在 IE 中，如果一个不可缓存的外部脚本被页面引入了两次，它会在页面加载时产生两个 HTTP 请求。即使脚本是可缓存的，在用户重新加载页面时也会产生额外的 HTTP 请求。<br>除了产生没有意义的 HTTP 请求之外，多次对脚本求值也会浪费时间。因为无论脚本是否可缓存，在 Firefox 和 IE 中都会执行冗余的 JavaScript 代码。<br>避免不小心把相同脚本引入两次的一种方法就是在模版系统中实现脚本管理模块。典型的脚本引入方法就是在 HTML 页面中用 SCRIPT 标签：</p><table><thead><tr><th>1</th><th>&lt;scripttype=”text/javascript” src=”menu_1.0.17.js”&gt;</script></th></tr></thead></table><p>​</p><h3 id="16-尽量减少-DOM-访问-1"><a href="#16-尽量减少-DOM-访问-1" class="headerlink" title="16.尽量减少 DOM 访问"></a>16.尽量减少 DOM 访问</h3><p>用 JavaScript 访问 DOM 元素是很慢的，所以，为了让页面反应更迅速，应该：</p><ul><li>缓存已访问过的元素的索引</li><li>先“离线”更新节点，再把它们添到 DOM 树上</li><li>避免用 JavaScript 修复布局问题</li></ul><p>​</p><h3 id="17-用智能的事件处理器-1"><a href="#17-用智能的事件处理器-1" class="headerlink" title="17.用智能的事件处理器"></a>17.用智能的事件处理器</h3><p>有时候感觉页面反映不够灵敏，是因为有太多频繁执行的事件处理器被添加到了 DOM 树的不同元素上，这就是推荐使用事件委托的原因。如果一个 div 里面有 10 个按钮，应该只给 div 容器添加一个事件处理器，而不是给每个按钮都添加一个。事件能够冒泡，所以可以捕获事件并得知哪个按钮是事件源。<br>​</p><h3 id="18-把脚本放在底部-1"><a href="#18-把脚本放在底部-1" class="headerlink" title="18.把脚本放在底部"></a>18.把脚本放在底部</h3><p>脚本会阻塞并行下载，HTTP/1.1 官方文档建议浏览器每个主机名下并行下载的组件数不要超过两个，如果图片来自多个主机名，并行下载的数量就可以超过两个。如果脚本正在下载，浏览器就不开始任何其它下载任务，即使是在不同主机名下的。<br>有时候，并不容易把脚本移动到底部。举个例子，如果脚本是用 document.write 插入到页面内容中的，就没办法再往下移了。还可能存在作用域问题，在多数情况下，这些问题都是可以解决的。<br>一个常见的建议是用推迟（deferred）脚本，有 DEFER 属性的脚本意味着不能含有 document.write，并且提示浏览器告诉他们可以继续渲染。不幸的是，Firefox 不支持 DEFER 属性。在 IE 中，脚本可能被推迟，但不尽如人意。如果脚本可以推迟，我们就可以把它放到页面底部，页面就可以更快地载入。<br>​</p><h2 id="javascript-css"><a href="#javascript-css" class="headerlink" title="javascript, css"></a>javascript, css</h2><h3 id="​-4"><a href="#​-4" class="headerlink" title="​"></a>​</h3><h3 id="19-把-JavaScript-和-CSS-放到外面-1"><a href="#19-把-JavaScript-和-CSS-放到外面-1" class="headerlink" title="19.把 JavaScript 和 CSS 放到外面"></a>19.把 JavaScript 和 CSS 放到外面</h3><p>很多性能原则都是关于如何管理外部组件的，然而，在这些顾虑出现之前你应该问一个更基础的问题：应该把 JavaScript 和 CSS 放到外部文件中还是直接写在页面里？<br>实际上，用外部文件可以让页面更快，因为 JavaScript 和 CSS 文件会被缓存在浏览器。HTML 文档中的行内 JavaScript 和 CSS 在每次请求该 HTML 文档的时候都会重新下载。这样做减少了所需的 HTTP 请求数，但增加了 HTML 文档的大小。另一方面，如果 JavaScript 和 CSS 在外部文件中，并且已经被浏览器缓存起来了，那么我们就成功地把 HTML 文档变小了，而且还没有增加 HTTP 请求数。</p><h3 id="20-压缩-JavaScript-和-CSS-1"><a href="#20-压缩-JavaScript-和-CSS-1" class="headerlink" title="20.压缩 JavaScript 和 CSS"></a>20.压缩 JavaScript 和 CSS</h3><p>压缩具体来说就是从代码中去除不必要的字符以减少大小，从而提升加载速度。代码最小化就是去掉所有注释和不必要的空白字符（空格，换行和 tab）。在 JavaScript 中这样做能够提高响应性能，因为要下载的文件变小了。两个最常用的 JavaScript 代码压缩工具是 JSMin 和 YUI Compressor，YUI compressor 还可以压缩 CSS。<br>混淆是一种可选的源码优化措施，要比压缩更复杂，所以混淆过程也更容易产生 bug。在对美国前十的网站调查中，压缩可以缩小 21%，而混淆能缩小 25%。虽然混淆的缩小程度更高，但比压缩风险更大。<br>除了压缩外部脚本和样式，行内的<script>和<style>块也可以压缩。即使启用了 gzip 模块，先进行压缩也能够缩小 5%或者更多的大小。JavaScript 和 CSS 的用处越来越多，所以压缩代码会有不错的效果。<br>​</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>​</p><h3 id="21-优化图片"><a href="#21-优化图片" class="headerlink" title="21.优化图片"></a>21.优化图片</h3><ul><li>尝试把 GIF 格式转换成 PNG 格式，看看是否节省空间。在所有的 PNG 图片上运行 pngcrush（或者其它 PNG 优化工具）</li></ul><h3 id="​-5"><a href="#​-5" class="headerlink" title="​"></a>​</h3><h3 id="22-优化-CSS-Sprite"><a href="#22-优化-CSS-Sprite" class="headerlink" title="22.优化 CSS Sprite"></a>22.优化 CSS Sprite</h3><ul><li>在 Sprite 图片中横向排列一般都比纵向排列的最终文件小</li><li>组合 Sprite 图片中的相似颜色可以保持低色数，最理想的是 256 色以下 PNG8 格式</li><li>“对移动端友好”，不要在 Sprite 图片中留下太大的空隙。虽然不会在很大程度上影响图片文件的大小，但这样做可以节省用户代理把图片解压成像素映射时消耗的内存。100×100 的图片是 1 万个像素，而 1000×1000 的图片就是 100 万个像素了。</li></ul><h3 id="​-6"><a href="#​-6" class="headerlink" title="​"></a>​</h3><h3 id="23-不要用-HTML-缩放图片"><a href="#23-不要用-HTML-缩放图片" class="headerlink" title="23.不要用 HTML 缩放图片"></a>23.不要用 HTML 缩放图片</h3><p>不要因为在 HTML 中可以设置宽高而使用本不需要的大图。如果需要</p><table><thead><tr><th>1</th><th>&lt;imgwidth=”100” height=”100” src=”mycat.jpg” alt=”My Cat” /&gt;</th></tr></thead></table><p>那么图片本身（mycat.jpg）应该是 100x100px 的，而不是去缩小 500x500px 的图片。<br>​</p><h3 id="24-用小的可缓存的-favicon-ico（P-S-收藏夹图标）"><a href="#24-用小的可缓存的-favicon-ico（P-S-收藏夹图标）" class="headerlink" title="24.用小的可缓存的 favicon.ico（P.S. 收藏夹图标）"></a>24.用小的可缓存的 favicon.ico（P.S. 收藏夹图标）</h3><p>favicon.ico 是放在服务器根目录的图片，它会带来一堆麻烦，因为即便你不管它，浏览器也会自动请求它，所以最好不要给一个 404 Not Found 响应。而且只要在同一个服务器上，每次请求它时都会发送 cookie，此外这个图片还会干扰下载顺序，例如在 IE 中，当你在 onload 中请求额外组件时，将会先下载 favicon。<br>所以为了缓解 favicon.ico 的缺点，应该确保：</p><ul><li>足够小，最好在 1K 以下</li><li>设置合适的有效期 HTTP 头（以后如果想换的话就不能重命名了），把有效期设置为几个月后一般比较安全，可以通过检查当前 favicon.ico 的最后修改日期来确保变更能让浏览器知道。</li></ul><p>​</p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><h3 id="​-7"><a href="#​-7" class="headerlink" title="​"></a>​</h3><h3 id="25-给-Cookie-减肥"><a href="#25-给-Cookie-减肥" class="headerlink" title="25.给 Cookie 减肥"></a>25.给 Cookie 减肥</h3><p>使用 cookie 的原因有很多，比如授权和个性化。HTTP 头中 cookie 信息在 web 服务器和浏览器之间交换。重要的是保证 cookie 尽可能的小，以最小化对用户响应时间的影响。</p><ul><li>清除不必要的 cookie</li><li>保证 cookie 尽可能小，以最小化对用户响应时间的影响</li><li>注意给 cookie 设置合适的域级别，以免影响其它子域</li><li>设置合适的有效期，更早的有效期或者 none 可以更快的删除 cookie，提高用户响应时间</li></ul><h3 id="​-8"><a href="#​-8" class="headerlink" title="​"></a>​</h3><h3 id="26-把组件放在不含-cookie-的域下"><a href="#26-把组件放在不含-cookie-的域下" class="headerlink" title="26.把组件放在不含 cookie 的域下"></a>26.把组件放在不含 cookie 的域下</h3><p>当浏览器发送对静态图像的请求时，cookie 也会一起发送，而服务器根本不需要这些 cookie。所以它们只会造成没有意义的网络通信量，应该确保对静态组件的请求不含 cookie。可以创建一个子域，把所有的静态组件都部署在那儿。<br>如果域名是<a href="http://www.example.org,可以把静态组件部署到static.example.org.然而,如果已经在顶级域example.org或者www.example.org设置了cookie,那么所有对static.example.org的请求都会含有这些cookie.这时候可以再买一个新域名,把所有的静态组件部署上去,并保持这个新域名不含cookie.yahoo!用的是yimg.com,youtube是ytimg.com,amazon是images-amazon.com等等./">www.example.org，可以把静态组件部署到static.example.org。然而，如果已经在顶级域example.org或者www.example.org设置了cookie，那么所有对static.example.org的请求都会含有这些cookie。这时候可以再买一个新域名，把所有的静态组件部署上去，并保持这个新域名不含cookie。Yahoo!用的是yimg.com，YouTube是ytimg.com，Amazon是images-amazon.com等等。</a><br>把静态组件部署在不含 cookie 的域下还有一个好处是有些代理可能会拒绝缓存带 cookie 的组件。有一点需要注意：如果不知道应该用 example.org 还是<a href="http://www.example.org作为主页,可以考虑一下cookie的影响.省略www的话,就只能把cookie写到*.example.org,所以因为性能原因最好用www子域,并且把cookie写到这个子域下./">www.example.org作为主页，可以考虑一下cookie的影响。省略www的话，就只能把cookie写到*.example.org，所以因为性能原因最好用www子域，并且把cookie写到这个子域下。</a></p><h3 id="​-9"><a href="#​-9" class="headerlink" title="​"></a>​</h3><p>​</p><p><a href="https://www.cnblogs.com/xianyulaodi/p/5755079.html#_labelTop"></a></p><h2 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h2><p>​</p><h3 id="27-保证所有组件都小于-25K"><a href="#27-保证所有组件都小于-25K" class="headerlink" title="27.保证所有组件都小于 25K"></a>27.保证所有组件都小于 25K</h3><p>​</p><p>这个限制是因为 iPhone 不能缓存大于 25K 的组件，注意这里指的是未压缩的大小。这就是为什么缩减内容本身也很重要，因为单纯的 gzip 可能不够。<br>​</p><h3 id="28-把组件打包到一个复合文档里"><a href="#28-把组件打包到一个复合文档里" class="headerlink" title="28.把组件打包到一个复合文档里"></a>28.把组件打包到一个复合文档里</h3><p>​</p><p>把各个组件打包成一个像有附件的电子邮件一样的复合文档里，可以用一个 HTTP 请求获取多个组件（记住一点：HTTP 请求是代价高昂的）。用这种方式的时候，要先检查用户代理是否支持（iPhone 就不支持）。<br>​</p><h3 id="​-10"><a href="#​-10" class="headerlink" title="​"></a>​</h3><p><a href="https://www.cnblogs.com/xianyulaodi/p/5755079.html#_labelTop"></a></p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>​</p><h3 id="29-Gzip-组件"><a href="#29-Gzip-组件" class="headerlink" title="29.Gzip 组件"></a>29.Gzip 组件</h3><p>前端工程师可以想办法明显地缩短通过网络传输 HTTP 请求和响应的时间。毫无疑问，终端用户的带宽速度，网络服务商，对等交换点的距离等等，都是开发团队所无法控制的。但还有别的能够影响响应时间的因素，压缩可以通过减少 HTTP 响应的大小来缩短响应时间。<br>从 HTTP/1.1 开始，web 客户端就有了支持压缩的 Accept-Encoding HTTP 请求头。</p><table><thead><tr><th>1</th><th>Accept-Encoding: gzip, deflate</th></tr></thead></table><p>如果 web 服务器看到这个请求头，它就会用客户端列出的一种方式来压缩响应。web 服务器通过 Content-Encoding 相应头来通知客户端。</p><table><thead><tr><th>1</th><th>Content-Encoding: gzip</th></tr></thead></table><p>尽可能多地用 gzip 压缩能够给页面减肥，这也是提升用户体验最简单的方法。<br>​</p><p>​</p><h3 id="30-避免图片-src-属性为空"><a href="#30-避免图片-src-属性为空" class="headerlink" title="30.避免图片 src 属性为空"></a>30.避免图片 src 属性为空</h3><p>Image with empty string <strong>src</strong>属性是空字符串的图片很常见，主要以两种形式出现：</p><ol><li>straight HTML</li></ol><img src=”” loading="lazy"><ol><li>JavaScript</li></ol><p>var img = new Image();img.src = “”;<br>这两种形式都会引起相同的问题：浏览器会向服务器发送另一个请求。</p><h3 id="31-配置-ETags"><a href="#31-配置-ETags" class="headerlink" title="31.配置 ETags"></a>31.配置 ETags</h3><p>实体标签（ETags），是服务器和浏览器用来决定浏览器缓存中组件与源服务器中的组件是否匹配的一种机制（“实体”也就是组件：图片，脚本，样式表等等）。添加 ETags 可以提供一种实体验证机制，比最后修改日期更加灵活。一个 ETag 是一个字符串，作为一个组件某一具体版本的唯一标识符。唯一的格式约束是字符串必须用引号括起来，源服务器用相应头中的 ETag 来指定组件的 ETag：</p><p>| 1<br>2<br>3<br>4 | HTTP/1.1 200 OK<br>​Last-Modified: Tue, 12 Dec 2006 03:03:59 GMT<br>​ETag: “10c24bc-4ab-457e1c1f”<br>​Content-Length: 12195 |<br>| — | — |</p><p>然后，如果浏览器必须验证一个组件，它用 If-None-Match 请求头来把 ETag 传回源服务器。如果 ETags 匹配成功，会返回一个 304 状态码，这样就减少了 12195 个字节的响应体。<br>GET /i/yahoo.gif HTTP/1.1<br>Host: us.yimg.com<br>If-Modified-Since: Tue, 12 Dec 2006 03:03:59 GMT<br>If-None-Match: “10c24bc-4ab-457e1c1f”<br>HTTP/1.1 304 Not Modified</p><p><strong>​</strong></p><h3 id="32-对-Ajax-用-GET-请求"><a href="#32-对-Ajax-用-GET-请求" class="headerlink" title="32.对 Ajax 用 GET 请求"></a>32.对 Ajax 用 GET 请求</h3><p>Yahoo!邮箱团队发现使用 XMLHttpRequest 时，浏览器的 POST 请求是通过一个两步的过程来实现的：先发送 HTTP 头，在发送数据。所以最好用 GET 请求，它只需要发送一个 TCP 报文（除非 cookie 特别多）。IE 的 URL 长度最大值是 2K，所以如果要发送的数据超过 2K 就无法使用 GET 了。<br>POST 请求的一个有趣的副作用是实际上没有发送任何数据，就像 GET 请求一样。正如<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html">HTTP 说明文档</a>中描述的，GET 请求是用来检索信息的。所以它的语义只是用 GET 请求来请求数据，而不是用来发送需要存储到服务器的数据。<br>​</p><p>​</p><h3 id="33-尽早清空缓冲区"><a href="#33-尽早清空缓冲区" class="headerlink" title="33.尽早清空缓冲区"></a>33.尽早清空缓冲区</h3><p>当用户请求一个页面时，服务器需要用大约 200 到 500 毫秒来组装 HTML 页面，在这期间，浏览器闲等着数据到达。PHP 中有一个<a href="http://php.net/flush">flush()</a>函数，允许给浏览器发送一部分已经准备完毕的 HTML 响应，以便浏览器可以在后台准备剩余部分的同时开始获取组件，好处主要体现在很忙的后台或者很“轻”的前端页面上（P.S. 也就是说，响应时耗主要在后台方面时最能体现优势）。<br>较理想的清空缓冲区的位置是 HEAD 后面，因为 HTML 的 HEAD 部分通常更容易生成，并且允许引入任何 CSS 和 JavaScript 文件，这样就可以让浏览器在后台还在处理的时候就开始并行获取组件。<br>例如：<br>… <!-- css, js --></p></head><?php flush(); ?><body>... <!-- content -->​<h3 id="34-使用-CDN（内容分发网络）"><a href="#34-使用-CDN（内容分发网络）" class="headerlink" title="34.使用 CDN（内容分发网络）"></a>34.使用 CDN（<strong>内容分发网络</strong>）</h3><p>用户与服务器的物理距离对响应时间也有影响。把内容部署在多个地理位置分散的服务器上能让用户更快地载入页面。但具体要怎么做呢？<br>实现内容在地理位置上分散的第一步是：不要尝试去重新设计你的 web 应用程序来适应分布式结构。这取决于应用程序，改变结构可能包括一些让人望而生畏的任务，比如同步会话状态和跨服务器复制数据库事务（翻译可能不准确）。缩短用户和内容之间距离的提议可能被推迟，或者根本不可能通过，就是因为这个难题。<br>记住终端用户 80%到 90%的响应时间都花在下载页面组件上了：图片，样式，脚本，Flash 等等，这是业绩黄金法则。最好先分散静态内容，而不是一开始就重新设计应用程序结构。这不仅能够大大减少响应时间，还更容易表现出 CDN 的功劳。<br>内容分发网络（CDN）是一组分散在不同地理位置的 web 服务器，用来给用户更高效地发送内容。典型地，选择用来发送内容的服务器是基于网络距离的衡量标准的。例如：选跳数（hop）最少的或者响应时间最快的服务器。<br>​</p><h3 id="35-添上-Expires-或者-Cache-Control-HTTP-头"><a href="#35-添上-Expires-或者-Cache-Control-HTTP-头" class="headerlink" title="35.添上 Expires 或者 Cache-Control HTTP 头"></a>35.添上 Expires 或者 Cache-Control HTTP 头</h3><p>这条规则有两个方面：</p><ul><li>对于静态组件：通过设置一个遥远的将来时间作为 Expires 来实现永不失效</li><li>多余动态组件：用合适的 Cache-ControlHTTP 头来让浏览器进行条件性的请求</li></ul><p>网页设计越来越丰富，这意味着页面里有更多的脚本，图片和 Flash。站点的新访客可能还是不得不提交几个 HTTP 请求，但通过使用有效期能让组件变得可缓存，这避免了在接下来的浏览过程中不必要的 HTTP 请求。有效期 HTTP 头通常被用在图片上，但它们应该用在所有组件上，包括脚本、样式和 Flash 组件。<br>浏览器（和代理）用缓存来减少 HTTP 请求的数目和大小，让页面能够更快加载。web 服务器通过有效期 HTTP 响应头来告诉客户端，页面的各个组件应该被缓存多久。用一个遥远的将来时间做有效期，告诉浏览器这个响应在 2010 年 4 月 15 日前不会改变。</p><table><thead><tr><th>1</th><th>Expires: Thu, 15 Apr 2010 20:00:00 GMT</th></tr></thead></table><p>如果你用的是 Apache 服务器，用 ExpiresDefault 指令来设置相对于当前日期的有效期。下面的例子设置了从请求时间起 10 年的有效期：<br>ExpiresDefault “access plus 10 years”</p>]]></content>
      
      
      <categories>
          
          <category> 高效工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虎牙军规 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫技术概述</title>
      <link href="/2020/09/29/yezwd2/"/>
      <url>/2020/09/29/yezwd2/</url>
      
        <content type="html"><![CDATA[<h2 id="方案确定"><a href="#方案确定" class="headerlink" title="方案确定"></a>方案确定</h2><ul><li>官网/小程序/公众号破解：http</li><li>官网/小程序/公众号抓取：browser</li><li>app 破解</li></ul><h2 id="业务需求细节确认"><a href="#业务需求细节确认" class="headerlink" title="业务需求细节确认"></a>业务需求细节确认</h2><p>eg：</p><ul><li>舱位</li><li>剩余座位数</li><li>机型</li><li>报价币种</li><li>报价税</li><li>查询人数</li><li>儿童价格</li><li>行李额</li><li>售罄行程处理</li></ul><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>Browser 类 推荐：</p><ul><li>webdriver + (Python|Java|.net|…)</li><li>Puppeteer + NodeJS</li></ul><h3 id="其它-headless-browser，排名不分前后～～"><a href="#其它-headless-browser，排名不分前后～～" class="headerlink" title="其它 headless browser，排名不分前后～～"></a>其它 headless browser，排名不分前后～～</h3><ul><li>phantomjs （<a href="http://phantomjs.org/%EF%BC%89">http://phantomjs.org/）</a></li><li>cefsharp （<a href="http://cefsharp.github.io/%EF%BC%89.net">http://cefsharp.github.io/）.net</a></li><li>jsdom (<a href="https://github.com/jsdom/jsdom">https://github.com/jsdom/jsdom</a>)</li><li>scrapy+splash</li></ul><h2 id="网页解析"><a href="#网页解析" class="headerlink" title="网页解析"></a>网页解析</h2><p>Chrome Webdriver</p><ul><li>一定要安装对版本<br><a href="http://chromedriver.chromium.org/downloads">http://chromedriver.chromium.org/downloads</a></li><li>安装 Chrome 插件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// c++</span></span><br><span class="line">ChromeOptions options = <span class="keyword">new</span> ChromeOptions();</span><br><span class="line">options.addExtensions(<span class="keyword">new</span> File(<span class="string">&quot;/path/to/extension.crx&quot;</span>));</span><br><span class="line">ChromeDriver driver = <span class="keyword">new</span> ChromeDriver(options);</span><br></pre></td></tr></table></figure><ul><li>设置代理</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line">ChromeOptions options = <span class="keyword">new</span> ChromeOptions();</span><br><span class="line"><span class="comment">// Add the WebDriver proxy capability.</span></span><br><span class="line"><span class="built_in">Proxy</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>();</span><br><span class="line">proxy.setHttpProxy(<span class="string">&quot;myhttpproxy:3337&quot;</span>);</span><br><span class="line">options.setCapability(<span class="string">&quot;proxy&quot;</span>, proxy);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add a ChromeDriver-specific capability.</span></span><br><span class="line">options.addExtensions(<span class="keyword">new</span> File(<span class="string">&quot;/path/to/extension.crx&quot;</span>));</span><br><span class="line">ChromeDriver driver = <span class="keyword">new</span> ChromeDriver(options);</span><br></pre></td></tr></table></figure><ul><li>启动非默认 Chrome</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// c++</span></span><br><span class="line">ChromeOptions options = <span class="keyword">new</span> ChromeOptions();</span><br><span class="line">options.setBinary(<span class="string">&quot;/path/to/other/chrome/binary&quot;</span>);</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><ul><li>bs4</li><li>pyquery</li><li>lxml.html</li><li>re</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// `YAML</span></span><br><span class="line"><span class="attr">https</span>:<span class="comment">//gist.github.com/MercuryRising/4061368</span></span><br><span class="line">==== Total trials: <span class="number">100000</span> =====</span><br><span class="line">bs4 total time: <span class="number">38.0</span></span><br><span class="line">pq total time: <span class="number">5.2</span></span><br><span class="line">lxml (cssselect) total time: <span class="number">5.1</span></span><br><span class="line">lxml (xpath) total time: <span class="number">3.0</span></span><br><span class="line">regex total time: <span class="number">8.4</span> (doesn<span class="string">&#x27;t find all p)</span></span><br></pre></td></tr></table></figure><p>Node</p><ul><li>cheerio (<a href="https://github.com/cheeriojs/cheerio">https://github.com/cheeriojs/cheerio</a>)</li><li>jquery (<a href="https://www.npmjs.com/package/jquery">https://www.npmjs.com/package/jquery</a>)</li><li>parse5 (<a href="https://github.com/inikulin/parse5">https://github.com/inikulin/parse5</a>) (jsdom, Angular2, Polymer)</li></ul><h2 id="官网破解"><a href="#官网破解" class="headerlink" title="官网破解"></a>官网破解</h2><p>工具</p><ul><li>charles （<a href="https://www.charlesproxy.com/%EF%BC%89">https://www.charlesproxy.com/）</a></li><li>wireshark （<a href="https://www.wireshark.org/%EF%BC%89">https://www.wireshark.org/）</a></li></ul><h2 id="技术点"><a href="#技术点" class="headerlink" title="技术点"></a>技术点</h2><ul><li>python 里的 js 引擎<ul><li>js2py</li><li>pyv8</li></ul></li></ul><h2 id="产品化"><a href="#产品化" class="headerlink" title="产品化"></a>产品化</h2><ul><li>restful</li><li>headless or not</li><li>stability</li></ul><h2 id="Puppeteer-示例代码"><a href="#Puppeteer-示例代码" class="headerlink" title="Puppeteer 示例代码"></a>Puppeteer 示例代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123;</span><br><span class="line">    <span class="attr">headless</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">userDataDir</span>: <span class="string">&quot;/tmp/lagou/&quot;</span> + <span class="built_in">Math</span>.random,</span><br><span class="line">    <span class="attr">slowMo</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="comment">// args: [</span></span><br><span class="line">    <span class="comment">//     &#x27;--proxy-server=http://&#x27; + curProxy</span></span><br><span class="line">    <span class="comment">// ]</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> page.evaluate(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(navigator, <span class="string">&quot;webdriver&quot;</span>, &#123; <span class="attr">get</span>: <span class="function">() =&gt;</span> <span class="literal">false</span> &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> searchTextId = <span class="string">&quot;#search_input&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> searchBtnId = <span class="string">&quot;#search_button&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//await page.waitFor(20000 * Math.random() + 10000);</span></span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&quot;https://www.lagou.com/&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">timeout</span>: <span class="number">3000</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> companyBtn = <span class="keyword">await</span> page.waitForSelector(searchTextId, &#123;</span><br><span class="line">      <span class="attr">timeout</span>: <span class="number">3000</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> page.click(searchTextId);</span><br><span class="line">    <span class="keyword">await</span> page.keyboard.type(<span class="string">&quot;百度&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span> page.click(searchBtnId);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;open page exception:&quot;</span> + err);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> browser.close();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站SEO优化</title>
      <link href="/2020/09/24/zs6m4a/"/>
      <url>/2020/09/24/zs6m4a/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><ol><li> 网站需要使用 ssr 开发模式，spa 单页面开发不利于 SEO</li><li> 只解析公司因业务需要决定开通的子域名。未开通子域名一律不解析。不要使用泛解析（以通配符*代替子域名）。</li><li> 不能有两个或两个以上域名显示同样网站内容（无论以哪种方式实现，如解析至相同根目录、上传同样文件和数据库）。</li><li> 用于测试的子域名使用 robots 文件禁止搜索引擎抓取。</li><li> 未完成内容的网站、栏目不得上线。</li><li> 不存在页面必须返回 404 代码。每个月使用线上工具确认不存在页面服务器头信息。</li><li> 服务器开启 gzip 压缩。</li><li> 除了已规划禁索引擎抓取和收录的内容外，网站所有 URL 一律静态化止搜。</li><li> 站内搜索结果页面使用 robots 文件禁止搜索引擎抓取。</li><li> 网站栏目与 URL 目录需一一对应，一级分类对应一级目录，二级分类对应二级目录。最多分级至二级目录，如果产品/页面数需要三级以上分类，请先与 SEO 部门沟通导航和内部链接解决方案。 h5 上问答模块有三级目录是产品需求</li><li> 栏目/目录 URL 以斜线结尾，后面不要加 index.php 之类文件名。</li><li> 栏目名、文件名等 URL 中的字母一律小写。除活动页无这种问题</li><li> URL 中不要出现除了短横线之外的其它任何特殊字符。</li><li> 除栏目需要，URL 中不得添加其它多余目录层次。 除 pc 使用百度统计埋点的页面</li><li> 无论中英文网站，URL 目录名使用相应英文单词，长度以 3 个英文单词为限。不使用中文或拼音。也可以考虑使用数字/字母编号。</li><li> 英文网站，产品/文章页面文件名使用产品名称/文章标题，去掉虚词。</li><li> 中文网站，产品/文章页面文件名使用数字/字母编号。</li><li> 同一个产品不要放置于多个分类之下，只置于一个分类。</li><li> 所有页面加 canonical 标签。如果不确认 canonical 标签列出的规范化 URL 应该是哪个，请与 SEO 部门咨询。</li><li> 所有页面加面包屑导航。</li><li> 页面 Title 标签、Deion 标签、H1 文字按格式自动生成缺省版本，但系统需要给 SEO 部门预留人工填写功能。</li><li> 一个页面只使用一次 H1。</li><li> 栏目页面 Title 缺省格式：二级栏目名称– 一级栏目名称– 网站名称</li><li> 栏目页面翻页 Title 缺省格式：二级栏目名称– 一级栏目名称– 网站名称– 第 X 页</li><li> 产品页面 Title 缺省格式：产品名称– 网站名称</li><li> 栏目页面 H1 缺省格式：一级栏目名称– 二级栏目名称</li><li> 产品页面 H1 缺省格式：产品名称</li><li> Deion 标签从栏目或产品说明文字第一段截取长度 20 字以上、70 字以下的完整句子。</li><li> 产品页面如果有格式化数据，Title 和 Deion 标签可以充分利用，使其组成通顺可读的句子。</li><li> 除非 SEO 部门另行要求，页面不使用 Keywords 标签。每个页面 Keywords 都是根据之前 SEO 字段去添加的</li><li> 除非 SEO 部门另行要求，所有链接使用 HTML 代码链接，不要使用 JS 生成。</li><li> 所有用户生成内容（UGC）中的链接加 nofollow 属性，例如本站点<a href="http://www.xminseo.com/%E5%B0%B1%E5%AF%B9%E8%AF%84%E8%AE%BA%E5%8C%BA%E5%9F%9F%E7%9A%84url%E5%8A%A0%E4%BA%86nofollow%E6%A0%87%E7%AD%BE%E3%80%82">http://www.xminseo.com/就对评论区域的url加了nofollow标签。</a></li><li> 栏目、产品/文章页面主图加 ALT 文字，如没有人工填写，可与页面 Title 相同。</li><li> 禁止使用任何隐藏文字或链接。</li><li> 尽量避免使用表格（table），尤其是嵌套表格。</li><li> 在不明显影响视觉效果前提下，所有图片均需要最大程度压缩处理后才能使用。</li><li> 不要使用超出实际显示尺寸的图片（不要上传大尺寸图片，然后缩小尺寸显示）。</li><li> 页面纯文字代码（包括 HTML、JS、CSS）不超过 500K。特殊页面如首页可适当放宽。</li><li> 删除未使用的 CSS 代码。尽量合并 CSS 文件。</li><li> 慎用、少用 JS。在主流浏览器测试 JS 是否拖慢页面打开速度。</li><li> 使用主流浏览器实际测试页面打开速度，应不超过 3 秒。条件允许的话，从多省市测试。</li><li> 后台实时或定期生成并更新 XML 版 Sitemap，包括首页、栏目及翻页、产品/文章页面。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SEO优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片上传</title>
      <link href="/2020/09/23/uyy5m8/"/>
      <url>/2020/09/23/uyy5m8/</url>
      
        <content type="html"><![CDATA[<p>想要实现图片上传我们需要知道其中的原理，下面有几个 api 需要大家掌握<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1624611491879-ec70df72-5ad6-4451-914a-ba1a73975906.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=dgD0F&originHeight=382&originWidth=1311&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h2 id="FormData"><a href="#FormData" class="headerlink" title="FormData"></a>FormData</h2><p>是一个用来保存 form 表单数据的构造器<br>方法：</p><ul><li>append</li><li>delete</li><li>get</li><li>getAll</li><li>keys</li><li>values</li><li>entries</li><li>set</li><li>has</li></ul><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">      <span class="selector-class">.upload</span> <span class="selector-tag">label</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">height</span>: <span class="number">150px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">display</span>: inline-block;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">line-height</span>: <span class="number">150px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">      <span class="selector-class">.upload</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;file&quot;</span>]</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">display</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span>请选择图片<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;avatar&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;changehandler(this.files)&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">const</span> changehandler = <span class="function"><span class="keyword">function</span> (<span class="params">file</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">const</span> formdata = <span class="keyword">new</span> FormData();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        formdata.append(<span class="string">&quot;avatar&quot;</span>, file[<span class="number">0</span>]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        upload(formdata);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">const</span> createImg = <span class="function"><span class="keyword">function</span> (<span class="params">url, target</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">const</span> oImg = <span class="keyword">new</span> Image();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        oImg.src = url;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        target.appendChild(oImg);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">const</span> upload = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">formdata</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">const</span> url = <span class="string">&quot;http://localhost:3000/user/upload&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">const</span> result = <span class="keyword">await</span> axios.post(url, formdata);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">if</span> (result.status === <span class="number">200</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          alert(result.data.msg);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">const</span> wraper = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.upload&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          createImg(result.data.avatar, wraper);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>)();</span><br><span class="line"><span class="keyword">var</span> multipartMiddleware = <span class="built_in">require</span>(<span class="string">&quot;connect-multiparty&quot;</span>)();</span><br><span class="line"></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">&quot;public&quot;</span>)));</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&quot;/user/upload&quot;</span>, multipartMiddleware, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> file = req.files.avatar;</span><br><span class="line">  <span class="keyword">const</span> sourcePath = path.normalize(file.path);</span><br><span class="line">  <span class="keyword">const</span> targetPath = path.join(</span><br><span class="line">    process.cwd(),</span><br><span class="line">    <span class="string">&quot;public/images/avatar&quot;</span>,</span><br><span class="line">    file.name</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> fileContext = fs.readFileSync(sourcePath);</span><br><span class="line">  <span class="keyword">const</span> error = fs.writeFileSync(targetPath, fileContext);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!error) &#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">&quot;Access-Control-Allow-Origin&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    res.end(</span><br><span class="line">      <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">avatar</span>: <span class="string">`http://localhost:3000/images/avatar/<span class="subst">$&#123;file.name&#125;</span>`</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&quot;上传成功！&quot;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剪切板</title>
      <link href="/2020/09/21/alqpfb/"/>
      <url>/2020/09/21/alqpfb/</url>
      
        <content type="html"><![CDATA[<p>核心原理： 利用浏览器提供的 copy 命令<br>注意： 对 ipad、iphone 等苹果移动端需做单独处理<br>由于项目需求需要一个远程桌面的内容，开始调研了 guacamole，</p><h2 id="一、业务组件的开发"><a href="#一、业务组件的开发" class="headerlink" title="一、业务组件的开发"></a>一、业务组件的开发</h2><h3 id="1-1-粘贴板-clipboard-js-的使用方法"><a href="#1-1-粘贴板-clipboard-js-的使用方法" class="headerlink" title="1.1 粘贴板 clipboard.js 的使用方法"></a>1.1 粘贴板 clipboard.js 的使用方法</h3><h4 id="一、使用场景"><a href="#一、使用场景" class="headerlink" title="一、使用场景"></a>一、使用场景</h4><p>在移动端开发的时候，有的应用需要用户拷贝页面的内容，方便用户操作。此时，就是需要是用粘贴板功能。</p><hr><h4 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h4><h5 id="1-npm-安装-clipboard-js-插件"><a href="#1-npm-安装-clipboard-js-插件" class="headerlink" title="1. npm 安装 clipboard.js 插件"></a>1. npm 安装 clipboard.js 插件</h5><p>npm install clipboard –save</p><h5 id="2-页面-dom-结构"><a href="#2-页面-dom-结构" class="headerlink" title="2. 页面 dom 结构"></a>2. 页面 dom 结构</h5><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1609231385498-e60db527-6c34-430d-af39-d20a3856bac8.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=mWY7r&originHeight=291&originWidth=556&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h5 id="3-在文件中引入"><a href="#3-在文件中引入" class="headerlink" title="3. 在文件中引入"></a>3. 在文件中引入</h5><p>import clipboard from ‘@/lib/clipboard’</p><h5 id="4-使用方法"><a href="#4-使用方法" class="headerlink" title="4. 使用方法"></a>4. 使用方法</h5><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1609231344740-3b034228-dbba-4471-b726-a979cbd8685d.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=CGhto&originHeight=236&originWidth=462&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><hr><h4 id="三、注意事项"><a href="#三、注意事项" class="headerlink" title="三、注意事项"></a>三、注意事项</h4><ul><li>如果需要在复制成功后，做业务处理，注意此时需要在 success 执行。</li><li>对于 success 事件中，需要注意 this 的指向问题。this 测试不是指向 vue 实例。</li><li>currentPageUrl 用户需要拷贝的文本。</li></ul><h3 id="1-2-剪切-clipboard-js-的使用方法"><a href="#1-2-剪切-clipboard-js-的使用方法" class="headerlink" title="1.2 剪切 clipboard.js 的使用方法"></a>1.2 剪切 clipboard.js 的使用方法</h3><h4 id="剪切"><a href="#剪切" class="headerlink" title="剪切"></a>剪切</h4><p>另外，也可以定义 data-clipboard-action 属性为 copy/cut 来，明确操作是 复制 / 剪切<br>如果忽略了这个属性，便默认 复制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> &lt;!-- Target --&gt;</span><br><span class="line"><span class="number">2.</span> &lt;textarea id=<span class="string">&quot;bar&quot;</span>&gt;Mussum ipsum cacilds...&lt;/textarea&gt;</span><br><span class="line"><span class="number">3.</span></span><br><span class="line"><span class="number">4.</span> &lt;!-- Trigger --&gt;</span><br><span class="line"><span class="number">5.</span> &lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn&quot;</span> data-clipboard-action=<span class="string">&quot;cut&quot;</span> data-clipboard-target=<span class="string">&quot;#bar&quot;</span>&gt;</span><br><span class="line"><span class="number">6.</span>     Cut to clipboard</span><br><span class="line"><span class="number">7.</span> &lt;/button&gt;</span><br></pre></td></tr></table></figure><p>正如上例，剪切 cut 的操作只能在 <input> 和 <textarea> 标签中起作用，在其他标签中会出现事件正常调用，但是操作是失败的，粘贴板是没有改变的。</p><h4 id="属性复制文本"><a href="#属性复制文本" class="headerlink" title="属性复制文本"></a>属性复制文本</h4><p>我们甚至不必需要其他承载文本的元素，仅通过 在触发元素中 添加 data-clipboard-text 属性 来完成复制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;viewport&quot;</span> ref=<span class="string">&quot;viewport&quot;</span>&gt;</span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">modal</span> <span class="attr">ref</span>=<span class="string">&quot;modal&quot;</span> @<span class="attr">reconnect</span>=<span class="string">&quot;connect(query)&quot;</span>/&gt;</span></span></span><br><span class="line">   &lt;!-- tabindex allows <span class="keyword">for</span> div to be focused --&gt;</span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute; left:50%; top:50%; transform: translate(-50%, -50%);&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;display&quot;</span> <span class="attr">id</span>=<span class="string">&quot;display&quot;</span> <span class="attr">class</span>=<span class="string">&quot;display&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span></span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>data-clipboard-text “级别最高”，在 data-clipboard-target 等属性存在时，复制内容及相关参数以 data-clipboard-text 为准</li></ul><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>回调函数： success / error</p><table><thead><tr><th>事件名</th><th>参数</th></tr></thead><tbody><tr><td>success</td><td>event.action copy/cut</td></tr><tr><td>操作</td><td></td></tr><tr><td></td><td>event.text copy/cut</td></tr><tr><td>操作文本内容</td><td></td></tr><tr><td></td><td>event.triger 触发操作的 DOM</td></tr><tr><td>元素</td><td></td></tr><tr><td>error</td><td>event.action copy/cut</td></tr><tr><td>操作</td><td></td></tr><tr><td></td><td>event.triger 触发操作的 DOM</td></tr><tr><td>元素</td><td></td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> clipboard.install = <span class="function">(<span class="params">client</span>) =&gt;</span> &#123;</span><br><span class="line">  clipboard.getLocalClipboard().then(<span class="function"><span class="params">data</span> =&gt;</span> clipboard.cache = data)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, clipboard.update(client), <span class="literal">true</span>)</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;copy&#x27;</span>, clipboard.update(client))</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;cut&#x27;</span>, clipboard.update(client))</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;focus&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.target === <span class="built_in">window</span>) &#123;</span><br><span class="line">      clipboard.update(client)()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clipboard.update = <span class="function"><span class="params">client</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    clipboard.getLocalClipboard().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      clipboard.cache = data</span><br><span class="line">      clipboard.setRemoteClipboard(client)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clipboard.setRemoteClipboard = <span class="function">(<span class="params">client</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!clipboard.cache) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> writer</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> stream = client.createClipboardStream(clipboard.cache.type)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> clipboard.cache.data === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    writer = <span class="keyword">new</span> Guacamole.StringWriter(stream)</span><br><span class="line">    writer.sendText(clipboard.cache.data)</span><br><span class="line">    writer.sendEnd()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    writer = <span class="keyword">new</span> Guacamole.BlobWriter(stream)</span><br><span class="line">    writer.oncomplete = <span class="function"><span class="keyword">function</span> <span class="title">clipboardSent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      writer.sendEnd()</span><br><span class="line">    &#125;;</span><br><span class="line">    writer.sendBlob(clipboard.cache.data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="工具提示"><a href="#工具提示" class="headerlink" title="工具提示"></a>工具提示</h4><p>每个应用程序有不同的设计需求，这就是为什么 clipboard.js 不包括任何 CSS 或内置的工具提示解决方案。</p><h4 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h4><p>如果你不想修改你的 HTML，有一个非常方便的命令式 API 供你使用。您所需要做的就是声明一个函数，执行您的操作，然后返回一个值。<br>例如 如果想动态的设置一个目标元素 target，则需要返回一个节点,即 动态设置点击复制的目标元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">new</span> ClipboardJS(<span class="string">&#x27;.btn&#x27;</span>, &#123;</span><br><span class="line"><span class="number">2.</span> target: <span class="function"><span class="keyword">function</span>(<span class="params">trigger</span>) </span>&#123;</span><br><span class="line"><span class="number">3.</span> <span class="keyword">return</span> trigger.nextElementSibling  ||  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="number">4.</span>     &#125;</span><br><span class="line"><span class="number">5.</span> &#125;);</span><br></pre></td></tr></table></figure><p>如果想动态设置内容文本 text，则返回一个字符串 String</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="keyword">let</span> writer</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> stream = client.createClipboardStream(clipboard.cache.type)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> clipboard.cache.data === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    writer = <span class="keyword">new</span> Guacamole.StringWriter(stream)</span><br><span class="line">    writer.sendText(clipboard.cache.data)</span><br><span class="line">    writer.sendEnd()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    writer = <span class="keyword">new</span> Guacamole.BlobWriter(stream)</span><br><span class="line">    writer.oncomplete = <span class="function"><span class="keyword">function</span> <span class="title">clipboardSent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      writer.sendEnd()</span><br><span class="line">    &#125;;</span><br><span class="line">    writer.sendBlob(clipboard.cache.data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Bootstrap Modals 中或与任何其他更改焦点的库一起使用时，将希望将焦点元素设置为 container 值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">new</span> ClipboardJS(<span class="string">&#x27;.btn&#x27;</span>, &#123;</span><br><span class="line"><span class="number">2.</span> container: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;modal&#x27;</span>)</span><br><span class="line"><span class="number">3.</span> &#125;);</span><br></pre></td></tr></table></figure><p>并且，如果在单页应用中使用时，要更精确地管理 DOM 的生命周期，可以使用以下方法清除创建的事件对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">clipboard.getLocalClipboard = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (navigator.clipboard &amp;&amp; navigator.clipboard.readText) &#123;</span><br><span class="line">    <span class="keyword">const</span> text = <span class="keyword">await</span> navigator.clipboard.readText()</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;text/plain&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: text</span><br><span class="line">    &#125;s</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">clipboard.setLocalClipboard = <span class="keyword">async</span> (data) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (navigator.clipboard &amp;&amp; navigator.clipboard.writeText) &#123;</span><br><span class="line">    <span class="keyword">if</span> (data.type === <span class="string">&#x27;text/plain&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> navigator.clipboard.writeText(data.data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clipboard.onClipboard = <span class="function">(<span class="params">stream, mimetype</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> reader</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/^text\//</span>.exec(mimetype)) &#123;</span><br><span class="line">    reader = <span class="keyword">new</span> Guacamole.StringReader(stream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Assemble received data into a single string</span></span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    reader.ontext = <span class="function"><span class="params">text</span> =&gt;</span> &#123;</span><br><span class="line">      data += text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set clipboard contents once stream is finished</span></span><br><span class="line">    reader.onend = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      clipboard.setLocalClipboard(&#123;</span><br><span class="line">        <span class="attr">type</span>: mimetype,</span><br><span class="line">        <span class="attr">data</span>: data</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reader = <span class="keyword">new</span> Guacamole.BlobReader(stream, mimetype);</span><br><span class="line">    reader.onend = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      clipboard.setLocalClipboard(&#123;</span><br><span class="line">        <span class="attr">type</span>: mimetype,</span><br><span class="line">        <span class="attr">data</span>: reader.getBlob()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、-业务场景"><a href="#二、-业务场景" class="headerlink" title="二、 业务场景"></a>二、 业务场景</h2><p>常见的在我们日常生活中，比如我们广大的程序员朋友们，在使用 IDE 编辑器时总会出现以下一种情况：<br>代码 c+v 也就是我们常说的 “ CV 大法 “, 而我们 IDE 编辑器的功能 cv 只会在 IDE 内部实现剪切，复制，粘贴，<br>这就造成了一种现象 “ 次元隔绝 “ 。</p><p>而这种现象就是由于我们使用编辑器内地代码在进行 CV 大法的时候 无法将命令执行回我们电脑内地指令，而是被<br>IDE 内部指令拦截 导致我们 CV 出来的东西无法复制到除 IDE 编辑器外面的其他软件或编辑器上，也就是命令没有被电脑收取，我们的数据没有存在本该电脑存储的栈中，而是被编辑器截取了，<br>所以这时候我们伟大的救世主” CV 大法强化升级版-剪切板组件 “ 就这样被我们诞生出来了！</p><h3 id="2-1-剪切板雏形"><a href="#2-1-剪切板雏形" class="headerlink" title="2.1 剪切板雏形"></a>2.1 剪切板雏形</h3><p>由于浏览器隐私协议限制，以前浏览器是不允许直接访问剪切板的，最近几年，随着 web 应用兴起，W3C 也在逐渐拓宽 JavaScript 应用范围，现在前端也能直接操作剪切板。文中按照访问方式，分为间接访问和直接访问。</p><h4 id="间接访问"><a href="#间接访问" class="headerlink" title="间接访问"></a>间接访问</h4><p>交互事件<br>用户交互事件，如 paste（复制）、cut（剪切）、dragstart（拖拽）等，能够通过事件对象 Event，访问到剪切板。可以通过这部分操作，我们可以格式化、自定义剪切板中内容。在 contenteditable（可编辑）元素中，为了统一粘贴文本样式，我们可以在元素的复制事件中，对文本格式进行过滤。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> editor = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;editor)</span></span><br><span class="line"><span class="string">editor.addEventListener(&#x27;</span>paste<span class="string">&#x27;, e =&gt; &#123;</span></span><br><span class="line"><span class="string">  e.preventDefault()</span></span><br><span class="line"><span class="string">  let data = e.clipboardData.getData(&#x27;</span>text/plain<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">  // 格式化粘贴xml标签</span></span><br><span class="line"><span class="string">  data = data.replace(/&gt;/g, &#x27;</span>&gt;<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">      .replace(/&lt;/g, &#x27;</span>&lt;<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">  let result = data.split(&#x27;</span>/n<span class="string">&#x27;).join(&#x27;</span></span><br><span class="line"><span class="string">&#x27;)</span></span><br><span class="line"><span class="string">  document.execCommand(&#x27;</span>insertHTML<span class="string">&#x27;, null, result)</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure><p>除了文本，我们还能获取其他内容吗？比如图像？答案是一半一半。为什么说一半一半？<br>正常情况下，我们用截图软件截图，这部分是能在 e.dataTransfer.files 中获取到的，截图软件实际上是将 base64 文件放到了剪切板中。但是，假如我们在操作系统中复制一张图片，在 dataTransfer 对象中，是获取不到的，这是浏览器隐私协议限制，正如 web 页面不能直接操作系统文件（虽然部分浏览器已经支持 File API）一样，遇到这种需求，需要先放一放。<br>在业务开发中，测试童鞋们，总是能给人一些惊喜，谁说只能粘贴，我还可以拖拽，拖拽一些奇奇怪怪的内容进去，看，又发现一个 Bug。可编辑元素默认是允许拖拽的，为避免这种方式，给我们的选择只有两个，第一，禁止拖拽，可以，但是比较暴力，第二就是改写拖拽内容，监听 dragstart 事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> editor = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;editor)</span></span><br><span class="line"><span class="string">editor.addEventListener(&#x27;</span>dragstart<span class="string">&#x27;, e =&gt; &#123;</span></span><br><span class="line"><span class="string">  e.preventDefault()</span></span><br><span class="line"><span class="string">  // 获取页面选中文本</span></span><br><span class="line"><span class="string">  let selection = window.getSelection()</span></span><br><span class="line"><span class="string">  let data = selection.toString()</span></span><br><span class="line"><span class="string">  e.dataTransfer.setData(&#x27;</span>text/plain<span class="string">&#x27;, data)</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure><h4 id="直接访问"><a href="#直接访问" class="headerlink" title="直接访问"></a>直接访问</h4><p>clipboard API<br>最近 navigator 新增了 Clipboard API，不仅能够对剪切板文本、文件读取，还提供了写的操作，但是兼容性较差。文本读写 Chrome 66 版本即支持，但是 image/png 得 76+才行。返回值是 Promise，用起来比较方便，但是对于剪切板的访问，首先需要运行在 https 服务页面中，其次需要请求用户授权，授权通过后，才能访问。基本使用示例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取文本</span></span><br><span class="line">  navigator.clipboard.readText().then(s</span><br><span class="line">    clipText =&gt; <span class="built_in">document</span>.getElementById(<span class="string">&quot;editor&quot;</span>).innerText = clipText</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// 读取剪切板中图片</span></span><br><span class="line">  navigator.permissions.query(&#123;<span class="attr">name</span>: <span class="string">&quot;clipboard-read&quot;</span>&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (result.state == <span class="string">&quot;granted&quot;</span> || result.state == <span class="string">&quot;prompt&quot;</span>) &#123;</span><br><span class="line">      navigator.clipboard.read().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;data.items.length; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (data.items[i].type != <span class="string">&quot;image/png&quot;</span>) &#123;</span><br><span class="line">            alert(<span class="string">&quot;Clipboard contains non-image data. Unable to access it.&quot;</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> blob = data.items[i].getType(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line">            imgElem.src = URL.createObjectURL(blob);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="2-2-浏览器兼容"><a href="#2-2-浏览器兼容" class="headerlink" title="2.2 浏览器兼容"></a>2.2 浏览器兼容</h3><h4 id="Evevt-clipboardData-对象"><a href="#Evevt-clipboardData-对象" class="headerlink" title="Evevt.clipboardData 对象"></a>Evevt.clipboardData 对象</h4><p>clipboardData 是 JavaScript 剪切板对象，该对象提供了 3 个常用方法：<br>clearData(): clipboardData 对象从剪切板删除一种或多种数据格式（一个参数：数据类型）<br>getData(): clipboardData 对象从剪切板获取指定格式的数据（一个参数：数据类型）<br>setData(): clipboardData 对象赋予指定格式的数据（两个参数：数据类型，要赋予的值） *数据类型一般为“”text/plain” ”<br>Evevt.clipboardData 对象兼容性问题<br>经过尝试，clipboardData 对象内兼容大部分 px 浏览器，像 chrome，firefox、ie 等，但是在手机端兼容性不是很好，<br>目前 clipboardData 在 ios 上的 safari 浏览器无效，为解决移动端这个问题，我们引用一个 js 插件——<a href="https://github.com/zenorocha/clipboard.js">clipboard.js</a><br>clipboard.js 依赖于 HTML5 推出的 Selection API 和 execCommand API<br>使用方法：<br>首先在页面中引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;clipboard.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>使用 clipboard.js 的自定义属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--使用data-clipboard-target属性指定被复制的标签--&gt;</span><br><span class="line">&lt;!--使用data-clipboard-action属性指定一些操作，copy（复制），cut（剪切）--&gt;</span><br><span class="line">&lt;!--注意：cut 操作仅适用于&lt;textarea&gt;和&lt;input&gt;--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin:2em&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 　<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;id_text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 　<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_copy&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">   　<span class="attr">data-clipboard-target</span>=<span class="string">&quot;#id_text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">   　<span class="attr">data-clipboard-action</span>=<span class="string">&quot;copy&quot;</span>&gt;</span>点击复制</span></span><br><span class="line"><span class="xml"> 　<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> clipboard = <span class="keyword">new</span> Clipboard(<span class="string">&quot;#id_copy&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> clipboard.on(<span class="string">&quot;success&quot;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;<span class="comment">//复制成功的回调</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  　<span class="built_in">console</span>.info(<span class="string">&quot;复制成功，复制内容： &quot;</span> + element.text);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> clipboard.on(<span class="string">&quot;error&quot;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;<span class="comment">//复制失败的回调</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  　<span class="built_in">console</span>.info(element);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>高级用法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//清理Clipboard对象</span></span><br><span class="line"><span class="keyword">var</span> clipboard = <span class="keyword">new</span> Clipboard(<span class="string">&quot;.btn&quot;</span>);</span><br><span class="line">clipboard.destroy();</span><br></pre></td></tr></table></figure><h4 id="Zero-Clipboard"><a href="#Zero-Clipboard" class="headerlink" title="Zero Clipboard"></a>Zero Clipboard</h4><p>Zero Clipboard 作为一个独立的 js 库，它利用 Flash 进行复制，需要两个文件：ZeroClipboard.js 和 ZeroClipboard.swf 。网络上有 2 个版本，实现原理都是使用 flash 进行复制，不知道原创是谁的，也可能一家子的 2 个兄弟，这个就不管了，只要我们自己做到尊重版权，表示问心无愧，今天给大家介绍的这个版本相对来说比较简单。<br>首先看下图是为使用 Zero Clipboard 后生成的 flash 对象，它能兼容的 flash10 及以下版本，兼容所有的浏览器：<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1609229048898-26a6249f-2aa3-4c2c-8704-863e27c544ee.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=n4ZGf&originHeight=354&originWidth=709&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><p>现在我们先使用独立的 js 库 Zero Clipboard 简单实现复制到剪贴板功能，demo 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Zero Clipboard Test&lt;/title&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    说明：</span><br><span class="line">    1.data-clipboard-target 输入要复制的对象的ID</span><br><span class="line">--&gt;</span><br><span class="line">&lt;button id=&quot;d_clip_button&quot; class=&quot;my_clip_button&quot; data-clipboard-target=&quot;fe_text&quot;&gt;&lt;b&gt;复制到剪贴板&lt;/b&gt;&lt;/button&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;textarea id=&quot;fe_text&quot; cols=&quot;50&quot; rows=&quot;3&quot;&gt;输入需要复制的内容&lt;/textarea&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;ZeroClipboard.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">// 定义一个新的复制对象</span><br><span class="line">var clip = new ZeroClipboard( document.getElementById(&quot;d_clip_button&quot;), &#123;</span><br><span class="line">  moviePath: &quot;ZeroClipboard.swf&quot;</span><br><span class="line">&#125; );</span><br><span class="line">// 复制内容到剪贴板成功后的操作</span><br><span class="line">clip.on( &#x27;complete&#x27;, function(client, args) &#123;</span><br><span class="line">   alert(&quot;复制成功，复制内容为：&quot;+ args.text);</span><br><span class="line">&#125; );</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>独立的 js 库 ZeroClipboard.js 是采用 flash 实现实现复制到剪贴板的功能，可以看出，使用 ZeroClipboard.js 带来功能相对比较少，不过它是独立的库，文件比较小，而使用 jquery.zclip.js 后的功能是比较丰富</p><h2 id="三、Vue-插件兼容"><a href="#三、Vue-插件兼容" class="headerlink" title="三、Vue 插件兼容"></a>三、Vue 插件兼容</h2><h3 id="安装-clipboard-插件"><a href="#安装-clipboard-插件" class="headerlink" title="安装 clipboard 插件"></a>安装 clipboard 插件</h3><p>npm install clipboard</p><h3 id="2-使用-clipboard"><a href="#2-使用-clipboard" class="headerlink" title="2.使用 clipboard"></a>2.使用 clipboard</h3><h4 id="HTML-重点样式"><a href="#HTML-重点样式" class="headerlink" title="HTML 重点样式"></a>HTML 重点样式</h4><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1609229048978-8bfbf854-2191-48f7-a308-1adfda2b80fb.gif#id=F4Gl6&originHeight=20&originWidth=20&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1609231204994-d135225e-6ee6-4fe1-b6a1-481ab1c4a507.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=eaquf&originHeight=270&originWidth=611&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h4 id="Javascript-重点技术"><a href="#Javascript-重点技术" class="headerlink" title="Javascript 重点技术"></a>Javascript 重点技术</h4><p><strong>剪切-复制-粘贴</strong><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1609231571456-2d0330c2-dd15-40e6-bb5b-a212840006f3.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=x1BZi&originHeight=595&originWidth=656&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br><strong>鼠标区域圈选</strong><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1609231537195-518fb4a6-cdbf-4425-9f92-23ca1a4cc4f3.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=xwKB4&originHeight=401&originWidth=1002&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><p><strong>业务逻辑处理</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">clipboard.install = (client) =&gt; &#123;</span><br><span class="line">  clipboard.getLocalClipboard().then(data =&gt; clipboard.cache = data)</span><br><span class="line"></span><br><span class="line">  window.addEventListener(&#x27;load&#x27;, clipboard.update(client), true)</span><br><span class="line">  window.addEventListener(&#x27;copy&#x27;, clipboard.update(client))</span><br><span class="line">  window.addEventListener(&#x27;cut&#x27;, clipboard.update(client))</span><br><span class="line">  window.addEventListener(&#x27;focus&#x27;, e =&gt; &#123;</span><br><span class="line">    if (e.target === window) &#123;</span><br><span class="line">      clipboard.update(client)()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, true)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clipboard.update = client =&gt; &#123;</span><br><span class="line">  return () =&gt; &#123;</span><br><span class="line">    clipboard.getLocalClipboard().then(data =&gt; &#123;</span><br><span class="line">      clipboard.cache = data</span><br><span class="line">      clipboard.setRemoteClipboard(client)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clipboard.setRemoteClipboard = (client) =&gt; &#123;</span><br><span class="line">  if (!clipboard.cache) &#123;</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  let writer</span><br><span class="line"></span><br><span class="line">  const stream = client.createClipboardStream(clipboard.cache.type)</span><br><span class="line"></span><br><span class="line">  if (typeof clipboard.cache.data === &#x27;string&#x27;) &#123;</span><br><span class="line">    writer = new Guacamole.StringWriter(stream)</span><br><span class="line">    writer.sendText(clipboard.cache.data)</span><br><span class="line">    writer.sendEnd()</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    writer = new Guacamole.BlobWriter(stream)</span><br><span class="line">    writer.oncomplete = function clipboardSent() &#123;</span><br><span class="line">      writer.sendEnd()</span><br><span class="line">    &#125;;</span><br><span class="line">    writer.sendBlob(clipboard.cache.data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clipboard.getLocalClipboard = async () =&gt; &#123;</span><br><span class="line">  if (navigator.clipboard &amp;&amp; navigator.clipboard.readText) &#123;</span><br><span class="line">    const text = await navigator.clipboard.readText()</span><br><span class="line">    return &#123;</span><br><span class="line">      type: &#x27;text/plain&#x27;,</span><br><span class="line">      data: text</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clipboard.setLocalClipboard = async (data) =&gt; &#123;</span><br><span class="line">  if (navigator.clipboard &amp;&amp; navigator.clipboard.writeText) &#123;</span><br><span class="line">    if (data.type === &#x27;text/plain&#x27;) &#123;</span><br><span class="line">      await navigator.clipboard.writeText(data.data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clipboard.onClipboard = (stream, mimetype) =&gt; &#123;</span><br><span class="line">  let reader</span><br><span class="line"></span><br><span class="line">  if (/^text\//.exec(mimetype)) &#123;</span><br><span class="line">    reader = new Guacamole.StringReader(stream);</span><br><span class="line"></span><br><span class="line">    // Assemble received data into a single string</span><br><span class="line">    let data = &#x27;&#x27;;</span><br><span class="line">    reader.ontext = text =&gt; &#123;</span><br><span class="line">      data += text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Set clipboard contents once stream is finished</span><br><span class="line">    reader.onend = () =&gt; &#123;</span><br><span class="line">      clipboard.setLocalClipboard(&#123;</span><br><span class="line">        type: mimetype,</span><br><span class="line">        data: data</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    reader = new Guacamole.BlobReader(stream, mimetype);</span><br><span class="line">    reader.onend = () =&gt; &#123;</span><br><span class="line">      clipboard.setLocalClipboard(&#123;</span><br><span class="line">        type: mimetype,</span><br><span class="line">        data: reader.getBlob()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剪切板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端适配</title>
      <link href="/2020/09/17/ot99uw/"/>
      <url>/2020/09/17/ot99uw/</url>
      
        <content type="html"><![CDATA[<p>常用插件：flexible.js pxtorem</p><h2 id="响应式-amp-自适应"><a href="#响应式-amp-自适应" class="headerlink" title="响应式 &amp; 自适应"></a>响应式 &amp; 自适应</h2><h3 id="响应式布局：媒体查询-media-query"><a href="#响应式布局：媒体查询-media-query" class="headerlink" title="响应式布局：媒体查询(media query)"></a>响应式布局：媒体查询(media query)</h3><p>媒体查询就是对设备按照某些条件进行查询，使符合查询条件的设备显示对应的样式，从而达到不同设备显示不同样式的效果。<br>• 响应式页面的本质就是写了两个页面的内容（移动端+PC 端）在同一个页面中，然后根据查询条件来切换该用哪个页面。<br>• 如果是同一个页面内之间的状态，用 JS 来切换状态<br>如果是不同屏幕之间的状态，用媒体查询来切换状态<br>• 适配移动端用 媒体查询 &amp; meta viewport<br>• 移动端页面的交互方式和 PC 端页面不同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  @media (max-width: 320px)&#123; <span class="comment">/*0~320*/</span></span><br><span class="line">      body&#123;</span><br><span class="line">          <span class="attr">background</span>: pink;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   @media (min-width: 321px) and (max-width: 375px)&#123; <span class="comment">/*321~768*/</span></span><br><span class="line">      body&#123;</span><br><span class="line">          <span class="attr">background</span>: red;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   @media (min-width: 376px) and (max-width: 425px)&#123; <span class="comment">/*376~425*/</span></span><br><span class="line">      body&#123;</span><br><span class="line">          <span class="attr">background</span>: yellow;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   @media (min-width: 426px) and (max-width: 768px)&#123; <span class="comment">/*426~768*/</span></span><br><span class="line">      body&#123;</span><br><span class="line">          <span class="attr">background</span>: blue;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   @media (min-width: 769px)&#123; <span class="comment">/*769~+∞*/</span></span><br><span class="line">      body&#123;</span><br><span class="line">          <span class="attr">background</span>: green;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="自适应：盒模型，图片，字体"><a href="#自适应：盒模型，图片，字体" class="headerlink" title="自适应：盒模型，图片，字体"></a>自适应：盒模型，图片，字体</h3><h4 id="盒模型："><a href="#盒模型：" class="headerlink" title="盒模型："></a>盒模型：</h4><ul><li>flex 弹性布局 &amp; 浮动+百分比布局</li><li>bootstarp element vant antd…<strong>栅栏式布局</strong></li></ul><h4 id="图片："><a href="#图片：" class="headerlink" title="图片："></a>图片：</h4><p>重点：避免图片失帧<br>方式一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">img  &#123;</span><br><span class="line">      max-width: <span class="number">100</span>%;</span><br><span class="line">      max-height: <span class="number">100</span>%;</span><br><span class="line">      display: block;</span><br><span class="line">      margin: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">img  &#123;</span><br><span class="line">      <span class="attr">width</span>:<span class="number">100</span>%;</span><br><span class="line">      heigth:auto;</span><br><span class="line">      display: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字体："><a href="#字体：" class="headerlink" title="字体："></a>字体：</h3><p>字体尺寸的单位：px pt rem em</p><h5 id="px"><a href="#px" class="headerlink" title="px:"></a>px:</h5><p>相对长度单位。像素（Pixels）。像素 px 是相对于显示器屏幕分辨率而言的。<br>px 不会因为其它元素的尺寸变化而变化<br>px 特点：比较稳定和精确，但在浏览器放大缩小会出现页面混乱。</p><h5 id="pt"><a href="#pt" class="headerlink" title="pt:"></a>pt:</h5><p>点（Points），绝对长度单位。<br>印刷业上常使用的单位，磅的意思，一般用于页面打印排版。<br>不知道经常做设计的同学知不知道 zeplin 这个网站，它用的像素单位都是 pt。</p><h5 id="rem"><a href="#rem" class="headerlink" title="rem:"></a>rem:</h5><p>相对长度单位。相对于根元素(即 html 元素)font-size 计算值的倍数。是 CSS3 新增的一个相对单位（root em=&gt;rem）;<br>rem 可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。</p><h5 id="em"><a href="#em" class="headerlink" title="em:"></a>em:</h5><p>相对长度单位。相对于当前对象内文本的字体尺寸。<br>如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。<br>em 特点：<br>（1）em 的值并不是固定的<br>（2）em 会继承父级元素的字体大小<br>使用 em 的注意点：</p><ol><li>html 选择器中声明 font-size=62.5%；</li><li>将你的原来的 px 数值除以 10，然后换上 em 作为单位；</li><li>重新计算那些被放大的字体的 em 数值。避免字体大小的重复声明。</li></ol><table><thead><tr><th>字号</th><th>px</th><th>em</th><th>Percent</th><th>Points</th></tr></thead><tbody><tr><td>八号</td><td>6px</td><td>0.375em</td><td>37.5%</td><td>5pt</td></tr><tr><td>七号</td><td>7px</td><td>0.4375em</td><td>43.75%</td><td>5.5pt</td></tr><tr><td>小六</td><td>8px</td><td>0.5em</td><td>50%</td><td>6.5pt</td></tr><tr><td></td><td>9px</td><td>0.55em</td><td>55%</td><td>7pt</td></tr><tr><td>六号</td><td>10px</td><td>0.625em</td><td>62.5%</td><td>7.5pt</td></tr><tr><td></td><td>11px</td><td>0.7em</td><td>70%</td><td>8pt</td></tr><tr><td>小五</td><td>12px</td><td>0.75em</td><td>75%</td><td>9pt</td></tr><tr><td></td><td>13px</td><td>0.8em</td><td>80%</td><td>10pt</td></tr><tr><td>五号</td><td>14px</td><td>0.875em</td><td>87.5%</td><td>10.5pt</td></tr><tr><td></td><td>15px</td><td>0.95em</td><td>95%</td><td>11pt</td></tr><tr><td>小四</td><td>16px</td><td>1em</td><td>10%</td><td>12pt</td></tr><tr><td></td><td>17px</td><td>1.05em</td><td>105%</td><td>13pt</td></tr><tr><td></td><td>18px</td><td>1.125em</td><td>112.5%</td><td>13.5pt</td></tr><tr><td>四号</td><td>19px</td><td>1.2em</td><td>120%</td><td>14pt</td></tr><tr><td></td><td>20px</td><td>1.25em</td><td>125%</td><td>14.5pt</td></tr><tr><td>小三</td><td>21px</td><td>1.3em</td><td>130%</td><td>15pt</td></tr><tr><td>三号</td><td>22px</td><td>1.4em</td><td>140%</td><td>16pt</td></tr><tr><td></td><td>23px</td><td>1.45em</td><td>145%</td><td>17pt</td></tr><tr><td>小二</td><td>24px</td><td>1.5em</td><td>150%</td><td>18pt</td></tr></tbody></table><h3 id="veu-rem-适配："><a href="#veu-rem-适配：" class="headerlink" title="veu - rem 适配："></a>veu - rem 适配：</h3><p>公司设计稿：750 尺寸 是 iPhone6/7/8 屏幕宽度的 2 倍视图</p><p>方式一：<br>第一步，先用 vue-cli 快速构建出一个项目，然后，安装</p><ul><li>postcss</li><li>postcss-pxtorem px 转 rem</li><li>postcss-loader 样式解析</li><li>postcss-import css 中引入 css</li><li>postcss-url；</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save postcss postcss-pxtorem postcss-loader postcss-<span class="keyword">import</span> postcss-url</span><br></pre></td></tr></table></figure><p>第二步，在项目根目录下添加.postcssrc.js 文件，在里面写上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: &#123;</span><br><span class="line">    <span class="string">&quot;postcss-pxtorem&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">rootValue</span>: <span class="number">32</span>, <span class="comment">//根目录的字体大小是32px</span></span><br><span class="line">      <span class="attr">propList</span>: [<span class="string">&quot;*&quot;</span>],</span><br><span class="line">      <span class="attr">minPixelValue</span>: <span class="number">2</span>, <span class="comment">//最小转换单位是2px</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>第三步，动态设置根字体大小！一段简单的 js 插入在 head 里面；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">autoRootFontSize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.documentElement.style.fontSize =        <span class="built_in">Math</span>.min(screen.width,<span class="built_in">document</span>.documentElement.getBoundingClientRect().width)  /  <span class="number">750</span> * <span class="number">32</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">          <span class="comment">// 取screen.width和document.documentElement.getBoundingClientRect().width的最小值；除以750，乘以32；懂的起撒，就是原本是750大小的32px;如果屏幕大小变成了375px,那么字体就是16px;也就是根字体fontSize大小和屏幕大小成正比变化！是不是很简单</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, autoRootFontSize);</span><br><span class="line">    autoRootFontSize();</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端适配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>svn使用</title>
      <link href="/2020/09/15/wg58fs/"/>
      <url>/2020/09/15/wg58fs/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 版本控制 </category>
          
          <category> Svn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Svn使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>富文本编辑器</title>
      <link href="/2020/09/14/dv1nuc/"/>
      <url>/2020/09/14/dv1nuc/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-IDE？"><a href="#什么是-IDE？" class="headerlink" title="什么是 IDE？"></a>什么是 IDE？</h2><p>集成开发环境（IDE，Integrated Development Environment ）是用于提供程序开发环境的应用程序，一般包括代码编辑器、<a href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91%E5%99%A8/8853067">编译器</a>、<a href="https://baike.baidu.com/item/%E8%B0%83%E8%AF%95%E5%99%A8/3351943">调试器</a>和图形用户界面等工具。<br>我们这里指的 IDE 其实是指富文本编辑器。</p><h2 id="富文本编辑器的分类"><a href="#富文本编辑器的分类" class="headerlink" title="富文本编辑器的分类"></a>富文本编辑器的分类</h2><p>相信很多人都使用过多种富文本编辑器<br>富文本编辑器常用于编辑博客、用户交互，富文本编辑器分为两种：<br>所见即所得、非所见即所得。当然，两种富文本编辑器的实现原理是不相同的。</p><h3 id="所见即所得富文本编辑器"><a href="#所见即所得富文本编辑器" class="headerlink" title="所见即所得富文本编辑器"></a>所见即所得富文本编辑器</h3><p>这种编辑器的实现原理很简单，用 textarea 元素就可以实现，假如要实现粗体、斜体、下划线、颜色字、图片的效果，只需在字的中间加上自定义标签即可。<br>例如：<br>​[b]富文本编辑器[b] ，[img]src=”<a href="http://www.google.com.hk/intl/zh-CN/images/logo_cn.png">http://www.google.com.hk/intl/zh-CN/images/logo_cn.png</a>”<br>[img]当然这些规则你得自己通过 js 进行定制，当 POST 提交后，再把这些标签转换为 html 标签。</p><h3 id="非所见即所得富文本编辑器"><a href="#非所见即所得富文本编辑器" class="headerlink" title="非所见即所得富文本编辑器"></a>非所见即所得富文本编辑器</h3><p>前面提到的效果，我们无法在 textarea 中见到立竿见影的效果（所见即所得），而文本域本身也只是支持一些字符的输入，并不支持显示 html。</p><h2 id="富文本编辑器实现原理"><a href="#富文本编辑器实现原理" class="headerlink" title="富文本编辑器实现原理"></a>富文本编辑器实现原理</h2><p>如何做到编辑像文本域，又能够即时所见呢？答案就是使用 iframe 作为内容编辑区域。iframe 本身也是一个嵌套页面，它如何能够被编辑呢？这里有一些关键的属性，它们可以做到让 iframe 可以被编辑。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>KF富文本编辑器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;jquery.min.js&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            $d = $(<span class="string">&quot;#editor&quot;</span>)[<span class="number">0</span>].contentWindow.document; <span class="comment">// IE、FF都兼容</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            $d.designMode = <span class="string">&quot;on&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            $d.contentEditable = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            $d.open();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            $d.close();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            $(<span class="string">&quot;body&quot;</span>, $d).append(<span class="string">&quot;&lt;div&gt;A&lt;/div&gt;&lt;div&gt;B&lt;/div&gt;&lt;div&gt;C&lt;/div&gt;&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            $(<span class="string">&#x27;#insert_img&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">// 在iframe中插入一张图片</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="keyword">var</span> img = <span class="string">&#x27;&lt;img src=&quot;&#x27;</span> + $(<span class="string">&#x27;#path&#x27;</span>).val() + <span class="string">&#x27;&quot; /&gt;&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                $(<span class="string">&quot;body&quot;</span>, $d).append(img);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            $(<span class="string">&#x27;#preview&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">// 获取iframe的body内容，用于显示或者插入到数据库</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                alert($(<span class="string">&#x27;#editor&#x27;</span>).contents().find(<span class="string">&#x27;body&#x27;</span>).html());</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                $(<span class="string">&#x27;#preview_area&#x27;</span>).html($(<span class="string">&#x27;#editor&#x27;</span>).contents().find(<span class="string">&#x27;body&#x27;</span>).html());</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;editor&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border:solid 1px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;path&quot;</span> <span class="attr">value</span>=<span class="string">&quot;http://www.google.com.hk/intl/zh-CN/images/logo_cn.png&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;insert_img&quot;</span> <span class="attr">value</span>=<span class="string">&quot;插入图片&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;preview&quot;</span> <span class="attr">value</span>=<span class="string">&quot;预览&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px dashed #ccc;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;preview_area&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="代码关键点："><a href="#代码关键点：" class="headerlink" title="代码关键点："></a>代码关键点：</h3><ul><li><strong>designMode</strong>属性为 “on”</li><li><strong>contentEditable</strong>属性为 “true”，让 iframe 可编辑</li></ul><p><strong>效果如下图：</strong><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1607608005995-38ae3b29-d975-4c4b-80ca-271252776b66.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=l4vEx&originHeight=562&originWidth=901&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h2 id="原型展示"><a href="#原型展示" class="headerlink" title="原型展示"></a>原型展示</h2><p><strong>实训平台在线 IDE 效果原型：</strong><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1607609477914-985dab35-fcd9-4843-aa70-51cc1d8d7ade.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=GmrdR&originHeight=844&originWidth=2050&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><h3 id="Vue-Quill-Editor"><a href="#Vue-Quill-Editor" class="headerlink" title="Vue-Quill-Editor"></a>Vue-Quill-Editor</h3><p>🍡Quill editor component for Vue, support SPA and SSR.</p><ul><li>基于 Quill</li><li>适用于 Vue 的富文本编辑器</li><li>支持服务端渲染</li><li>支持单页应用。</li></ul><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul><li><strong>Chrome</strong></li><li><strong>Cmder</strong></li><li><strong>Electron: 9.3.3</strong></li><li><strong>Chrome: 83.0.4103.122</strong></li><li><strong>Node.js: 12.14.1</strong></li><li><strong>V8: 8.3.110.13-electron.0</strong></li><li><strong>OS: Darwin x64 20.1.0</strong></li></ul><h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><ol><li>下载 vue-quill-editor</li></ol><p>npm install vue-quill-editor –save</p><ol start="2"><li>下载 quill（vue-quill-editor 所需依赖）</li></ol><p>npm install quill –save</p><ol start="3"><li>​</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;edit_container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">quill-editor</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">v-model</span>=<span class="string">&quot;content&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">ref</span>=<span class="string">&quot;myQuillEditor&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">:options</span>=<span class="string">&quot;editorOption&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            @<span class="attr">blur</span>=<span class="string">&quot;onEditorBlur($event)&quot;</span> @<span class="attr">focus</span>=<span class="string">&quot;onEditorFocus($event)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            @<span class="attr">change</span>=<span class="string">&quot;onEditorChange($event)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">quill-editor</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">import &#123; quillEditor &#125; from &quot;vue-quill-editor&quot;; //调用编辑器</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">import &#x27;quill/dist/quill.core.css&#x27;;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">import &#x27;quill/dist/quill.snow.css&#x27;;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">import &#x27;quill/dist/quill.bubble.css&#x27;;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">export default &#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    components: &#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">        quillEditor</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    &#125;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    data() &#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">        return &#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">            content: `<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">ol</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>Or drag/paste an image here.<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>rerew<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>rtrete<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>tytrytr<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>uytu<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span>`,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">            editorOption: &#123;&#125;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">        &#125;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    &#125;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    methods: &#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">        onEditorReady(editor) &#123; // 准备编辑器</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">        &#125;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">        onEditorBlur()&#123;&#125;, // 失去焦点事件</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">        onEditorFocus()&#123;&#125;, // 获得焦点事件</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">        onEditorChange()&#123;&#125;, // 内容改变事件</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    &#125;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    computed: &#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">        editor() &#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">            return this.$refs.myQuillEditor.quill;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">        &#125;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    &#125;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol><li>自定义 toolbar</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">s&#123;</span><br><span class="line">  <span class="attr">placeholder</span>: <span class="string">&quot;请在这里输入&quot;</span>,</span><br><span class="line">    <span class="attr">modules</span>:&#123;</span><br><span class="line">      <span class="attr">toolbar</span>:[</span><br><span class="line">        [<span class="string">&#x27;bold&#x27;</span>, <span class="string">&#x27;italic&#x27;</span>, <span class="string">&#x27;underline&#x27;</span>, <span class="string">&#x27;strike&#x27;</span>],    <span class="comment">//加粗，斜体，下划线，删除线</span></span><br><span class="line">        [<span class="string">&#x27;blockquote&#x27;</span>, <span class="string">&#x27;code-block&#x27;</span>],     <span class="comment">//引用，代码块</span></span><br><span class="line">        [&#123; <span class="string">&#x27;header&#x27;</span>: <span class="number">1</span> &#125;, &#123; <span class="string">&#x27;header&#x27;</span>: <span class="number">2</span> &#125;],        <span class="comment">// 标题，键值对的形式；1、2表示字体大小</span></span><br><span class="line">        [&#123; <span class="string">&#x27;list&#x27;</span>: <span class="string">&#x27;ordered&#x27;</span>&#125;, &#123; <span class="string">&#x27;list&#x27;</span>: <span class="string">&#x27;bullet&#x27;</span> &#125;],     <span class="comment">//列表</span></span><br><span class="line">        [&#123; <span class="string">&#x27;script&#x27;</span>: <span class="string">&#x27;sub&#x27;</span>&#125;, &#123; <span class="string">&#x27;script&#x27;</span>: <span class="string">&#x27;super&#x27;</span> &#125;],   <span class="comment">// 上下标</span></span><br><span class="line">        [&#123; <span class="string">&#x27;indent&#x27;</span>: <span class="string">&#x27;-1&#x27;</span>&#125;, &#123; <span class="string">&#x27;indent&#x27;</span>: <span class="string">&#x27;+1&#x27;</span> &#125;],     <span class="comment">// 缩进</span></span><br><span class="line">        [&#123; <span class="string">&#x27;direction&#x27;</span>: <span class="string">&#x27;rtl&#x27;</span> &#125;],             <span class="comment">// 文本方向</span></span><br><span class="line">        [&#123; <span class="string">&#x27;size&#x27;</span>: [<span class="string">&#x27;small&#x27;</span>, <span class="literal">false</span>, <span class="string">&#x27;large&#x27;</span>, <span class="string">&#x27;huge&#x27;</span>] &#125;], <span class="comment">// 字体大小</span></span><br><span class="line">        [&#123; <span class="string">&#x27;header&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="literal">false</span>] &#125;],     <span class="comment">//几级标题</span></span><br><span class="line">        [&#123; <span class="string">&#x27;color&#x27;</span>: [] &#125;, &#123; <span class="string">&#x27;background&#x27;</span>: [] &#125;],     <span class="comment">// 字体颜色，字体背景颜色</span></span><br><span class="line">        [&#123; <span class="string">&#x27;font&#x27;</span>: [] &#125;],     <span class="comment">//字体</span></span><br><span class="line">        [&#123; <span class="string">&#x27;align&#x27;</span>: [] &#125;],    <span class="comment">//对齐方式</span></span><br><span class="line">        [<span class="string">&#x27;clean&#x27;</span>],    <span class="comment">//清除字体样式</span></span><br><span class="line">        [<span class="string">&#x27;image&#x27;</span>,<span class="string">&#x27;video&#x27;</span>]    <span class="comment">//上传图片、上传视频</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>存储编码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escapeStringHTML</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  str = str.replace(<span class="regexp">/&lt;/g</span>, <span class="string">&quot;&lt;&quot;</span>);</span><br><span class="line">  str = str.replace(<span class="regexp">/&gt;/g</span>, <span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="技术点和解决方案"><a href="#技术点和解决方案" class="headerlink" title="技术点和解决方案"></a>技术点和解决方案</h2><h3 id="兼容"><a href="#兼容" class="headerlink" title="兼容"></a>兼容</h3><ul><li>ie10+</li><li>chrome 22+</li><li>safari 35+</li><li>firefox 8+</li></ul><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><ul><li>全局引入</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> VueQuillEditor <span class="keyword">from</span> <span class="string">&quot;vue-quill-editor&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// require styles</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;quill/dist/quill.core.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;quill/dist/quill.snow.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;quill/dist/quill.bubble.css&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueQuillEditor <span class="comment">/* &#123; default global options &#125; */</span>);</span><br></pre></td></tr></table></figure><ul><li>局部引入</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;quill/dist/quill.core.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;quill/dist/quill.snow.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;quill/dist/quill.bubble.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; quillEditor &#125; <span class="keyword">from</span> <span class="string">&quot;vue-quill-editor&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    quillEditor,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>按需加载</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save babel-plugin-<span class="keyword">import</span></span><br></pre></td></tr></table></figure><h3 id="服务器渲染"><a href="#服务器渲染" class="headerlink" title="服务器渲染"></a>服务器渲染</h3><p>根据环境配置 SSR：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.browser) &#123;</span><br><span class="line">  <span class="keyword">const</span> VueQuillEditor = <span class="built_in">require</span>(<span class="string">&quot;vue-quill-editor/dist/ssr&quot;</span>);</span><br><span class="line">  Vue.use(VueQuillEditor <span class="comment">/* &#123; default global options &#125; */</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- bidirectional data binding（双向数据绑定） --&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;quill-editor&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">       <span class="attr">v-model</span>=<span class="string">&quot;content&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">       <span class="attr">v-quill:myQuillEditor</span>=<span class="string">&quot;editorOption&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  &lt;!-- Or manually control the data synchronization（手动控制数据流）  --&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;quill-editor&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">       <span class="attr">:content</span>=<span class="string">&quot;content&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">       @<span class="attr">change</span>=<span class="string">&quot;onEditorChange($event)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">       <span class="attr">v-quill:myQuillEditor</span>=<span class="string">&quot;editorOption&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">content</span>: <span class="string">&#x27;&lt;p&gt;example content&lt;/p&gt;&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">editorOption</span>: &#123; <span class="comment">/* quill options */</span> &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;this is current quill instance object&#x27;</span>, <span class="built_in">this</span>.myQuillEditor)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="function"><span class="title">onEditorChange</span>(<span class="params">event</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(<span class="string">&#x27;onEditorChange&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
      
      
      <categories>
          
          <category> 技术积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 富文本编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防盗</title>
      <link href="/2020/09/13/wg8v0t/"/>
      <url>/2020/09/13/wg8v0t/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是盗链？"><a href="#什么是盗链？" class="headerlink" title="什么是盗链？"></a>什么是盗链？</h3><p><strong>盗链</strong>是指在自己的页面上展示一些并不在自己服务器上的内容。通常的做法是通过技术手段获得它人服务器上的资源地址，绕过别人的资源展示页面，直接在自己的页面上向最终用户提供此内容。比较常见的是一些小站盗用大站的资源（图片、音乐、视频、软件等），对于这些小站来说，通过盗链的方法可以减轻自己服务器的负担，因为真实的空间和流量均是来自别人的服务器。<br>防盗链系统就是防范盗链的系统，防止别人通过一些技术手段绕过本站的资源展示页面，盗用本站的资源，让绕开本站资源展示页面的资源链接失效。<br>通常防盗链是为了防止图片，视频被盗用。下面简单介绍几种防盗链的机制：<br>​</p><h3 id="1-利用-HTTP-Referer-字段"><a href="#1-利用-HTTP-Referer-字段" class="headerlink" title="1. 利用 HTTP Referer 字段"></a>1. 利用 HTTP Referer 字段</h3><p>​</p><p>HTTP 请求中会包含来自哪个 url 的点击来源，通过这个 referer 字段可以检测是否别的网站发送的请求。<br>​</p><h3 id="2-利用登录验证信息"><a href="#2-利用登录验证信息" class="headerlink" title="2.利用登录验证信息"></a>2.利用登录验证信息</h3><p>​</p><p>有些需要登录的可以通过登录的信息来检车。<br>​</p><h3 id="3-使用-cookie-中的动态验证信息"><a href="#3-使用-cookie-中的动态验证信息" class="headerlink" title="3.使用 cookie 中的动态验证信息"></a>3.使用 cookie 中的动态验证信息</h3><p>​</p><p>由服务器端产生动态 cookie，每次请求检车 cookie 的动态信息跟服务器端保存的动态信息进行比对监测。<br>​</p><h3 id="4-使用-POST-请求"><a href="#4-使用-POST-请求" class="headerlink" title="4.使用 POST 请求"></a>4.使用 POST 请求</h3><p>​</p><p>post 请求能够增加盗链的难度。<br>​</p><h3 id="5-使用图形验证码"><a href="#5-使用图形验证码" class="headerlink" title="5. 使用图形验证码"></a>5. 使用图形验证码</h3><p>​</p><p>图片验证码很常用的一种技术。<br>​</p><h3 id="6-使用动态密钥"><a href="#6-使用动态密钥" class="headerlink" title="6. 使用动态密钥"></a>6. 使用动态密钥</h3><p>​</p><p>为资源 url 动态加密生成新的 url，密钥可以临时生成，根据 url 的 id 文件名等信息进行自己的加密算法加密，访问的时候再用同样的加密算法进行验证<br>​</p><h3 id="7-在内容中插入数据"><a href="#7-在内容中插入数据" class="headerlink" title="7. 在内容中插入数据"></a>7. 在内容中插入数据</h3><p>​</p><p>可以在内容中加入哈希校验，在 url 中加入动态 hash 值</p>]]></content>
      
      
      <categories>
          
          <category> 技术积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 防盗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>精灵图</title>
      <link href="/2020/09/12/fexnr0/"/>
      <url>/2020/09/12/fexnr0/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是精灵图、雪碧图？"><a href="#什么是精灵图、雪碧图？" class="headerlink" title="什么是精灵图、雪碧图？"></a>什么是精灵图、雪碧图？</h2><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1625543116893-9793f3b2-b192-496b-b304-19fc5dc76f58.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=ZBJOv&originHeight=210&originWidth=597&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>css-sprite 是通过多张图标放到同一图层，然后通过 css 背景定位技术来设置背景图。</p><h2 id="自行生成"><a href="#自行生成" class="headerlink" title="自行生成"></a>自行生成</h2><p>会 photoshop 的同学，可以自行在该工具中创建图层，将多张图片（一般指小图标）放到同意图层。</p><h2 id="在线生成-（第三方）"><a href="#在线生成-（第三方）" class="headerlink" title="在线生成 （第三方）"></a>在线生成 （第三方）</h2><p>通过 <a href="https://css.spritegen.com/">css-sprite</a> 等在线网站，上传图标，在线生成 image、css、html</p><ul><li>打开浏览器输入网站 （或者点 👆 面链接）</li></ul><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1625543601251-8260bebc-2027-484a-97ae-b45c1dee1cd0.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=FfEcS&originHeight=1039&originWidth=1017&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h2 id="构建工具生成"><a href="#构建工具生成" class="headerlink" title="构建工具生成"></a>构建工具生成</h2><p>本文使用 webpack 构建工具生成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save webpack-spritesmith</span><br></pre></td></tr></table></figure><p>vue.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> SpritesmithPlugin = <span class="built_in">require</span>(<span class="string">&quot;webpack-spritesmith&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="keyword">new</span> SpritesmithPlugin(&#123;</span><br><span class="line">        <span class="attr">src</span>: &#123;</span><br><span class="line">          <span class="attr">cwd</span>: path.resolve(__dirname, <span class="string">&quot;static/icons&quot;</span>),</span><br><span class="line">          <span class="attr">glob</span>: <span class="string">&quot;*.png&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">target</span>: &#123;</span><br><span class="line">          <span class="attr">image</span>: path.resolve(</span><br><span class="line">            __dirname,</span><br><span class="line">            <span class="string">&quot;src/components/nav/assets/nav_sprite.png&quot;</span></span><br><span class="line">          ),</span><br><span class="line">          <span class="attr">css</span>: path.resolve(</span><br><span class="line">            __dirname,</span><br><span class="line">            <span class="string">&quot;src/components/nav/assets/nav_sprite.css&quot;</span></span><br><span class="line">          ),</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">apiOptions</span>: &#123;</span><br><span class="line">          <span class="attr">cssImageRef</span>: <span class="string">&quot;&#x27;./nav_sprite.png&#x27;&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 精灵图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度地图</title>
      <link href="/2020/09/11/mrd825/"/>
      <url>/2020/09/11/mrd825/</url>
      
        <content type="html"><![CDATA[<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><ul><li>打开<a href="https://lbsyun.baidu.com/">百度地图开发者平台</a></li><li>注册账号、登录账号</li><li>控制台</li><li>我的应用</li><li>创建应用</li><li><a href="https://lbsyun.baidu.com/index.php?title=jspopularGL/guide/getkey">获得 ak 密钥</a></li></ul><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1625644843078-61459ceb-ea8a-4058-be13-4d0c0d0f0d9f.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=tGfAl&originHeight=763&originWidth=799&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1625644897927-9a0c140a-5a27-4fb0-a72a-484226d90759.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=p7g5h&originHeight=525&originWidth=1913&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><ul><li>引入<a href="https://lbsyun.baidu.com/index.php?title=jspopularGL">百度地图 JSSDK</a></li><li>创建地图容器</li><li>通过 centerAndZoom 设置地理位置和缩放比例尺</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">src</span>=<span class="string">&quot;https://api.map.baidu.com/api?v=1.0&amp;type=webgl&amp;ak=aafKSTDs4p0zXAkRHGc5GEchvukRlD2I&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">      <span class="selector-class">.map-wraper</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mapWraper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;map-wraper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 创建百度地图地图容器</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">const</span> mapWraper = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#mapWraper&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 创建百度地图实例</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">const</span> map = <span class="keyword">new</span> BMapGL.Map(mapWraper);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 创建定位坐标轴（经、纬度）</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">const</span> point = <span class="keyword">new</span> BMapGL.Point(<span class="number">116.404</span>, <span class="number">39.915</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 设置中心点和缩放比例尺</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      map.centerAndZoom(point, <span class="number">15</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="Vue-项目中使用"><a href="#Vue-项目中使用" class="headerlink" title="Vue 项目中使用"></a>Vue 项目中使用</h2><h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><ul><li>访问 <a href="https://lbsyun.baidu.com/apiconsole/key#/home">百度地图开放平台</a> 获得 ak 密钥</li><li>public/index.html 引入百度地图 jssdk</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0,user-scalable=no&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">src</span>=<span class="string">&quot;https://api.map.baidu.com/api?v=1.0&amp;&amp;type=webgl&amp;ak=hwNUUNPWZxCFfxrnG0PitheUGLUVSNNL&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">strong</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        &gt;</span>We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work</span></span><br><span class="line"><span class="xml">        properly without JavaScript enabled. Please enable it to</span></span><br><span class="line"><span class="xml">        continue.&lt;/strong</span></span><br><span class="line"><span class="xml">      &gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>创建 BMap 组件</li></ul><p>如果项目中使用了 eslint 等相关插件，需要使用 /_ eslint-disable no-undef _/ 关闭错误提示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;map-wraper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;mapWraper&quot;</span>&gt;</span>this is bmap<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">/* eslint-disable no-undef */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; defineComponent, onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;BMap&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> mapWraper = ref(<span class="literal">null</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> map = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> init = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 初始化百度地图</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      map = <span class="keyword">new</span> BMapGL.Map(mapWraper.value);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 设置中心点和缩放比例尺</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      map.centerAndZoom(<span class="keyword">new</span> BMapGL.Point(<span class="number">116.404</span>, <span class="number">39.915</span>), <span class="number">11</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      init();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      map,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      mapWraper,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"> <span class="comment">/* 一定要设置地图容器的宽高，本人喜欢用定位解决*/</span></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.map-wraper</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">top</span>: <span class="number">44px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">bottom</span>: <span class="number">44px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>页面调用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content-wraper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    this is map page</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">BMap</span>&gt;</span><span class="tag">&lt;/<span class="name">BMap</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> BMap <span class="keyword">from</span> <span class="string">&quot;@/components/map&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;Map&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    BMap,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.content-wraper</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">position</span>: relative;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 百度地图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>better-scroll</title>
      <link href="/2020/09/06/rvabvl/"/>
      <url>/2020/09/06/rvabvl/</url>
      
        <content type="html"><![CDATA[<p>官网 <a href="https://better-/">https://better-</a>scroll.github.io/docs/zh-CN/guide/base-scroll-api.html#属性<br>如果想要彻底了解 BetterScroll，就需要了解其实例的常用属性、灵活的方法以及提供的事件与钩子。</p><h1 id="BetterScroll-托管在-NPM-上，执行如下命令安装："><a href="#BetterScroll-托管在-NPM-上，执行如下命令安装：" class="headerlink" title="BetterScroll 托管在 NPM 上，执行如下命令安装："></a>BetterScroll 托管在 NPM 上，执行如下命令安装：</h1><p>npm install @better-scroll/core –save // or yarn add @better-scroll/core<br>接下来就可以在代码中引入了，<a href="https://webpack.js.org/">webpack(opens new window)</a>等构建工具都支持从 node_modules 里引入代码：<br>import BScroll from ‘@better-scroll/core’<br>如果是 commonjs 的语法，如下：<br>var BScroll = require(‘@better-scroll/scroll’) 1.案例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;core-container&quot;</span>&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;scroll-wrapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;scroll&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;scroll-content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;scroll-item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in emojis&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clickHandler(item)&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>2.注意事项<br><strong>任何时候如果出现无法滚动的情况，都应该首先查看 content 元素高度/宽度是否大于 wrapper 的高度/宽度</strong>。这是内容能够滚动的前提条件。<br>如果内容存在图片的情况，可能会出现 DOM 元素渲染时图片还未下载，因此内容元素的高度小于预期，出现滚动不正常的情况。此时你应该在图片加载完成后，比如 onload 事件回调中，调用 bs.refresh 方法，它会重新计算最新的滚动距离。属性<br>有时候我们想基于 BetterScroll 做一些扩展，需要对 BetterScroll 的一些属性有所了解，下面介绍几个常用属性。</p><h1 id="x"><a href="#x" class="headerlink" title="x"></a>x</h1><p>类型：number<br>作用：bs 横轴坐标。</p><h1 id="y"><a href="#y" class="headerlink" title="y"></a>y</h1><p>类型：number<br>作用：bs 纵轴坐标。</p><h1 id="maxScrollX"><a href="#maxScrollX" class="headerlink" title="maxScrollX"></a>maxScrollX</h1><p>类型：number<br>作用：bs 最大横向滚动位置。<br>备注：bs 横向滚动的位置区间是 [minScrollX, maxScrollX]，并且 maxScrollX 是负值。</p><h1 id="minScrollX"><a href="#minScrollX" class="headerlink" title="minScrollX"></a>minScrollX</h1><p>类型：number<br>作用：bs 最小横向滚动位置。<br>备注：bs 横向滚动的位置区间是 [minScrollX, maxScrollX]，并且 minScrollX 是正值。</p><h1 id="maxScrollY"><a href="#maxScrollY" class="headerlink" title="maxScrollY"></a>maxScrollY</h1><p>类型：number<br>作用：bs 最大纵向滚动位置。<br>备注：bs 纵向滚动的位置区间是 [minScrollY, maxScrollY]，并且 maxScrollY 是负值。</p><h1 id="minScrollY"><a href="#minScrollY" class="headerlink" title="minScrollY"></a>minScrollY</h1><p>类型：number<br>作用：bs 最小纵向滚动位置。<br>备注：bs 纵向滚动的位置区间是 [minScrollY, maxScrollY]，并且 minScrollY 是正值。</p><h1 id="movingDirectionX"><a href="#movingDirectionX" class="headerlink" title="movingDirectionX"></a>movingDirectionX</h1><p>类型：number<br>作用：判断 bs 滑动过程中的方向（左右）。<br>备注：-1 表示手指从左向右滑，1 表示从右向左滑，0 表示没有滑动。</p><h1 id="movingDirectionY"><a href="#movingDirectionY" class="headerlink" title="movingDirectionY"></a>movingDirectionY</h1><p>类型：number<br>作用：判断 bs 滑动过程中的方向（上下）。<br>备注：-1 表示手指从上往下滑，1 表示从下往上滑，0 表示没有滑动。</p><h1 id="directionX"><a href="#directionX" class="headerlink" title="directionX"></a>directionX</h1><p>类型：number<br>作用：判断 bs 滑动结束后相对于开始滑动位置的方向（左右）。<br>备注：-1 表示手指从左向右滑，1 表示从右向左滑，0 表示没有滑动。</p><h1 id="directionY"><a href="#directionY" class="headerlink" title="directionY"></a>directionY</h1><p>类型：number<br>作用：判断 bs 滑动结束后相对于开始滑动位置的方向（上下）。<br>备注：-1 表示手指从上往下滑，1 表示从下往上滑，0 表示没有滑动。</p><h1 id="enabled"><a href="#enabled" class="headerlink" title="enabled"></a>enabled</h1><p>类型：boolean,<br>作用：判断当前 bs 是否处于启用状态，不再响应手指的操作。</p><h1 id="pending"><a href="#pending" class="headerlink" title="pending"></a>pending</h1><p>类型：boolean,<br>作用：判断当前 bs 是否处于滚动动画过程中。</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1>]]></content>
      
      
      <categories>
          
          <category> 技术积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> better-scroll </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化引入模块</title>
      <link href="/2020/09/06/ash1y0/"/>
      <url>/2020/09/06/ash1y0/</url>
      
        <content type="html"><![CDATA[<p>在开发中大型项目时，会将一个大功能拆分成一个个小功能，除了能便于模块的复用，也让模块条理清晰，后期项目更好维护。像 api 文件一般按功能划分模块，在组合时可以使用 require.context 一次引入文件夹所有的模块文件，而不需要逐个模块文件去引入。每当新增模块文件时，就只需要关注逻辑的编写和模块暴露，require.context 会帮助我们自动引入。</p><p>需要注意 require.context 并不是天生的，而是由 webpack 提供。在构建<br>webpack 在代码中解析它。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> modelCreator = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> store = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> context = <span class="built_in">require</span>.context(<span class="string">&quot;./model&quot;</span>, <span class="literal">false</span>, <span class="regexp">/\.(js|ts)$/</span>);</span><br><span class="line">  <span class="keyword">const</span> modelList = context.keys();</span><br><span class="line">  modelList.forEach(<span class="function">(<span class="params">model</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> namespace = context(model).default.namespace;</span><br><span class="line">    store[namespace] = context(model).default;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(store);</span><br><span class="line">  <span class="keyword">return</span> store;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> modelCreator();</span><br></pre></td></tr></table></figure><p>require.context 参数：</p><ul><li>文件夹路径</li><li>是否递归查找子文件夹下的模块</li><li>模块匹配规则，一般匹配文件后缀名</li></ul><p>只要是需要批量引入的场景，都可以使用这种方法。包括一些公用的全局组件，只需往文件夹内新增组件即可使用，不需要再去注册</p>]]></content>
      
      
      <categories>
          
          <category> 技术积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化引入模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>umi - 进阶</title>
      <link href="/2020/08/21/frnbms/"/>
      <url>/2020/08/21/frnbms/</url>
      
        <content type="html"><![CDATA[<h2 id="umi-配置"><a href="#umi-配置" class="headerlink" title="umi 配置"></a>umi 配置</h2><p>通过起步,我们已经知道了如何初始化创建一个 umi 脚手架的项目以及基本用法,通过 yarn create umi / npm create umi 初始化项目,这一小节介绍一下 umi 的常用配置<br>我们知道 umi 的配置项是在 umirc 中配置,还有一种方法是在 umirc 中同级创建文件夹 config,在 config/config 中我们也可以去对 umi 进行配置,需要注意的是 umirc 和 config 不能同时存在<br>以下所有代码都是在 umirc.ts 中去配置的</p><h3 id="router"><a href="#router" class="headerlink" title="router"></a>router</h3><p>配置 umi 的路由信息,这种方法是将路由抛出的一种写法,因为路由配置是一个经常需要修改的一个配置,所以这里给他抛出重新引入,因为配置项多了找起来会比较麻烦,推荐这种写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.umirc.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"><span class="comment">//路由我们可以新建文件夹直接引入</span></span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&quot;./routes&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  <span class="attr">fastRefresh</span>: &#123;&#125;,</span><br><span class="line">  routes,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/index.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//所有跟路由以下的页面都使用layouts模板</span></span><br><span class="line">    <span class="comment">//layouts模板是umi的一个约定</span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="string">&quot;@/pages/login&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/user&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="string">&quot;@/layouts&quot;</span>,</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&quot;/user&quot;</span>, <span class="attr">component</span>: <span class="string">&quot;@/pages/index&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&quot;/user/one&quot;</span>, <span class="attr">component</span>: <span class="string">&quot;@/pages/one&quot;</span> &#125;,</span><br><span class="line">      <span class="comment">//wrappers 是类似中间件的一个配置用来做一个权限的控制后边会说到这里只是演示一下router的抛出</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/user/two&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="string">&quot;@/pages/two&quot;</span>,</span><br><span class="line">        <span class="attr">wrappers</span>: [<span class="string">&quot;@/wrappers/authorization&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">component</span>: <span class="string">&quot;@/pages/404&quot;</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">component</span>: <span class="string">&quot;@/pages/404&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>还有一种是直接在 umirc.ts 中配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  <span class="attr">nodeModulesTransform</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">fastRefresh</span>: &#123;&#125;,</span><br><span class="line">  <span class="comment">//在这里直接配置,推荐上边的那种方法</span></span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="string">&quot;@/pages/login&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><p>这个配置项主要是用来修改标题的,是浏览器打开后标题显示的内容<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1625388962289-9387cc6a-c872-4b56-afbd-e0ad1867e59a.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=upq7t&originHeight=117&originWidth=543&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>配置了 title 属性后标题就会改变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;umi&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  <span class="attr">nodeModulesTransform</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//这里属于全局标题的一个配置项,他可以改变标题的内容,权重是最低的</span></span><br><span class="line">  <span class="attr">title</span>:<span class="string">&#x27;Umijs&#x27;</span></span><br><span class="line">  <span class="attr">fastRefresh</span>: &#123;&#125;,</span><br><span class="line">  <span class="comment">//路由配置</span></span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="string">&#x27;@/pages/login&#x27;</span>,</span><br><span class="line">        <span class="comment">//路由也可以配置子级的标题,如果有配置子级标题,全局标题会失效,显示子级的配置内容</span></span><br><span class="line">        <span class="attr">title</span>:<span class="string">&#x27;登录页面&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>这个配置项是一个<strong>boolean</strong>,他主要是在我们<strong>build</strong>的时候会起作用,默认配置是 false,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.umirc.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"><span class="comment">//路由我们可以新建文件夹直接引入</span></span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&quot;./routes&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  <span class="attr">fastRefresh</span>: &#123;&#125;,</span><br><span class="line">  routes,</span><br><span class="line">  <span class="attr">hash</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>………没写完</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Umi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> umijs进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>umijs</title>
      <link href="/2020/08/09/fiag3p/"/>
      <url>/2020/08/09/fiag3p/</url>
      
        <content type="html"><![CDATA[<ul><li>配置 config</li><li>使用配置式路由抽离路由文件</li><li>tsconfig.json 开启装饰器语法</li></ul><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><ul><li>npx @umijs/create-umi-app ( 墙裂推荐！！！)</li><li>yarn create @umijs/umi-app</li></ul><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><ul><li>cnpm （首选）</li><li>yarn</li></ul><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>npm run start</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>.umirc</li><li>config/config.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&quot;./routes&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&quot;path&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  <span class="attr">base</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">  <span class="comment">//生成hash文件名</span></span><br><span class="line">  <span class="attr">hash</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">//hash路由</span></span><br><span class="line">  <span class="attr">history</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;browser&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 暂时关闭</span></span><br><span class="line">  <span class="attr">pwa</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">dva</span>: &#123;</span><br><span class="line">    <span class="attr">immer</span>: <span class="literal">true</span>, <span class="comment">// 表示是否启用 immer 以方便修改 reducer</span></span><br><span class="line">    <span class="attr">hmr</span>: <span class="literal">true</span>, <span class="comment">// 表示是否启用 dva model 的热更新</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// sass配置</span></span><br><span class="line">  <span class="attr">nodeModulesTransform</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 路由配置</span></span><br><span class="line">  routes,</span><br><span class="line">  <span class="comment">//快速刷新</span></span><br><span class="line">  <span class="attr">fastRefresh</span>: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 别名配置</span></span><br><span class="line">  <span class="attr">alias</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@&quot;</span>: path.join(process.cwd(), <span class="string">&quot;src&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 代理配置(跨域处理) http://10.98.98.142:8080/</span></span><br><span class="line">  <span class="attr">proxy</span>: &#123;</span><br><span class="line">    <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">target</span>: <span class="string">&quot;http://127.0.0.1:7001&quot;</span>,</span><br><span class="line">      <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">pathRewrite</span>: &#123; <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>config/routes.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="comment">// 项目页面的入口文件</span></span><br><span class="line">    <span class="attr">component</span>: <span class="string">&quot;@/components/layout/index&quot;</span>,</span><br><span class="line">    <span class="comment">// 路由权限</span></span><br><span class="line">    <span class="comment">// hoc 高阶组件的路径</span></span><br><span class="line">    <span class="attr">wrappers</span>: [<span class="string">&quot;@/hoc/oauth&quot;</span>],</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="attr">redirect</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">        <span class="attr">exact</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>, <span class="attr">title</span>: <span class="string">&quot;主页&quot;</span>, <span class="attr">component</span>: <span class="string">&quot;@/pages/home&quot;</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Umi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> umijs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/2020/08/03/sh1eb2/"/>
      <url>/2020/08/03/sh1eb2/</url>
      
        <content type="html"><![CDATA[<h3 id="其他自动化构建工具"><a href="#其他自动化构建工具" class="headerlink" title="其他自动化构建工具"></a>其他自动化构建工具</h3><ul><li>gulp</li><li>grunt</li></ul><h3 id="常见解析器"><a href="#常见解析器" class="headerlink" title="常见解析器"></a>常见解析器</h3><ul><li>css-loader</li><li>style-loader</li><li>url-loader</li><li>file-loader</li><li>vue-loader</li><li>react-resen</li><li>sass-loader</li><li>babel-loader</li><li>html-loader</li><li>vue-style-loader</li></ul><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="什么时候用插件？"><a href="#什么时候用插件？" class="headerlink" title="什么时候用插件？"></a>什么时候用插件？</h3><p>webpack 的入口文件引入的每个文件，都需要一个 load 才可以被 webpack 解析。</p><h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><ul><li>vue-template-compiler</li><li>html-webpack-plugin</li><li>friendly-errors-webpack-plugin</li><li>babel-preset-react</li><li>extract-text-webpack-plugin | optimize-css-assets-webpack-plugin</li></ul><h3 id="webpack-环境"><a href="#webpack-环境" class="headerlink" title="webpack 环境"></a>webpack 环境</h3><ul><li>prodution 生产环境</li><li>development 开发环境</li></ul><p>入口（entry）<br>输出（output）<br>loader<br>插件（plugins）<br><strong>mode 配置环境变量</strong><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/ccd8d340-0ec7-44cd-a6fa-677f78ea8038.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=HIuXe&originHeight=83&originWidth=426&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br><strong>入口【entry】</strong><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/14327602-1cfe-4d1d-8fd3-fcfe79f9e546.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=rZ9TN&originHeight=295&originWidth=716&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br><strong>输出【output】</strong><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/8c18f412-a1c9-4e37-acce-c3f1d8bfa409.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=KnWY7&originHeight=405&originWidth=720&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br><strong>loader</strong><br><strong>错误!未指定文件名。错误!未指定文件名。</strong><img src="https://cdn.nlark.com/yuque/0/2020/png/5372847/1608160431496-316b97a7-52a4-47ef-b978-f12aa2d55858.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_YnflkLTlvabnpZY=,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10#from=url&id=oFNWb&margin=%5Bobject%20Object%5D&originHeight=46&originWidth=715&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>在更高层面，在 webpack 的配置中 loader 有两个目标：<br>​</p><p>test 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。<br>use 属性，表示进行转换时，应该使用哪个 loader。<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/23099e0a-6a0f-443c-aac3-9b112bac649a.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=y32SI&originHeight=915&originWidth=1186&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>以上在 webpack 5.x 中一些插件不兼容所以我们要记住一些插件<br>“html-webpack-plugin”: “^5.0.0-alpha.15”,//打包 html<br>“webpack-dev-server”: “^4.0.0-beta.0”,//起服务<br>//使用 vue 所需插件<br>​”vue-loader”: “^15.9.5”,<br>​”vue-style-loader”: “^4.1.2”,<br>​”vue-template-compiler”: “^2.6.12”<br>//使用 css/sass 所需插件<br>​”css-loader”: “^5.0.1”,<br>​”node-sass”: “^5.0.0”,<br>​”sass”: “^1.30.0”,<br>​”sass-loader”: “^10.1.0”,<br>​”style-loader”: “^2.0.0”,<br>​”stylus”: “^0.54.8”,<br>​”stylus-loader”: “^4.3.1”,<br>//使用图片所需插件<br>“file-loader”: “^6.2.0”,<br>“url-loader”: “^4.1.1”,<br>​”fibers”: “^5.0.0”,<br><strong>插件【plugins】</strong><br>​</p><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog1608160432017-5d17182e-8c6b-4bf1-9a13-30cc8be94270.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=kwkt0&originHeight=77&originWidth=715&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/c169c5b7-1fb4-40d3-bb3f-aa243922776a.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=O8lhs&originHeight=233&originWidth=508&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>​</p><p><strong>友好的报错提示信息</strong><br>npm install –save-dev friendly-errors-webpack-plugin<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/04e892d3-b3db-4f82-9f09-7fbc7a2ff12b.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=GJMb5&originHeight=77&originWidth=715&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 构建工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack - 入门</title>
      <link href="/2020/08/02/cb949o/"/>
      <url>/2020/08/02/cb949o/</url>
      
        <content type="html"><![CDATA[<p>手动搭建 webpack 实现常用脚手架<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog1608160432017-5d17182e-8c6b-4bf1-9a13-30cc8be94270.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=Gn0aO&originHeight=77&originWidth=715&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h2 id="webpack-是什么？"><a href="#webpack-是什么？" class="headerlink" title="webpack 是什么？"></a>webpack 是什么？</h2><p>webpack 是一个模块打包器，简单来讲，webpack 可以将我们项目中的依赖打包。</p><h2 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h2><ul><li>开发环境 mode<ul><li>development 开发环境 （文件较大）</li><li>production 生产环境 (文件较小)</li><li>none</li></ul></li><li>入口 entry<ul><li>单入口 string</li><li>多入口 array</li><li>多入口 object</li></ul></li><li>出口 output<ul><li>filename</li><li>publicPath</li></ul></li><li>解析规则 modules.rules<ul><li>test</li><li>loader 字符串形式</li><li>use 对象形式</li></ul></li><li>web 服务器 devserver<ul><li>host 域名</li><li>port 端口</li><li>hot 热更新</li><li>liveReload 热替换</li><li>compress 开启服务端 gzip 压缩</li><li>historyApiFallback html5-history 路由模式，避免页面 404</li></ul></li><li>别名 resolve.alias</li><li>扩展名 resolve.extensions</li><li>资源地图 devtool<ul><li>cheap-source-map （开发）</li><li>eval-cheap-source-map （生产）</li></ul></li><li>插件 plugins<ul><li>抽离 css （mini-css-extract-plugin）</li><li>解析 html （html-webpack-plugin）</li><li>编译进度条 （webpackbar）</li><li>合并 webpack （webpack-merge）</li><li>友好提示 （FriendlyErrorsWebpackPlugin） webpack5.x 不支持</li></ul></li></ul><h2 id="解析-vue-单文件"><a href="#解析-vue-单文件" class="headerlink" title="解析 vue 单文件"></a>解析 vue 单文件</h2><ul><li>vue-loader 解析.vue 文件</li><li>vue-template-compiler 解析 vue 中的 template 模板</li><li>vue-style-loader 解析 vue 中的 styley</li></ul><p><a href="mailto:&#x77;&#x65;&#x62;&#112;&#x61;&#99;&#x6b;&#64;&#x34;&#x2e;&#x78;">&#x77;&#x65;&#x62;&#112;&#x61;&#99;&#x6b;&#64;&#x34;&#x2e;&#x78;</a>版本以上:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; VueLoaderPlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;vue-loader&quot;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">&quot;vue-loader&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> VueLoaderPlugin()],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解析-jsx-单文件"><a href="#解析-jsx-单文件" class="headerlink" title="解析 jsx 单文件"></a>解析 jsx 单文件</h2>]]></content>
      
      
      <categories>
          
          <category> 构建工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESlint</title>
      <link href="/2020/08/01/htdt2v/"/>
      <url>/2020/08/01/htdt2v/</url>
      
        <content type="html"><![CDATA[<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ul><li>ESLint 中规则第一个值是错误级别，可以使下面的值之一：<ul><li>“off” or 0 - 关闭规则</li><li>“warn” or 1 - 将规则视为一个警告（不会影响退出码）</li><li>“error” or 2 - 将规则视为一个错误 (退出码为 1)</li></ul></li><li>ESLint 启用推进规则</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extends</span><span class="string">&quot;: &quot;</span>eslint:recommended</span><br></pre></td></tr></table></figure><ul><li>ESLint 自动修复功能</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eslint --fix</span><br></pre></td></tr></table></figure><ul><li>常见.eslintrc.js 配置文件解析</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//此项是用来告诉eslint找当前配置文件不能往父级查找</span></span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">//此项是用来指定eslint解析器的，解析器必须符合规则，babel-eslint解析器是对babel解析器的包装使其与ESLint解析</span></span><br><span class="line">  <span class="attr">parser</span>: <span class="string">&quot;babel-eslint&quot;</span>,</span><br><span class="line">  <span class="comment">//此项是用来指定javaScript语言类型和风格，sourceType用来指定js导入的方式，默认是script，此处设置为module，指某块导入方式</span></span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="comment">// 设置 script(默认) 或 module，如果代码是在ECMASCRIPT中的模块</span></span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span>,</span><br><span class="line">    <span class="attr">ecmaVersion</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">ecmaFeatures</span>: &#123;</span><br><span class="line">      <span class="attr">jsx</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 此项指定环境的全局变量，下面的配置指定为浏览器环境</span></span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">commonjs</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">es6</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">amd</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 此项是用来配置标准的js风格，就是说写代码的时候要规范的写，如果你使用vs-code我觉得应该可以避免出错</span></span><br><span class="line">  <span class="attr">extends</span>: <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">  <span class="comment">// 此项是用来提供插件的，插件名称省略了eslint-plugin-，下面这个配置是用来规范html的</span></span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&quot;html&quot;</span>, <span class="string">&quot;flow-vars&quot;</span>, <span class="string">&quot;react&quot;</span>],</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">  下面这些rules是用来设置从插件来的规范代码的规则，使用必须去掉前缀eslint-plugin-</span></span><br><span class="line"><span class="comment">    主要有如下的设置规则，可以设置字符串也可以设置数字，两者效果一致</span></span><br><span class="line"><span class="comment">    &quot;off&quot; -&gt; 0 关闭规则</span></span><br><span class="line"><span class="comment">    &quot;warn&quot; -&gt; 1 开启警告规则</span></span><br><span class="line"><span class="comment">    &quot;error&quot; -&gt; 2 开启错误规则</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="comment">// 警告</span></span><br><span class="line">    <span class="string">&quot;no-extra-parens&quot;</span>: <span class="number">1</span>, <span class="comment">// 非必要的括号</span></span><br><span class="line">    <span class="string">&quot;no-empty&quot;</span>: <span class="number">1</span>, <span class="comment">// 块语句中的内容不能为空</span></span><br><span class="line">    <span class="string">&quot;no-use-before-define&quot;</span>: [<span class="number">1</span>, <span class="string">&quot;nofunc&quot;</span>], <span class="comment">// 未定义前不能使用</span></span><br><span class="line">    <span class="string">&quot;no-unused-vars&quot;</span>: <span class="number">1</span>, <span class="comment">// 不能有声明后未被使用的变量或参数</span></span><br><span class="line">    <span class="string">&quot;no-undef&quot;</span>: <span class="number">1</span>, <span class="comment">// 不可以 有未定义的变量</span></span><br><span class="line">    <span class="comment">// vue</span></span><br><span class="line">    <span class="string">&quot;flow-vars/define-flow-type&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;flow-vars/use-flow-type&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="comment">// react</span></span><br><span class="line">    <span class="string">&quot;react/jsx-uses-react&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;react/jsx-uses-vars&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">// 代码风格</span></span><br><span class="line">    <span class="string">&quot;no-multi-spaces&quot;</span>: <span class="number">1</span>, <span class="comment">// 不能用多余的空格</span></span><br><span class="line">    <span class="string">&quot;key-spacing&quot;</span>: [</span><br><span class="line">      <span class="number">1</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 对象字面量中冒号的前后空格</span></span><br><span class="line">        <span class="attr">beforeColon</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">afterColon</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;block-scoped-var&quot;</span>: <span class="number">2</span>, <span class="comment">// 块语句中使用var</span></span><br><span class="line">    <span class="string">&quot;consistent-return&quot;</span>: <span class="number">2</span>, <span class="comment">// return 后面是否允许省略</span></span><br><span class="line">    <span class="string">&quot;accessor-pairs&quot;</span>: <span class="number">2</span>, <span class="comment">// 在对象中使用getter/setter</span></span><br><span class="line">    <span class="string">&quot;no-return-assign&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;always&quot;</span>], <span class="comment">// return 语句中不能有赋值表达式</span></span><br><span class="line">    <span class="string">&quot;no-redeclare&quot;</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 禁止重复声明变量</span></span><br><span class="line">        <span class="attr">builtinGlobals</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;space-infix-ops&quot;</span>: <span class="number">2</span>, <span class="comment">// 中缀操作符周围要不要有空格</span></span><br><span class="line">    <span class="attr">curly</span>: <span class="number">1</span>, <span class="comment">// 必须使用 if()&#123;&#125; 中的&#123;&#125;</span></span><br><span class="line">    <span class="comment">// common js</span></span><br><span class="line">    <span class="string">&quot;no-duplicate-imports&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="常用-ESlint-ruler"><a href="#常用-ESlint-ruler" class="headerlink" title="常用 ESlint ruler"></a>常用 ESlint ruler</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;no-caller&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止使用arguments.caller或arguments.callee</span></span><br><span class="line">    <span class="string">&quot;no-dupe-keys&quot;</span>: <span class="number">2</span>,<span class="comment">//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span></span><br><span class="line">    <span class="string">&quot;no-empty&quot;</span>: <span class="number">2</span>,<span class="comment">//块语句中的内容不能为空</span></span><br><span class="line">    <span class="string">&quot;no-eq-null&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止对null使用==或!=运算符</span></span><br><span class="line">    <span class="string">&quot;no-eval&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止使用eval</span></span><br><span class="line">    <span class="string">&quot;no-extra-parens&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止非必要的括号</span></span><br><span class="line">    <span class="string">&quot;no-extra-semi&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止多余的冒号</span></span><br><span class="line">    <span class="string">&quot;no-func-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止重复的函数声明</span></span><br><span class="line">    <span class="string">&quot;no-inline-comments&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止行内备注</span></span><br><span class="line">    <span class="string">&quot;no-label-var&quot;</span>: <span class="number">2</span>,<span class="comment">//label名不能与var声明的变量名相同</span></span><br><span class="line">    <span class="string">&quot;no-mixed-spaces-and-tabs&quot;</span>: [<span class="number">2</span>, <span class="literal">false</span>],<span class="comment">//禁止混用tab和空格</span></span><br><span class="line">    <span class="string">&quot;linebreak-style&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;windows&quot;</span>],<span class="comment">//换行风格</span></span><br><span class="line">    <span class="string">&quot;no-multi-spaces&quot;</span>: <span class="number">1</span>,<span class="comment">//不能用多余的空格</span></span><br><span class="line">    <span class="string">&quot;no-multiple-empty-lines&quot;</span>: [<span class="number">1</span>, &#123;<span class="string">&quot;max&quot;</span>: <span class="number">2</span>&#125;],<span class="comment">//空行最多不能超过2行</span></span><br><span class="line">    <span class="string">&quot;no-redeclare&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止重复声明变量</span></span><br><span class="line">    <span class="string">&quot;no-return-assign&quot;</span>: <span class="number">1</span>,<span class="comment">//return 语句中不能有赋值表达式</span></span><br><span class="line">    <span class="string">&quot;no-self-compare&quot;</span>: <span class="number">2</span>,<span class="comment">//不能比较自身</span></span><br><span class="line">    <span class="string">&quot;no-sparse-arrays&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止稀疏数组， [1,,2]</span></span><br><span class="line">    <span class="string">&quot;no-trailing-spaces&quot;</span>: <span class="number">1</span>,<span class="comment">//一行结束后面不要有空格</span></span><br><span class="line">    <span class="string">&quot;no-this-before-super&quot;</span>: <span class="number">0</span>,<span class="comment">//在调用super()之前不能使用this或super</span></span><br><span class="line">    <span class="string">&quot;no-undef&quot;</span>: <span class="number">1</span>,<span class="comment">//不能有未定义的变量</span></span><br><span class="line">    <span class="string">&quot;no-underscore-dangle&quot;</span>: <span class="number">1</span>,<span class="comment">//标识符不能以_开头或结尾</span></span><br><span class="line">    <span class="string">&quot;no-unused-vars&quot;</span>: [<span class="number">2</span>, &#123;<span class="string">&quot;vars&quot;</span>: <span class="string">&quot;all&quot;</span>, <span class="string">&quot;args&quot;</span>: <span class="string">&quot;after-used&quot;</span>&#125;],<span class="comment">//不能有声明后未被使用的变量或参数</span></span><br><span class="line">    <span class="string">&quot;no-use-before-define&quot;</span>: <span class="number">2</span>,<span class="comment">//未定义前不能使用</span></span><br><span class="line">    <span class="string">&quot;no-var&quot;</span>: <span class="number">0</span>,<span class="comment">//禁用var，用let和const代替</span></span><br><span class="line">    <span class="string">&quot;array-bracket-spacing&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//是否允许非空数组里面有多余的空格</span></span><br><span class="line">    <span class="string">&quot;arrow-parens&quot;</span>: <span class="number">0</span>,<span class="comment">//箭头函数用小括号括起来</span></span><br><span class="line">    <span class="string">&quot;arrow-spacing&quot;</span>: <span class="number">0</span>,<span class="comment">//=&gt;的前/后括号</span></span><br><span class="line">    <span class="string">&quot;accessor-pairs&quot;</span>: <span class="number">0</span>,<span class="comment">//在对象中使用getter/setter</span></span><br><span class="line">    <span class="string">&quot;camelcase&quot;</span>: <span class="number">2</span>,<span class="comment">//强制驼峰法命名</span></span><br><span class="line">    <span class="string">&quot;consistent-this&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;that&quot;</span>],<span class="comment">//this别名</span></span><br><span class="line">    <span class="string">&quot;default-case&quot;</span>: <span class="number">2</span>,<span class="comment">//switch语句最后必须有default</span></span><br><span class="line">    <span class="string">&quot;eqeqeq&quot;</span>: <span class="number">2</span>,<span class="comment">//必须使用全等</span></span><br><span class="line">    <span class="string">&quot;func-style&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;declaration&quot;</span>],<span class="comment">//函数风格，规定只能使用函数声明/函数表达式</span></span><br><span class="line">    <span class="string">&quot;indent&quot;</span>: [<span class="number">2</span>, <span class="number">4</span>],<span class="comment">//缩进风格</span></span><br></pre></td></tr></table></figure><h3 id="目录规范"><a href="#目录规范" class="headerlink" title="目录规范"></a>目录规范</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">├── build                      <span class="comment">// 构建相关</span></span><br><span class="line">├── config                     <span class="comment">// 配置相关</span></span><br><span class="line">├── src                        <span class="comment">// 源代码</span></span><br><span class="line">│   ├── api                    <span class="comment">// 所有请求</span></span><br><span class="line">│   ├── assets                 <span class="comment">// 主题 字体等静态资源</span></span><br><span class="line">│   ├── components             <span class="comment">// 全局公用组件</span></span><br><span class="line">│   ├── directive              <span class="comment">// 全局指令</span></span><br><span class="line">│   ├── filters                <span class="comment">// 全局 filter</span></span><br><span class="line">│   ├── icons                  <span class="comment">// 项目所有 svg icons</span></span><br><span class="line">│   ├── lang                   <span class="comment">// 国际化 language</span></span><br><span class="line">│   ├── mock                   <span class="comment">// 项目mock 模拟数据</span></span><br><span class="line">│   ├── router                 <span class="comment">// 路由</span></span><br><span class="line">│   ├── store                  <span class="comment">// 全局 store管理</span></span><br><span class="line">│   ├── styles                 <span class="comment">// 全局样式</span></span><br><span class="line">│   ├── utils                  <span class="comment">// 全局公用方法</span></span><br><span class="line">│   ├── vendor                 <span class="comment">// 公用vendor</span></span><br><span class="line">│   ├── views                  <span class="comment">// views 所有页面</span></span><br><span class="line">│   ├── App.vue                <span class="comment">// 入口页面</span></span><br><span class="line">│   ├── main.js                <span class="comment">// 入口文件 加载组件 初始化等</span></span><br><span class="line">│   └── permission.js          <span class="comment">// 权限管理</span></span><br><span class="line">├── <span class="keyword">static</span>                     <span class="comment">// 第三方不打包资源</span></span><br><span class="line">│   └── Tinymce                <span class="comment">// 富文本</span></span><br><span class="line">├── .babelrc                   <span class="comment">// babel-loader 配置</span></span><br><span class="line">├── .eslintrc.js               <span class="comment">// eslint 配置项</span></span><br><span class="line">├── .gitignore                 <span class="comment">// git 忽略项</span></span><br><span class="line">├── .travis.yml                <span class="comment">// 自动化CI配置</span></span><br><span class="line">├── favicon.ico                <span class="comment">// favicon图标</span></span><br><span class="line">├── index.html                 <span class="comment">// html模板</span></span><br><span class="line">└── package.json               <span class="comment">// package.json</span></span><br></pre></td></tr></table></figure><h3 id="数据流向规范"><a href="#数据流向规范" class="headerlink" title="数据流向规范"></a>数据流向规范</h3><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog1608160432017-5d17182e-8c6b-4bf1-9a13-30cc8be94270.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=NVkRW&originHeight=77&originWidth=715&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 构建工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
            <tag> ESlint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构 - 排序绘制</title>
      <link href="/2020/07/28/ax28b8/"/>
      <url>/2020/07/28/ax28b8/</url>
      
        <content type="html"><![CDATA[<p>我们希望可以通过不同排序方式呈现出动画中的凉凉比较的过程。<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1631604585506-021cc72a-faa6-4acc-903c-cf1f374497e0.gif#id=cfeHM&originHeight=558&originWidth=1158&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>index.html</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/reset.css&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/common.css&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/style.css&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wraper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;GET&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;arrlength&quot;</span>&gt;</span>数组长度：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;arrlength&quot;</span> <span class="attr">id</span>=<span class="string">&quot;arrlength&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;createArray&quot;</span>&gt;</span>创建数组<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;createArray&quot;</span> <span class="attr">value</span>=<span class="string">&quot;创建数组&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;array&quot;</span>&gt;</span>生成数组：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">textarea</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">name</span>=<span class="string">&quot;array&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">id</span>=<span class="string">&quot;array&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">style</span>=<span class="string">&quot;vertical-align: middle; height: auto; width: 80%&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          &gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;array&quot;</span>&gt;</span>动画效果：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;slow&quot;</span>&gt;</span>减速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;fast&quot;</span>&gt;</span>加速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;array&quot;</span>&gt;</span>排序方式：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;sort-style&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;gbubble&quot;</span>&gt;</span>冒泡排序 - generator<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bubble&quot;</span>&gt;</span>冒泡排序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;choose&quot;</span>&gt;</span>选择排序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;quiklly&quot;</span>&gt;</span>快速排序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sort-area&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sortArea&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">&quot;./js/test.js&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(test);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/sort.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>./js/utils.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: gaocaipeng</span></span><br><span class="line"><span class="comment"> * @Date: 2021-09-11 10:01:37</span></span><br><span class="line"><span class="comment"> * @Last Modified by: gaocaipeng</span></span><br><span class="line"><span class="comment"> * @Last Modified time: 2021-09-13 14:52:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SORT = &#123;</span><br><span class="line">  *<span class="function"><span class="title">gbubble</span>(<span class="params">array</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> k = i + <span class="number">1</span>; k &lt; array.length; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[i] &gt; array[k]) &#123;</span><br><span class="line">          <span class="keyword">yield</span> <span class="built_in">this</span>.insertDom(array.slice(), k);</span><br><span class="line">          <span class="keyword">var</span> temp = array[i];</span><br><span class="line">          array[i] = array[k];</span><br><span class="line">          array[k] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">bubble</span>(<span class="params">array</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> k = i + <span class="number">1</span>; k &lt; array.length; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[i] &gt; array[k]) &#123;</span><br><span class="line">          <span class="built_in">this</span>.pushList(array.slice(), k);</span><br><span class="line">          <span class="keyword">var</span> temp = array[i];</span><br><span class="line">          array[i] = array[k];</span><br><span class="line">          array[k] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>./js/index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> DEFAULT_CONFIG = &#123;</span><br><span class="line">  <span class="attr">arrayLength</span>: <span class="number">50</span>,</span><br><span class="line">  <span class="attr">array</span>: [</span><br><span class="line">    <span class="number">66</span>, <span class="number">78</span>, <span class="number">90</span>, <span class="number">22</span>, <span class="number">64</span>, <span class="number">18</span>, <span class="number">86</span>, <span class="number">32</span>, <span class="number">19</span>, <span class="number">60</span>, <span class="number">28</span>, <span class="number">24</span>, <span class="number">23</span>, <span class="number">17</span>, <span class="number">67</span>, <span class="number">82</span>, <span class="number">57</span>, <span class="number">89</span>, <span class="number">33</span>,</span><br><span class="line">    <span class="number">11</span>, <span class="number">76</span>, <span class="number">43</span>, <span class="number">79</span>, <span class="number">5</span>, <span class="number">42</span>, <span class="number">99</span>, <span class="number">14</span>, <span class="number">95</span>, <span class="number">68</span>, <span class="number">51</span>, <span class="number">4</span>, <span class="number">77</span>, <span class="number">91</span>, <span class="number">83</span>, <span class="number">27</span>, <span class="number">21</span>, <span class="number">84</span>, <span class="number">72</span>, <span class="number">8</span>,</span><br><span class="line">    <span class="number">30</span>, <span class="number">71</span>, <span class="number">52</span>, <span class="number">20</span>, <span class="number">94</span>, <span class="number">80</span>, <span class="number">29</span>, <span class="number">81</span>, <span class="number">26</span>, <span class="number">39</span>, <span class="number">53</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">sortType</span>: <span class="string">&quot;bubble&quot;</span>,</span><br><span class="line">  <span class="attr">speed</span>: <span class="number">300</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SortAnimation</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">array, arrayLength, sortType, speed</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.list = [];</span><br><span class="line">    <span class="built_in">this</span>.form = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.array = DEFAULT_CONFIG.array || array;</span><br><span class="line">    <span class="built_in">this</span>.speed = DEFAULT_CONFIG.speed || speed;</span><br><span class="line">    <span class="built_in">this</span>.sortType = DEFAULT_CONFIG.array || sortType;</span><br><span class="line">    <span class="built_in">this</span>.arrayLength = DEFAULT_CONFIG.arrayLength || arrayLength;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.sort = SORT[<span class="built_in">this</span>.sortType];</span><br><span class="line">    <span class="built_in">this</span>.init();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 添加点击事件</span></span><br><span class="line">    <span class="built_in">this</span>.addEvent();</span><br><span class="line">    <span class="comment">// 表单初始化</span></span><br><span class="line">    <span class="built_in">this</span>.initForm();</span><br><span class="line">    <span class="comment">// 数据图形初始化</span></span><br><span class="line">    <span class="built_in">this</span>.renderDom();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">initForm</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> array = utils.getElement(<span class="string">&quot;textarea[name=&#x27;array&#x27;]&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> arrayLength = utils.getElement(<span class="string">&quot;input[name=&#x27;arrlength&#x27;]&quot;</span>);</span><br><span class="line">    array.value = <span class="string">`[ <span class="subst">$&#123;<span class="built_in">this</span>.array&#125;</span> ]`</span>;</span><br><span class="line">    arrayLength.value = <span class="built_in">this</span>.arrayLength;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">createArray</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 点击生成数组，会根据数组的长度随机生成数组</span></span><br><span class="line">    <span class="built_in">this</span>.oArray = utils.getElement(<span class="string">&quot;textarea[name=&#x27;array&#x27;]&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.oArrayLength = utils.getElement(<span class="string">&quot;input[name=&#x27;arrlength&#x27;]&quot;</span>).value;</span><br><span class="line">    <span class="built_in">this</span>.array = utils.randomArray(<span class="built_in">this</span>.arrayLength);</span><br><span class="line">    <span class="built_in">this</span>.oArray.value = <span class="string">`[ <span class="subst">$&#123;<span class="built_in">this</span>.array&#125;</span> ]`</span>;</span><br><span class="line">    <span class="built_in">this</span>.clearTimer();</span><br><span class="line">    <span class="built_in">this</span>.renderDom();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">clearTimer</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.timer);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">renderDom</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> sortArea = utils.getElement(<span class="string">&quot;#sortArea&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> fragement = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line">    <span class="built_in">this</span>.array.map(<span class="function">(<span class="params">itm</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> oli = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">      <span class="keyword">const</span> ospan = <span class="built_in">document</span>.createElement(<span class="string">&quot;span&quot;</span>);</span><br><span class="line">      ospan.setAttribute(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;sort-span&quot;</span>);</span><br><span class="line">      ospan.setAttribute(<span class="string">&quot;style&quot;</span>, <span class="string">`height:<span class="subst">$&#123;itm&#125;</span>%`</span>);</span><br><span class="line">      oli.appendChild(ospan);</span><br><span class="line">      oli.setAttribute(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;sort-li&quot;</span>);</span><br><span class="line">      fragement.appendChild(oli);</span><br><span class="line">    &#125;);</span><br><span class="line">    sortArea.innerHTML = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    sortArea.appendChild(fragement);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">insertDom</span>(<span class="params">array, currentIndex</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> html = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> item = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i == currentIndex + <span class="number">1</span> || i == currentIndex) &#123;</span><br><span class="line">        item = <span class="string">`&lt;li class=&quot;sort-li&quot;&gt;&lt;span class=&quot;sort-span sort-span-curret&quot; style=&quot;height: <span class="subst">$&#123;array[i]&#125;</span>%&quot;&gt;&lt;/span&gt;&lt;/li&gt;`</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        item = <span class="string">`&lt;li class=&quot;sort-li&quot;&gt;&lt;span class=&quot;sort-span&quot; style=&quot;height:<span class="subst">$&#123;array[i]&#125;</span>%&quot;&gt;&lt;/span&gt;&lt;/li&gt;`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      html += item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">&quot;#sortArea&quot;</span>).innerHTML = html;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">pushList</span>(<span class="params">...arg</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.list.push(arg);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">animation</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> arrHis = <span class="built_in">this</span>.list;</span><br><span class="line">    <span class="built_in">this</span>.timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (arrHis.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.insertDom(arrHis[<span class="number">0</span>][<span class="number">0</span>], arrHis[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">        arrHis.shift();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clearTimer();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="built_in">this</span>.speed);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">_animation</span>(<span class="params">callback</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.timer = <span class="built_in">setInterval</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      callback();</span><br><span class="line">      <span class="built_in">this</span>.list.next();</span><br><span class="line">    &#125;, <span class="built_in">this</span>.speed);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">changeSortType</span>(<span class="params">type</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.sortType = type;</span><br><span class="line">    <span class="built_in">this</span>.sort = SORT[<span class="built_in">this</span>.sortType];</span><br><span class="line">    <span class="built_in">this</span>.clearTimer();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.sortType === <span class="string">&quot;gbubble&quot;</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.list = <span class="built_in">this</span>.sort(<span class="built_in">this</span>.array);</span><br><span class="line">      <span class="built_in">this</span>._animation(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;我想睡觉&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.sort(<span class="built_in">this</span>.array);</span><br><span class="line">      <span class="built_in">this</span>.animation();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">addEvent</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.form = utils.getElement(<span class="string">&quot;form&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.form.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">      event.preventDefault();</span><br><span class="line">      <span class="keyword">const</span> target = event.target;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        target.nodeName == <span class="string">&quot;BUTTON&quot;</span> ||</span><br><span class="line">        utils.getAttr(target, <span class="string">&quot;type&quot;</span>) == <span class="string">&quot;button&quot;</span></span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="keyword">const</span> clickElement = utils.getAttr(target, <span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="keyword">switch</span> (clickElement) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;createArray&quot;</span>:</span><br><span class="line">            <span class="built_in">this</span>.createArray();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;fast&quot;</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;fast&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;slow&quot;</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;slow&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">this</span>.changeSortType(clickElement);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> SortAnimation();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 排序绘制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Powertoys - 强大得Windows工具</title>
      <link href="/2020/07/26/xmzx9t/"/>
      <url>/2020/07/26/xmzx9t/</url>
      
        <content type="html"><![CDATA[<p><strong>Windows 10 PowerToys 小工具</strong><a href="https://www.iplaysoft.com/tag/%E5%90%88%E9%9B%86">合集</a>就像官方的外挂程序，他们的特点都是免费、简单、实用、<a href="https://www.iplaysoft.com/tag/%E5%BC%80%E6%BA%90">开源</a>。而且还会不断更新，推出新的工具。你只需更新 PowerToys，即可在主界面里选择启用 / 设置某款小工具。<br>使用 powertoys 已经有一段时间了，真的是爱了，下面简单得给同学安利一下，安装方式，具体使用自行询问谷哥、度娘 -。-</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在 cmder 一类得命令行工具中输入以下命令<br>WinGet install powertoys<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/bb12e7d1-3320-4717-9ee5-dd2750c9e88a.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=S8bBC&originHeight=591&originWidth=1064&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>好了，安装告一段落，当然你可能由于“墙”得原因需要<a href="https://bitbucket.org/letsgogo/letsgo/src/master/README.md">翻墙</a>。到了这一步我们就可以去使用了，但是有心的同学可以发现，安装后桌面并没有这个软件，可以在 window search 搜索 powertoys<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/396f7691-02ae-4894-8b55-dcd964c73269.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=JS1QE&originHeight=860&originWidth=1180&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 高效工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Powertoys </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React - Mobx - 3</title>
      <link href="/2020/07/24/ep3pv7/"/>
      <url>/2020/07/24/ep3pv7/</url>
      
        <content type="html"><![CDATA[<p>简单、可扩展的状态管理.<br>React 通过提供机制把应用状态转换为可渲染组件树并对其进行渲染。而 MobX 提供机制来存储和更新应用状态供 React 使用。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mobx --save</span><br></pre></td></tr></table></figure><h3 id="绑定库"><a href="#绑定库" class="headerlink" title="绑定库"></a>绑定库</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mobx-react --save</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>由于公司有些项目可能是版本，直接下载上述依赖可能会触发，数据改变，视图不更新，使用老版本的包即可解决，下面是依赖对应的版本号：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;mobx&quot;</span>: <span class="string">&quot;^5.15.7&quot;</span>,</span><br><span class="line">  <span class="string">&quot;mobx-react&quot;</span>: <span class="string">&quot;^6.3.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;mobx-react-lite&quot;</span>: <span class="string">&quot;^2.0.7&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/model/app.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; observable, action, makeObservable &#125; <span class="keyword">from</span> <span class="string">&quot;mobx&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 使用 makeObservable mobx6.0 才会更新视图</span></span><br><span class="line">    makeObservable(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  @observable namespace = <span class="string">&quot;app&quot;</span>; <span class="comment">//定义命名空间</span></span><br><span class="line">  @observable count = <span class="number">0</span>; <span class="comment">//定义变量</span></span><br><span class="line"></span><br><span class="line">  @action</span><br><span class="line">  add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.count++;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.count);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> App();</span><br></pre></td></tr></table></figure><h3 id="结合-react-使用"><a href="#结合-react-使用" class="headerlink" title="结合 react 使用"></a>结合 react 使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">&quot;@/components/header/header&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; inject, observer &#125; <span class="keyword">from</span> <span class="string">&quot;mobx-react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; withRouter &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line">@withRouter</span><br><span class="line">@inject(<span class="string">&quot;app&quot;</span>)</span><br><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Layout</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.props.location.pathname === <span class="string">&quot;/login&quot;</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.props.app.updateView(&#123;</span><br><span class="line">        <span class="attr">showHeader</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.props.app.updateView(&#123;</span><br><span class="line">        <span class="attr">showHeader</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;wraper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;this.props.app.showHeader ? <span class="tag">&lt;<span class="name">Header</span>&gt;</span><span class="tag">&lt;/<span class="name">Header</span>&gt;</span> : null&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Layout;</span><br></pre></td></tr></table></figure><h3 id="observable"><a href="#observable" class="headerlink" title="observable"></a>observable</h3><p>定义变量<br>值可以是 JS 基本数据类型、引用类型、普通对象、类实例、数组和映射</p><h3 id="computed"><a href="#computed" class="headerlink" title="@computed"></a><a href="https://www.yuque.com/computed">@computed</a></h3><p>声明式的创建计算属性<br>观察对象处理后的数据, 当观察对象值变化后，产生新的值<br>只对函数内的值响应<br>注：启用 decorators</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@computed get total ()&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.a + <span class="built_in">this</span>.b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里 set 将自动挂载 不需要添加装饰器</span></span><br><span class="line"><span class="keyword">set</span> <span class="title">total</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="comment">//data get方式的结果</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Cannot set total value&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">永远在 getter 之后 定义 setter</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="inject"><a href="#inject" class="headerlink" title="@inject()"></a>@inject()</h3><p>用来从 React 的 context 中挑选 store 作为 prop 传递给目标组件<br>参数是 仓库的命名空间(namespace)</p><h3 id="observer"><a href="#observer" class="headerlink" title="@observer"></a><a href="https://www.yuque.com/observer">@observer</a></h3><p>对仓库 observabl 做出响应<br>当组件中依赖项有变化时，组件自己会响应更新。</p><h4 id="componentWillReact"><a href="#componentWillReact" class="headerlink" title="componentWillReact"></a>componentWillReact</h4><p>组件中被 observable 观测的数据改变，就会触发这个生命周期</p><h3 id="action"><a href="#action" class="headerlink" title="@action"></a><a href="https://www.yuque.com/action">@action</a></h3><p>可以修改状态<br>对任何修改 observables 或具有副作用的函数使用<a href="https://www.yuque.com/action">@action</a></p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li>name<ul><li>String 类型</li><li>主要描述 action 的作用</li></ul></li><li>fn<ul><li>Function</li><li>action 的具体逻辑，即对 observable 变量的操作</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Mobx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactMobx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构 - 字典</title>
      <link href="/2020/07/24/nvhiep/"/>
      <url>/2020/07/24/nvhiep/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dictionary</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.store = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">add</span>(<span class="params">key, val</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.store[key] = val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">del</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">this</span>.store[key];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">find</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.store[key];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">has</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.store[key] === <span class="literal">undefined</span> ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="built_in">this</span>.store).length;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(<span class="built_in">this</span>.store);</span><br><span class="line">    keys.forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`key:<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;<span class="built_in">this</span>.store[key]&#125;</span>`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Dictionary;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 字典 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组结构 - 排序算法</title>
      <link href="/2020/07/22/xtng76/"/>
      <url>/2020/07/22/xtng76/</url>
      
        <content type="html"><![CDATA[<h1 id="数组结构-排序算法"><a href="#数组结构-排序算法" class="headerlink" title="数组结构 - 排序算法"></a>数组结构 - 排序算法</h1><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>从给定的数据中，随机抽出一项，这项的左边放所有比它小的，右边放比它大的，然后再分别这两边执行上述操作，采用的是递归的思想，总结出来就是 实现一层，分别给两边递归，设置好出口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fastSort</span>(<span class="params">array, head, tail</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//考虑到给每个分区操作的时候都是在原有的数组中进行操作的，所以这里head,tail来确定分片的位置</span></span><br><span class="line">  <span class="comment">/*生成随机项*/</span></span><br><span class="line">  <span class="keyword">var</span> randomnum = <span class="built_in">Math</span>.floor(ranDom(head, tail));</span><br><span class="line">  <span class="keyword">var</span> random = array[randomnum];</span><br><span class="line">  <span class="comment">/*将小于random的项放置在其左边  策略就是通过一个临时的数组来储存分好区的结果，再到原数组中替换*/</span></span><br><span class="line">  <span class="keyword">var</span> arrayTemp = [];</span><br><span class="line">  <span class="keyword">var</span> unshiftHead = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = head; i &lt;= tail; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array[i] &lt; random) &#123;</span><br><span class="line">      arrayTemp.unshift(array[i]);</span><br><span class="line">      unshiftHead++;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[i] &gt; random) &#123;</span><br><span class="line">      arrayTemp.push(array[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*当它等于的时候放哪，这里我想选择放到队列的前面，也就是从unshift后的第一个位置放置*/</span></span><br><span class="line">    <span class="keyword">if</span> (array[i] === random) &#123;</span><br><span class="line">      arrayTemp.splice(unshiftHead, <span class="number">0</span>, array[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*将对应项覆盖原来的记录*/</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = head, u = <span class="number">0</span>; j &lt;= tail; j++, u++) &#123;</span><br><span class="line">    array.splice(j, <span class="number">1</span>, arrayTemp[u]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*寻找中间项所在的index*/</span></span><br><span class="line">  <span class="keyword">var</span> nowIndex = array.indexOf(random);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*设置出口，当要放进去的片段只有2项的时候就可以收工了*/</span></span><br><span class="line">  <span class="keyword">if</span> (arrayTemp.length &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*递归，同时应用其左右两个区域*/</span></span><br><span class="line">  fastSort(array, head, nowIndex);</span><br><span class="line">  fastSort(array, nowIndex + <span class="number">1</span>, tail);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>思想就是在已经排好序的数组中插入到相应的位置，以从小到大排序为例，扫描已经排好序的片段的每一项，如大于，则继续往后，直到他小于一项时，将其插入到这项的前面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*start根据已排列好的项数决定*/</span></span><br><span class="line">  <span class="keyword">var</span> start = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">/*按顺序，每一项检查已排列好的序列*/</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = start; i &lt; array.length; start++, i++) &#123;</span><br><span class="line">    <span class="comment">/*跟已排好序的序列做对比，并插入到合适的位置*/</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; start; j++) &#123;</span><br><span class="line">      <span class="comment">/*小于或者等于时（我们是升序）插入到该项前面*/</span></span><br><span class="line">      <span class="keyword">if</span> (array[i] &lt;= array[j]) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(array[i] + <span class="string">&quot; &quot;</span> + array[j]);</span><br><span class="line">        array.splice(j, <span class="number">0</span>, array[i]);</span><br><span class="line">        <span class="comment">/*删除原有项*/</span></span><br><span class="line">        array.splice(i + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>故名思意 ，就是一个个冒泡到最前端或者最后端，主要是通过两两依次比较，以升序为例，如果前一项比后一项大则交换顺序，一直比到最后一对</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.bubbleSort = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k = i + <span class="number">1</span>; k &lt; <span class="built_in">this</span>.length; k++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>[i] &gt; <span class="built_in">this</span>[k]) &#123;</span><br><span class="line">        <span class="keyword">var</span> temp = <span class="built_in">this</span>[i];</span><br><span class="line">        <span class="built_in">this</span>[i] = <span class="built_in">this</span>[k];</span><br><span class="line">        <span class="built_in">this</span>[k] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​</p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>将当前未确定块的 min 或者 max 取出来插到最前面或者后面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.chooseSort = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> min = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k = i + <span class="number">1</span>; k &lt; <span class="built_in">this</span>.length; k++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>[k] &lt; <span class="built_in">this</span>[min]) &#123;</span><br><span class="line">        min = k;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> temp = <span class="built_in">this</span>[i];</span><br><span class="line">    <span class="built_in">this</span>[i] = <span class="built_in">this</span>[min];</span><br><span class="line">    <span class="built_in">this</span>[min] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日常工作汇报</title>
      <link href="/2020/07/21/axoqgo/"/>
      <url>/2020/07/21/axoqgo/</url>
      
        <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p><strong>每日三省吾身可以为师矣</strong><br>让领导知道我们每天、每周、每月都做了什么样的工作，工作是否饱和（工资挂钩）有没有需要协调、帮助的事情<br>让自己清楚个人每天、每周、每月都做了什么样的工作，有没有提升？有没有不足？</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>日报</li><li>周报</li><li>月报</li><li>月度总结</li></ul><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><ul><li>今日详细的任务罗列</li><li>面试题</li><li>完成率 （100%、80%、50%、0）</li><li>明日工作</li><li>需要帮助</li></ul>]]></content>
      
      
      <categories>
          
          <category> 高效工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作汇报 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目中如何更好的规划组件</title>
      <link href="/2020/07/19/wcgz3g/"/>
      <url>/2020/07/19/wcgz3g/</url>
      
        <content type="html"><![CDATA[<h1 id="Better-Components"><a href="#Better-Components" class="headerlink" title="Better Components"></a>Better Components</h1><h3 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h3><ul><li>前端框架层出不穷</li><li>在大型项目中，往往会存在不同的服务，他们负责查询、存储、数据转换、数据的提供。</li><li>web 应用随着时间的推移，会变得越来越复杂。</li></ul><h3 id="可以从三个方向，进行专注度分离"><a href="#可以从三个方向，进行专注度分离" class="headerlink" title="可以从三个方向，进行专注度分离"></a>可以从三个方向，进行专注度分离</h3><ul><li>view</li><li>view Control</li><li>Model</li></ul><h3 id="组件分为那些类型？"><a href="#组件分为那些类型？" class="headerlink" title="组件分为那些类型？"></a>组件分为那些类型？</h3><ul><li>Display Component （显示组件）</li><li>View Components （视图组件）</li><li>Higher-order Component （高阶组件）</li><li>Page Component （页面）</li><li>Global Component （全局组件）</li></ul><h4 id="Display-Component"><a href="#Display-Component" class="headerlink" title="Display Component"></a>Display Component</h4><ul><li>基于上流提供的数据进行展示</li><li>不包含复杂的逻辑</li><li>可以包含简单的逻辑（比如控制是否展示）</li><li>保持简单和小巧</li></ul><h5 id="Display-Component-分为三中主要的类型"><a href="#Display-Component-分为三中主要的类型" class="headerlink" title="Display Component 分为三中主要的类型"></a>Display Component 分为三中主要的类型</h5><ul><li>Dumb Component （木偶组件）不包含任何的状态，有可能有一些帮助渲染的逻辑，但必须聚焦 render，比如通用的 input 组件</li></ul><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/97c924b3-5f2a-46cc-b7b3-f1c9ebf3332c.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=RehfD&originHeight=876&originWidth=1398&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><ul><li>Stateful Component （带简单状态的组件）包含简单的状态管理（可用于用户的简单交互或渲染逻辑），保持简单是关键，通常在 Dumb Component 上进行扩展，以处理某些用户交互逻辑，比如 Search Fidld 组件，通过简单的状态管理，避免进行空格搜索</li></ul><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/7add8b6a-4909-418a-941c-af0787ab4d29.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=pLf0o&originHeight=896&originWidth=1432&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><ul><li>Utility Component （功能性组件） 它不会复制渲染任何东西，需要通过本身携带的数据，做一些简单的加工，比如格式化、数据转换、数据清理等操作</li></ul><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/6f79f654-6515-4113-a559-ba8207f1e49f.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=oOaDg&originHeight=1238&originWidth=1388&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h4 id="View-Component"><a href="#View-Component" class="headerlink" title="View Component"></a>View Component</h4><ul><li>会稍微复杂一点，但仍应保持简单小巧</li><li>Container （容器，由一系列 Display Component 组成）</li><li>处理其内部组件的通信</li><li>包含状态，并且状态都与其内部的组件通信有关</li><li>经常犯的错误：在内部包含数据管理（redux 等）和 fetching（服务，API），这常常会使其变得复杂</li><li>注意：它里面不应该有处理数据的获取和管理</li></ul><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/c91abcbe-d1e2-49f4-9237-a120e7ad5329.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=YnlL2&originHeight=1524&originWidth=1390&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h4 id="template-Component（Render-Props）"><a href="#template-Component（Render-Props）" class="headerlink" title="template Component（Render Props）"></a>template Component（Render Props）</h4><ul><li>模板组件是更通用的视图组件</li><li>它唯一的目的是以特定的方式渲染组件，而不仅仅是布局和样式</li><li>它可以把特定行为或功能封装成一个组件，提供给其它组件使用让其他组件拥有这样的能力</li><li>我们在项目开发中可能需要频繁的用到弹框，弹窗 ui 可以千变万化，但是功能却是类似的，及打开和关闭</li></ul><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/c31b1f82-88ea-4320-afa5-951f361a8a8b.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=SUHkb&originHeight=1516&originWidth=1346&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><p>以上是最简单的 model 实例，即使是简单的使用，我们仍需要关注它的显示状态，实现它的切换方法，但是开发者其实只想关注与业务逻辑相关的 onClick，理想的使用方式应该是这样的：</p><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/fe13a84c-81d6-4147-9934-a1f1588fca6d.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=YOt9y&originHeight=606&originWidth=1440&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/d659f410-8661-4cc8-aeed-e850d2bf9a8a.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=V3dyN&originHeight=1718&originWidth=2086&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h4 id="Higher-Order-Component"><a href="#Higher-Order-Component" class="headerlink" title="Higher-Order Component"></a>Higher-Order Component</h4><ul><li>高阶组件是接受一个组件并返回一个新组件的函数</li><li>内部很适合包含数据管理（redux，flux）和 fetching（服务，API</li><li>常见的错误： 用它处理大量的数据相关逻辑，从而使其过载</li><li>最好应该具有许多高阶组件，并使它们特定于某些方向。 然后将所有的 redux，flux，services，context 和与数据相关的逻辑放入其中。</li></ul><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/bc77ad36-9743-4a90-a5d5-9efc93f9ac55.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=al31j&originHeight=686&originWidth=1378&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/232ba501-0a9f-4b3f-bc28-c361375e588b.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=CL0an&originHeight=688&originWidth=1388&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h4 id="Page-Component"><a href="#Page-Component" class="headerlink" title="Page Component"></a>Page Component</h4><p>页面组件也可以是视图组件，也可以是在 URL 路径是下呈现的网页里许多视图组件的集合</p><p>Global Component</p><ul><li>全局组件是不需要包含在任何组件内的组件</li><li>可以通过任何组件和路径触发到视图中</li><li>比如 Notification 组件，可以通过在服务中调用方法或通过更改全局状态来触发该组件</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>每当构建组件时，都尝试将组件分解成较小的部分，然后再使用它们来组成更大的组件，从而让单个组件变成一个大组件</li><li>应该始终从 lego（乐高）的角度来对待组件，创造小零件组合成较大的组件，并附加数据管理以使其具有一个独立的块，可以使用该块来组成我们的应用程序</li></ul>]]></content>
      
      
      <categories>
          
          <category> 高效工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规划组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-图</title>
      <link href="/2020/07/18/pgz6tb/"/>
      <url>/2020/07/18/pgz6tb/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Dictionary = <span class="built_in">require</span>(<span class="string">&quot;./dictionary&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//存放图的订点</span></span><br><span class="line">    <span class="built_in">this</span>.vertices = [];</span><br><span class="line">    <span class="comment">//存放图的边</span></span><br><span class="line">    <span class="built_in">this</span>.adjList = <span class="keyword">new</span> Dictionary();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">add</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//判断vertices中是否存在这个订点， 不存在插入订点</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.vertices.includes(val)) &#123;</span><br><span class="line">      <span class="built_in">this</span>.vertices.push(val);</span><br><span class="line">      <span class="built_in">this</span>.adjList.add(val, []);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">addEdge</span>(<span class="params">a, b</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果图中没有顶点a，先添加顶点a</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.adjList.has(a)) &#123;</span><br><span class="line">      <span class="built_in">this</span>.addVertex(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果图中没有顶点b，先添加顶点b</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.adjList.has(b)) &#123;</span><br><span class="line">      <span class="built_in">this</span>.addVertex(b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.adjList.find(a).push(b);</span><br><span class="line">    <span class="built_in">this</span>.adjList.find(b).push(a);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getVertices</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.vertices;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getAdjList</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.adjList;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(this.vertices);</span></span><br><span class="line">    <span class="comment">// console.log(this.adjList);</span></span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.vertices.forEach(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">      s += <span class="string">`<span class="subst">$&#123;v&#125;</span> -&gt; `</span>;</span><br><span class="line">      <span class="built_in">this</span>.adjList.find(v).forEach(<span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">        s += <span class="string">`<span class="subst">$&#123;n&#125;</span> `</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      s += <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">const</span> graph = <span class="keyword">new</span> Graph();</span><br><span class="line"><span class="keyword">const</span> graphList = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>];</span><br><span class="line"><span class="comment">//设置访问的颜色</span></span><br><span class="line"><span class="keyword">const</span> Colors = &#123;</span><br><span class="line">  <span class="comment">//wei</span></span><br><span class="line">  <span class="attr">WHITE</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="comment">//fangwen</span></span><br><span class="line">  <span class="attr">GREY</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="comment">//tansuo</span></span><br><span class="line">  <span class="attr">BLACK</span>: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//初始化一个图订点的颜色</span></span><br><span class="line"><span class="keyword">let</span> initializeColor = <span class="function">(<span class="params">vertices</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> color = &#123;&#125;;</span><br><span class="line">  vertices.forEach(<span class="function">(<span class="params">v</span>) =&gt;</span> (color[v] = Colors.WHITE));</span><br><span class="line">  <span class="keyword">return</span> color;</span><br><span class="line">&#125;;</span><br><span class="line">graphList.forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">  graph.add(key);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">graph.addEdge(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;e&quot;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;d&quot;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">graph.toString();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> depthFirstSearch = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> verticesList = graph.getVertices();</span><br><span class="line">  <span class="keyword">const</span> adjList = graph.getAdjList();</span><br><span class="line">  <span class="keyword">const</span> initColor = initializeColor(verticesList);</span><br><span class="line">  <span class="built_in">console</span>.log(initColor);</span><br><span class="line">&#125;;</span><br><span class="line">depthFirstSearch();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令行工具 - Cmder</title>
      <link href="/2020/07/18/nz36zv/"/>
      <url>/2020/07/18/nz36zv/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是命令行？"><a href="#什么是命令行？" class="headerlink" title="什么是命令行？"></a>什么是命令行？</h2><p>命令行一般是指命令提示符，不管是 windows、macos、linux 各类系统其实本质上来讲都是面向用户的图形化界面，都是利用了 linux 底层 api 进行文件的 I/o</p><h2 id="常见工具"><a href="#常见工具" class="headerlink" title="常见工具"></a>常见工具</h2><ul><li>cmd （各个版本 windows）</li><li>powershell （win7+系统自带，按 Shift+右键）</li><li><a href="https://cmder.net/">cmder</a></li><li>terminal ( macos 自带)</li><li>zsh / iterm2</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>好了，废话不多说，如果你想要拥有一个逼格满满，好看又好用的命令行工具，<a href="https://cmder.net/">Cmder</a> 可能是你在 windows 中最值得拥有的工具之一了。<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/3fa5531a-6e7a-4ced-a431-dcbf2d8c4225.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=WV69A&originHeight=707&originWidth=1025&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>一般情况下我们选择</p>]]></content>
      
      
      <categories>
          
          <category> 高效工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行工具 </tag>
            
            <tag> Cmder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dva - 起步</title>
      <link href="/2020/07/13/ckxmqy/"/>
      <url>/2020/07/13/ckxmqy/</url>
      
        <content type="html"><![CDATA[<h1 id="Dva-起步"><a href="#Dva-起步" class="headerlink" title="Dva - 起步"></a>Dva - 起步</h1><h1 id="https-github-com-76351506-dva-cli-git"><a href="#https-github-com-76351506-dva-cli-git" class="headerlink" title="https://github.com/76351506/dva-cli.git"></a><a href="https://github.com/76351506/dva-cli.git">https://github.com/76351506/dva-cli.git</a></h1><h2 id="Dva-基础"><a href="#Dva-基础" class="headerlink" title="Dva 基础"></a>Dva 基础</h2><h3 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h3><p>model 的命名空间，同时也是他在全局 state 上的属性，只能用字符串，不支持通过 . 的方式创建多层命名空间。</p><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><p>初始值，优先级低于传给 dva() 的 opts.initialState。</p><h3 id="reducers"><a href="#reducers" class="headerlink" title="reducers"></a>reducers</h3><p>以 key/value 格式定义 reducer。用于处理同步操作，唯一可以修改 state 的地方。由 action 触发。<br>格式为 (state, action) =&gt; newState 或 [(state, action) =&gt; newState, enhancer]。<br>详见： <a href="https://github.com/dvajs/dva/blob/master/packages/dva-core/test/reducers.test.js">https://github.com/dvajs/dva/blob/master/packages/dva-core/test/reducers.test.js</a></p><h3 id="effects"><a href="#effects" class="headerlink" title="effects"></a>effects</h3><p>以 key/value 格式定义 effect。用于处理异步操作和业务逻辑，不直接修改 state。由 action 触发，可以触发 action，可以和服务器交互，可以获取全局 state 的数据等等。<br>格式为 <em>(action, effects) =&gt; void 或 [</em>(action, effects) =&gt; void, { type }]。</p><h3 id="subscriptions"><a href="#subscriptions" class="headerlink" title="subscriptions"></a>subscriptions</h3><p>以 key/value 格式定义 subscription。subscription 是订阅，用于订阅一个数据源，然后根据需要 dispatch 相应的 action。在 app.start() 时被执行，数据源可以是当前的时间、服务器的 websocket 连接、keyboard 输入、geolocation 变化、history 路由变化等等。<br>格式为 ({ dispatch, history }, done) =&gt; unlistenFunction。</p><h3 id="不会配置装饰器可参考"><a href="#不会配置装饰器可参考" class="headerlink" title="不会配置装饰器可参考"></a>不会配置装饰器可参考</h3><p><a href="https://www.yuque.com/docs/share/c4c1479e-114c-4b17-ab70-65748a3db54b#">https://www.yuque.com/docs/share/c4c1479e-114c-4b17-ab70-65748a3db54b?#</a> 《在 dva 使用装饰器》</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><ul><li>引入 history 模块</li><li>配置</li><li>index.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dva <span class="keyword">from</span> <span class="string">&quot;dva&quot;</span>;</span><br><span class="line"><span class="comment">//引入history</span></span><br><span class="line"><span class="keyword">import</span> &#123; createBrowserHistory &#125; <span class="keyword">from</span> <span class="string">&quot;history&quot;</span>;</span><br><span class="line"><span class="comment">//引入路由配置</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;router&quot;</span>;</span><br><span class="line"><span class="comment">//实例化dva</span></span><br><span class="line"><span class="keyword">const</span> app = dva(&#123; <span class="attr">history</span>: createBrowserHistory() &#125;);</span><br><span class="line"><span class="comment">//挂载路由</span></span><br><span class="line">app.router(router);</span><br><span class="line"><span class="comment">//挂载节点</span></span><br><span class="line">app.start(<span class="string">&quot;#root&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="router-路由设置"><a href="#router-路由设置" class="headerlink" title="router 路由设置"></a>router 路由设置</h3><ul><li>index.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> RouterMap <span class="keyword">from</span> <span class="string">&quot;./map&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Routes <span class="keyword">from</span> <span class="string">&quot;./routes&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RouterView</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> routes = props.routes ? props.routes : Routes;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">RouterMap</span> <span class="attr">routes</span>=<span class="string">&#123;routes&#125;</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> RouterView;</span><br></pre></td></tr></table></figure><p>routes.js —路由表</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Index <span class="keyword">from</span> <span class="string">&quot;../containers/Index&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&quot;../containers/Login&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/index&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;index&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: Index,</span><br><span class="line">    <span class="attr">token</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;login&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: Login,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>map.js–渲染路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">//引入dva/router的路由组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; Router, Route, Switch, Redirect &#125; <span class="keyword">from</span> <span class="string">&quot;dva/router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouterMap</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; routes, history &#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    <span class="keyword">const</span> defaultRoute = (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">from</span>=<span class="string">&quot;/&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/index/home&quot;</span> <span class="attr">key</span>=<span class="string">&#123;</span>&quot;<span class="attr">default</span>&quot;&#125; <span class="attr">exact</span>&gt;</span><span class="tag">&lt;/<span class="name">Redirect</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">history</span>=<span class="string">&#123;history&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">          &#123;routes</span></span><br><span class="line"><span class="xml">            .map((item) =&gt; &#123;</span></span><br><span class="line"><span class="xml">              //有children就等于否则等于【】</span></span><br><span class="line"><span class="xml">              const children = item.children === undefined ? [] : item.children;</span></span><br><span class="line"><span class="xml">              const Comp = item.component;</span></span><br><span class="line"><span class="xml">              //判断是否需要token鉴权</span></span><br><span class="line"><span class="xml">              if (item.token) &#123;</span></span><br><span class="line"><span class="xml">                if (!localStorage.getItem(&quot;token&quot;)) &#123;</span></span><br><span class="line"><span class="xml">                  return (</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Redirect</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                      <span class="attr">key</span>=<span class="string">&#123;item.name</span> + &quot;<span class="attr">red</span>&quot;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">                      <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                      <span class="attr">from</span>=<span class="string">&#123;item.path&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    /&gt;</span></span></span><br><span class="line"><span class="xml">                  );</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">              &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">              return (</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Route</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                  <span class="attr">key</span>=<span class="string">&#123;item.name</span> + &quot;<span class="attr">route</span>&quot;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">                  <span class="attr">path</span>=<span class="string">&#123;item.path&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                  <span class="attr">component</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="xml">                    return <span class="tag">&lt;<span class="name">Comp</span> <span class="attr">routes</span>=<span class="string">&#123;children&#125;</span> <span class="attr">history</span>=<span class="string">&#123;history&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Comp</span>&gt;</span>;</span></span><br><span class="line"><span class="xml">                  &#125;&#125;</span></span><br><span class="line"><span class="xml">                /&gt;</span></span><br><span class="line"><span class="xml">              );</span></span><br><span class="line"><span class="xml">            &#125;)</span></span><br><span class="line"><span class="xml">            .concat([defaultRoute])&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> RouterMap;</span><br></pre></td></tr></table></figure><h3 id="dva-路由传参"><a href="#dva-路由传参" class="headerlink" title="dva 路由传参"></a>dva 路由传参</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//state传参</span></span><br><span class="line"><span class="built_in">this</span>.props.history.push(<span class="string">&quot;/index/productDetail&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">pid</span>: text.pid,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//接收参数</span></span><br><span class="line"><span class="built_in">this</span>.props.location.state.pid;</span><br><span class="line"></span><br><span class="line">由于组件没有location我们需要使用装饰器来给组件添加方法;</span><br><span class="line"><span class="keyword">import</span> &#123; withRouter &#125; <span class="keyword">from</span> <span class="string">&quot;dva/router&quot;</span>;</span><br><span class="line"></span><br><span class="line">@withRouter</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">productDetail</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;&gt;</span><span class="tag">&lt;/&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ul><li>目录结构</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">store-</span><br><span class="line">     |-index.js  <span class="comment">//加载model</span></span><br><span class="line">     |-model文件夹</span><br><span class="line">           -| user.js<span class="comment">//用户仓库</span></span><br><span class="line">           -| home.js<span class="comment">//首页仓库</span></span><br></pre></td></tr></table></figure><p>index.js -加载所有仓库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> context = <span class="built_in">require</span>.context(<span class="string">&quot;./model&quot;</span>, <span class="literal">false</span>, <span class="regexp">/\.js$/</span>);</span><br><span class="line"><span class="comment">//通过context.keys()获取model目录下面的文件名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历文件名，获取文件内容，返回个数组</span></span><br><span class="line"><span class="keyword">const</span> getModel = context.keys().map(<span class="function">(<span class="params">key</span>) =&gt;</span> context(key));</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createModel = <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//遍历获取到的model数组集合,分别将每一个model绑定到 app.model()</span></span><br><span class="line">  <span class="keyword">return</span> getModel.map(<span class="function">(<span class="params">model</span>) =&gt;</span> app.model(model.default));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>model 文件夹-存放仓库</li><li>user.js-用户仓库</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; _getUserByToken &#125; <span class="keyword">from</span> <span class="string">&quot;@/api/user&quot;</span>;</span><br><span class="line"><span class="comment">//axios请求数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">//命名空间</span></span><br><span class="line">  <span class="attr">namespace</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">  <span class="comment">//初始值</span></span><br><span class="line">  <span class="attr">state</span>: &#123; <span class="attr">token</span>: <span class="string">&quot;&quot;</span>, <span class="attr">uid</span>: <span class="string">&quot;&quot;</span> &#125;,</span><br><span class="line">  <span class="comment">//唯一可以修改state的地方</span></span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">TOKEN</span>(<span class="params">state, &#123; payload &#125;</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 保存数据到 state</span></span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">token</span>: payload &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">UID</span>(<span class="params">stata, &#123; payload &#125;</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">uid</span>: payload &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//处理异步的state数据</span></span><br><span class="line">  <span class="attr">effects</span>: &#123;</span><br><span class="line">    *<span class="function"><span class="title">getuser</span>(<span class="params">&#123; token &#125;, &#123; put, call &#125;</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> res = <span class="keyword">yield</span> call(_getUserByToken, token);</span><br><span class="line">      <span class="comment">//判断code为1改变uid</span></span><br><span class="line">      <span class="keyword">if</span> (res.code) &#123;</span><br><span class="line">        <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">&quot;UID&quot;</span>, <span class="attr">payload</span>: res.uid &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Dva </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dva起步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构 - 二维数组</title>
      <link href="/2020/07/13/uf27bg/"/>
      <url>/2020/07/13/uf27bg/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li>一维数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通青年 一维数组</span></span><br><span class="line"><span class="keyword">const</span> monday = [<span class="string">&quot;国学&quot;</span>, <span class="string">&quot;高数&quot;</span>, <span class="string">&quot;法语&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> tuesday = [<span class="string">&quot;微机组装于维护&quot;</span>, <span class="string">&quot;c#从入门到精通&quot;</span>, <span class="string">&quot;网页设计&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> wednesday = [<span class="string">&quot;英语&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> thursday = [<span class="string">&quot;职业生涯于规划&quot;</span>, <span class="string">&quot;几何&quot;</span>, <span class="string">&quot;sql server数据库&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> friday = [<span class="string">&quot;国内外电影赏析&quot;</span>, <span class="string">&quot;大学体育&quot;</span>];</span><br></pre></td></tr></table></figure><ul><li>二维数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文艺青年 二维数组</span></span><br><span class="line"><span class="keyword">const</span> classList = [</span><br><span class="line">  [<span class="string">&quot;国学&quot;</span>, <span class="string">&quot;高数&quot;</span>, <span class="string">&quot;法语&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;微机组装于维护&quot;</span>, <span class="string">&quot;c#从入门到精通&quot;</span>, <span class="string">&quot;网页设计&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;英语&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;职业生涯于规划&quot;</span>, <span class="string">&quot;几何&quot;</span>, <span class="string">&quot;sql server数据库&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;国内外电影赏析&quot;</span>, <span class="string">&quot;大学体育&quot;</span>],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><ul><li>Array.flat()</li><li>递归</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype._flat = function () &#123;</span><br><span class="line">  const temp = [];</span><br><span class="line">  for (var i = 0; i &lt; classList.length; i++) &#123;</span><br><span class="line">    for (var c = 0; c &lt; classList[i].length; c++) &#123;</span><br><span class="line">      temp.add(classList[i][c]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return temp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 二维数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dva - api</title>
      <link href="/2020/07/11/otlu0f/"/>
      <url>/2020/07/11/otlu0f/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-dva？"><a href="#什么是-dva？" class="headerlink" title="什么是 dva？"></a>什么是 dva？</h1><p>dva 首先是一个基于 <a href="https://github.com/reduxjs/redux">redux</a> 和 <a href="https://github.com/redux-saga/redux-saga">redux-saga</a> 的数据流方案，然后为了简化开发体验，dva 还额外内置了 <a href="https://github.com/ReactTraining/react-router">react-router</a> 和 <a href="https://github.com/github/fetch">fetch</a>，所以也可以理解为一个轻量级的应用框架。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li><strong>易学易用</strong>，仅有 6 个 api，对 redux 用户尤其友好，<a href="https://umijs.org/guide/with-dva.html">配合 umi 使用</a>后更是降低为 0 API</li><li><strong>elm 概念</strong>，通过 reducers, effects 和 subscriptions 组织 model</li><li><strong>插件机制</strong>，比如 <a href="https://github.com/dvajs/dva/tree/master/packages/dva-loading">dva-loading</a> 可以自动处理 loading 状态，不用一遍遍地写 showLoading 和 hideLoading</li><li><strong>支持 HMR</strong>，基于 <a href="https://github.com/dvajs/babel-plugin-dva-hmr">babel-plugin-dva-hmr</a> 实现 components、routes 和 models 的 HMR</li></ul><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="app-dva-opts"><a href="#app-dva-opts" class="headerlink" title="app = dva(opts)"></a>app = dva(opts)</h2><p>创建应用，返回 dva 实例。(注：dva 支持多实例)<br>opts 包含：</p><ul><li>history：指定给路由用的 history，默认是 hashHistory</li><li>initialState：指定初始数据，优先级高于 model 中的 state，默认是 {}</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> createBrowserHistroy <span class="keyword">from</span> <span class="string">&quot;history/createHistroy&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> app = dva(&#123;</span><br><span class="line">  <span class="comment">// 替换history为browserHisotry</span></span><br><span class="line">  <span class="attr">history</span>: createBroserHistroy(),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="app-use-hooks"><a href="#app-use-hooks" class="headerlink" title="app.use(hooks)"></a>app.use(hooks)</h2><p>配置 hooks 或者注册插件。（插件最终返回的是 hooks ）</p><h2 id="app-model-model"><a href="#app-model-model" class="headerlink" title="app.model(model)"></a>app.model(model)</h2><p>model 是 dva 中最重要的概念。以下是典型的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">app.model(&#123;</span><br><span class="line">  <span class="attr">namespace</span>: <span class="string">&quot;todo&quot;</span>,</span><br><span class="line">  <span class="attr">state</span>: [],</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">add</span>(<span class="params">state, &#123; payload: todo &#125;</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 保存数据到 state</span></span><br><span class="line">      <span class="keyword">return</span> [...state, todo];</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">effects</span>: &#123;</span><br><span class="line">    *<span class="function"><span class="title">save</span>(<span class="params">&#123; payload: todo &#125;, &#123; put, call &#125;</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 调用 saveTodoToServer，成功后触发 `add` action 保存到 state</span></span><br><span class="line">      <span class="keyword">yield</span> call(saveTodoToServer, todo);</span><br><span class="line">      <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">&quot;add&quot;</span>, <span class="attr">payload</span>: todo &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">subscriptions</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">setup</span>(<span class="params">&#123; history, dispatch &#125;</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 监听 history 变化，当进入 `/` 时触发 `load` action</span></span><br><span class="line">      <span class="keyword">return</span> history.listen(<span class="function">(<span class="params">&#123; pathname &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (pathname === <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">          dispatch(&#123; <span class="attr">type</span>: <span class="string">&quot;load&quot;</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>model 包含 5 个属性：</p><h3 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h3><p>model 的命名空间，同时也是他在全局 state 上的属性，只能用字符串，不支持通过 . 的方式创建多层命名空间。</p><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><p>初始值，优先级低于传给 dva() 的 opts.initialState。</p><h3 id="reducers"><a href="#reducers" class="headerlink" title="reducers"></a>reducers</h3><p>以 key/value 格式定义 reducer。用于处理同步操作，唯一可以修改 state 的地方。由 action 触发。<br>格式为 (state, action) =&gt; newState 或 [(state, action) =&gt; newState, enhancer]。</p><h3 id="effects"><a href="#effects" class="headerlink" title="effects"></a>effects</h3><p>以 key/value 格式定义 effect。用于处理异步操作和业务逻辑，不直接修改 state。由 action 触发，可以触发 action，可以和服务器交互，可以获取全局 state 的数据等等。<br>格式为 <em>(action, effects) =&gt; void 或 [</em>(action, effects) =&gt; void, { type }]。<br>type 类型有：</p><ul><li>takeEvery</li><li>takeLatest</li><li>throttle</li><li>watcher</li></ul><h3 id="subscriptions"><a href="#subscriptions" class="headerlink" title="subscriptions"></a>subscriptions</h3><p>以 key/value 格式定义 subscription。subscription 是订阅，用于订阅一个数据源，然后根据需要 dispatch 相应的 action。在 app.start() 时被执行，数据源可以是当前的时间、服务器的 websocket 连接、keyboard 输入、geolocation 变化、history 路由变化等等。格式为 ({ dispatch, history }, done) =&gt; unlistenFunction。注意：如果要使用 app.unmodel()，subscription 必须返回 unlisten 方法，用于取消数据订阅。</p><h2 id="app-unmodel-namespace"><a href="#app-unmodel-namespace" class="headerlink" title="app.unmodel(namespace)"></a>app.unmodel(namespace)</h2><p>取消 model 注册，清理 reducers, effects 和 subscriptions。subscription 如果没有返回 unlisten 函数，使用 app.unmodel 会给予警告 ⚠️。</p><h2 id="app-replaceModel-model"><a href="#app-replaceModel-model" class="headerlink" title="app.replaceModel(model)"></a>app.replaceModel(model)</h2><p>替换 model 为新 model，清理旧 model 的 reducers, effects 和 subscriptions，但会保留旧的 state 状态，对于 HMR 非常有用。subscription 如果没有返回 unlisten 函数，使用 app.unmodel 会给予警告 ⚠️。<br>如果原来不存在相同 namespace 的 model，那么执行 app.model 操作</p><h2 id="app-router-history-app-gt-RouterConfig"><a href="#app-router-history-app-gt-RouterConfig" class="headerlink" title="app.router(({ history, app }) =&gt; RouterConfig)"></a>app.router(({ history, app }) =&gt; RouterConfig)</h2><p>注册路由表。<br>通常是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Router, Route &#125; <span class="keyword">from</span> <span class="string">&quot;dva/router&quot;</span>;</span><br><span class="line">app.router(<span class="function">(<span class="params">&#123; history &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">history</span>=<span class="string">&#123;history&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">component</span>=<span class="string">&#123;App&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>推荐把路由信息抽成一个单独的文件，这样结合 <a href="https://github.com/dvajs/babel-plugin-dva-hmr">babel-plugin-dva-hmr</a> 可实现路由和组件的热加载，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.router(<span class="built_in">require</span>(<span class="string">&quot;./router&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="app-start-selector"><a href="#app-start-selector" class="headerlink" title="app.start(selector?)"></a>app.start(selector?)</h2><p>启动应用。selector 可选，如果没有 selector 参数，会返回一个返回 JSX 元素的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.start(<span class="string">&quot;#root&quot;</span>);</span><br></pre></td></tr></table></figure><p>那么什么时候不加 selector？常见场景有测试、node 端、react-native 和 i18n 国际化支持。<br>比如通过 react-intl 支持国际化的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; IntlProvider &#125; <span class="keyword">from</span> <span class="string">&#x27;react-intl&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> App = app.start();</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">IntlProvider</span>&gt;</span><span class="tag">&lt;<span class="name">App</span> /&gt;</span><span class="tag">&lt;/<span class="name">IntlProvider</span>&gt;</span></span>, htmlElement);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Dva </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dva-api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - EventLoop</title>
      <link href="/2020/07/11/gli07r/"/>
      <url>/2020/07/11/gli07r/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是-Event-Loop"><a href="#什么是-Event-Loop" class="headerlink" title="什么是 Event Loop"></a>什么是 Event Loop</h3><p>Event Loop 即事件循环（事件轮询），是指浏览器或者 Node 的一种解决 JavaScript 单线程运行时不阻塞的一种机制，也就是经常使用的异步远离。</p><h2 id="EventLoop-事件循环"><a href="#EventLoop-事件循环" class="headerlink" title="EventLoop 事件循环"></a>EventLoop 事件循环</h2><p>掌握了事件循环有助于我们去理解 js 带的运行机制。</p><h2 id="事件分类"><a href="#事件分类" class="headerlink" title="事件分类"></a>事件分类</h2><ul><li>同步任务</li><li>异步任务</li></ul><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><p>代码按照上下文执行顺序一次执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步任务</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-宏任务 - 微任务;</span><br></pre></td></tr></table></figure><ul><li>同步任务 1</li><li>异步任务<ul><li>宏任务 3<ul><li>setTimeout</li><li>setInterval</li><li>setImmediate (Node 独有)</li><li>requestAnimationFrame (浏览器独有)</li><li>I/O</li><li>UI rendering (浏览器独有)</li></ul></li><li>微任务 2<ul><li>process.nextTick (Node 独有)</li><li>Promise</li><li>Object.observe</li><li>MutationObserver</li></ul></li></ul></li></ul><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1603454397680-c3b5631f-9b08-4bd9-af4a-156b8f0c3cd7.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=GynDV&originHeight=497&originWidth=1188&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h3 id="浏览器对-JavaScript-代码的执行流程如下"><a href="#浏览器对-JavaScript-代码的执行流程如下" class="headerlink" title="浏览器对 JavaScript 代码的执行流程如下"></a>浏览器对 JavaScript 代码的执行流程如下</h3><ul><li>执行代码的同步部分</li><li>把微任务队列里的任务全部执行</li><li>执行宏任务的第一个任务（执行完有可能产生微任务），如果产生了微任务，将微任务推进微任务队列</li><li>全局 Script 代码执行完毕后，调用栈 Stack 会清空；</li><li>从微队列 microtask queue 中取出位于队首的回调任务，放入调用栈 Stack 中执行，执行完后 microtask queue 长度减 1；</li><li>继续取出位于队首的任务，放入调用栈 Stack 中执行，以此类推，直到直到把 microtask queue 中的所有任务都执行完毕。注意，如果在执行 microtask 的过程中，又产生了 microtask，那么会加入到队列的末尾，也会在这个周期被调用执行；</li></ul><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1603454065279-91dd9a00-788f-492a-b457-3467499bfdcc.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=Knxeb&originHeight=327&originWidth=733&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1603454224602-f152c75d-84bb-4bb4-957b-a660c89225be.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=H6qhB&originHeight=501&originWidth=658&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>微任务队列优先于宏任务队列执行，（宏任务优先级最低）</li><li>微任务队列上创建的宏任务会被后添加到当前宏任务队列的尾端，微任务队列中创建的微任务会被添加到微任务队列的尾端。</li><li>只要微任务队列中还有任务，宏任务队列就只会等待微任务队列执行完毕后再执行</li></ul><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1603454565108-68e07e4b-0cfe-4500-81d5-81f492b83bb1.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=ORI5j&originHeight=390&originWidth=236&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h3 id="实操一下"><a href="#实操一下" class="headerlink" title="实操一下"></a>实操一下</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Promise&quot;</span>);</span><br><span class="line">  res(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个宏任务</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    p1.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个微任务</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  process.nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    p1.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line">        p1.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="number">7</span>);</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;2:&quot;</span> + res);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">8</span>);</span><br><span class="line">      &#125;, <span class="number">0</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">9</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>观察下面代码的执行顺序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">Promise</span>.resolve(<span class="number">4</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>我们可以得知，先执行同步任务，在执行异步任务。<br>异步任务当中有宏任务、微任务，先执行微任务</p><h2 id="宏任务和微任务的优先级"><a href="#宏任务和微任务的优先级" class="headerlink" title="宏任务和微任务的优先级"></a>宏任务和微任务的优先级</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">Promise</span>.resolve(<span class="number">4</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>我们可以得知，先执行同步任务，在执行异步任务。<br>异步任务当中有宏任务、微任务，先执行微任务</p><h2 id="宏任务嵌套"><a href="#宏任务嵌套" class="headerlink" title="宏任务嵌套"></a>宏任务嵌套</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">7</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">8</span>);</span><br><span class="line">  <span class="built_in">Promise</span>.resolve(<span class="number">4</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">9</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">Promise</span>.resolve(<span class="number">5</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">11</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">12</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 2 789  4 101112 5  3 6</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EventLoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构 - 二叉树</title>
      <link href="/2020/07/11/ku9gg4/"/>
      <url>/2020/07/11/ku9gg4/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构-二叉树"><a href="#数据结构-二叉树" class="headerlink" title="数据结构 - 二叉树"></a>数据结构 - 二叉树</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>又被称为二叉搜索树（binarySearchTree）</p><ul><li>根节点</li><li>左子树</li><li>右子树</li></ul><h2 id="创建二叉树"><a href="#创建二叉树" class="headerlink" title="创建二叉树"></a>创建二叉树</h2><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateNode</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.key = key;</span><br><span class="line">    <span class="built_in">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建根节点"><a href="#创建根节点" class="headerlink" title="创建根节点"></a>创建根节点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySearchTree</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.root = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建插入节点方法"><a href="#创建插入节点方法" class="headerlink" title="创建插入节点方法"></a>创建插入节点方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySearchTree</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.root = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">insert</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="keyword">new</span> CreateNode(key);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.root === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.root = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.insertNode(<span class="built_in">this</span>.root, node);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">insertNode</span>(<span class="params">root, node</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 左子树</span></span><br><span class="line">    <span class="keyword">if</span> (root.key &gt; node.key) &#123;</span><br><span class="line">      <span class="keyword">if</span> (root.left === <span class="literal">null</span>) &#123;</span><br><span class="line">        root.left = node;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.insertNode(root.left, node);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 右子树</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (root.right === <span class="literal">null</span>) &#123;</span><br><span class="line">        root.right = node;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.insertNode(root.right, node);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">print</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.root);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bst = <span class="keyword">new</span> BinarySearchTree();</span><br><span class="line">bst.insert(<span class="number">10</span>);</span><br><span class="line">bst.insert(<span class="number">5</span>);</span><br><span class="line">bst.insert(<span class="number">15</span>);</span><br><span class="line">bst.insert(<span class="number">3</span>);</span><br><span class="line">bst.insert(<span class="number">8</span>);</span><br><span class="line">bst.insert(<span class="number">1</span>);</span><br><span class="line">bst.insert(<span class="number">20</span>);</span><br><span class="line">bst.insert(<span class="number">13</span>);</span><br><span class="line">bst.print();</span><br></pre></td></tr></table></figure><p>按照上述代码，我们可以得到下图的树形结构（图有点糙，自行脑部-。-）</p><h3 id="获得树形结构的最大值-amp-最小值"><a href="#获得树形结构的最大值-amp-最小值" class="headerlink" title="获得树形结构的最大值&amp;最小值"></a>获得树形结构的最大值&amp;最小值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySearchTree</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">min</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.minNode(<span class="built_in">this</span>.root);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">minNode</span>(<span class="params">root</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过递归循环，直到找到没有left子树的节点并返回，就是树中最小的节点</span></span><br><span class="line">    <span class="keyword">while</span> (root.left != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.minNode(root.left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">max</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.maxNode(<span class="built_in">this</span>.root);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">maxNode</span>(<span class="params">root</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过递归循环，直到找到没有left子树的节点并返回，就是树中最小的节点</span></span><br><span class="line">    <span class="keyword">while</span> (root.right != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.maxNode(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h2><p>前序遍历：根节点-&gt;左子树-&gt;右子树<br>中序遍历：左子树-&gt;根节点-&gt;右子树<br>后序遍历：左子树-&gt;右子树-&gt;根节点</p><h3 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h3><ul><li>按照从左到右的顺序从根节点开始</li><li>依次遍历左子树节点（左子树左边、左子树右边）</li><li>右子树节点（右子树左边、右子树右边）</li></ul><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1631673054005-954708ae-962d-436a-b6c8-af3ad6da481a.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=FGDY1&originHeight=626&originWidth=1197&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySearchTree</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">prevOrderSearch</span>(<span class="params">callback</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.prevOrderSearchNode(<span class="built_in">this</span>.root, callback);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">prevOrderSearchNode</span>(<span class="params">node, callback</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">      callback(node.key);</span><br><span class="line">      <span class="built_in">this</span>.prevOrderSearchNode(node.left, callback);</span><br><span class="line">      <span class="built_in">this</span>.prevOrderSearchNode(node.right, callback);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bst.prevOrderSearch(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><ul><li>左子树按照从小到大依次查找 （如果最小的左子树没有了子节点，查找同级的右子树）</li><li>直到找到根节点</li><li>右子树按照从小到大依次查找 （如果最小的左子树没有了子节点，查找同级的右子树）</li></ul><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1631688200847-b03ebc86-9f70-4c43-ba8b-3b97c54b2f75.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=WOX4M&originHeight=613&originWidth=1081&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySearchTree</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">inOrderTranvers</span>(<span class="params">callback</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.inOrderTranversNode(<span class="built_in">this</span>.root, callback);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">inOrderTranversNode</span>(<span class="params">node, callback</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.inOrderTranversNode(node.left, callback);</span><br><span class="line">      callback(node.key);</span><br><span class="line">      <span class="built_in">this</span>.inOrderTranversNode(node.right, callback);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><ul><li>从小到大从左到右依次查找</li><li>找到左子树最小的值</li><li>判断有没有同级右子树，查找右子树</li><li>返回到父子树，判断父子树有没有同级，有的话查找同级，没有的话继续向上查找，</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySerachTree</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">lastOrderTranvers</span>(<span class="params">callback</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.lastOrderTranversNode(<span class="built_in">this</span>.root, callback);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">lastOrderTranversNode</span>(<span class="params">node, callback</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.lastOrderTranversNode(node.left, callback);</span><br><span class="line">      <span class="built_in">this</span>.lastOrderTranversNode(node.right, callback);</span><br><span class="line">      callback(node.key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: gaocaipeng</span></span><br><span class="line"><span class="comment"> * @Date: 2021-09-18 10:05:20</span></span><br><span class="line"><span class="comment"> * @Last Modified by:   gaocaipeng</span></span><br><span class="line"><span class="comment"> * @Last Modified time: 2021-09-18 10:05:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySearchTree</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.root = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">createNode</span>(<span class="params">key, left = <span class="literal">null</span>, right = <span class="literal">null</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      key,</span><br><span class="line">      left,</span><br><span class="line">      right,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 递归插入节点</span></span><br><span class="line">  <span class="function"><span class="title">insert</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="built_in">this</span>.createNode(key);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.root == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.root = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.insertNode(<span class="built_in">this</span>.root, newNode);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">insertNode</span>(<span class="params">node, newNode</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.key &gt; newNode.key) &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.left === <span class="literal">null</span>) &#123;</span><br><span class="line">        node.left = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.insertNode(node.left, newNode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.key &lt; newNode.key) &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">        node.right = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.insertNode(node.right, newNode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断二叉树是否包含某个值，返回布尔值</span></span><br><span class="line">  <span class="function"><span class="title">has</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.hasNode(<span class="built_in">this</span>.root, key);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">hasNode</span>(<span class="params">node, key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (node.key &lt; key) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.hasNode(node.right, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.key &gt; key) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.hasNode(node.left, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打印</span></span><br><span class="line">  <span class="function"><span class="title">print</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.root;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据某个值，查找节点树</span></span><br><span class="line">  <span class="function"><span class="title">find</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.findNode(<span class="built_in">this</span>.root, key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">findNode</span>(<span class="params">node, key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.key === key) <span class="keyword">return</span> node;</span><br><span class="line">    <span class="keyword">if</span> (node.key &lt; key) &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.right !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.findNode(node.right, key);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.key &gt; key) &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.findNode(node.left, key);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 先序列遍历 root-root-left-root-right</span></span><br><span class="line">  <span class="function"><span class="title">prevTraval</span>(<span class="params">calllback</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.prevTravalNode(<span class="built_in">this</span>.root, calllback);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">prevTravalNode</span>(<span class="params">node, calllback</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">      calllback(node.key);</span><br><span class="line">      <span class="built_in">this</span>.prevTravalNode(node.left, calllback);</span><br><span class="line">      <span class="built_in">this</span>.prevTravalNode(node.right, calllback);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 后序遍历 root-left 最小值从左到右，找到root-right  最小值从左到右，最后输出root</span></span><br><span class="line">  <span class="function"><span class="title">lastTraval</span>(<span class="params">calllback</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.lastTravalNode(<span class="built_in">this</span>.root, calllback);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">lastTravalNode</span>(<span class="params">node, calllback</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.lastTravalNode(node.left, calllback);</span><br><span class="line">      <span class="built_in">this</span>.lastTravalNode(node.right, calllback);</span><br><span class="line">      calllback(node.key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 中序遍历 从left小往大-root节点值-到right</span></span><br><span class="line">  <span class="function"><span class="title">middleTraval</span>(<span class="params">calllback</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.middleTravalNode(<span class="built_in">this</span>.root, calllback);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">middleTravalNode</span>(<span class="params">node, calllback</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.middleTravalNode(node.left, calllback);</span><br><span class="line">      calllback(node.key);</span><br><span class="line">      <span class="built_in">this</span>.middleTravalNode(node.right, calllback);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">del</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.root = <span class="built_in">this</span>.delNode(<span class="built_in">this</span>.root, key);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.root);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">delNode</span>(<span class="params">root, key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; root.key) &#123;</span><br><span class="line">      root.left = <span class="built_in">this</span>.delNode(root.left, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; root.key) &#123;</span><br><span class="line">      root.right = <span class="built_in">this</span>.delNode(root.right, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//找到要删除的节点</span></span><br><span class="line">      <span class="comment">//删除没有叶节点元素，直接将当前节点等于null</span></span><br><span class="line">      <span class="keyword">if</span> (root.left === <span class="literal">null</span> &amp;&amp; root.right === <span class="literal">null</span>) &#123;</span><br><span class="line">        root = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//删除没有左叶节点的节点，直接将当前节点，等于右节点</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (root.left === <span class="literal">null</span>) &#123;</span><br><span class="line">        root = root.right;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//删除没有右叶节点的节点，直接将当前节点，等于左节点</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (root.right === <span class="literal">null</span>) &#123;</span><br><span class="line">        root = root.left;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> prevNode = root.left;</span><br><span class="line">        <span class="keyword">while</span> (prevNode.right) &#123;</span><br><span class="line">          prevNode = prevNode.right;</span><br><span class="line">        &#125;</span><br><span class="line">        root.key = prevNode.key;</span><br><span class="line">        root.left = <span class="built_in">this</span>.delNode(root.left, prevNode.key);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bst = <span class="keyword">new</span> BinarySearchTree();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构 - 链表</title>
      <link href="/2020/07/11/cyuf7o/"/>
      <url>/2020/07/11/cyuf7o/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构-链表"><a href="#数据结构-链表" class="headerlink" title="数据结构 - 链表"></a>数据结构 - 链表</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>链表是一种非线性存储的数据结构，用来解决按照顺序进行物理存储的数据排列（想改变数据的顺序，只需要改变指针即可）</p><h2 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Link</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.key = key;</span><br><span class="line">  <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.head = <span class="keyword">new</span> Link(<span class="string">&quot;head&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">add</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> Link(key);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.head === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.head = <span class="keyword">new</span> Link(<span class="string">&quot;head&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.addNode(newNode, <span class="built_in">this</span>.head);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">addNode</span>(<span class="params">newNode, rootNode</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (rootNode.next != <span class="literal">null</span>) &#123;</span><br><span class="line">      rootNode = rootNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    rootNode.next = newNode;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">find</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">while</span> (current.key !== key) &#123;</span><br><span class="line">      <span class="keyword">if</span> (current.next == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      current = current.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">convert2array</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head.next;</span><br><span class="line">    <span class="keyword">const</span> temp = [];</span><br><span class="line">    <span class="keyword">while</span> (current) &#123;</span><br><span class="line">      temp.push(current.key);</span><br><span class="line">      current = current.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.head);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = LinkedList;</span><br></pre></td></tr></table></figure><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构 - 队列</title>
      <link href="/2020/07/11/wxiegt/"/>
      <url>/2020/07/11/wxiegt/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dictionary</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.store = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">add</span>(<span class="params">key, val</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.store[key] = val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">del</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">this</span>.store[key];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">find</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.store[key];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">has</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.store[key] === <span class="literal">undefined</span> ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="built_in">this</span>.store).length;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(<span class="built_in">this</span>.store);</span><br><span class="line">    keys.forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`key:<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;<span class="built_in">this</span>.store[key]&#125;</span>`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Dictionary;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组方法 - 实现原理</title>
      <link href="/2020/07/11/tdy3e4/"/>
      <url>/2020/07/11/tdy3e4/</url>
      
        <content type="html"><![CDATA[<h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>数组用来将一些较为复杂的数据组合的一起的参数序列</p><h2 id="常用方法实现"><a href="#常用方法实现" class="headerlink" title="常用方法实现"></a>常用方法实现</h2><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p>向数组尾部追加元素，数组长度+1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype._push = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>[<span class="built_in">this</span>.length] = val;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><p>删除数组尾部第一个元素，数组长度-1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype._pop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> temp = <span class="built_in">this</span>[<span class="built_in">this</span>.length - <span class="number">1</span>];</span><br><span class="line">  <span class="built_in">this</span>.length--;</span><br><span class="line">  <span class="keyword">return</span> temp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h3><p>删除数组头部第一个元素，数组长度 -1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype._shift = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> temp = <span class="built_in">this</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">    <span class="built_in">this</span>[i - <span class="number">1</span>] = <span class="built_in">this</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.length--;</span><br><span class="line">  <span class="keyword">return</span> temp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h3><p>数组头部添加一个元素，之前元素后移一位，长度 +1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype._unshift = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = [...arguments, ...this];</span><br><span class="line">  <span class="built_in">this</span>.length = arr.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="built_in">this</span>[i] = arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype._some = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> callback !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;只能接受一个函数&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (callback(<span class="built_in">this</span>[i])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = arr._some(<span class="function"><span class="keyword">function</span> (<span class="params">itm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> itm == <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype._reduce = <span class="function"><span class="keyword">function</span> (<span class="params">reducer, init</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">    init = reducer(init, <span class="built_in">this</span>[i], i, <span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> init;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = arr._reduce(<span class="function"><span class="keyword">function</span> (<span class="params">prev, curr, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> prev + curr;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.together = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...this, ...arr];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="together"><a href="#together" class="headerlink" title="together"></a>together</h2><p>Array.prototype.together = function (arr) { return […this, …arr]; };</p><h2 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.include = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> hasVal = <span class="built_in">this</span>.some(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item === val;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> hasVal;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.join();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="size"><a href="#size" class="headerlink" title="size"></a>size</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.size = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.delete = <span class="function"><span class="keyword">function</span> (<span class="params">index, count</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = index; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">    <span class="built_in">this</span>[i] = <span class="built_in">this</span>[i + count];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.length = <span class="built_in">this</span>.length - count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="addFirst"><a href="#addFirst" class="headerlink" title="addFirst"></a>addFirst</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="built_in">this</span>.length; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">  <span class="built_in">this</span>[i] = <span class="built_in">this</span>[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>[<span class="number">0</span>] = val;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br></pre></td></tr></table></figure><h2 id="unshift-1"><a href="#unshift-1" class="headerlink" title="unshift"></a>unshift</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.insert = <span class="function"><span class="keyword">function</span> (<span class="params">val, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _this = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">if</span> (val <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">    val.forEach(<span class="function">(<span class="params">itm, ind</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="built_in">this</span>.length; i &gt;= index + ind; i--) &#123;</span><br><span class="line">        <span class="built_in">this</span>[i] = <span class="built_in">this</span>[i - <span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>[index + ind] = itm;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="built_in">this</span>.length; i &gt;= index; i--) &#123;</span><br><span class="line">      <span class="built_in">this</span>[i] = <span class="built_in">this</span>[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>[index] = val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>remove</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.removal = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//方案一：</span></span><br><span class="line">  <span class="comment">//利用对象的属性是唯一的特性，来实现去重</span></span><br><span class="line">  <span class="keyword">let</span> list = &#123;&#125;;</span><br><span class="line">  <span class="built_in">this</span>.forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (list[key] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">      list[key] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 方案二:</span></span><br><span class="line">  <span class="comment">//利用链表,来实现去重</span></span><br><span class="line">  <span class="comment">// let list = new LinkedList();</span></span><br><span class="line">  <span class="comment">// this.forEach(key =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//     if (list.find(key) === false) &#123;</span></span><br><span class="line">  <span class="comment">//         list.add(key);</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line">  <span class="comment">// &#125;);</span></span><br><span class="line">  <span class="comment">// return list.convert2array();</span></span><br><span class="line">  <span class="comment">//方案三</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(<span class="built_in">this</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React - Mobx - 2</title>
      <link href="/2020/07/10/glyfdc/"/>
      <url>/2020/07/10/glyfdc/</url>
      
        <content type="html"><![CDATA[<p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1611658682375-cfc8354f-2937-458d-8821-466e735c879f.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=WcKwk&originHeight=540&originWidth=816&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h1 id="mobx"><a href="#mobx" class="headerlink" title="mobx"></a>mobx</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>MobX 是响应式编程，实现状态的存储和管理。使用 MobX 将应用变成响应式可归纳为三部 曲：</p><ul><li>定义状态并使其可观察</li><li>创建视图以响应状态的变化</li><li>更改状态<ol><li> observable 是将类属性等进行标记，实现对其的观察。三部曲中的第一曲，就是通过 Observable 实现的。</li><li> 通过 action 改变 state。三部曲中的第一曲通过 action 创建一个动作。action 函数是对传入的 function 进行一次包装，使得 function 中的 observable 对象的变化能够被观察到，从而触发相应的衍生。</li></ol></li></ul><h3 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h3><p>mobx 和 vue 一样的数据监听，底层通过 Object.defineProperty 或 Proxy 来劫持数据，可以做到更细粒度的渲染。<br>在 react 中反而把更新组件的操作（setState）交给了使用者，由于 setState 的”异步”特性导致了没法立刻拿到更新后的 state。</p><h3 id="依赖收集"><a href="#依赖收集" class="headerlink" title="依赖收集"></a>依赖收集</h3><p>在 mobx 中，通过 autorun 和 reaction 对依赖的数据进行了收集（可以通过 get 来收集），一旦这些数据发生了变化，就会执行接受到的函数，和发布订阅很相似。<br>mobx-react 中则提供了 observer 方法，用来收集组件依赖的数据，一旦这些数据变化，就会触发组件的重新渲染。</p><h3 id="管理局部状态"><a href="#管理局部状态" class="headerlink" title="管理局部状态"></a>管理局部状态</h3><p>在 react 中，我们更新状态需要使用 setState，但是 setState 后并不能立马拿到更新后的 state，虽然 setState 提供了一个回调函数，我们也可以用 Promise 来包一层，但终究还是个异步的方式。<br>在 mobx 中，我们可以直接在 react 的 class 里面用 observable 声明属性来代替 state，这样可以立马拿到更新后的值，而且 observer 会做一些优化，避免了频繁 render。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  @observable count = <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  @action</span><br><span class="line">  <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.count = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">this</span>.count = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">this</span>.count = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="react-mobx"><a href="#react-mobx" class="headerlink" title="react-mobx"></a>react-mobx</h1><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><p>计算值(computed values)是可以根据现有的状态或其它计算值衍生出的值。简单理解为对可观察数据做出的反应，多个可观察属性进行处理，然后返回一个可观察属性使用方式：1、作为普通函数，2、作为 decorator</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;observable&#125; form <span class="string">&#x27;mobx&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span></span>&#123;</span><br><span class="line">    @observable arr = [];</span><br><span class="line">    @observable obj = &#123;&#125;;</span><br><span class="line">    @observable mao = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">    @observable num = <span class="number">1</span>;</span><br><span class="line">    @observable str = <span class="string">&#x27;str&#x27;</span>;</span><br><span class="line">    @observable bool = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 作为decorator</span></span><br><span class="line">    @computed <span class="keyword">get</span> <span class="title">mixed</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> store.str + <span class="string">&#x27;/&#x27;</span>+ store.num</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Store();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 作为普通函数</span></span><br><span class="line"><span class="keyword">let</span> foo = computed(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> store.str + <span class="string">&#x27;/&#x27;</span>+ store.num</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// computed 接收一个方法，里面可以使用被观察的属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监控数据变化的回调，当foo里面的被观察属性变化的时候 都会调用这个方法</span></span><br><span class="line">foo.observe(<span class="function"><span class="keyword">function</span>(<span class="params">change</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(change) <span class="comment">// 包含改变值foo改变前后的值</span></span><br><span class="line">&#125;)</span><br><span class="line">store.str = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">sotre.num = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="autorun"><a href="#autorun" class="headerlink" title="autorun"></a>autorun</h3><p>当我们使用 decorator 来使用 computed,我们就无法得到改变前后的值了，这样我们就要使用 autorun 方法。从方法名可以看出是“自动运行”。所以我们要明确两点：自动运行什么，怎么触发自动运行自动运行传入 autorun 的参数，修改传入的 autorun 的参数修改的时候会触发自动运行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;observable,autorun&#125; form <span class="string">&#x27;mobx&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span></span>&#123;</span><br><span class="line">    @observable arr = [];</span><br><span class="line">    @observable obj = &#123;&#125;;</span><br><span class="line">    @observable mao = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">    @observable num = <span class="number">1</span>;</span><br><span class="line">    @observable str = <span class="string">&#x27;str&#x27;</span>;</span><br><span class="line">    @observable bool = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 作为decorator</span></span><br><span class="line">    @computed <span class="keyword">get</span> <span class="title">mixed</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> store.str + <span class="string">&#x27;/&#x27;</span>+ store.num</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Store();</span><br><span class="line">autorun(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(store.str + <span class="string">&#x27;/&#x27;</span>+ store.num)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.str = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">sotre.num = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="when"><a href="#when" class="headerlink" title="when"></a>when</h3><p>用法： when(predicate: () =&gt; boolean, effect?: () =&gt; void, options?)<br>when 观察并运行给定的 predicate，直到返回 true。 一旦返回 true，给定的<br>effect 就会被执行，然后 autorunner(自动运行程序) 会被清理。<br>该函数返回一个清理器以提前取消自动运行程序。<br>when 方法接收两个参数（两个方法），第一个参数根据可观察属性的值做出判断<br>返回一个 boolean 值，当为 true 的时候，执行第二个参数。如果一开始就返回<br>一个 true,就会立即执行后面的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;observable,when&#125; form <span class="string">&#x27;mobx&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span></span>&#123;</span><br><span class="line">    @observable arr = [];</span><br><span class="line">    @observable obj = &#123;&#125;;</span><br><span class="line">    @observable mao = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">    @observable num = <span class="number">1</span>;</span><br><span class="line">    @observable str = <span class="string">&#x27;str&#x27;</span>;</span><br><span class="line">    @observable bool = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 作为decorator</span></span><br><span class="line">    @computed <span class="keyword">get</span> <span class="title">mixed</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> store.str + <span class="string">&#x27;/&#x27;</span>+ store.num</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Store();</span><br><span class="line"></span><br><span class="line">when(<span class="function">() =&gt;</span> store.bool,<span class="function">()=&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;it&#x27;</span>s a  <span class="literal">true</span>)</span><br><span class="line">&#125;)</span><br><span class="line">store.bool = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="computed-1"><a href="#computed-1" class="headerlink" title="computed"></a>computed</h3><p>computed 是基于现有状态或计算值衍生出的值<br>如下面 todoList 的例子，一旦已完成事项数量改变，那么 completedCount 会自动更新。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoStore</span> </span>&#123;</span><br><span class="line">  @observable todos = [];</span><br><span class="line">  @computed <span class="keyword">get</span> <span class="title">completedCount</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span>.todos.filter(<span class="function">(<span class="params">todo</span>) =&gt;</span> todo.isCompleted) || []).length;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="reaction"><a href="#reaction" class="headerlink" title="reaction"></a>reaction</h3><p>reaction 则是和 autorun 功能类似，但是 autorun 会立即执行一次，而 reaction 不会，使用 reaction 可以在监听到指定数据变化的时候执行一些操作，有利于和副作用代码解耦。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当todos改变的时候将其存入缓存</span></span><br><span class="line">reaction(</span><br><span class="line">  <span class="function">() =&gt;</span> toJS(<span class="built_in">this</span>.todos),</span><br><span class="line">  <span class="function">(<span class="params">todos</span>) =&gt;</span></span><br><span class="line">    <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;mobx-react-todomvc-todos&quot;</span>, <span class="built_in">JSON</span>.stringify(&#123; todos &#125;))</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>用法：reaction(() =&gt; data, (data, reaction) =&gt; { sideEffect }, options?)<br>它接收两个函数参数，第一个(数据函数)是用来追踪并返回数据作为第二个函数(效果函数)的输入。不同于 autorun 的是当创建时效果函数不会直接运行(第二个参数不会立即执行， autorun 会立即执行传入的参数方法)，只有在数据表达式首次返回一个新值后才会运行。在执行效果函数时访问的任何 observable 都不会被追踪。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;observable,reaction&#125; form <span class="string">&#x27;mobx&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span></span>&#123;</span><br><span class="line">    @observable arr = [];</span><br><span class="line">    @observable obj = &#123;&#125;;</span><br><span class="line">    @observable mao = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">    @observable num = <span class="number">1</span>;</span><br><span class="line">    @observable str = <span class="string">&#x27;str&#x27;</span>;</span><br><span class="line">    @observable bool = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 作为decorator</span></span><br><span class="line">    @computed <span class="keyword">get</span> <span class="title">mixed</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> store.str + <span class="string">&#x27;/&#x27;</span>+ store.num</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Store();</span><br><span class="line"></span><br><span class="line">reaction(<span class="function">() =&gt;</span> [store.str,store.num],<span class="function">(<span class="params">arr</span>) =&gt;</span> <span class="built_in">console</span>.log(arr.join(<span class="string">&#x27;\&#x27;)))</span></span><br><span class="line"><span class="string">store.str = &#x27;</span><span class="number">1</span><span class="string">&#x27;;</span></span><br><span class="line"><span class="string">sotre.num = 2;</span></span><br></pre></td></tr></table></figure><h3 id="action："><a href="#action：" class="headerlink" title="action："></a>action：</h3><p>在 redux 中，唯一可以更改 state 的途径便是 dispatch 一个 action。这种<br>约束性带来的一个好处是可维护性。整个 state 只要改变必定是通过 action 触发的，对此只要找到 reducer 中对应的 action 便能找到影响数据改变的原因。强约束性是好<br>的，但是 Redux 要达到约束性的目的，似乎要写许多样板代码，虽说有许多库都在解决该问题，然而 Mobx 从根本上来说会更加优雅。 首先 Mobx 并不强制所有 state 的改变必须通过 action 来改变，这主要适用于一些较小的项目。对于较大型的，需要多人合作的项目来说，可以使用 Mobx 提供的 api configure 来强制。</p><h3 id="observer"><a href="#observer" class="headerlink" title="observer"></a>observer</h3><p>mobx-react 的 observer 就将组件的 render 方法包装为 autorun，所以当可观察属性的改变的时候，会执行 render 方法。</p><h3 id="observable"><a href="#observable" class="headerlink" title="observable"></a>observable</h3><p>observable 是一种让数据的变化可以被观察的方法<br>observable(value) 是一个便捷的 API ，此 API 只有在它可以被制作成可观察的数据结构(数组、映射或 observable 对象)时才会成功。对于所有其他值，不会执行转换。</p><h2 id="项目工程化"><a href="#项目工程化" class="headerlink" title="项目工程化"></a>项目工程化</h2><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1611659045248-dad33934-49c4-48d6-80a9-dfccbe5a71c0.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=H4uKb&originHeight=435&originWidth=601&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>mobx 中的 store 的创建偏向于面向对象的形式<br>action 和 dataModel 一起组合成了页面的总 store，dataModel 只存放 UI 数据以及只涉及自身数据变化的 action 操作（在 mobx 严格模式中，修改数据一定要用 action 或 flow）。<br>action store 则是负责存放一些需要使用来自不同 store 数据的 action 操作。<br>dataModel 更像 MVC 中的 model，action store 是 controller，react components 则是 view，三者构成了 mvc 的结构。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">-stores -</span><br><span class="line">  actions -</span><br><span class="line">  hotelListAction.js -</span><br><span class="line">  dataModel -</span><br><span class="line">  globalStatus.js -</span><br><span class="line">  hotelList.js -</span><br><span class="line">  index.js;</span><br><span class="line"><span class="comment">// globalStatus</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GlobalStatus</span> </span>&#123;</span><br><span class="line">  @observable isShowLoading = <span class="literal">false</span>;</span><br><span class="line">  @action showLoading = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.isShowLoading = <span class="literal">true</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  @action hideLoading = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.isShowLoading = <span class="literal">false</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// hotelList</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HotelList</span> </span>&#123;</span><br><span class="line">  @observable hotels = [];</span><br><span class="line">  @action addHotels = <span class="function">(<span class="params">hotels</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.hotels = [...toJS(<span class="built_in">this</span>.hotels), ...hotels];</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// hotelListAction</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HotelListAction</span> </span>&#123;</span><br><span class="line">  fetchHotelList = flow(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; globalStatus, hotelList &#125; = <span class="built_in">this</span>.rootStore;</span><br><span class="line">    globalStatus.showLoading();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">yield</span> fetch(<span class="string">&quot;/hoteList&quot;</span>, params);</span><br><span class="line">      hotelList.addHotels(res.hotels);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      globalStatus.hideLoading();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).bind(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Mobx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactMobx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据解构 - 栈</title>
      <link href="/2020/07/09/lgcfi7/"/>
      <url>/2020/07/09/lgcfi7/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>队列是一种线性存储的数据结构</p><h3 id="原则："><a href="#原则：" class="headerlink" title="原则："></a>原则：</h3><ul><li>后进先出 - **LIFO **( last in first out)</li><li>先进后出</li></ul><h3 id="规则："><a href="#规则：" class="headerlink" title="规则："></a>规则：</h3><ul><li>栈顶 - 插入、删除</li><li>栈底</li><li>空栈</li></ul><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1616653126585-d351891f-f18c-4677-8d6f-c10d9b6ceaf6.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=L38Z9&originHeight=828&originWidth=1424&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><p>es5 实现栈：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.temp = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stack.prototype.push = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.temp.push(element);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 移除栈顶的元素， 同时返回被移除的元素</span></span><br><span class="line">Stack.prototype.pop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.temp.pop(<span class="built_in">this</span>.temp.length - <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 返回栈顶元素，不对栈元素做任何修改</span></span><br><span class="line">Stack.prototype.peek = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.temp[<span class="built_in">this</span>.temp.length - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 判断栈是否为空， 为空返回true， 否则返回false</span></span><br><span class="line">Stack.prototype.isEmpty = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.temp.length == <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 移除栈里的所有元素</span></span><br><span class="line">Stack.prototype.clear = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.temp.length = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 返回栈中的元素个数</span></span><br><span class="line">Stack.prototype.size = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.temp.length;</span><br><span class="line">&#125;;</span><br><span class="line">Stack.prototype.print = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.temp.toString();</span><br></pre></td></tr></table></figure><p>es6 实现栈：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  temp = [];</span><br><span class="line">  <span class="comment">// 没有继承父类（基类）可以省略constructor</span></span><br><span class="line">  <span class="comment">//   constructor() &#123;</span></span><br><span class="line">  <span class="comment">//     this.temp = [];</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">push</span>(<span class="params">element</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.temp.push(element);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 移除栈顶的元素， 同时返回被移除的元素</span></span><br><span class="line">  <span class="function"><span class="title">pop</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.temp.pop(<span class="built_in">this</span>.temp.length - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回栈顶元素，不对栈元素做任何修改</span></span><br><span class="line">  <span class="function"><span class="title">peek</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.temp[<span class="built_in">this</span>.temp.length - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断栈是否为空， 为空返回true， 否则返回false</span></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.temp.length == <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 移除栈里的所有元素</span></span><br><span class="line">  <span class="function"><span class="title">clear</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.temp.length = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回栈中的元素个数</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.temp.length;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">print</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.temp.toString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// number 10进制</span></span><br><span class="line"><span class="comment">// base  转为多少进制的数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseConverter</span>(<span class="params">number, base</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> rem;</span><br><span class="line">  <span class="keyword">let</span> baseString = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">let</span> digist = <span class="string">&quot;0123456789ABCDEF&quot;</span>;</span><br><span class="line">  <span class="keyword">let</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    rem = <span class="built_in">Math</span>.floor(number % base);</span><br><span class="line">    stack.push(rem);</span><br><span class="line">    number = <span class="built_in">Math</span>.floor(number / base);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(stack.pop());</span><br><span class="line">    baseString += digist[stack.pop()];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> baseString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(baseConverter(<span class="number">100345</span>, <span class="number">32</span>));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.stackList = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 入栈</span></span><br><span class="line">  <span class="function"><span class="title">push</span>(<span class="params">arg</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.stackList.unshift(arg);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 出栈</span></span><br><span class="line">  <span class="function"><span class="title">pop</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.stackList.shift();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 栈顶元素</span></span><br><span class="line">  <span class="function"><span class="title">top</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.stackList[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">print</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.stackList.toString());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.stackList.length &gt; <span class="number">1</span> ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.stack.length;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">clear</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.stackList = [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">array.forEach(<span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  stack.push(arr);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stack.print());</span><br><span class="line"><span class="built_in">console</span>.log(stack.pop());</span><br><span class="line"><span class="built_in">console</span>.log(stack.print());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深拷贝&amp;浅拷贝</title>
      <link href="/2020/07/09/cf2wd2/"/>
      <url>/2020/07/09/cf2wd2/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要区分深拷贝、浅拷贝？"><a href="#为什么要区分深拷贝、浅拷贝？" class="headerlink" title="为什么要区分深拷贝、浅拷贝？"></a>为什么要区分深拷贝、浅拷贝？</h2><p>因为我们得数据分为基本数据类型、引用数据类型，复制基本数据类型都会得到一份新得数据，而引用数据类型则不会，所以我们在有些业务场景下需要实现深拷贝。</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>基本数据类型：String、Number、Boolean、Null、Undefind、Symbol 。 直接存储在栈中的数据</li><li>引用数据类型：Object、Array、funciton。 直接存储在堆中的数据</li></ul><h3 id="基本数据类型和引用数据类型的区别："><a href="#基本数据类型和引用数据类型的区别：" class="headerlink" title="基本数据类型和引用数据类型的区别："></a>基本数据类型和引用数据类型的区别：</h3><p>保存位置不同：基本数据类型保存在栈内存中，引用数据类型保存在堆内存中，然后在栈内存中保存了一个对堆内存中实际对象的引用，即数据在堆内存中的地址，JS 对引用数据类型的操作都是操作对象的引用而不是实际的对象，如果 obj1 拷贝了 obj2，那么这两个引用数据类型就指向了同一个堆内存对象，具体操作是 obj1 将栈内存的引用地址复制了一份给 obj2，因而它们共同指向了一个堆内存对象；</p><h3 id="为什么基本数据类型保存在栈中，而引用数据类型保存在堆中？"><a href="#为什么基本数据类型保存在栈中，而引用数据类型保存在堆中？" class="headerlink" title="为什么基本数据类型保存在栈中，而引用数据类型保存在堆中？"></a>为什么基本数据类型保存在栈中，而引用数据类型保存在堆中？</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 堆比栈大，栈比堆速度快；</span><br><span class="line">- 基本数据类型比较稳定，而且相对来说占用的内存小；</span><br><span class="line">- 引用数据类型大小是动态的，而且是无限的，引用值的大小会改变，不能把它放在栈中，否则会降低变量查找的速度，因此放在变量栈空间的值是该对象存储在堆中的地址，地址的大小是固定的，所以把它存储在栈中对变量性能无任何负面影响；</span><br><span class="line">- 堆内存是无序存储，可以根据引用直接获取；</span><br><span class="line">- 按引用访问：js不允许直接访问保存在堆内存中的对象，所以在访问一个对象时，首先得到的是这个对象在堆内存中的地址，然后再按照这个地址去获得这个对象中的值；</span><br></pre></td></tr></table></figure><p>ECMAScript 中所有函数的参数都是按值来传递的，对于原始值，只是把变量里的值传递给参数，之后参数和这个变量互不影响，对于引用值，对象变量里面的值是这个对象在堆内存中的内存地址，因此它传递的值也就是这个内存地址，这也就是为什么函数内部对这个参数的修改会体现在外部的原因，因为它们都指向同一个对象；<br>引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址，当编译器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1608126055044-9b4c4f22-ae32-4375-bd05-5ec9af48c1f4.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=xzD2X&originHeight=465&originWidth=725&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>深拷贝：任何层次都做了副本，是深拷贝。返回一个新数组。</li><li>浅拷贝：只是把第一层做了一个副本，其他层是共享的地址。</li><li>浅拷贝：只复制指向某个对象的指针，而不是复制对象本身，新对象旧对象还是共同享用同一块内存</li><li>深拷贝：会另外创造一个一模一样的对象，新对象跟原来的对象不会共享一个内存，修改新对象也不会改到原对象上</li></ul><p>含义：假设 B 复制了 A，当修改 A 时，看 B 是否会发生变化，如果 B 也跟着变了，说明这是浅拷贝，拿人手短，如果 B 没变，那就是深拷贝，自食其力。<br>阐述到栈堆，基本数据类型与引用数据类型，因为这些概念能更好的让你理解深拷贝与浅拷贝</p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>基本数据类型不在此话题，浅拷贝简单来说就是复制了一份数据得指针指向，旧数据改变，新数据也会随之改变。<br>下面分别是对象、数据两种常用数据类型的浅拷贝：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line"><span class="keyword">let</span> bar = foo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo = &#123; <span class="attr">name</span>:<span class="string">&quot;zhangsanfeng&quot;</span>,<span class="attr">age</span>:<span class="number">101</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> bar = foo;</span><br></pre></td></tr></table></figure><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>深拷贝简单来讲就是复制了一份全新得数据，旧数据得改变不会影响新的数据。<br>我们通过生活中的例子来看一下：</p><h3 id="情景一："><a href="#情景一：" class="headerlink" title="情景一："></a>情景一：</h3><p>张三丰的小名叫张三，他家住在火星，也就是说张三住火星，张三丰也住火星。张三丰搬家的话，张三家的地址也随之改变这叫浅拷贝，反之则是深拷贝。</p><h3 id="情景二："><a href="#情景二：" class="headerlink" title="情景二："></a>情景二：</h3><p>小明有一台最新的 Iphone12 Pro max，小红也有一 台和小明一摸一样的手机，那么这两台手机是同一台吗？结果很显然不是，虽然外观、价格完全相同但是它们确实是唯一的个体。这其实就是我们想要的深拷贝。</p><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>下面这种复制对象得方式相当于把对象展开，放入一个新对象容器当中，缺点也比较明显，只能够实现第一层数据得深拷贝，如果第一层得值是引用数据类型就不行了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&quot;zhangsanfeng&quot;</span>, <span class="attr">age</span>: <span class="number">101</span>, <span class="attr">hobby</span>: [<span class="string">&quot;chifanfan&quot;</span>, <span class="string">&quot;睡觉觉&quot;</span>] &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; ...obj1 &#125;;</span><br></pre></td></tr></table></figure><h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h2><p>Object.assgin()用来合并多个对象，并且会返回一个参数对象，默认是浅拷贝<br>我们可以通过设置第一个参数是空对象得形式来实现深拷贝<br>同样缺点比较明显，只能够实现第一层数据得深拷贝，如果第一层得值是引用数据类型就不行了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&quot;zhangsanfeng&quot;</span>, <span class="attr">age</span>: <span class="number">101</span>, <span class="attr">hobby</span>: [<span class="string">&quot;chifanfan&quot;</span>, <span class="string">&quot;睡觉觉&quot;</span>] &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj1);</span><br></pre></td></tr></table></figure><h2 id="JSON-parse-amp-JSON-stringify"><a href="#JSON-parse-amp-JSON-stringify" class="headerlink" title="JSON.parse&amp;JSON.stringify"></a>JSON.parse&amp;JSON.stringify</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj1));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这下 b 是完全不受 a 的影响了。<br>附带说明，JSON.stringify 与 JSON.parse 除了实现深拷贝，还能结合 localStorage 实现对象数组存储。<br>有兴趣可以阅读博客这篇文章 <a href="https://www.cnblogs.com/echolun/p/9088189.html">localStorage 存储数组，对象，localStorage,sessionStorage 存储数组对象</a></p><h2 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create"></a>Object.create</h2><p>类似 Object.assign 只能实现数据第一层的深拷贝</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: &#123;</span><br><span class="line">    <span class="attr">d</span>: <span class="number">3</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="built_in">Object</span>.create(obj1);</span><br><span class="line">obj2.a = <span class="number">3</span>;</span><br><span class="line">obj2.c.d = <span class="number">4</span>;</span><br><span class="line">alert(obj1.a); <span class="comment">// 1</span></span><br><span class="line">alert(obj2.a); <span class="comment">// 3</span></span><br><span class="line">alert(obj1.c.d); <span class="comment">// 4</span></span><br><span class="line">alert(obj2.c.d); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h2 id="手动实现-deepClone"><a href="#手动实现-deepClone" class="headerlink" title="手动实现 deepClone"></a>手动实现 deepClone</h2><p>基础理解版：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> deepClone = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> temp = obj <span class="keyword">instanceof</span> <span class="built_in">Object</span> ? &#123;&#125; : [];</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="keyword">var</span> prop = obj[key]; <span class="comment">// 避免相互引用造成死循环，如obj1.a=obj</span></span><br><span class="line">      <span class="keyword">if</span> (prop == obj) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> prop === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prop <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">          temp[key] = [...prop];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          temp[key] = &#123; ...prop &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        temp[key] = prop;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    obj.forEach(<span class="function">(<span class="params">itm</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> itm === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">        temp.push(deepClone(itm));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        temp.push(itm);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> temp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>高端分享版：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">obj1</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj2 = <span class="built_in">Array</span>.isArray(obj1) ? [] : &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (obj1 &amp;&amp; <span class="keyword">typeof</span> obj1 === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">      <span class="keyword">var</span> prop = obj1[i]; <span class="comment">// 避免相互引用造成死循环，如obj1.a=obj</span></span><br><span class="line">      <span class="keyword">if</span> (prop == obj1) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (obj1.hasOwnProperty(i)) &#123;</span><br><span class="line">        <span class="comment">// 如果子属性为引用数据类型，递归复制</span></span><br><span class="line">        <span class="keyword">if</span> (prop &amp;&amp; <span class="keyword">typeof</span> prop === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">          obj2[i] = prop.constructor === <span class="built_in">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">          <span class="built_in">arguments</span>.callee(prop, obj2[i]); <span class="comment">// 递归调用</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 如果是基本数据类型，只是简单的复制</span></span><br><span class="line">          obj2[i] = prop;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lodash"><a href="#lodash" class="headerlink" title="lodash"></a>lodash</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">&quot;lodash&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: &#123; <span class="attr">f</span>: &#123; <span class="attr">g</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">  <span class="attr">c</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = _.cloneDeep(obj1);</span><br><span class="line"><span class="built_in">console</span>.log(obj1.b.f === obj2.b.f);</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="slice-是否为深拷贝"><a href="#slice-是否为深拷贝" class="headerlink" title="slice 是否为深拷贝"></a>slice 是否为深拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对只有一级属性值的数组对象使用slice</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.slice();</span><br><span class="line">b[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">alert(a); <span class="comment">// 1,2,3,4</span></span><br><span class="line">alert(b); <span class="comment">// 2,2,3,4</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对有多层属性的数组对象使用slice</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, [<span class="number">1</span>, <span class="number">2</span>], <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.slice();</span><br><span class="line">b[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">alert(a); <span class="comment">// 1,2,2,3,4</span></span><br><span class="line">alert(b); <span class="comment">// 1,2,2,3,4</span></span><br></pre></td></tr></table></figure><p>实际开发中也是非常有用的，后台返回了一堆数据，你需要对这堆数据做操作，但多人开发情况下，你是没办法明确这堆数据是否有其它功能也需要使用，直接修改可能会造成隐性问题，深拷贝能帮你更安全安心的去操作数据，根据实际情况来使用深拷贝，大概就是这个意思。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 深拷贝 </tag>
            
            <tag> 浅拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs-File System</title>
      <link href="/2020/07/03/ytghqy/"/>
      <url>/2020/07/03/ytghqy/</url>
      
        <content type="html"><![CDATA[<p>fs File System 模块是 nodejs 的一个内置模块，fs 模块用于对系统文件及目录进行读写操作。要使用此模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br></pre></td></tr></table></figure><p>fs 模块提供了一些操作系统文件相关的 api，所有的文件系统操作都具有同步和异步的形式。异步的形式总是把完成回调作为其最后一个参数。 传给完成回调的参数取决于具体方法，但第一个参数总是预留给异常。 如果操作被成功地完成，则第一个参数会为 null 或 undefined。</p><h4 id="文件相关"><a href="#文件相关" class="headerlink" title="文件相关"></a>文件相关</h4><h6 id="1-读取文件"><a href="#1-读取文件" class="headerlink" title="1.读取文件"></a>1.读取文件</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.同步方式</span></span><br><span class="line"><span class="keyword">let</span> result = fs.readFileSync(<span class="string">&#x27;文件名&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line"><span class="comment">//2.异步方式</span></span><br><span class="line"><span class="keyword">let</span> result = fs.readFile(<span class="string">&#x27;文件名&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//err报错信息,若无报错返回 null</span></span><br><span class="line">    <span class="comment">//data 读取的内容</span></span><br><span class="line">    <span class="keyword">if</span>(err !== <span class="literal">null</span>) <span class="keyword">return</span> err;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="2-写入文件"><a href="#2-写入文件" class="headerlink" title="2.写入文件"></a>2.写入文件</h6><ul><li>两种方式,覆盖式和追加式</li><li>写入内容只能是字符串</li><li>若写入其它类型数据,如对象,可通过 JSON.stringify() 转字符串</li><li>若文件不存在,则自动新建该文件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.覆盖式写入</span></span><br><span class="line">fs.writeFileSync(<span class="string">&quot;文件名&quot;</span>, <span class="string">&quot;内容&quot;</span>);</span><br><span class="line"><span class="comment">//2.追加式写入</span></span><br><span class="line">fs.appendFileSync(<span class="string">&quot;文件名&quot;</span>, <span class="string">&quot;内容&quot;</span>);</span><br></pre></td></tr></table></figure><h6 id="3-删除文件"><a href="#3-删除文件" class="headerlink" title="3.删除文件"></a>3.删除文件</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.unlinkSync(<span class="string">&quot;文件名&quot;</span>);</span><br></pre></td></tr></table></figure><h6 id="4-复制文件"><a href="#4-复制文件" class="headerlink" title="4.复制文件"></a>4.复制文件</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.copyFileSync(<span class="string">&quot;源文件名&quot;</span>, <span class="string">&quot;备份文件名&quot;</span>);</span><br></pre></td></tr></table></figure><h6 id="5-重命名文件"><a href="#5-重命名文件" class="headerlink" title="5.重命名文件"></a>5.重命名文件</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.renameSync(<span class="string">&quot;源文件名&quot;</span>, <span class="string">&quot;新文件名&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="目录相关"><a href="#目录相关" class="headerlink" title="目录相关"></a>目录相关</h4><h6 id="1-读取目录"><a href="#1-读取目录" class="headerlink" title="1.读取目录"></a>1.读取目录</h6><ul><li>将读取目录中的文件名存入数组,忽略尾缀</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = fs.readdirSync(<span class="string">&quot;目录名&quot;</span>);</span><br></pre></td></tr></table></figure><h6 id="2-创建目录"><a href="#2-创建目录" class="headerlink" title="2.创建目录"></a>2.创建目录</h6><ul><li>不可嵌套创建，可创建子目录</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = fs.mkdirSync(<span class="string">&quot;目录名&quot;</span>);</span><br></pre></td></tr></table></figure><h6 id="3-删除空目录"><a href="#3-删除空目录" class="headerlink" title="3.删除空目录"></a>3.删除空目录</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = fs.rmdirSync(<span class="string">&quot;目录名&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="判断文件-目录是否存在"><a href="#判断文件-目录是否存在" class="headerlink" title="判断文件/目录是否存在"></a>判断文件/目录是否存在</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.存在返回true,不存在返回false</span></span><br><span class="line"><span class="keyword">let</span> isFile = fs.existsSync(<span class="string">&quot;文件名&quot;</span>);</span><br><span class="line"><span class="comment">//2.存在什么都不发生,不存在报错 =&gt; 尽量通过try&#123;&#125;catch&#123;&#125;捕获错误</span></span><br><span class="line"><span class="keyword">let</span> isFile = fs.accessSync(<span class="string">&quot;文件名&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="检查是文件还是目录"><a href="#检查是文件还是目录" class="headerlink" title="检查是文件还是目录"></a>检查是文件还是目录</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> file = fs.statSync(<span class="string">&quot;test.txt&quot;</span>); <span class="comment">//查看文件信息</span></span><br><span class="line">file.isDirectory(); <span class="comment">//判断目录</span></span><br><span class="line">file.isFile(); <span class="comment">//判断文件</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React - Mobx - 1</title>
      <link href="/2020/07/02/nhnb6d/"/>
      <url>/2020/07/02/nhnb6d/</url>
      
        <content type="html"><![CDATA[<h2 id="Mobx"><a href="#Mobx" class="headerlink" title="Mobx"></a>Mobx</h2><p>简单、可扩展的状态管理</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install mobx --save</span><br><span class="line">react绑定库： npm install mobx-react --save</span><br></pre></td></tr></table></figure><h2 id="observable-amp-autorun"><a href="#observable-amp-autorun" class="headerlink" title="observable &amp; autorun"></a>observable &amp; autorun</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observable, autorun &#125; <span class="keyword">from</span> <span class="string">&quot;mobx&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> value = observable(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> number = observable(<span class="number">100</span>);</span><br><span class="line">autorun(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value.get());</span><br><span class="line">&#125;);</span><br><span class="line">value.set(<span class="number">1</span>);</span><br><span class="line">value.set(<span class="number">2</span>);</span><br><span class="line">number.set(<span class="number">101</span>);</span><br></pre></td></tr></table></figure><p>控制台中一次输入 0，1，2<br>observable 可以用来观测一个数据，这个数据可以是数字、字符串、数组、对象等类型，当观测到的数据发生变化的时候，如果变化的值处在 autorun 中，那么 autorun 就会自动执行。</p><h2 id="计算属性–computed"><a href="#计算属性–computed" class="headerlink" title="计算属性–computed"></a>计算属性–computed</h2><p>假如现在我们一个数字，但我们对它的值不感兴趣，而只关心这个数组是否为正数。这个时候我们就可以用到 computed 这个属性了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> number = observable(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">const</span> plus = computed(<span class="function">() =&gt;</span> number.get() &gt; <span class="number">0</span>);</span><br><span class="line">autorun(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(plus.get());</span><br><span class="line">&#125;);</span><br><span class="line">number.set(-<span class="number">19</span>);</span><br><span class="line">number.set(-<span class="number">1</span>);</span><br><span class="line">number.set(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>依次输出了 true，false，true<br>依次输出了 true，false，true。<br>第一个 true 是 number 初始化值的时候，10&gt;0 为 true 没有问题。<br>第二个 false 将 number 改变为-19，输出 false，也没有问题。<br>但是当-19 改变为-1 的时候，虽然 number 变了，但是 number 的改变实际上并没有改变 plus 的值，所以没有其它地方收到通知，因此也就并没有输出任何值。<br>直到 number 重新变为 1 时才输出 true。</p><h2 id="action，runInAction-和严格模式（useStrict）"><a href="#action，runInAction-和严格模式（useStrict）" class="headerlink" title="action，runInAction 和严格模式（useStrict）"></a>action，runInAction 和严格模式（useStrict）</h2><p>mobx 推荐将修改被观测变量的行为放在 action 中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observable, action &#125; <span class="keyword">from</span> <span class="string">&quot;mobx&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">  @observable number = <span class="number">0</span>;</span><br><span class="line">  @action add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.number++;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> newStore = <span class="keyword">new</span> Store();</span><br><span class="line">newStore.add();</span><br></pre></td></tr></table></figure><p>这个类中有一个 add 函数，用来将 number 的值加 1，也就是修改了被观测的变量，根据规范，我们要在这里使用 action 来修饰这个 add 函数。<br>把@action 去掉，程序还是可以运行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">  @observable number = <span class="number">0</span>;</span><br><span class="line">  add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.number++;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是因为现在我们使用的 Mobx 的非严格模式，如果在严格模式下，就会报错了。<br>接下来让我们来启用严格模式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observable, action, useStrict &#125; <span class="keyword">from</span> <span class="string">&quot;mobx&quot;</span>;</span><br><span class="line">useStrict(<span class="literal">true</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">  @observable number = <span class="number">0</span>;</span><br><span class="line">  @action add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.number++;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> newStore = <span class="keyword">new</span> Store();</span><br><span class="line">newStore.add();</span><br></pre></td></tr></table></figure><p>Mobx 里启用严格模式的函数就是 useStrict，注意和原生 JS 的”use strict”不是一个东西。<br>现在再去掉@action 就会报错了。<br>action 的写法大概有如下几种:</p><ul><li>action(fn)</li><li>action(name, fn)</li><li>@action classMethod() {}</li><li>@action(name) classMethod () {}</li><li>@action boundClassMethod = (args) =&gt; { body }</li><li>@action(name) boundClassMethod = (args) =&gt; { body }</li><li>@action.bound classMethod() {}</li><li>@action.bound(function() {})</li></ul><p>可以看到，action 在修饰函数的同时，我们还可以给它设置一个 name，这个 name 应该没有什么太大的作用，但可以作为一个注释更好地让其他人理解这个 action 的意图。</p><p><strong>action 只能影响正在运行的函数，而无法影响当前函数调用的异步操作</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@action <span class="function"><span class="title">createRandomContact</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.pendingRequestCount++;</span><br><span class="line">  superagent</span><br><span class="line">    .get(<span class="string">&#x27;https://randomuser.me/api/&#x27;</span>)</span><br><span class="line">    .set(<span class="string">&#x27;Accept&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>)</span><br><span class="line">    .end(action(<span class="string">&quot;createRandomContact-callback&quot;</span>, <span class="function">(<span class="params">error, results</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (error)</span><br><span class="line">        <span class="built_in">console</span>.error(error);</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="built_in">JSON</span>.parse(results.text).results[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">const</span> contact = <span class="keyword">new</span> Contact(<span class="built_in">this</span>, data.dob, data.name, data.login.username, data.picture);</span><br><span class="line">        contact.addTag(<span class="string">&#x27;random-user&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.contacts.push(contact);</span><br><span class="line">        <span class="built_in">this</span>.pendingRequestCount--;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点关注程序的第六行。在 end 中触发的回调函数，被 action 给包裹了，这就很好验证了上面加粗的那句话，action 无法影响当前函数调用的异步操作，而这个回调毫无疑问是一个异步操作，所以必须再用一个 action 来包裹住它，这样程序才不会报错。。</p><p>如果你使用 async function 来处理业务，那么我们可以使用 runInAction 这个 API 来解决之前的问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observable, action, useStrict, runInAction &#125; <span class="keyword">from</span> <span class="string">&quot;mobx&quot;</span>;</span><br><span class="line">useStrict(<span class="literal">true</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">  @observable name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  @action load = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> getData();</span><br><span class="line">    runInAction(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = data.name;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>runInAction 有点类似 action(fn)()的语法糖，调用后，这个 action 方法会立刻执行。</p><h2 id="结合-React-使用"><a href="#结合-React-使用" class="headerlink" title="结合 React 使用"></a>结合 React 使用</h2><p>在 React 中，我们一般会把和页面相关的数据放到 state 中，在需要改变这些数据的时候，我们会去用 setState 这个方法来进行改变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; observable, useStrict, action &#125; <span class="keyword">from</span> <span class="string">&quot;mobx&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; observer &#125; <span class="keyword">from</span> <span class="string">&quot;mobx-react&quot;</span>;</span><br><span class="line">useStrict(<span class="literal">true</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyState</span> </span>&#123;</span><br><span class="line">  @observable num = <span class="number">0</span>;</span><br><span class="line">  @action addNum = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.num++;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> newState = <span class="keyword">new</span> MyState();</span><br><span class="line"></span><br><span class="line">@observer</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;newState.num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;newState.addNum&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跨组件交互"><a href="#跨组件交互" class="headerlink" title="跨组件交互"></a>跨组件交互</h2><p>在不使用其它框架、类库的情况下，React 要实现跨组件交互这一功能相对有些繁琐。通常我们需要在父组件上定义一个 state 和一个修改该 state 的函数。然后把 state 和这个函数分别传到两个子组件里，在逻辑简单，且子组件很少的时候可能还好，但当业务复杂起来后，这么写就非常繁琐，且难以维护。而用 Mobx 就可以很好地解决这个问题。来看看以下的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyState</span> </span>&#123;</span><br><span class="line">  @observable num1 = <span class="number">0</span>;</span><br><span class="line">  @observable num2 = <span class="number">100</span>;</span><br><span class="line">  @action addNum1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.num1++;</span><br><span class="line">  &#125;;</span><br><span class="line">  @action addNum2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.num2++;</span><br><span class="line">  &#125;;</span><br><span class="line">  @computed <span class="keyword">get</span> <span class="title">total</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.num1 + <span class="built_in">this</span>.num2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> newState = <span class="keyword">new</span> MyState();</span><br><span class="line"><span class="keyword">const</span> AllNum = observer(<span class="function">(<span class="params">props</span>) =&gt;</span> (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>num1 + num2 = &#123;props.store.total&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">));</span><br><span class="line"><span class="keyword">const</span> Main = observer(<span class="function">(<span class="params">props</span>) =&gt;</span> (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>num1 = &#123;props.store.num1&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>num2 = &#123;props.store.num2&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;props.store.addNum1&#125;</span>&gt;</span>num1 + 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;props.store.addNum2&#125;</span>&gt;</span>num2 + 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">));</span><br><span class="line">@observer</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Main</span> <span class="attr">store</span>=<span class="string">&#123;newState&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">AllNum</span> <span class="attr">store</span>=<span class="string">&#123;newState&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">useStrict(<span class="literal">true</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyState</span> </span>&#123;</span><br><span class="line">  @observable data = <span class="literal">null</span>;</span><br><span class="line">  @action initData = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> getData(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">    runInAction(<span class="string">&quot;说明一下这个action是干什么的。不写也可以&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>严格模式下，只能在 action 中修改数据，但是 action 只能影响到函数当前状态下的情景，也就是说在 await 之后发生的事情，这个 action 就修饰不到了，于是我们必须要使用了 runInAction</p><h2 id="装饰器报错"><a href="#装饰器报错" class="headerlink" title="装饰器报错"></a>装饰器报错</h2><p>下载 npm install @babel/plugin-proposal-decorators<br>在 package.json 中修改 babel：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;babel&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;presets&quot;</span>: [</span><br><span class="line"><span class="string">&quot;react-app&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">[</span><br><span class="line"><span class="string">&quot;@babel/plugin-proposal-decorators&quot;</span>,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;legacy&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或在 tsconfig.json 中修改：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;target&quot;</span>: <span class="string">&quot;ES5&quot;</span>,</span><br><span class="line"><span class="string">&quot;experimentalDecorators&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Mobx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactMobx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Edge - wappalyzer</title>
      <link href="/2020/07/01/ixfccz/"/>
      <url>/2020/07/01/ixfccz/</url>
      
        <content type="html"><![CDATA[<h1 id="打开-Edge-浏览器"><a href="#打开-Edge-浏览器" class="headerlink" title="打开 Edge 浏览器"></a>打开 Edge 浏览器</h1><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/6cafb63c-3388-406e-b663-2483ead36cc3.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=OIFJM&originHeight=135&originWidth=136&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>输入网址 : <a href="https://chrome.zzzmh.cn/info?token=gppongmhjkpfnbhagpmjfkannfbllamg">https://chrome.zzzmh.cn/info?token=gppongmhjkpfnbhagpmjfkannfbllamg</a></p><h2 id="点击推荐下载"><a href="#点击推荐下载" class="headerlink" title="点击推荐下载"></a>点击推荐下载</h2><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/8ae3e0aa-a88f-427c-9821-353d2a1edd48.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=zbGRu&originHeight=478&originWidth=767&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/41a18449-f2db-4409-9132-29d42674f8e1.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=VdV4r&originHeight=70&originWidth=767&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p>下载好是一个压缩包,把里边内容解压出来放到一个文件夹中</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/896afffe-1dec-4811-84f0-462632133e3a.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=X4hcR&originHeight=464&originWidth=1075&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></h2><h2 id="添加到扩展程序中"><a href="#添加到扩展程序中" class="headerlink" title="添加到扩展程序中"></a>添加到扩展程序中</h2><p>在浏览器中输入 edge://extensions/ 点击打开左下角的开发人员模式<img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/096e3f68-3234-49fc-9f61-4fede56145ce.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=DQy4R&originHeight=277&originWidth=778&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><p>点击加载解压缩的扩展<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/fdaa1c14-97d7-4914-9047-07b59e9857ce.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=cuQLS&originHeight=388&originWidth=1143&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>选择刚才解压好得文件夹<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/892ad647-450c-43bd-b2e2-f8e05a2478a5.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=mHpBe&originHeight=465&originWidth=1275&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h2 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h2>]]></content>
      
      
      <categories>
          
          <category> 高效工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Edge </tag>
            
            <tag> Wappalyzer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - 双向绑定原理</title>
      <link href="/2020/06/29/uh180e/"/>
      <url>/2020/06/29/uh180e/</url>
      
        <content type="html"><![CDATA[<p>vue 数据双向绑定是通过数据劫持结合发布者-订阅者模式的方式来实现的，那么 vue 是如果进行数据劫持的，我们可以先来看一下通过控制台输出一个定义在 vue 初始化数据上的对象是个什么东西。<br>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">obj</span>: &#123;</span><br><span class="line">      <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">created</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.obj);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1608035831483-0ef3121c-7b69-4974-8dad-eba180743c41.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=MJm28&originHeight=328&originWidth=690&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>我们可以看到属性 a 有两个相对应的 get 和 set 方法，为什么会多出这两个方法呢？因为 vue 是通过 Object.defineProperty()来实现数据劫持的。<br>Object.defineProperty( )是用来做什么的？它可以来控制一个对象属性的一些特有操作，比如读写权、是否可以枚举，这里我们主要先来研究下它对应的两个描述属性 get 和 set，如果还不熟悉其用法，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">请点击这里阅读更多用法</a>。<br>在平常，我们很容易就可以打印出一个对象的属性数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Book = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;vue权威指南&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(Book.name); <span class="comment">// vue权威指南</span></span><br></pre></td></tr></table></figure><p>如果想要在执行 console.log(book.name)的同时，直接给书名加个书名号，那要怎么处理呢？或者说要通过什么监听对象 Book 的属性值。这时候 Object.defineProperty( )就派上用场了，代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> Book = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Book, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    name = value;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;你取了一个书名叫做&quot;</span> + value);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;《&quot;</span> + name + <span class="string">&quot;》&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Book.name = <span class="string">&quot;vue权威指南&quot;</span>; <span class="comment">// 你取了一个书名叫做vue权威指南</span></span><br><span class="line"><span class="built_in">console</span>.log(Book.name); <span class="comment">// 《vue权威指南》</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们通过 Object.defineProperty( )设置了对象 Book 的 name 属性，对其 get 和 set 进行重写操作，顾名思义，get 就是在读取 name 属性这个值触发的函数，set 就是在设置 name 属性这个值触发的函数，所以当执行 Book.name = ‘vue 权威指南’ 这个语句时，控制台会打印出 “你取了一个书名叫做 vue 权威指南”，紧接着，当读取这个属性时，就会输出 “《vue 权威指南》”，因为我们在 get 函数里面对该值做了加工了。如果这个时候我们执行下下面的语句，控制台会输出什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Book);</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1608035995206-f220de6c-c29d-43db-98c6-8732511794d7.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=qWqm1&originHeight=224&originWidth=536&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>乍一看，是不是跟我们在上面打印 vue 数据长得有点类似，说明 vue 确实是通过这种方法来进行数据劫持的。接下来我们通过其原理来实现一个简单版的 mvvm 双向绑定代码。</p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a><strong>思路分析</strong></h1><p>实现 mvvm 主要包含两个方面，数据变化更新视图，视图变化更新数据：<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1608036040814-93a0c53c-9295-4f0a-ae41-73bf7c78bc3c.jpeg?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=BKwOB&originHeight=168&originWidth=493&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>关键点在于 data 如何更新 view，因为 view 更新 data 其实可以通过事件监听即可，比如 input 标签监听 ‘input’ 事件就可以实现了。所以我们着重来分析下，当数据改变，如何更新视图的。<br>数据更新视图的重点是如何知道数据变了，只要知道数据变了，那么接下去的事都好处理。如何知道数据变了，其实上文我们已经给出答案了，就是通过 Object.defineProperty( )对属性设置一个 set 函数，当数据改变了就会来触发这个函数，所以我们只要将一些需要更新的方法放在这里面就可以实现 data 更新 view 了。</p><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1608036062720-b82adf9c-b50e-4724-817b-e79cfd686bce.jpeg?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=NfXSr&originHeight=399&originWidth=581&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>思路有了，接下去就是实现过程了。</p><h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a><strong>实现过程</strong></h1><p>我们已经知道实现数据的双向绑定，首先要对数据进行劫持监听，所以我们需要设置一个监听器 Observer，用来监听所有属性。如果属性发上变化了，就需要告诉订阅者 Watcher 看是否需要更新。因为订阅者是有很多个，所以我们需要有一个消息订阅器 Dep 来专门收集这些订阅者，然后在监听器 Observer 和订阅者 Watcher 之间进行统一管理的。接着，我们还需要有一个指令解析器 Compile，对每个节点元素进行扫描和解析，将相关指令对应初始化成一个订阅者 Watcher，并替换模板数据或者绑定相应的函数，此时当订阅者 Watcher 接收到相应属性的变化，就会执行对应的更新函数，从而更新视图。因此接下去我们执行以下 3 个步骤，实现数据的双向绑定： 1.实现一个监听器 Observer，用来劫持并监听所有属性，如果有变动的，就通知订阅者。 2.实现一个订阅者 Watcher，可以收到属性的变化通知并执行相应的函数，从而更新视图。 3.实现一个解析器 Compile，可以扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相应的订阅器。<br>流程图如下：<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1608036062719-450274d8-30cd-43bb-add0-7e5834f6bfdb.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=pAWvY&originHeight=578&originWidth=785&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h2 id="1-实现一个-Observer"><a href="#1-实现一个-Observer" class="headerlink" title="1.实现一个 Observer"></a><strong>1.实现一个 Observer</strong></h2><p>Observer 是一个数据监听器，其实现核心方法就是前文所说的 Object.defineProperty( )。如果要对所有属性都进行监听的话，那么可以通过递归方法遍历所有属性值，并对其进行 Object.defineProperty( )处理。如下代码，实现了一个 Observer。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line">  observe(val); <span class="comment">// 递归遍历所有子属性</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">      val = newVal;</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">&quot;属性&quot;</span> + key + <span class="string">&quot;已经被监听了，现在值为：“&quot;</span> + newVal.toString() + <span class="string">&quot;”&quot;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!data || <span class="keyword">typeof</span> data !== <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    defineReactive(data, key, data[key]);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> library = &#123;</span><br><span class="line">  <span class="attr">book1</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">book2</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">observe(library);</span><br><span class="line">library.book1.name = <span class="string">&quot;vue权威指南&quot;</span>; <span class="comment">// 属性name已经被监听了，现在值为：“vue权威指南”</span></span><br><span class="line">library.book2 = <span class="string">&quot;没有此书籍&quot;</span>; <span class="comment">// 属性book2已经被监听了，现在值为：“没有此书籍”</span></span><br></pre></td></tr></table></figure><p>思路分析中，需要创建一个可以容纳订阅者的消息订阅器 Dep，订阅器 Dep 主要负责收集订阅者，然后再属性变化的时候执行对应订阅者的更新函数。所以显然订阅器需要有一个容器，这个容器就是 list，将上面的 Observer 稍微改造下，植入消息订阅器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line">  observe(val); <span class="comment">// 递归遍历所有子属性</span></span><br><span class="line">  <span class="keyword">var</span> dep = <span class="keyword">new</span> Dep();</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (是否需要添加订阅者) &#123;</span><br><span class="line">        dep.addSub(watcher); <span class="comment">// 在这里添加一个订阅者</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (val === newVal) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      val = newVal;</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">&quot;属性&quot;</span> + key + <span class="string">&quot;已经被监听了，现在值为：“&quot;</span> + newVal.toString() + <span class="string">&quot;”&quot;</span></span><br><span class="line">      );</span><br><span class="line">      dep.notify(); <span class="comment">// 如果数据变化，通知所有订阅者</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.subs = [];</span><br><span class="line">&#125;</span><br><span class="line">Dep.prototype = &#123;</span><br><span class="line">  <span class="attr">addSub</span>: <span class="function"><span class="keyword">function</span> (<span class="params">sub</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.subs.push(sub);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">notify</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">sub</span>) </span>&#123;</span><br><span class="line">      sub.update();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>从代码上看，我们将订阅器 Dep 添加一个订阅者设计在 getter 里面，这是为了让 Watcher 初始化进行触发，因此需要判断是否要添加订阅者，至于具体设计方案，下文会详细说明的。在 setter 函数里面，如果数据变化，就会去通知所有订阅者，订阅者们就会去执行对应的更新的函数。到此为止，一个比较完整 Observer 已经实现了，接下来我们开始设计 Watcher。</p><h2 id="2-实现-Watcher"><a href="#2-实现-Watcher" class="headerlink" title="2.实现 Watcher"></a><strong>2.实现 Watcher</strong></h2><p>订阅者 Watcher 在初始化的时候需要将自己添加进订阅器 Dep 中，那该如何添加呢？我们已经知道监听器 Observer 是在 get 函数执行了添加订阅者 Wather 的操作的，所以我们只要在订阅者 Watcher 初始化的时候出发对应的 get 函数去执行添加订阅者操作即可，那要如何触发 get 的函数，再简单不过了，只要获取对应的属性值就可以触发了，核心原因就是因为我们使用了 Object.defineProperty( )进行数据监听。这里还有一个细节点需要处理，我们只要在订阅者 Watcher 初始化的时候才需要添加订阅者，所以需要做一个判断操作，因此可以在订阅器上做一下手脚：在 Dep.target 上缓存下订阅者，添加成功后再将其去掉就可以了。订阅者 Watcher 的实现如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">vm, exp, cb</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.cb = cb;</span><br><span class="line">  <span class="built_in">this</span>.vm = vm;</span><br><span class="line">  <span class="built_in">this</span>.exp = exp;</span><br><span class="line">  <span class="built_in">this</span>.value = <span class="built_in">this</span>.get(); <span class="comment">// 将自己添加到订阅器的操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Watcher.prototype = &#123;</span><br><span class="line">  <span class="attr">update</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.run();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">run</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="built_in">this</span>.vm.data[<span class="built_in">this</span>.exp];</span><br><span class="line">    <span class="keyword">var</span> oldVal = <span class="built_in">this</span>.value;</span><br><span class="line">    <span class="keyword">if</span> (value !== oldVal) &#123;</span><br><span class="line">      <span class="built_in">this</span>.value = value;</span><br><span class="line">      <span class="built_in">this</span>.cb.call(<span class="built_in">this</span>.vm, value, oldVal);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    Dep.target = <span class="built_in">this</span>; <span class="comment">// 缓存自己</span></span><br><span class="line">    <span class="keyword">var</span> value = <span class="built_in">this</span>.vm.data[<span class="built_in">this</span>.exp]; <span class="comment">// 强制执行监听器里的get函数</span></span><br><span class="line">    Dep.target = <span class="literal">null</span>; <span class="comment">// 释放自己</span></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这时候，我们需要对监听器 Observer 也做个稍微调整，主要是对应 Watcher 类原型上的 get 函数。需要调整地方在于 defineReactive 函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line">    observe(val); <span class="comment">// 递归遍历所有子属性</span></span><br><span class="line">    <span class="keyword">var</span> dep = <span class="keyword">new</span> Dep();</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (Dep.target) &#123;.  <span class="comment">// 判断是否需要添加订阅者</span></span><br><span class="line">                dep.addSub(Dep.target); <span class="comment">// 在这里添加一个订阅者</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (val === newVal) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            val = newVal;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;属性&#x27;</span> + key + <span class="string">&#x27;已经被监听了，现在值为：“&#x27;</span> + newVal.toString() + <span class="string">&#x27;”&#x27;</span>);</span><br><span class="line">            dep.notify(); <span class="comment">// 如果数据变化，通知所有订阅者</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">Dep.target = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>到此为止，简单版的 Watcher 设计完毕，这时候我们只要将 Observer 和 Watcher 关联起来，就可以实现一个简单的双向绑定数据了。因为这里没有还没有设计解析器 Compile，所以对于模板数据我们都进行写死处理，假设模板上又一个节点，且 id 号为’name’，并且双向绑定的绑定的变量也为’name’，且是通过两个大双括号包起来（这里只是为了掩饰，暂时没什么用处），模板如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>这时候我们需要将 Observer 和 Watcher 关联起来：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SelfVue</span>(<span class="params">data, el, exp</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.data = data;</span><br><span class="line">  observe(data);</span><br><span class="line">  el.innerHTML = <span class="built_in">this</span>.data[exp]; <span class="comment">// 初始化模板数据的值</span></span><br><span class="line">  <span class="keyword">new</span> Watcher(<span class="built_in">this</span>, exp, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    el.innerHTML = value;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在页面上 new 以下 SelfVue 类，就可以实现数据的双向绑定了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/observer.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/watcher.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> ele = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#name&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> selfVue = <span class="keyword">new</span> SelfVue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">name</span>: <span class="string">&#x27;hello world&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;, ele, <span class="string">&#x27;name&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(<span class="string">&#x27;name值改变了&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        selfVue.data.name = <span class="string">&#x27;canfoo&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;, <span class="number">2000</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这时候打开页面，可以看到页面刚开始显示了是’hello world’，过了 2s 后就变成’canfoo’了。到这里，总算大功告成一半了，但是还有一个细节问题，我们在赋值的时候是这样的形式 ‘ selfVue.data.name = ‘canfoo’ ‘ 而我们理想的形式是’ selfVue.name = ‘canfoo’ ‘为了实现这样的形式，我们需要在 new SelfVue 的时候做一个代理处理，让访问 selfVue 的属性代理为访问 selfVue.data 的属性，实现原理还是使用 Object.defineProperty( )对属性值再包一层</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SelfVue</span>(<span class="params">data, el, exp</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line">  <span class="built_in">this</span>.data = data;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    self.proxyKeys(key); <span class="comment">// 绑定代理属性</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  observe(data);</span><br><span class="line">  el.innerHTML = <span class="built_in">this</span>.data[exp]; <span class="comment">// 初始化模板数据的值</span></span><br><span class="line">  <span class="keyword">new</span> Watcher(<span class="built_in">this</span>, exp, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    el.innerHTML = value;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SelfVue.prototype = &#123;</span><br><span class="line">  <span class="attr">proxyKeys</span>: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(<span class="built_in">this</span>, key, &#123;</span><br><span class="line">      <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> <span class="title">proxyGetter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> self.data[key];</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> <span class="title">proxySetter</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">        self.data[key] = newVal;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这下我们就可以直接通过’ selfVue.name = ‘canfoo’ ‘的形式来进行改变模板数据了。如果想要迫切看到现象的童鞋赶快来<a href="https://github.com/canfoo/self-vue/tree/master/v1">获取代码！</a></p><h2 id="3-实现-Compile"><a href="#3-实现-Compile" class="headerlink" title="3.实现 Compile"></a><strong>3.实现 Compile</strong></h2><p>虽然上面已经实现了一个双向数据绑定的例子，但是整个过程都没有去解析 dom 节点，而是直接固定某个节点进行替换数据的，所以接下来需要实现一个解析器 Compile 来做解析和绑定工作。解析器 Compile 实现步骤： 1.解析模板指令，并替换模板数据，初始化视图 2.将模板指令对应的节点绑定对应的更新函数，初始化相应的订阅器<br>为了解析模板，首先需要获取到 dom 元素，然后对含有 dom 元素上含有指令的节点进行处理，因此这个环节需要对 dom 操作比较频繁，所有可以先建一个 fragment 片段，将需要解析的 dom 节点存入 fragment 片段里再进行处理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nodeToFragment</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> fragment = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line">  <span class="keyword">var</span> child = el.firstChild;</span><br><span class="line">  <span class="keyword">while</span> (child) &#123;</span><br><span class="line">    <span class="comment">// 将Dom元素移入fragment中</span></span><br><span class="line">    fragment.appendChild(child);</span><br><span class="line">    child = el.firstChild;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fragment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">接下来需要遍历各个节点，对含有相关指定的节点进行特殊处理，这里咱们先处理最简单的情况，只对带有 &#x27;&#123;&#123;变量&#125;&#125;&#x27; 这种形式的指令进行处理，先简道难嘛，后面再考虑更多指令情况：</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compileElement</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> childNodes = el.childNodes;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line">    [].slice.call(childNodes).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>;</span><br><span class="line">        <span class="keyword">var</span> text = node.textContent;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (self.isTextNode(node) &amp;&amp; reg.test(text)) &#123;  <span class="comment">// 判断是否是符合这种形式&#123;&#123;&#125;&#125;的指令</span></span><br><span class="line">            self.compileText(node, reg.exec(text)[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.childNodes &amp;&amp; node.childNodes.length) &#123;</span><br><span class="line">            self.compileElement(node);  <span class="comment">// 继续递归遍历子节点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compileText</span> (<span class="params">node, exp</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">var</span> initText = <span class="built_in">this</span>.vm[exp];</span><br><span class="line">    <span class="built_in">this</span>.updateText(node, initText);  <span class="comment">// 将初始化的数据初始化到视图中</span></span><br><span class="line">    <span class="keyword">new</span> Watcher(<span class="built_in">this</span>.vm, exp, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;  <span class="comment">// 生成订阅器并绑定更新函数</span></span><br><span class="line">        self.updateText(node, value);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">node, value</span>) </span>&#123;</span><br><span class="line">    node.textContent = <span class="keyword">typeof</span> value == <span class="string">&#x27;undefined&#x27;</span> ? <span class="string">&#x27;&#x27;</span> : value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">获取到最外层节点后，调用 compileElement 函数，对所有子节点进行判断，如果节点是文本节点且匹配&#123;&#123;&#125;&#125;这种形式指令的节点就开始进行编译处理，编译处理首先需要初始化视图数据，对应上面所说的步骤 1，接下去需要生成一个并绑定更新函数的订阅器，对应上面所说的步骤 2。这样就完成指令的解析、初始化、编译三个过程，一个解析器 Compile 也就可以正常的工作了。为了将解析器 Compile 与监听器 Observer 和订阅者 Watcher 关联起来，我们需要再修改一下类 SelfVue 函数</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SelfVue</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line">  <span class="built_in">this</span>.vm = <span class="built_in">this</span>;</span><br><span class="line">  <span class="built_in">this</span>.data = options;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.keys(<span class="built_in">this</span>.data).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    self.proxyKeys(key);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  observe(<span class="built_in">this</span>.data);</span><br><span class="line">  <span class="keyword">new</span> Compile(options, <span class="built_in">this</span>.vm);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">更改后，我们就不要像之前通过传入固定的元素值进行双向绑定了，可以随便命名各种变量进行双向绑定了：</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/observer.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/watcher.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/compile.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> selfVue = <span class="keyword">new</span> SelfVue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">title</span>: <span class="string">&#x27;hello world&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        selfVue.title = <span class="string">&#x27;你好&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;, <span class="number">2000</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        selfVue.name = <span class="string">&#x27;canfoo&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;, <span class="number">2500</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>如上代码，在页面上可观察到，刚开始 titile 和 name 分别被初始化为 ‘hello world’ 和空，2s 后 title 被替换成 ‘你好’ 3s 后 name 被替换成 ‘canfoo’ 了。废话不多说，再给你们来一个这个版本的代码（v2），<a href="https://github.com/canfoo/self-vue/tree/master/v2">获取代码！</a><br>到这里，一个数据双向绑定功能已经基本完成了，接下去就是需要完善更多指令的解析编译，在哪里进行更多指令的处理呢？答案很明显，只要在上文说的 compileElement 函数加上对其他指令节点进行判断，然后遍历其所有属性，看是否有匹配的指令的属性，如果有的话，就对其进行解析编译。这里我们再添加一个 v-model 指令和事件指令的解析编译，对于这些节点我们使用函数 compile 进行解析处理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compile</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> nodeAttrs = node.attributes;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.forEach.call(nodeAttrs, <span class="function"><span class="keyword">function</span> (<span class="params">attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> attrName = attr.name;</span><br><span class="line">    <span class="keyword">if</span> (self.isDirective(attrName)) &#123;</span><br><span class="line">      <span class="keyword">var</span> exp = attr.value;</span><br><span class="line">      <span class="keyword">var</span> dir = attrName.substring(<span class="number">2</span>);</span><br><span class="line">      <span class="keyword">if</span> (self.isEventDirective(dir)) &#123;</span><br><span class="line">        <span class="comment">// 事件指令</span></span><br><span class="line">        self.compileEvent(node, self.vm, exp, dir);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// v-model 指令</span></span><br><span class="line">        self.compileModel(node, self.vm, exp, dir);</span><br><span class="line">      &#125;</span><br><span class="line">      node.removeAttribute(attrName);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的 compile 函数是挂载 Compile 原型上的，它首先遍历所有节点属性，然后再判断属性是否是指令属性，如果是的话再区分是哪种指令，再进行相应的处理，处理方法相对来说比较简单，这里就不再列出来，想要马上看阅读代码的同学可以马上<a href="https://github.com/canfoo/self-vue/tree/master/v3">点击这里获取。</a><br>最后我们在稍微改造下类 SelfVue，使它更像 vue 的用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SelfVue</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line">  <span class="built_in">this</span>.data = options.data;</span><br><span class="line">  <span class="built_in">this</span>.methods = options.methods;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.keys(<span class="built_in">this</span>.data).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    self.proxyKeys(key);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  observe(<span class="built_in">this</span>.data);</span><br><span class="line">  <span class="keyword">new</span> Compile(options.el, <span class="built_in">this</span>);</span><br><span class="line">  options.mounted.call(<span class="built_in">this</span>); <span class="comment">// 所有事情处理好后执行mounted函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候我们可以来真正测试了，在页面上设置如下东西：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;clickMe&quot;</span>&gt;</span>click me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/observer.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/watcher.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/compile.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="keyword">new</span> SelfVue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">title</span>: <span class="string">&#x27;hello world&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">name</span>: <span class="string">&#x27;canfoo&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">clickMe</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.title = <span class="string">&#x27;hello world&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">mounted</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">window</span>.setTimeout(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.title = <span class="string">&#x27;你好&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;, <span class="number">1000</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>是不是看起来跟 vue 的使用方法一样，哈，真正的大功告成！想要代码，直接<a href="https://github.com/canfoo/self-vue/tree/master/v3">点击这里获取！</a>现象还没描述？直接上图！！！请观赏</p><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1608036436207-2a6aef1b-dcfd-47ab-8505-6f7a7cb7ccc3.gif#id=SxHuz&originHeight=449&originWidth=600&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>其实这个效果图，就是本文开头贴出来的效果图了，前文说着要带着大家实现，所以就在这里把图再贴一次了，这叫首尾呼应嘛</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue双向绑定原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redux - saga</title>
      <link href="/2020/06/29/cgofeg/"/>
      <url>/2020/06/29/cgofeg/</url>
      
        <content type="html"><![CDATA[<p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1606297313869-e3709afe-f21f-4f9b-a953-1a3a9af3e3b0.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=jJAwN&originHeight=885&originWidth=1814&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><ul><li><p>在 saga 任务中，如果 yield 了一个普通数据，saga 不作任何处理，仅仅将数据传递给 yield 表达式（把得到的数据放到 next 的参数中），因此，在 saga 中，yield 一个普通数据没什么意义。</p></li><li><p>saga 需要你在 yield 后面放上一些合适的 saga 指令（saga effects），如果放的是指令，saga 中间件会根据不同的指令进行特殊处理，以控制整个任务的流程。</p></li><li><p>每个指令本质上就是一个函数，该函数调用后，会返回一个指令对象，saga 会接收到该指令对象，进行各种处理</p></li><li><p>一旦 saga 任务完成（生成器函数运行完成），则 saga 中间件一定结束</p></li><li><p>指令前面必须使用 yield，以确保该指令的返回结果被 saga 控制</p></li></ul><h2 id="saga-指令"><a href="#saga-指令" class="headerlink" title="saga 指令"></a>saga 指令</h2><ul><li>take 指令：【阻塞】监听某个 action，如果 action 发生了，则会进行下一步处理，take 指令仅监听一次。yield 得到的是完整的 action 对象</li><li>all 指令：【阻塞】该函数传入一个数组，数组中放入生成器，saga 会等待所有的生成器全部完成后才会进一步处理</li><li>takeEvery 指令：不断的监听某个 action，当某个 action 到达之后，运行一个函数。takeEvery 永远不会结束当前的生成器</li><li>delay 指令：【阻塞】阻塞指定的毫秒数</li><li>put 指令：用于重新触发 action，相当于 dispatch 一个 action</li><li>call 指令：【可能阻塞】用于副作用（通常是异步）函数调用</li><li>apply 指令：【可能阻塞】用于副作用（通常是异步）函数调用</li><li>select 指令：用于得到当前仓库中的数据</li><li>cps 指令：【可能阻塞】用于调用那些传统的回调方式的异步函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Redux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> saga </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React - Redux</title>
      <link href="/2020/06/28/ufmyxp/"/>
      <url>/2020/06/28/ufmyxp/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-redux"><a href="#什么是-redux" class="headerlink" title="什么是 redux"></a>什么是 redux</h2><p>Redux 是一个流行的 JavaScript 框架，为应用程序提供一个可预测的状态容器。Redux 基于简化版本的 Flux 框架，Flux 是 Facebook 开发的一个框架。在标准的 MVC 框架中，数据可以在 UI 组件和存储之间双向流动，而 Redux 严格限制了数据只能在一个方向上流动<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601449857357-dd25106d-4ac2-4c50-9d71-80807411afaa.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=LCVTP&originHeight=330&originWidth=687&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>随着 JavaScript 单页应用开发日趋复杂，JavaScript 需要管理比任何时候都要多的 state （状态）。 这些 state 可能包括服务器响应、缓存数据、本地生成尚未持久化到服务器的数据，也包括 UI 状态，如激活的路由，被选中的标签，是否显示加载动效或者分页器等等。</p><h2 id="为什么要管理状态"><a href="#为什么要管理状态" class="headerlink" title="为什么要管理状态"></a>为什么要管理状态</h2><p>管理不断变化的 state 非常困难。如果一个 model 的变化会引起另一个 model 变化，那么当 view 变化时，就可能引起对应 model 以及另一个 model 的变化，依次地，可能会引起另一个 view 的变化。直至你搞不清楚到底发生了什么。state 在什么时候，由于什么原因，如何变化已然不受控制。 当系统变得错综复杂的时候，想重现问题或者添加新功能就会变得举步维艰。<br>跟随 Flux、CQRS 和 Event Sourcing 的脚步，通过限制更新发生的时间和方式，Redux 试图让 state 的变化变得可预测。这些限制条件反映在 Redux 的三大原则中。</p><h2 id="三大原则"><a href="#三大原则" class="headerlink" title="三大原则"></a>三大原则</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Redux 可以用这三个基本原则来描述：</span><br></pre></td></tr></table></figure><h4 id="单一数据源"><a href="#单一数据源" class="headerlink" title="单一数据源"></a>单一数据源</h4><p>整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中。<br>这让同构应用开发变得非常容易。来自服务端的 state 可以在无需编写更多代码的情况下被序列化并注入到客户端中。由于是单一的 state tree ，调试也变得非常容易。在开发中，你可以把应用的 state 保存在本地，从而加快开发速度。此外，受益于单一的 state tree ，以前难以实现的如“撤销/重做”这类功能也变得轻而易举。<br>console.log(store.getState())<br>/_ 输出 { visibilityFilter: ‘SHOW_ALL’, todos: [ { text: ‘Consider using Redux’, completed: true, }, { text: ‘Keep all state in a single tree’, completed: false } ] } _／</p><h4 id="State-是只读的"><a href="#State-是只读的" class="headerlink" title="State 是只读的"></a>State 是只读的</h4><p>唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。<br>这样确保了视图和网络请求都不能直接修改 state，相反它们只能表达想要修改的意图。因为所有的修改都被集中化处理，且严格按照一个接一个的顺序执行，因此不用担心 race condition 的出现。 Action 就是普通对象而已，因此它们可以被日志打印、序列化、储存、后期调试或测试时回放出来。<br>store.dispatch({ type: ‘COMPLETE_TODO’, index: 1 })<br>store.dispatch({ type: ‘SET_VISIBILITY_FILTER’, filter: ‘SHOW_COMPLETED’ })</p><h4 id="使用纯函数来执行修改"><a href="#使用纯函数来执行修改" class="headerlink" title="使用纯函数来执行修改"></a>使用纯函数来执行修改</h4><p>为了描述 action 如何改变 state tree ，你需要编写 reducers。<br>Reducer 只是一些纯函数，它接收先前的 state 和 action，并返回新的 state。刚开始你可以只有一个 reducer，随着应用变大，你可以把它拆成多个小的 reducers，分别独立地操作 state tree 的不同部分，因为 reducer 只是函数，你可以控制它们被调用的顺序，传入附加数据，甚至编写可复用的 reducer 来处理一些通用任务，如分页器。<br>function visibilityFilter(state = ‘SHOW_ALL’, action) { switch (action.type) { case ‘SET_VISIBILITY_FILTER’: return action.filter default: return state } }<br>function todos(state = [], action) { switch (action.type) { case ‘ADD_TODO’: return [ …state, { text: action.text, completed: false } ] case ‘COMPLETE_TODO’: return state.map((todo, index) =&gt; { if (index === action.index) { return Object.assign({}, todo, { completed: true }) } return todo }) default: return state } }<br>import { combineReducers, createStore } from ‘redux’ let reducer = combineReducers({ visibilityFilter, todos }) let store = createStore(reducer) 就是这样，现在你应该明白 Redux 是怎么回事了。</p><h2 id="先前技术"><a href="#先前技术" class="headerlink" title="先前技术"></a>先前技术</h2><p>Redux 是一个混合产物。它和一些设计模式及技术相似，但也有不同之处。让我们来探索一下这些相似与不同。<br>Flux Redux 可以被看作 Flux 的一种实现吗？ 是，也可以说 不是。<br>（别担心，它得到了 Flux 作者的认可，如果你想确认。）<br>Redux 的灵感来源于 Flux 的几个重要特性。和 Flux 一样，Redux 规定，将模型的更新逻辑全部集中于一个特定的层（Flux 里的 store，Redux 里的 reducer）。Flux 和 Redux 都不允许程序直接修改数据，而是用一个叫作 “action” 的普通对象来对更改进行描述。<br>而不同于 Flux ，Redux 并没有 dispatcher 的概念。原因是它依赖纯函数来替代事件处理器。纯函数构建简单，也不需额外的实体来管理它们。你可以将这点看作这两个框架的差异或细节实现，取决于你怎么看 Flux。Flux 常常被表述为 (state, action) =&gt; state。从这个意义上说，Redux 无疑是 Flux 架构的实现，且得益于纯函数而更为简单。<br>和 Flux 的另一个重要区别，是 Redux 设想你永远不会变动你的数据。你可以很好地使用普通对象和数组来管理 state ，而不是在多个 reducer 里变动数据。正确且简便的方式是，你应该在 reducer 中返回一个新对象来更新 state， 同时配合 object spread 运算符提案 或一些库，如 Immutable。<br>虽然出于性能方面的考虑，写不纯的 reducer 来变动数据在技术上是可行的，但我们并不鼓励这么做。不纯的 reducer 会使一些开发特性，如时间旅行、记录/回放或热加载不可实现。此外，在大部分实际应用中，这种数据不可变动的特性并不会带来性能问题，就像 Om 所表现的，即使对象分配失败，仍可以防止昂贵的重渲染和重计算。而得益于 reducer 的纯度，应用内的变化更是一目了然。<br>Elm Elm 是一种函数式编程语言，由 Evan Czaplicki 受 Haskell 语言的启发开发。它执行一种 “model view update” 的架构 ，更新遵循 (state, action) =&gt; state 的规则。 Elm 的 “updater” 与 Redux 里的 reducer 服务于相同的目的。<br>不同于 Redux，Elm 是一门语言，因此它在执行纯度，静态类型，不可变动性，action 和模式匹配等方面更具优势。即使你不打算使用 Elm，也可以读一读 Elm 的架构，尝试一把。基于此，有一个有趣的使用 JavaScript 库实现类似想法 的项目。Redux 应该能从中获得更多的启发！ 为了更接近 Elm 的静态类型，Redux 可以使用一个类似 Flow 的渐进类型解决方案 。<br>Immutable Immutable 是一个可实现持久数据结构的 JavaScript 库。它性能很好，并且命名符合 JavaScript API 的语言习惯 。<br>Immutable 及类似的库都可以与 Redux 对接良好。尽可随意捆绑使用！<br>Redux 并不在意你如何存储 state，state 可以是普通对象，不可变对象，或者其它类型。 为了从 server 端写同构应用或融合它们的 state ，你可能要用到序列化或反序列化的机制。但除此以外，你可以使用任何数据存储的库，只要它支持数据的不可变动性。举例说明，对于 Redux state ，Backbone 并无意义，因为 Backbone model 是可变的。<br>注意，即便你使用支持 cursor 的不可变库，也不应在 Redux 的应用中使用。整个 state tree 应被视为只读，并需通过 Redux 来更新 state 和订阅更新。因此，通过 cursor 来改写，对 Redux 来说没有意义。而如果只是想用 cursor 把 state tree 从 UI tree 解耦并逐步细化 cursor，应使用 selector 来替代。 Selector 是可组合的 getter 函数组。具体可参考 reselect，这是一个优秀、简洁的可组合 selector 的实现。<br>Baobab Baobab 是另一个流行的库，实现了数据不可变特性的 API，用以更新纯 JavaScript 对象。你当然可以在 Redux 中使用它，但两者一起使用并没有什么优势。<br>Baobab 所提供的大部分功能都与使用 cursors 更新数据相关，而 Redux 更新数据的唯一方法是分发一个 action 。可见，两者用不同方法，解决的却是同样的问题，相互并无增益。<br>不同于 Immutable ，Baobab 在引擎下还不能实现任何特别有效的数据结构，同时使用 Baobab 和 Redux 并无裨益。这种情形下，使用普通对象会更简便。<br>Rx Reactive Extensions (和它们正在进行的 现代化重写) 是管理复杂异步应用非常优秀的方案。以外，还有致力于构建将人机交互作模拟为相互依赖的可观测变量的库。<br>同时使用它和 Redux 有意义么？当然！它们配合得很好。将 Redux store 视作可观察变量非常简便，例如：<br>function toObservable(store) { return { subscribe({ next }) { const unsubscribe = store.subscribe(() =&gt; next(store.getState())) next(store.getState()) return { unsubscribe } } } } 使用类似方法，你可以组合不同的异步流，将其转化为 action ，再提交到 store.dispatch() 。<br>问题在于: 在已经使用了 Rx 的情况下，你真的需要 Redux 吗？ 不一定。通过 Rx 重新实现 Redux 并不难。有人说仅需使用一两句的 .scan() 方法即可。这种做法说不定不错！<br>如果你仍有疑虑，可以去查看 Redux 的源代码 (并不多) 以及生态系统 (例如开发者工具)。如果你无意于此，仍坚持使用交互数据流，可以去探索一下 Cycle 这样的库，或把它合并到 Redux 中。记得告诉我们它运作得如何！</p><h2 id="生态系统"><a href="#生态系统" class="headerlink" title="生态系统"></a>生态系统</h2><p>Redux 是一个体小精悍的库，但它相关的内容和 API 都是精挑细选的，足以衍生出丰富的工具集和可扩展的生态系统。<br>如果需要关于 Redux 所有内容的列表，推荐移步至 Awesome Redux。它包含了示例、样板代码、中间件、工具库，还有很多其它相关内容。要想学习 React 和 Redux ，React/Redux Links 包含了教程和不少有用的资源，Redux Ecosystem Links 则列出了 许多 Redux 相关的库及插件。<br>本页将只列出由 Redux 维护者审查过的一部分内容。不要因此打消尝试其它工具的信心！整个生态发展得太快，我们没有足够的时间去关注所有内容。建议只把这些当作“内部推荐”，如果你使用 Redux 创建了很酷的内容，不要犹豫，马上发个 PR 吧。<br>学习 Redux 演示 开始学习 Redux — 向作者学习 Redux 基础知识（30 个免费的教学视频） 学习 Redux — 搭建一个简单的图片应用，简要使用了 Redux、React Router 和 React.js 的核心思想 示例应用 官方示例 — 一些官方示例，涵盖了多种 Redux 技术 SoundRedux — 用 Redux 构建的 SoundCloud 客户端 grafgiti — 在你的 Github 的 Contributor 页上创建 graffiti React-lego — 如何像积木一样，一块块地扩展你的 Redux 技术栈 教程与文章 Redux 教程 Redux Egghead 课程笔记 使用 React Native 进行数据整合 What the Flux?! Let’s Redux. Leveling Up with React: Redux A cartoon intro to Redux Understanding Redux Handcrafting an Isomorphic Redux Application (With Love) Full-Stack Redux Tutorial Getting Started with React, Redux, and Immutable Secure Your React and Redux App with JWT Authentication Understanding Redux Middleware Angular 2 — Introduction to Redux Apollo Client: GraphQL with React and Redux Using redux-saga To Simplify Your Growing React Native Codebase Build an Image Gallery Using Redux Saga Working with VK API (in Russian) 演讲</p><h1 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h1><p>帮助用户管理 store 中的状态</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>cnpm install react-redux –save</p><h2 id="仓库的引用"><a href="#仓库的引用" class="headerlink" title="仓库的引用"></a>仓库的引用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;#app&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="页面注入数据"><a href="#页面注入数据" class="headerlink" title="页面注入数据"></a>页面注入数据</h2><p>写法一:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;react-redex&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; datalist &#125; = [];</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Children</span> <span class="attr">datalist</span>=<span class="string">&#123;datalist&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> state.reducer;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">update</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      dispatch(&#123; <span class="attr">type</span>: <span class="string">&quot;&quot;</span>, payload &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(App);</span><br></pre></td></tr></table></figure><p>写法二:<br>通过 es7 Decorator 装饰器完成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;react-redex&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> state.reducer;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">update</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      dispatch(&#123; <span class="attr">type</span>: <span class="string">&quot;&quot;</span>, payload &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">@connect(mapStateToProps, mapDispatchToProps)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; datalist &#125; = [];</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Children</span> <span class="attr">datalist</span>=<span class="string">&#123;datalist&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>decorator（装饰器）是 ES7 里面的一个语法糖，作用于类、类属性\方法，为它们提供一个实现与业务逻辑无关的功能的接口。</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>//babel 6.0<br>npm install babel-plugin-transform-decorator –save<br>//babel 7.0<br>npm install @babel/plugin-proposal-decorators</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>.babelrc</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;presets&quot;</span>: [<span class="string">&#x27;react-app&#x27;</span>],</span><br><span class="line">   <span class="string">&quot;plugins&quot;</span>: [<span class="string">&quot;@babel/plugin-proposal-decorators&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="wepy-redux"><a href="#wepy-redux" class="headerlink" title="wepy-redux"></a>wepy-redux</h1><h2 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h2><p>cnpm install redux redux-actions redux-promise wepy-redux –save</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601449895739-f967e699-389d-4091-9216-97e2a2b207fe.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=VdoDb&originHeight=113&originWidth=214&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601449910503-48335523-6dfe-45a9-bcbe-0e887ef1ac3c.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=QiN1x&originHeight=243&originWidth=196&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h2 id="创建-store"><a href="#创建-store" class="headerlink" title="创建 store"></a>创建 store</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Reducers <span class="keyword">from</span> <span class="string">&quot;./reducer&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> promiseMiddleware <span class="keyword">from</span> <span class="string">&quot;redux-promise&quot;</span>;</span><br><span class="line"><span class="comment">//写法一：</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">configStore</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createStore(Reducers, applyMiddleware(promiseMiddleware))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写法二</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(Reducers, applyMiddleware(promiseMiddleware))</span><br></pre></td></tr></table></figure><h2 id="创建-reducer"><a href="#创建-reducer" class="headerlink" title="创建 reducer"></a>创建 reducer</h2><p><strong>rank.js</strong><br>​</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultState = &#123;</span><br><span class="line">  <span class="attr">rankList</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> rankReducer = <span class="function">(<span class="params">state = defaultState, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; type, payload &#125; = action;</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;UPDATE&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">rankList</span>: payload &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> rankReducer;</span><br></pre></td></tr></table></figure><p><strong>index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> rankReducer <span class="keyword">from</span> <span class="string">&quot;./rank&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> topListReducer <span class="keyword">from</span> <span class="string">&quot;./toplist&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> searchReducer <span class="keyword">from</span> <span class="string">&quot;./search&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> Reducers = combineReducers(&#123;</span><br><span class="line">   rankReducer,</span><br><span class="line">   topListReducer,</span><br><span class="line">   searchReducer,</span><br><span class="line">   ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Reducers;</span><br></pre></td></tr></table></figure><h2 id="创建-action"><a href="#创建-action" class="headerlink" title="创建 action"></a>创建 action</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; RNAK_UPDATE &#125; <span class="keyword">from</span> <span class="string">&quot;../type/rank&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createAction &#125; <span class="keyword">from</span> <span class="string">&quot;redux-actions&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;@/utils/request&quot;</span>;</span><br><span class="line"><span class="comment">//方式一:</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">payload</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: RNAK_UPDATE,</span><br><span class="line">    payload,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式二：</span></span><br><span class="line"><span class="keyword">const</span> getJson = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">await</span> axios.get(url);</span><br><span class="line">  <span class="keyword">return</span> result.data.data.slider;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> update = createAction(RNAK_UPDATE, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> url =</span><br><span class="line">    <span class="string">&quot;https://c.y.qq.com/musichall/fcgi-bin/fcg_yqqhomepagerecommend.fcg&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> getJson(url);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="创建-type"><a href="#创建-type" class="headerlink" title="创建 type"></a>创建 type</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> RNAK_UPDATE = <span class="string">&quot;UPDATE&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> TOPLIST_UPDATE = <span class="string">&quot;UPDATE&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="绑定及监听"><a href="#绑定及监听" class="headerlink" title="绑定及监听"></a>绑定及监听</h2><p>在 app.wepy 文件中，添加下面代码：<br>import{setStore}from’wepy-redux’<br>importstorefrom’./store’<br>setStore(store)<br>setStore()是用来将仓库中的数据绑定到页面中<br>类似 react-redux 中的 <Provider store={store}></Provider>组件</p><h1 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h1><h2 id="职责："><a href="#职责：" class="headerlink" title="职责："></a>职责：</h2><ul><li>action 描述“发生了什么”的一个动作，通过 dispatch 来执行这个动作。</li><li>reducers 来根据 action 更新 state 的用法。</li><li>store 就是把它们联系到一起的对象</li></ul><h2 id="什么时候使用"><a href="#什么时候使用" class="headerlink" title="什么时候使用"></a>什么时候使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-有参数或者数据需要被多个页面共享的时候;</span><br></pre></td></tr></table></figure><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li>提供 createStore() 方法创建一个仓库；</li><li>提供 getState() 方法获取 state；</li><li>提供 dispatch(action) 方法更新 state；</li><li>通过 subscribe(listener) 注册监听器;</li><li>通过 unsubscribe(listener) 返回的函数注销监听器。</li></ul><p><strong>再次强调一下 Redux 应用只有一个单一的 store。</strong></p><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>当需要拆分数据处理逻辑时，你应该使用 reducer 组合 而不是创建多个 store。 根据已有的 reducer 来创建 store 是非常容易的。 使用 combineReducers() 将多个 reducer 合并成为一个。<br>现在我们将其导入，并传递 createStore()。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//reducers</span></span><br><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ...Reducer <span class="keyword">from</span> somepath;</span><br><span class="line"><span class="keyword">import</span> ...Reducer <span class="keyword">from</span> somepath;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Reducers = combineReducers(&#123;</span><br><span class="line">  ...Reducer,</span><br><span class="line">  ...Reducer,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Reducers <span class="keyword">from</span> <span class="string">&#x27;./reducers&#x27;</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(Reducers)</span><br></pre></td></tr></table></figure><h2 id="配置初始化数据"><a href="#配置初始化数据" class="headerlink" title="配置初始化数据"></a>配置初始化数据</h2><p>createStore() 的第二个参数是可选的, 用于设置 state 初始状态。这对开发应用时非常有用，服务器端 redux 应用的 state 结构可以与客户端保持一致, 那么客户端可以将从网络接收到的服务端 state 直接用于本地数据初始化。<br>letstore=createStore(reducer,window.STATE_FROM_SERVER)</p><h2 id="添加监听"><a href="#添加监听" class="headerlink" title="添加监听"></a>添加监听</h2><p>当仓库状态改变时，页面数据也需要随着改变，通过 subscribe 监听数据变化，并绑定到视图</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> template = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"><span class="keyword">const</span> element = <span class="built_in">document</span>.getElementById(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> render = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ReactDOM.render(template, element);</span><br><span class="line">&#125;;</span><br><span class="line">render();</span><br><span class="line"><span class="comment">//只能监听一个函数，所以对render方法改造</span></span><br><span class="line">store.subcribe(render);</span><br></pre></td></tr></table></figure><h2 id="移除监听"><a href="#移除监听" class="headerlink" title="移除监听"></a>移除监听</h2><p>创建监听后，store.subscribe() 将返回一个函数作为返回值，调用这个函数，即可移除对视图监听</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> unsubscribe = store.subscribe(listener);</span><br><span class="line">unsubscribe();</span><br></pre></td></tr></table></figure><h1 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h1><p>Action 是把数据从应用传到 store 的有效载荷。 <strong>它是 store 数据的唯一来源。</strong> 一般来说你会通过 store.dispatch() 将 action 传到 store。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ADD_TODO = <span class="string">&#x27;ADD_TODO&#x27;</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">type</span>: ADD_TODO,</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&#x27;Build my first Redux app&#x27;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Action 本质上是 JavaScript 普通对象。我们约定，action 内必须使用一个字符串类型的 type 字段来表示将要执行的动作。多数情况下，type 会被定义成字符串常量。当应用规模越来越大时，建议使用单独的模块或文件来存放 action。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PLUS, MINUS &#125; <span class="keyword">from</span> <span class="string">&quot;./store/action&quot;</span>;</span><br></pre></td></tr></table></figure><p>除了 type 字段外，action 对象的结构完全由你自己决定。参照 Flux 标准 Action 获取关于如何构造 action 的建议。<br>这时，我们还需要再添加一个 action index 来表示用户完成任务的动作序列号。因为数据是存放在数组中的，所以我们通过下标 index 来引用特定的任务。而实际项目中一般会在新建数据的时候生成唯一的 ID 作为数据的引用标识。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;PLUS&quot;</span>,</span><br><span class="line">      <span class="attr">index</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们应该尽量减少在 action 中传递的数据。比如上面的例子，传递 index 就比把整个任务对象传过去要好。<br>最后，再添加一个 action type 来表示当前的任务展示选项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">type</span>: SET_VISIBILITY_FILTER,</span><br><span class="line">    <span class="attr">filter</span>: SHOW_COMPLETED</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发起-Action"><a href="#发起-Action" class="headerlink" title="发起 Action"></a>发起 Action</h2><p>通过 dispatch()来发起一个 Action, 接受一个对象，对象中有 type,payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(&#123; <span class="attr">type</span>: <span class="string">&quot;PLUS&quot;</span>, <span class="attr">payload</span>: [something] &#125;);</span><br></pre></td></tr></table></figure><h1 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h1><p>指定了应用状态的变化如何响应 actions 并发送到 store 的 reducer 接收旧的 state 和 action，返回新的 state。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> defaultState = &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = defaultState, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; type, payload &#125; = action;</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;PLUS&quot;</span>:</span><br><span class="line">      <span class="comment">//写法一：</span></span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">count</span>: state.count + <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;MINUS&quot;</span>:</span><br><span class="line">      <span class="comment">//写法二：</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class="line">        <span class="attr">count</span>: state.count - <span class="number">1</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer);</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p><strong>永远不要在 reducer 里做这些操作：</strong></p><ul><li>修改传入参数</li><li>执行有副作用的操作，如 API 请求和路由跳转</li><li>调用非纯函数，如 Date.now() 或 Math.random()</li></ul><h2 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h2><h2 id="为什么要使用纯函数？"><a href="#为什么要使用纯函数？" class="headerlink" title="为什么要使用纯函数？"></a>为什么要使用纯函数？</h2><p>当我们的程序变得庞大的时候, 将不可避免地引发一些 bugs。我们不能保证杜绝 bug 产生, 但是我们可以通过某些编程方式来减少一些错误的发生。<br>纯函数就是其中一种,它也是函数式编程中一部分。那它为什么可以起到减少 bug 的作用呢, 原因就在于能被称之为纯函数而制定的一些原则，我们来简单看下<br><strong>3 个原则：</strong></p><ul><li>变量都只在函数作用域内获取, 作为的函数的参数传入</li><li><strong>不会产生副作用</strong>(side effects), 不会改变被传入的数据或者其他数据</li><li>相同的输入 <strong>一定</strong> 保证相同的输出(same input -&gt; same ouput)</li></ul><h2 id="纯函数的一些优点"><a href="#纯函数的一些优点" class="headerlink" title="纯函数的一些优点"></a>纯函数的一些优点</h2><ul><li>容易测试(testable)</li><li>因为相同的输入必定是相同的输出，因此结果可以缓存(cacheable)</li><li>自我记录(Self documenting),因为需要的变量都是参数，参数命名良好的情况下即便很久以后再去看这个函数依旧可以很容易知道这个函数需要哪些参数</li><li>因为不用担心有副作用(side-effects),因此可以更好地工作</li></ul><h2 id="合并-reducer"><a href="#合并-reducer" class="headerlink" title="合并 reducer"></a>合并 reducer</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>当我们的业务逻辑足够复杂的时候，一个全局的 state 已经不能很好维持每个页面中的共享数据，迫切的需要进行作用域隔离 combineReducers 函数应用而生</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> reducer1 = <span class="function">()=&gt;</span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> reducer2 = <span class="function">()=&gt;</span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> Reducers  = combineReducers(&#123;</span><br><span class="line">        <span class="attr">reducer1</span>:reducer1,</span><br><span class="line">        reducer2,</span><br><span class="line">        ...</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="源码实现"><a href="#源码实现" class="headerlink" title="源码实现"></a>源码实现</h2><h4 id="store-index-js"><a href="#store-index-js" class="headerlink" title="store/index.js"></a>store/index.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Redux</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">reducer</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.reducer = reducer;</span><br><span class="line">    <span class="built_in">this</span>.listener = [];</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="number">19</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> instance;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">createStore</span>(<span class="params">reducer</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.instance) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.instance;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="built_in">this</span>.instance = <span class="keyword">new</span> Redux(reducer));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//触发dispatch事件</span></span><br><span class="line">  <span class="function"><span class="title">dispatch</span>(<span class="params">action</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> state = <span class="built_in">this</span>.reducer(<span class="built_in">this</span>.state, action);</span><br><span class="line">    <span class="comment">// 发布</span></span><br><span class="line">    <span class="built_in">this</span>.listener.forEach(<span class="function">(<span class="params">listen</span>) =&gt;</span> &#123;</span><br><span class="line">      listen(state);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//获取state</span></span><br><span class="line">  <span class="function"><span class="title">getStore</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.state;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//卸载redux</span></span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.instance = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 监听</span></span><br><span class="line">  <span class="function"><span class="title">subscribe</span>(<span class="params">fn</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 添加订阅者</span></span><br><span class="line">    <span class="built_in">this</span>.listener.push(fn);</span><br><span class="line">    <span class="comment">// 返回卸载的方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.remove;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function"><span class="keyword">function</span> (<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;add&quot;</span>:</span><br><span class="line">      state.name += <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Redux.createStore(reducer);</span><br></pre></td></tr></table></figure><h4 id="页面的调用"><a href="#页面的调用" class="headerlink" title="页面的调用"></a>页面的调用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Store <span class="keyword">from</span> <span class="string">&quot;../store&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comp1</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">name</span>: Store.getStore().name,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//监听事件</span></span><br><span class="line">    Store.subscribe(<span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        <span class="attr">name</span>: state.name,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        Comp1 &#123;this.state.name&#125;</span></span><br><span class="line"><span class="xml">&#123;//点击事件触发dispatch &#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> Store.dispatch(&#123; type: &quot;add&quot; &#125;)&#125;&gt;点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Comp1;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Redux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - 自定义组件</title>
      <link href="/2020/06/26/tb3bz4/"/>
      <url>/2020/06/26/tb3bz4/</url>
      
        <content type="html"><![CDATA[<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>第三方组件</li><li>自定义组件<ul><li>对象组件</li><li>vue 单文件组件</li><li>template 组件</li></ul></li></ul><p>局部组件 - 对象组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="attr">Layout</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;Layout&quot;</span>,</span><br><span class="line"><span class="comment">// 模板</span></span><br><span class="line">        <span class="attr">template</span>:<span class="string">&#x27;&lt;div class=&quot;wraper&quot;&gt;&lt;/div&gt;&#x27;</span>,</span><br><span class="line"><span class="comment">// 组件内部状态</span></span><br><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line"><span class="comment">// 组件外部状态</span></span><br><span class="line"><span class="comment">// []</span></span><br><span class="line"><span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="attr">props</span>:&#123;&#125;,</span><br><span class="line">        <span class="attr">methods</span>:&#123;&#125;,</span><br><span class="line">        <span class="attr">computed</span>:&#123;&#125;,</span><br><span class="line">        <span class="attr">watch</span>:&#123;&#125;,</span><br><span class="line">        <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>全局组件 - 对象组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.Component(<span class="string">&#x27;Layout&#x27;</span>,&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;Layout&quot;</span>,</span><br><span class="line">  <span class="attr">template</span>:<span class="string">&#x27;&lt;div class=&quot;wraper&quot;&gt;&lt;/div&gt;&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line"><span class="attr">props</span>:&#123;&#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;&#125;,</span><br><span class="line">  <span class="attr">computed</span>:&#123;&#125;,</span><br><span class="line">  <span class="attr">watch</span>:&#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="vue-单文件组件"><a href="#vue-单文件组件" class="headerlink" title="vue 单文件组件"></a>vue 单文件组件</h2><p>components/comp.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    this is comp page</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;comp&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">Comp</span>/&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Comp <span class="keyword">from</span> <span class="string">&#x27;@/components/comp/.vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  Comp</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="vue-模板组件"><a href="#vue-模板组件" class="headerlink" title="vue 模板组件"></a>vue 模板组件</h2><p>public/index.html</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;comp&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>this is comp C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>全局注册：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Comp</span>/&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Comp <span class="keyword">from</span> <span class="string">&#x27;@/components/comp/.vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> Vue.component(<span class="string">&#x27;Comp&#x27;</span>,&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">template</span>:<span class="string">&#x27;#comp&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  name：<span class="string">&quot;&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>局部注册：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Comp</span>/&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Comp <span class="keyword">from</span> <span class="string">&#x27;@/components/comp/.vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">Comp</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">template</span>:<span class="string">&quot;#comp&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种</span></span><br><span class="line">   <span class="attr">props</span>:[]</span><br><span class="line">   <span class="comment">//第二种</span></span><br><span class="line">   <span class="attr">props</span>:&#123;</span><br><span class="line">       <span class="attr">title</span>:&#123;</span><br><span class="line">           <span class="attr">type</span>:<span class="built_in">String</span>,</span><br><span class="line">           <span class="attr">required</span>:<span class="literal">true</span>, <span class="comment">//为真是必须传</span></span><br><span class="line">           <span class="attr">default</span>:<span class="string">&#x27;&#x27;</span>, <span class="comment">//默认值</span></span><br><span class="line">           <span class="function"><span class="title">validator</span>(<span class="params">n</span>)</span>&#123;<span class="comment">//自定义验证规则</span></span><br><span class="line">               <span class="keyword">return</span> <span class="comment">//为真就不报错为假就报错，报错需要thorw new Error();</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue自定义组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - 自定义指令</title>
      <link href="/2020/06/23/wdl0pr/"/>
      <url>/2020/06/23/wdl0pr/</url>
      
        <content type="html"><![CDATA[<p>v-开头的行内属性，都是指令，不同的指令可以完成或实现不同的功能。<br>除了核心功能默认内置的指令 (v-model 和 v-show)，Vue 也允许注册自定义指令<br>注册一个自定义指令有全局注册与局部注册。</p><h2 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h2><ul><li>全局注册主要是用过 Vue.directive 方法进行注册。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册一个全局自定义指令 `v-focus`</span></span><br><span class="line">Vue.directive(<span class="string">&quot;focus&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">// 当被绑定的元素插入到 DOM 中时……</span></span><br><span class="line">  <span class="attr">inserted</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 聚焦元素</span></span><br><span class="line">    el.focus(); <span class="comment">// 页面加载完成之后自动让输入框获取到焦点的小功能</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>在 main.js 引入并调用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Directives <span class="keyword">from</span> <span class="string">&quot;./util/directives&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Directives);</span><br></pre></td></tr></table></figure><h2 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h2><p>直接在组件 options 选项中设置 directive 属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">directives: &#123;</span><br><span class="line">  <span class="attr">focus</span>: &#123;</span><br><span class="line">    <span class="comment">// 指令的定义</span></span><br><span class="line">    <span class="attr">inserted</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">      el.focus() <span class="comment">// 页面加载完成之后自动让输入框获取到焦点的小功能</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生命周期钩子函数"><a href="#生命周期钩子函数" class="headerlink" title="生命周期钩子函数"></a>生命周期钩子函数</h2><p><strong>bind</strong>：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置<br><strong>inserted：</strong>被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)<br><strong>update</strong>：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新<br><strong>componentUpdated</strong>：指令所在组件的 VNode 及其子 VNode 全部更新后调用<br><strong>unbind</strong>：只调用一次，指令与元素解绑时调用</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue自定义指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - 自定义指令 &amp; JQuery</title>
      <link href="/2020/06/23/rz8ngc/"/>
      <url>/2020/06/23/rz8ngc/</url>
      
        <content type="html"><![CDATA[<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install jquery</span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> jquery</span><br></pre></td></tr></table></figure><p>jquery 中的触发事件可以自己定义在 mounted 中，如果需要使用 vue 中 data 的数据，直接使用 this.msg 是无法使用的，需要另外定义 const _this = this,<br>存储 this 之后便可以在事件中使用_this.msg 数据了。</p><p>需求：在品牌处可以输入，并且会有模糊搜索的下拉框，也可下拉选择，在输入完毕后检验值是否在下拉框中存在，聚焦时蓝色边框，change 时如果不存在则红框显示，存在的话就绿框提示，（就是带输入建议的输入框）<br>问题： 使用 element-ui 中的 el-autocomplete 组件，开始通过失焦事件来验证，但是如果选择了下拉框某个值时（选中后会将下拉框的值赋给上面的输入框），失焦事件触发会在赋值之前，因此拿失焦时输入框的值来进行判断时错误的，在先改变输入框的值后再去选择下拉框,change 事件有同样的 bug，没办法只能自己引入 jquery 来完成<img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1623194195063-b3cbef35-cafd-4266-9f04-62922e27bcfa.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#height=325&id=TEQpU&originHeight=359&originWidth=508&originalType=binary%E2%88%B6=1&status=done&style=none&width=460" loading="lazy"><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1623194218024-e5dcfff5-a92e-4b21-bd05-fc137b991ab6.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=mtEBL&originHeight=352&originWidth=216&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>点击输入框后，通过 placeholder 判断是否是品牌下的的输入框，因为每个输入框都有这个类，如果是的话则增加一个类名，如果第一次点击的位置和第二次鼠标点击的位置都是品牌下的输入框，则执行相应的逻辑判断,<br>在逻辑执行完后就删除其他处同样的类名 inputList</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _this = <span class="built_in">this</span>;</span><br><span class="line">$(<span class="string">&quot;body&quot;</span>).delegate(<span class="string">&quot;.el-input__inner&quot;</span>, <span class="string">&quot;focus&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 因为是动态生成的，所以选择这种方式来监听事件</span></span><br><span class="line">  <span class="keyword">if</span> (e.target.placeholder === <span class="string">&quot;请输入品牌&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 当聚焦在品牌输入框时触发</span></span><br><span class="line">    $(<span class="built_in">this</span>).addClass(<span class="string">&quot;inputList&quot;</span>); <span class="comment">// 加上一个类名inputList</span></span><br><span class="line">    <span class="keyword">if</span> ($(<span class="string">&quot;.inputList&quot;</span>).length === <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="comment">// 判断下一次点击的位置，当从第一个输入框改值后下一个聚焦位置还是品牌下的输入框时</span></span><br><span class="line">      <span class="keyword">if</span> (!$(<span class="string">&quot;.inputList&quot;</span>).not(<span class="built_in">this</span>).val()) &#123;</span><br><span class="line">        $(<span class="string">&quot;.inputList&quot;</span>).not(<span class="built_in">this</span>).css(<span class="string">&quot;border&quot;</span>, <span class="string">&quot;1px solid #67c23a&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; _this.goodsBrands.length; j++) &#123;</span><br><span class="line">          <span class="keyword">if</span> ($(<span class="string">&quot;.inputList&quot;</span>).not(<span class="built_in">this</span>).val() === _this.goodsBrands[j].value) &#123;</span><br><span class="line">            num += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (num === <span class="number">0</span>) &#123;</span><br><span class="line">          _this.$message.error(<span class="string">&quot;输入的品牌不在品牌列表中&quot;</span>);</span><br><span class="line">          $(<span class="string">&quot;.inputList&quot;</span>).not(<span class="built_in">this</span>).css(<span class="string">&quot;border&quot;</span>, <span class="string">&quot;1px solid #F56C6C&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          $(<span class="string">&quot;.inputList&quot;</span>).not(<span class="built_in">this</span>).css(<span class="string">&quot;border&quot;</span>, <span class="string">&quot;1px solid #67c23a&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;.el-input__inner&quot;</span>).not(<span class="built_in">this</span>).removeClass(<span class="string">&quot;inputList&quot;</span>); <span class="comment">// 逻辑执行完之后删除当前聚焦位置以外的inputList类，这样就保持.inputList长度最多为2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此处是为了模拟出输入框的 change 事件，因为在聚焦时会添加 inputList 这个类名。所以这里可以判断是否是自己想要的位置，如果是的话给一个标志位 getindex,当点击到品牌下的输入框时，如果第二次的点击位置不是品牌其他位置的输入框，则进行逻辑判断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// focus触发时也会触发这个事件，并且触发在focus事件之后</span></span><br><span class="line">  <span class="keyword">if</span> (e.target.classList[<span class="number">1</span>] === <span class="string">&quot;inputList&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断是否点击在对应位置</span></span><br><span class="line">    _this.getIndex = <span class="number">1</span>; <span class="comment">// 用于标志在聚焦事件触发后的下一次点击是否同样会触发聚焦，如果是则把第二次点击当成第一次重新判断，等到下一次点击再来判断</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (_this.getIndex === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!$(<span class="string">&quot;.inputList&quot;</span>).eq(<span class="number">0</span>).val()) &#123;</span><br><span class="line">        $(<span class="string">&quot;.inputList&quot;</span>).eq(<span class="number">0</span>).css(<span class="string">&quot;border&quot;</span>, <span class="string">&quot;1px solid #67c23a&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; _this.goodsBrands.length; j++) &#123;</span><br><span class="line">          <span class="keyword">if</span> ($(<span class="string">&quot;.inputList&quot;</span>).eq(<span class="number">0</span>).val() === _this.goodsBrands[j].value) &#123;</span><br><span class="line">            num += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (num === <span class="number">0</span>) &#123;</span><br><span class="line">          _this.$message.error(<span class="string">&quot;输入的品牌不在品牌列表中&quot;</span>);</span><br><span class="line">          $(<span class="string">&quot;.inputList&quot;</span>).eq(<span class="number">0</span>).css(<span class="string">&quot;border&quot;</span>, <span class="string">&quot;1px solid #F56C6C&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          $(<span class="string">&quot;.inputList&quot;</span>).eq(<span class="number">0</span>).css(<span class="string">&quot;border&quot;</span>, <span class="string">&quot;1px solid #67c23a&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      $(<span class="string">&quot;.el-input__inner&quot;</span>).removeClass(<span class="string">&quot;inputList&quot;</span>);</span><br><span class="line">      _this.getIndex = <span class="number">0</span>; <span class="comment">// 每次第二次点击了其他位置时，getIndex重新计数</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue自定义指令 </tag>
            
            <tag> Vue使用JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - 内置组件</title>
      <link href="/2020/06/22/ds3wfn/"/>
      <url>/2020/06/22/ds3wfn/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h2><p>在 created 时将需要缓存的 VNode 节点保存在 this.cache 中／在 render 时,如果 VNode 的 name 符合在缓存条件（可以用 include 以及 exclude 控制），则会从 this.cache 中取出之前缓存的 VNode 实例进行渲染。<br>• keep-alive 是 Vue.js 的一个内置组件。<br>• 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。<br>• 它自身不会渲染一个 DOM 元素，也不会出现在父组件链中。<br>• 当组件在 内被切换，它的 activated 和 deactivated 这两个生命周期钩子函数将会被对应执行。<br>• 它提供了 include 与 exclude 两个属性，允许组件有条件地进行缓存。</p><h2 id="Transition"><a href="#Transition" class="headerlink" title="Transition"></a>Transition</h2><p>vue 提供的一个用来做过渡动画的组件</p><h2 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h2>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue内置组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP - 三次握手和四次挥手</title>
      <link href="/2020/06/21/fh3rsz/"/>
      <url>/2020/06/21/fh3rsz/</url>
      
        <content type="html"><![CDATA[<h2 id="三次握手（three-way-handshaking）"><a href="#三次握手（three-way-handshaking）" class="headerlink" title="三次握手（three-way handshaking）"></a>三次握手（three-way handshaking）</h2><p><strong>1.背景</strong>：TCP 位于传输层，作用是提供可靠的字节流服务，为了准确无误地将数据送达目的地，TCP 协议采纳三次握手策略。<br><strong>2.原理</strong>：<br>1）发送端首先发送一个带有 SYN（synchronize）标志地数据包给接收方。<br>2）接收方接收后，回传一个带有 SYN/ACK 标志的数据包传递确认信息，表示我收到了。<br>3）最后，发送方再回传一个带有 ACK 标志的数据包，代表我知道了，表示’握手‘结束。<br>通俗的说法<br>1）Client：嘿，李四，是我，听到了吗？<br>2）Server：我听到了，你能听到我的吗?<br>3）Client：好的，我们互相都能听到对方的话，我们的通信可以开始了。<br>3 次握手</p><h2 id="四次挥手（Four-Way-Wavehand）"><a href="#四次挥手（Four-Way-Wavehand）" class="headerlink" title="四次挥手（Four-Way-Wavehand）"></a>四次挥手（Four-Way-Wavehand）</h2><p><strong>1.意义：</strong>当被动方收到主动方的 FIN 报文通知时，它仅仅表示主动方没有数据再发送给被动方了。但未必被动方所有的数据都完整的发送给了主动方，所以被动方不会马上关闭 SOCKET,它可能还需要发送一些数据给主动方后，再发送 FIN 报文给主动方，告诉主动方同意关闭连接，所以这里的 ACK 报文和 FIN 报文多数情况下都是分开发送的。<br><strong>2.原理</strong>：<br>1）第一次挥手：Client 发送一个 FIN，用来关闭 Client 到 Server 的数据传送，Client 进入 FIN_WAIT_1 状态。<br>2）第二次挥手：Server 收到 FIN 后，发送一个 ACK 给 Client，确认序号为收到序号+1（与 SYN 相同，一个 FIN 占用一个序号），Server 进入 CLOSE_WAIT 状态。<br>3）第三次挥手：Server 发送一个 FIN，用来关闭 Server 到 Client 的数据传送，Server 进入 LAST_ACK 状态。<br>4）第四次挥手：Client 收到 FIN 后，Client 进入 TIME_WAIT 状态，接着发送一个 ACK 给 Server，确认序号为收到序号+1，Server 进入 CLOSED 状态，完成四次挥手<br>通俗的说法<br>1）Client：我所有东西都说完了<br>2）Server：我已经全部听到了，但是等等我，我还没说完<br>3）Server：好了，我已经说完了<br>4）Client：好的，那我们的通信结束 l</p><p>四次挥手</p>]]></content>
      
      
      <categories>
          
          <category> 服务端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 三次握手 </tag>
            
            <tag> 四次挥手 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSS</title>
      <link href="/2020/06/21/lr0ig6/"/>
      <url>/2020/06/21/lr0ig6/</url>
      
        <content type="html"><![CDATA[<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><ul><li>登录 OSS 管理控制台。</li><li>单击左侧导航栏的 Bucket 列表，然后单击目标 Bucket 名称。</li><li>在文件管理页签，单击上传文件。</li><li>在上传文件面板，按如下说明配置各项参数<br>| <strong>上传到</strong> | 设置文件上传到 OSS 后的存储路径。</li><li><strong>当前目录</strong>：将文件上传到当前目录。</li><li><strong>指定目录</strong>：将文件上传到指定目录，您需要输入目录名称。若输入的目录不存在，OSS 将自动创建对应的文件夹并将文件上传到该文件夹中。<br>|<br>| — | — |<br>| <strong>文件 ACL</strong> | 选择文件的读写权限。</li><li><strong>继承 Bucket</strong>：以 Bucket 读写权限为准。</li><li><strong>私有</strong>（推荐）：只有文件 Owner 拥有该文件的读写权限，其他用户没有权限操作该文件。</li><li><strong>公共读</strong>：文件 Owner 拥有该文件的读写权限，其他用户（包括匿名访问者）都可以对文件进行访问，这有可能造成您数据的外泄以及费用激增，请谨慎操作。</li><li><strong>公共读写</strong>：任何用户（包括匿名访问者）都可以对文件进行访问，并且向该文件写入数据。这有可能造成您数据的外泄以及费用激增，若被人恶意写入违法信息还可能会侵害您的合法权益。除特殊场景外，不建议您配置公共读写权限。</li></ul><p>有关文件 ACL 的更多信息，请参见<a href="https://help.aliyun.com/document_detail/100676.htm#section-yft-rvm-2gb">Object ACL</a>。 |<br>| <strong>待上传文件</strong> | 选择您需要上传的文件或文件夹。<br>您可以单击<strong>扫描文件</strong>或<strong>扫描文件夹</strong>选择本地文件或文件夹，或者直接拖拽目标文件或文件夹到待上传文件区域。<br>如果上传文件夹中包含了无需上传的文件，请单击目标文件右侧的<strong>移除</strong>将其移出文件列表。<br><strong>注意</strong></p><ul><li>如果上传的文件与存储空间中已有的文件重名，则会覆盖已有文件。</li><li>使用拖拽方式上传文件夹时，OSS 会保留文件夹内的所有文件和子文件夹。</li><li>文件上传过程中，请勿刷新或关闭页面，否则上传任务会被中断且列表会被清空。</li></ul><p>|</p><p>单击<strong>上传文件</strong>。此时，您可以在<strong>上传列表</strong>页签查看各个文件的上传进度。上传完成后，您可以在目标路径下查看上传文件的文件名、文件大小以及存储类型等信息。</p><ul><li>您可以将已上传的文件下载至浏览器默认路径或者本地指定路径。更多信息，请参见<a href="https://help.aliyun.com/document_detail/31887.htm#task-2013185">下载文件</a>。</li><li>您可以将文件 URL 分享给第三方，供其下载或预览。更多信息，请参见<a href="https://help.aliyun.com/document_detail/195674.htm#task-2013184">分享文件</a>。</li><li>您可以对存储在 OSS 中的数据进行分析处理。更多信息，请参见<a href="https://help.aliyun.com/document_detail/99372.htm#concept-ogy-wwq-bgb">数据处理介绍</a>。</li><li>在文件上传到 OSS 上后，您还可以通过上传回调向指定的应用服务器发起回调请求。更多信息，请参见<a href="https://help.aliyun.com/document_detail/31853.htm#concept-ywd-dlb-5db">上传回调</a>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC、MVP、MVVM模式的概念与区别</title>
      <link href="/2020/06/21/uy31dw/"/>
      <url>/2020/06/21/uy31dw/</url>
      
        <content type="html"><![CDATA[<h1 id="1-MVC-框架"><a href="#1-MVC-框架" class="headerlink" title="1. MVC 框架"></a>1. MVC 框架</h1><p>MVC 全名是 Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。MVC 被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1609630777066-e6be7382-ea0d-488e-893f-6ef08abcf82a.webp#id=K6C7V&originHeight=365&originWidth=601&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h3 id="1-1-MVC-编程模式"><a href="#1-1-MVC-编程模式" class="headerlink" title="1.1 MVC 编程模式"></a>1.1 MVC 编程模式</h3><p>MVC 是一种使用 MVC（Model View Controller 模型-视图-控制器）设计创建 Web 应用程序的模式： [1]</p><ul><li>Model（模型）表示应用程序核心（如数据库）。</li><li>View（视图）显示效果（HTML 页面）。</li><li>Controller（控制器）处理输入（业务逻辑）。</li></ul><p>MVC 模式同时提供了对 HTML、CSS 和 JavaScript 的完全控制。<br><strong>Model（模型）</strong>是应用程序中用于处理应用程序数据逻辑的部分。<br>通常模型对象负责在数据库中存取数据。<br><strong>View（视图）</strong>是应用程序中处理数据显示的部分。<br>通常视图是依据模型数据创建的。<br><strong>Controller（控制器）</strong>是应用程序中处理用户交互的部分。<br>通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p><a href="https://links.jianshu.com/go?to=https://baike.baidu.com/item/%25E8%2580%25A6%25E5%2590%2588%25E6%2580%25A7">耦合性</a><strong>低</strong><br>视图层和业务层分离，这样就允许更改视图层代码而不用重新编译模型和控制器代码，同样，一个应用的业务流程或者业务规则的改变只需要改动 MVC 的模型层即可。因为模型与控制器和视图相分离，所以很容易改变应用程序的数据层和业务规则。<br>模型是自包含的，并且与控制器和视图相分离，所以很容易改变应用程序的数据层和业务规则。如果把数据库从 MySQL 移植到<a href="https://links.jianshu.com/go?to=https://baike.baidu.com/item/Oracle">Oracle</a>，或者改变基于 RDBMS 数据源到<a href="https://links.jianshu.com/go?to=https://baike.baidu.com/item/LDAP">LDAP</a>，只需改变模型即可。一旦正确的实现了模型，不管数据来自数据库或是 LDAP 服务器，视图将会正确的显示它们。由于运用 MVC 的应用程序的三个部件是相互独立，改变其中一个不会影响其它两个，所以依据这种设计思想能构造良好的松耦合<br><strong>重用性高</strong><br>随着技术的不断进步，需要用越来越多的方式来访问应用程序。MVC 模式允许使用各种不同样式的视图来访问同一个服务器端的代码，因为多个视图能共享一个模型，它包括任何 WEB（HTTP）浏览器或者无线浏览器（wap），比如，用户可以通过电脑也可通过手机来订购某样产品，虽然订购的方式不一样，但处理订购产品的方式是一样的。由于模型返回的数据没有进行格式化，所以同样的构件能被不同的界面使用。例如，很多数据可能用 HTML 来表示，但是也有可能用 WAP 来表示，而这些表示所需要的命令是改变视图层的实现方式，而控制层和模型层无需做任何改变。由于已经将数据和业务规则从表示层分开，所以可以最大化的重用代码了。模型也有状态管理和数据持久性处理的功能，例如，基于会话的购物车和电子商务过程也能被 Flash 网站或者无线联网的应用程序所重用。 [11]<br><a href="https://links.jianshu.com/go?to=https://baike.baidu.com/item/%25E7%2594%259F%25E5%2591%25BD%25E5%2591%25A8%25E6%259C%259F">生命周期</a><strong>成本低</strong><br>MVC 使开发和维护用户<a href="https://links.jianshu.com/go?to=https://baike.baidu.com/item/%25E6%258E%25A5%25E5%258F%25A3">接口</a>的技术含量降低。<br><strong>部署快</strong><br>使用 MVC 模式使开发时间得到相当大的缩减，它使程序员（Java 开发人员）集中精力于业务逻辑，界面程序员（HTML 和 JSP 开发人员）集中精力于表现形式上。<br><strong>可维护性高</strong><br>分离视图层和业务逻辑层也使得 WEB 应用更易于维护和修改。<br><strong>有利软件工程化管理</strong><br>由于不同的层各司其职，每一层不同的应用具有某些相同的特征，有利于通过工程化、工具化管理程序代码。控制器也提供了一个好处，就是可以使用控制器来联接不同的模型和视图去完成用户的需求，这样控制器可以为构造应用程序提供强有力的手段。给定一些可重用的模型和视图，控制器可以根据用户的需求选择模型进行处理，然后选择视图将处理结果显示给用户。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p><strong>没有明确的定义</strong><br>完全理解 MVC 并不是很容易。使用 MVC 需要精心的计划，由于它的内部原理比较复杂，所以需要花费一些时间去思考。同时由于模型和视图要严格的分离，这样也给调试应用程序带来了一定的困难。每个构件在使用之前都需要经过彻底的测试。<br><strong>不适合小型，中等规模的应用程序</strong><br>花费大量时间将 MVC 应用到规模并不是很大的应用程序通常会得不偿失。<br><strong>增加系统结构和实现的复杂性</strong><br>对于简单的界面，严格遵循 MVC，使模型、视图与控制器分离，会增加结构的复杂性，并可能产生过多的更新操作，降低运行效率。<br><strong>视图与控制器间的过于紧密的连接</strong><br>视图与控制器是相互分离，但却是联系紧密的部件，视图没有控制器的存在，其应用是很有限的，反之亦然，这样就妨碍了他们的独立重用。<br><strong>视图对模型数据的低效率访问</strong><br>依据模型操作接口的不同，视图可能需要多次调用才能获得足够的显示数据。对未变化数据的不必要的频繁访问，也将损害操作性能。<br><strong>一般高级的界面工具或构造器不支持模式</strong><br>改造这些工具以适应 MVC 需要和建立分离的部件的代价是很高的，会造成 MVC 使用的困难。</p><h1 id="2-MVP-模式"><a href="#2-MVP-模式" class="headerlink" title="2. MVP 模式"></a>2. MVP 模式</h1><p>全称：Model-View-Presenter ；MVP 是从经典的模式 MVC 演变而来，它们的基本思想有相通的地方 Controller/Presenter 负责逻辑的处理，Model 提供数据，View 负责显示。<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1609630829749-1c9a5a79-724b-4f0d-9221-44ab9d3215e2.webp#id=OURci&originHeight=323&originWidth=537&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h2 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h2><p>1、模型与视图完全分离，我们可以修改视图而不影响模型<br>2、可以更高效地使用模型，因为所有的交互都发生在一个地方——Presenter 内部<br>3、我们可以将一个 Presenter 用于多个视图，而不需要改变 Presenter 的逻辑。这个特性非常的有用，因为视图的变化总是比模型的变化频繁。<br>4、如果我们把逻辑放在 Presenter 中，那么我们就可以脱离用户接口来测试这些逻辑（单元测试）</p><h2 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h2><p>由于对视图的渲染放在了 Presenter 中，所以视图和 Presenter 的交互会过于频繁。还有一点需要明白，如果 Presenter 过多地渲染了视图，往往会使得它与特定的视图的联系过于紧密。一旦视图需要变更，那么 Presenter 也需要变更了。比如说，原本用来呈现 Html 的 Presenter 现在也需要用于呈现 Pdf 了，那么视图很有可能也需要变更。</p><h3 id="MVP-与-MVC-区别："><a href="#MVP-与-MVC-区别：" class="headerlink" title="MVP 与 MVC 区别："></a>MVP 与 MVC 区别：</h3><p>作为一种新的模式，MVP 与 MVC 有着一个重大的区别：在 MVP 中 View 并不直接使用 Model，它们之间的通信是通过 Presenter (MVC 中的 Controller)来进行的，所有的交互都发生在 Presenter 内部，而在 MVC 中 View 会直接从 Model 中读取数据而不是通过 Controller。<br>在 MVC 里，View 是可以直接访问 Model 的！从而，View 里会包含 Model 信息，不可避免的还要包括一些业务逻辑。 在 MVC 模型里，更关注的 Model 的改变，而同时有多个对 Model 的不同显示，即 View。所以，在 MVC 模型里，Model 不依赖于 View，但是 View 是依赖于 Model 的。不仅如此，因为有一些业务逻辑在 View 里实现了，导致要更改 View 也是比较困难的，至少那些业务逻辑是无法重用的。<br>虽然 MVC 中的 View 的确“可以”访问 Model，但是我们不建议在 View 中依赖 Model，而是要求尽可能把所有业务逻辑都放在 Controller 中处理，而 View 只和 Controller 交互。</p><h3 id="区别如下图所示："><a href="#区别如下图所示：" class="headerlink" title="区别如下图所示："></a>区别如下图所示：</h3><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1609630858476-01c546d5-2e97-4808-baaa-053285685382.webp#id=tXZnw&originHeight=365&originWidth=601&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1609630870879-90612636-e92e-43a5-a1cf-e581199b11b1.webp#id=wydFn&originHeight=323&originWidth=537&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h1 id="3-MVVM-框架"><a href="#3-MVVM-框架" class="headerlink" title="3.MVVM 框架"></a>3.MVVM 框架</h1><p>MVVM 是 Model-View-ViewModel 的简写。它本质上就是 MVC 的改进版。MVVM 就是将其中的 View 的状态和行为抽象化，让我们将视图 UI 和业务逻辑分开。当然这些事 ViewModel 已经帮我们做了，它可以取出 Model 的数据同时帮忙处理 View 中由于需要展示内容而涉及的业务逻辑。微软的 WPF 带来了新的技术体验，如 Silverlight、音频、视频、3D、动画……，这导致了软件 UI 层更加细节化、可定制化。同时，在技术层面，WPF 也带来了 诸如 Binding、Dependency Property、Routed Events、Command、DataTemplate、ControlTemplate 等新特性。MVVM（Model-View-ViewModel）框架的由来便是 MVP（Model-View-Presenter）模式与 WPF 结合的应用方式时发展演变过来的一种新型架构框架。它立足于原有 MVP 框架并且把 WPF 的新特性糅合进去，以应对客户日益复杂的需求变化。<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1609630890834-e2cf40dc-cd23-4c9a-99a8-a4ac27d29949.webp#id=ZruVu&originHeight=151&originWidth=715&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h3 id="3-1-MVVM-模式的组成部分"><a href="#3-1-MVVM-模式的组成部分" class="headerlink" title="3.1 MVVM 模式的组成部分"></a>3.1 MVVM 模式的组成部分</h3><ul><li>模型</li><li><em>模型</em>是指代表真实状态内容的领域模型（面向对象），或指代表内容的数据访问层（以数据为中心）。</li><li>视图</li><li>就像在 MVC 和 MVP 模式中一样，视图是用户在屏幕上看到的结构、布局和外观（UI）。</li><li>视图模型</li><li><em>视图模型</em>是暴露公共属性和命令的视图的抽象。MVVM 没有 MVC 模式的控制器，也没有 MVP 模式的 presenter，有的是一个<em>绑定器</em>。在视图模型中，绑定器在视图和数据绑定器之间进行通信。</li><li>绑定器</li><li>声明性数据和命令绑定隐含在 MVVM 模式中。在 Microsoft 解决方案堆中，绑定器是一种名为<a href="https://links.jianshu.com/go?to=https://baike.baidu.com/item/XAML">XAML</a>的标记语言。绑定器使开发人员免于被迫编写样板式逻辑来同步视图模型和视图。在微软的堆之外实现时，声明性数据绑定技术的出现是实现该模式的一个关键因素。 [1]</li></ul><h3 id="3-2-MVVM-优点"><a href="#3-2-MVVM-优点" class="headerlink" title="3.2 MVVM 优点"></a>3.2 MVVM 优点</h3><p>MVVM 模式和 MVC 模式一样，主要目的是分离视图（View）和模型（Model），有几大优点<br><strong>1. 低耦合</strong>。视图（View）可以独立于 Model 变化和修改，一个 ViewModel 可以绑定到不同的”View”上，当 View 变化的时候 Model 可以不变，当 Model 变化的时候 View 也可以不变。<br><strong>2. 可重用性</strong>。你可以把一些视图逻辑放在一个 ViewModel 里面，让很多 view 重用这段视图逻辑。<br><strong>3. 独立开发</strong>。开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计，使用 Expression Blend 可以很容易设计界面并生成 xaml 代码。<br><strong>4. 可测试</strong>。界面素来是比较难于测试的，而现在测试可以针对 ViewModel 来写。</p><h3 id="3-2-MVVM-与-MVP-区别："><a href="#3-2-MVVM-与-MVP-区别：" class="headerlink" title="3.2 MVVM 与 MVP 区别："></a>3.2 MVVM 与 MVP 区别：</h3><p>mvvm 模式将 Presener 改名为 View Model，基本上与 MVP 模式完全一致，唯一的区别是，它采用双向绑定(data-binding): View 的 变动，自动反映在 View Model，反之亦然。这样开发者就不用处理接收事件和 View 更新的工作，框架已经帮你做好了。</p>]]></content>
      
      
      <categories>
          
          <category> 服务端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
            <tag> MVP </tag>
            
            <tag> MVVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http 状态码</title>
      <link href="/2020/06/21/ycmq9a/"/>
      <url>/2020/06/21/ycmq9a/</url>
      
        <content type="html"><![CDATA[<p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1607916724892-ed8525c5-dbf3-437c-b299-bad2bf038797.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=mY0YG&originHeight=254&originWidth=841&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">200</span> OK：表示从客户端发送给</span><br><span class="line"><span class="number">204</span> No Content：表示客户端发送给客户端的请求得到了成功处理，但在返回的响应报文中不含实体的主体部分（没有资源可以返回）；服务器的请求被正常处理并返回；</span><br><span class="line"><span class="number">206</span> Patial Content：表示客户端进行了范围请求，并且服务器成功执行了这部分的GET请求，响应报文中包含由Content-Range指定范围的实体内容。</span><br><span class="line"></span><br><span class="line"><span class="number">301</span> Moved Permanently：永久性重定向，表示请求的资源被分配了新的URL，之后应使用更改的URL；</span><br><span class="line"><span class="number">302</span> Found：临时性重定向，表示请求的资源被分配了新的URL，希望本次访问使用新的URL；</span><br><span class="line">       <span class="number">301</span>与<span class="number">302</span>的区别：前者是永久移动，后者是临时移动（之后可能还会更改URL）</span><br><span class="line"><span class="number">303</span> See Other：表示请求的资源被分配了新的URL，应使用GET方法定向获取请求的资源；</span><br><span class="line">      <span class="number">302</span>与<span class="number">303</span>的区别：后者明确表示客户端应当采用GET方式获取资源</span><br><span class="line"><span class="number">304</span> Not Modified：表示客户端发送附带条件（是指采用GET方法的请求报文中包含<span class="keyword">if</span>-Match、If-Modified-Since、If-None-Match、If-Range、If-Unmodified-Since中任一首部）的请求时，服务器端允许访问资源，但是请求为满足条件的情况下返回改状态码；</span><br><span class="line"><span class="number">307</span> Temporary Redirect：临时重定向，与<span class="number">303</span>有着相同的含义，<span class="number">307</span>会遵照浏览器标准不会从POST变成GET；（不同浏览器可能会出现不同的情况）；</span><br><span class="line"></span><br><span class="line"><span class="number">400</span> Bad Request：表示请求报文中存在语法错误；</span><br><span class="line"><span class="number">401</span> Unauthorized：未经许可，需要通过HTTP认证；</span><br><span class="line"><span class="number">403</span> Forbidden：服务器拒绝该次访问（访问权限出现问题）</span><br><span class="line"><span class="number">404</span> Not Found：表示服务器上无法找到请求的资源，也可以在服务器拒绝请求但不想给拒绝原因时使用；</span><br><span class="line"></span><br><span class="line"><span class="number">500</span> Inter Server <span class="built_in">Error</span>：表示服务器在执行请求时发生了错误，web应用存在的bug或某些临时的错误时；</span><br><span class="line"><span class="number">503</span> Server Unavailable：表示服务器暂时处于超负载或正在进行停机维护，无法处理请求；</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http状态码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>crossorigin 引起的跨域问题</title>
      <link href="/2020/06/21/vtcvx9/"/>
      <url>/2020/06/21/vtcvx9/</url>
      
        <content type="html"><![CDATA[<h2 id="script-标签中的-crossorigin-引起的跨域问题"><a href="#script-标签中的-crossorigin-引起的跨域问题" class="headerlink" title="script 标签中的 crossorigin 引起的跨域问题"></a>script 标签中的 crossorigin 引起的跨域问题</h2><p>查询 ip 使用 js 插入脚本然后报跨域问题～～<br>先看下我这个获取跨域的 js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ip = <span class="built_in">document</span>.createElement(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">ip.src = <span class="string">&quot;https://pv.sohu.com/cityjson?ie=utf-8&quot;</span>;</span><br><span class="line">ip.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(returnCitySN, <span class="string">&quot;returnCitySN&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(ip);</span><br></pre></td></tr></table></figure><p>拿出来在控制台执行一下，可以打印出来，本以为这么就完事了，可是。。。。<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1623848048386-2ba28ec1-f801-4f9f-a2e5-05d23a710ecd.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=jfCUe&originHeight=76&originWidth=1752&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><p>沃特，跨域了。。。<br>我以为是代理给拦截了，然后我看了下 html 中我们在项目中进去的 script<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1623848146837-592f2a93-4d8e-42f2-9dd3-29f47faddaa2.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=SzpDL&originHeight=46&originWidth=894&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><p>项目打包，自动给所有的 script 标签加上了 crossOrigin，我们可以了解一下 script 的 crossOrigin 到底是干什么的<br>script 的 crossorigin 属性，对有效的<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio"><audio></a>，<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img"><img></a loading="lazy">，<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link"><link></a>，<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script"><script></a>，和<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video"><video></a>元件，提供了对<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">CORS</a>，限定元件的手柄如何 crossorigin 请求，从而使得该元素的提取的数据的请求 CORS 的配置。根据元素，该属性可以是 CORS 设置属性。<br>crossorigin 媒体元素上的内容属性是 CORS 设置属性。<br>这些属性被枚举，并具有以下可能的值：</p><table><thead><tr><th>关键词</th><th>描述</th></tr></thead><tbody><tr><td>anonymous</td><td>对此元素的 CORS 请求会将凭据标志设置为“同源”。</td></tr><tr><td>use-credentials</td><td>此元素的 CORS 请求会将凭据标志设置为“包含”。</td></tr><tr><td>“”</td><td>将属性名称设置为空值，例如 crossorigin 或 crossorigin=””，与 相同 anonymous。</td></tr></tbody></table><p>默认情况下（即未指定属性时），根本不使用 CORS。“匿名”关键字意味着不会通过 cookie、客户端 SSL 证书或 HTTP 身份验证交换<strong>用户凭据</strong>，如<a href="https://www.w3.org/TR/cors/#user-credentials">CORS 规范</a>的<a href="https://www.w3.org/TR/cors/#user-credentials">术语部分所述</a>，除非它们来自同一来源。<br>无效关键字和空字符串将作为 anonymous 关键字处理。<br>那么我们只要设置了 crossorigin 都会将凭据标志设置为同源<br>soga 原来如此，那可让我如何是好啊，需要 ip 搞事情，现在拿不到 ip<br>不要慌，办法总比问题多<br>你把 body 的 script 标签统一加上 crossOrigin，我把它插到 head，不久可以了吗<br>是不是，不让我插身体，我插到头里总可以吧<br>改吧改吧</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ip = <span class="built_in">document</span>.createElement(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">ip.src = <span class="string">&quot;https://pv.sohu.com/cityjson?ie=utf-8&quot;</span>;</span><br><span class="line">ip.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(returnCitySN, <span class="string">&quot;returnCitySN&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">document</span>.head.appendChild(ip);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crossorigin引起的跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云服务器</title>
      <link href="/2020/06/21/kw9ur3/"/>
      <url>/2020/06/21/kw9ur3/</url>
      
        <content type="html"><![CDATA[<h2 id="服务器类型"><a href="#服务器类型" class="headerlink" title="服务器类型"></a>服务器类型</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>物理服务器 （看得见摸得着）</li><li>云服务器 （看不见摸不着）</li></ul><h2 id="什么是云服务器"><a href="#什么是云服务器" class="headerlink" title="什么是云服务器"></a>什么是云服务器</h2><p>云服务器(Elastic Compute Service, ECS)是一种简单高效、安全可靠、处理能力可弹性伸缩的计算服务。其管理方式比物理<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8/100571">服务器</a>更简单高效。用户无需提前购买硬件，即可迅速创建或释放任意多台云服务器</p><h2 id="百度云服务器-BCC"><a href="#百度云服务器-BCC" class="headerlink" title="百度云服务器 BCC"></a>百度云服务器 BCC</h2><ul><li>创建百度开发者账号</li><li>访问百度云服务器官网（<a href="https://cloud.baidu.com/">https://cloud.baidu.com</a>）</li></ul><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1610947169910-edbd6393-c3e6-4b6b-bc88-910911db5fa3.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=Anxm5&originHeight=1608&originWidth=2880&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><ul><li>登陆后打开管理控制台</li></ul><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1610947287586-adbd577a-4f93-4cb4-8cab-941e5565768d.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=Bgu2w&originHeight=1398&originWidth=2878&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><ul><li>windows 访问服务器<ul><li>运行输入 mstsc</li><li>打开远程连接</li><li>输入服务器公网 ip 地址</li><li>输入用户名</li><li>输入密码</li><li>访问服务器</li></ul></li><li>mac 访问服务器地方<ul><li>下载安装 Microsoft Remote Desktop</li><li>添加服务器</li><li>输入用户名</li><li>输入</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue - 字数限制</title>
      <link href="/2020/06/20/set3o5/"/>
      <url>/2020/06/20/set3o5/</url>
      
        <content type="html"><![CDATA[<p>首先需要绑定两个事件 compositionstart、compositionend 两个事件分别是输入法唤起输入法关闭</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">setup: <span class="function">(<span class="params">ed</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="built_in">this</span>;</span><br><span class="line">  ed.on(<span class="string">&quot;keyup&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    vm.wordLimit(e);</span><br><span class="line">  &#125;);</span><br><span class="line">  ed.on(<span class="string">&quot;input&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    vm.wordLimit(e);</span><br><span class="line">  &#125;);</span><br><span class="line">  ed.on(<span class="string">&quot;compositionstart&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    vm.isChinese = <span class="literal">false</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  ed.on(<span class="string">&quot;compositionend&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    vm.isChinese = <span class="literal">true</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 keyup 和 keyinput 事件里调用核心字数控制函数并且代入 event，输入法输入时 innerText 有可能跳过 1000 所以要兼容下输入跳过问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字数限制</span></span><br><span class="line">    wordLimit (e) &#123;</span><br><span class="line">      <span class="keyword">const</span> vm = <span class="built_in">this</span></span><br><span class="line">      <span class="keyword">let</span> last = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="keyword">let</span> lastIndex = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="keyword">let</span> startVal = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="keyword">let</span> endVal = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="keyword">if</span> (e.target.innerText.length === <span class="number">1000</span>) &#123;</span><br><span class="line">        vm.htmlText = e.target.innerHTML</span><br><span class="line">        <span class="comment">//兼容输入法有可能会跳过1000</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((!vm.isChinese &amp;&amp; e.target.innerText.length === <span class="number">1001</span>)) &#123;</span><br><span class="line">        last = e.target.innerText.substr(e.target.innerText.length - <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        lastIndex = e.target.innerHTML.lastIndexOf(last)</span><br><span class="line">        startVal = e.target.innerHTML.substring(<span class="number">0</span>, lastIndex)</span><br><span class="line">        endVal = e.target.innerHTML.substring(lastIndex + <span class="number">1</span>, e.target.innerHTML.length)</span><br><span class="line">        vm.htmlText = startVal + endVal</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (e.target.innerText.length &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">        e.target.innerHTML = vm.htmlText</span><br><span class="line">        <span class="keyword">var</span> ifra = <span class="built_in">document</span>.getElementById(<span class="string">&quot;tinymces_ifr&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.keepLastIndex(ifra.contentWindow.document.getElementById(<span class="string">&#x27;tinymce&#x27;</span>), ifra.contentWindow)</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.limitNum) &#123;</span><br><span class="line">          <span class="built_in">this</span>.$message.error(<span class="string">&#x27;长度限制为1000个字符&#x27;</span>)</span><br><span class="line">          <span class="built_in">this</span>.limitNum++</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>整体的核心思路判断富文本编辑器的 innerText 的字符数量，如果到达了指定文字那么我们就记录下当前的 innerHTML，当超过了指定数量我们就把之前记录的 innerHTML 赋值给 e.target.innerHTML,防止用户继续输入，要注意的是发往后端的是 innerHTML 是带有 HTML 标签的所以后端不要进行字符拦截，纯前端拦截。<br>只做了这些可以解决正常输入限制字数，这里还有一个问题是粘贴的时候这部分的思路是粘贴时候过滤掉所有的标签然后用限制字数减去输入框现有字数可以知道距离输入框限制字数还有多数个字符，然后在插入的时候用限制字数减去输入框内容字数就可以啦，这里有个 this.limitNum 参数，这个是我项目的需求，主要作用是超过 1000 字符长度弹框只弹一次，有这个需求自行添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">init_instance_callback: <span class="function">(<span class="params">editor</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 注册事件</span></span><br><span class="line">          editor.on(<span class="string">&#x27;paste&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> ifra = <span class="built_in">document</span>.getElementById(<span class="string">&quot;tinymces_ifr&quot;</span>);</span><br><span class="line">            e.preventDefault();</span><br><span class="line">            <span class="keyword">var</span> contentOnBlur = (e.originalEvent || e).clipboardData.getData(<span class="string">&#x27;text/plain&#x27;</span>);</span><br><span class="line">            contentOnBlur = contentOnBlur.replace(<span class="regexp">/(&lt;([^&gt;]+)&gt;)/ig</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!(<span class="number">1000</span> - e.target.innerText.length) &amp;&amp; !<span class="built_in">this</span>.limitNum) &#123;</span><br><span class="line">              <span class="built_in">this</span>.$message.error(<span class="string">&#x27;长度限制为1000个字符&#x27;</span>)</span><br><span class="line">              <span class="built_in">this</span>.limitNum++</span><br><span class="line">            &#125;</span><br><span class="line">            ifra.contentWindow.document.execCommand(<span class="string">&#x27;insertText&#x27;</span>, <span class="literal">true</span>, contentOnBlur.slice(<span class="number">0</span>, <span class="number">1000</span> - e.target.innerText.length));</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue字数限制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - 指令</title>
      <link href="/2020/06/19/bz0zbg/"/>
      <url>/2020/06/19/bz0zbg/</url>
      
        <content type="html"><![CDATA[<p>指令 (Directives) 是带有 v- 前缀的特殊 attribute。指令 attribute 的值预期是<strong>单个 JavaScript 表达式</strong> (v-for 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。</p><h3 id="v-if-v-show"><a href="#v-if-v-show" class="headerlink" title="v-if / v-show"></a>v-if / v-show</h3><p>根据表达式的值的真假来判断是否渲染元素；<br>v-if 是通过是否渲染元素来显示隐藏的；而 v-show 是通过 display 来显示隐藏的，即 v-show 无论怎样都会先渲染在页面上。相对来说 v-if 更加消耗性能，所以说通常需要经常进行切换显示的元素会用 v-show</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v-if</span></span><br><span class="line">&lt;p v-<span class="keyword">if</span>=<span class="string">&#x27;true&#x27;</span>&gt;会渲染在页面&lt;/p&gt;</span><br><span class="line"><span class="keyword">const</span> see = <span class="literal">false</span>;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&#x27;see&#x27;</span>&gt;</span>不会渲染在页面<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// v-show</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">&#x27;see&#x27;</span>&gt;</span>通过display控制<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="comment">//see是false，所以span标签的display: none;</span></span><br></pre></td></tr></table></figure><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>用于响应式的更新 HTML attribute，给属性动态绑定值。<br>v-bind 可简写为 ‘ : ‘</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> src = <span class="string">&#x27;https://www.baidu.com&#x27;</span>;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&#x27;src&#x27;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&#x27;src&#x27;</span>&gt;</span>简写<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p>用于绑定事件处理程序,<br>v-on 可简写为 ‘@’</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button v-on:click=<span class="string">&#x27;onClick&#x27;</span>&gt;点击&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;onClick&#x27;</span>&gt;</span>简写<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="v-html-v-text"><a href="#v-html-v-text" class="headerlink" title="v-html / v-text"></a>v-html / v-text</h3><p>更新元素的 innerHTML，v-tex 只能解析文本，v-html 能解析文本、html 标签、css、js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-text=<span class="string">&#x27;这是一个p标签&#x27;</span>&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&#x27;&lt;i&gt;可以解析html&lt;/i&gt;&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>协议</title>
      <link href="/2020/06/19/zi6hhx/"/>
      <url>/2020/06/19/zi6hhx/</url>
      
        <content type="html"><![CDATA[<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>文件传输协议 file</li><li>网络传输协议 tcp/ip<ul><li>http</li><li>https</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据交互</title>
      <link href="/2020/06/19/fsrs2u/"/>
      <url>/2020/06/19/fsrs2u/</url>
      
        <content type="html"><![CDATA[<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>主要通过 html、css、javascript 来完成用户交互和视觉效果的实现</p><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p>主要通过各大后台语言 包括但不限于 java、php、aps.net、nodejs 等来实现业务功能以及接口</p><h2 id="数据交互"><a href="#数据交互" class="headerlink" title="数据交互"></a>数据交互</h2><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1616563481570-1d27f256-bf04-4924-b863-af76843a9231.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=qVAwk&originHeight=664&originWidth=1136&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>想开发一个网站，我们一般分前端、后端，由于后端一般会提供服务，前端需要与后端进行通讯请求后台服务、接口返回的数据。</p><h2 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h2><ul><li>JSON</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span> 指的是 JavaScript 对象表示法（JavaScript <span class="built_in">Object</span> Notation）</span><br><span class="line"><span class="built_in">JSON</span> 是轻量级的文本数据交换格式</span><br><span class="line"><span class="built_in">JSON</span> 独立于语言 *</span><br><span class="line"><span class="built_in">JSON</span> 具有自我描述性，更易理解</span><br></pre></td></tr></table></figure><ul><li>XML</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XML 指可扩展标记语言</span><br><span class="line">XML 被设计用来传输和存储数据</span><br></pre></td></tr></table></figure><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）</span><br><span class="line">AJAX 不是新的编程语言，而是一种使用现有标准的新方法。</span><br><span class="line">AJAX 是与服务器交换数据,在不重新加载整个页面的情况下并局部更新网页的技术。</span><br></pre></td></tr></table></figure><h1 id="表单提交"><a href="#表单提交" class="headerlink" title="表单提交"></a>表单提交</h1><p>Form 表单可以将前端的数据向服务器传递（前后端数据交互）<br>表单向服务器传输数据的时候，<br>如果服务器没有响应、服务器错，或者服务器响应慢，我们就会停留一个白屏界面<br>如果服务区成功响应，网页会被刷新，导致整个页面重绘，造成没有必要性能开销</p><p>表单提交只有两种传输方式</p><ul><li>GET</li><li>POST</li></ul><p>对于用户来讲，这种体验是非常糟糕的<br>发生了白屏、重绘、回流这种新功能消耗比较的高的操作，所以 XmlHttpRequest 局部刷新这项技术，很快就面世了。</p><h2 id="XmlHttpRequest-对象"><a href="#XmlHttpRequest-对象" class="headerlink" title="XmlHttpRequest 对象"></a>XmlHttpRequest 对象</h2><p>XmlHttpRequest 对象是浏览器用来请求服务器提供的接口，又由于浏览器有很多厂商，标准不同</p><ul><li><strong>ActiveXObject</strong> 微软在 ie5 第一个提供了异步请求数据的方案，但是后来在 IE7+也同时支持 XmlHttpRequest</li><li><strong>XmlHttpRequest</strong> 其他包括 chrome firfox safari 支持 XmlHttpRequest</li></ul><h2 id="xmlHttpRequest-的应用"><a href="#xmlHttpRequest-的应用" class="headerlink" title="xmlHttpRequest 的应用"></a>xmlHttpRequest 的应用</h2><p>由于该对象比较基础，不太适合直接在项目当中使用，所以一些社区和框架对其进行了封装<br>最佳实践：</p><ul><li>Ajax （jquery 提供了一个叫做 ajax 的方法，是 XmlHttpRequest 的封装和实现）</li><li>Axios（社区提供了一个叫做 axios 的包，支持 es6 的模块化 export、import，同时支持客户端、nodejs 服务器，请求拦截、响应等功能）<ul><li>浏览器端，是 XmlHttpRequest 的封装和实现</li><li>nodejs 服务端，是 http.request 的封装和实现</li></ul></li></ul><h2 id="编码处理"><a href="#编码处理" class="headerlink" title="编码处理"></a>编码处理</h2><p>由于系统不同、浏览器内核的差异，前后端进行数据交互时，有些特殊字符经过浏览器解析，最后到服务端结果可能不一致，这个时候我就需要使用编码，统一去规范这些差异问题。</p><p>编码：</p><ul><li>encodeURI</li><li>encodeURIComponent</li></ul><p>解码：</p><ul><li>decodeURI</li><li>decodeURIComponent</li></ul><p>编码实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">class Ajax &#123;</span><br><span class="line">  constructor(opt = &#123;&#125;) &#123;</span><br><span class="line">    // 定义默认配置</span><br><span class="line">    const DEFAULT_OPTION = &#123;</span><br><span class="line">      // 请求方式</span><br><span class="line">      TYPE: &quot;GET&quot;,</span><br><span class="line">      // 同步、异步请求</span><br><span class="line">      SYNC: true,</span><br><span class="line">      //</span><br><span class="line">      OPTIOIN: &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    this.options = &#123;</span><br><span class="line">      url: opt.url,</span><br><span class="line">      async: opt.async ? opt.async : DEFAULT_OPTION.SYNC,</span><br><span class="line">      opt: Object.assign(DEFAULT_OPTION.OPTIOIN, opt.opt),</span><br><span class="line">      type: opt.type ? opt.type : DEFAULT_OPTION</span><br><span class="line">    &#125;;</span><br><span class="line">    if (this.options.url !== undefined) &#123;</span><br><span class="line">      return this.request(this.options);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  /*</span><br><span class="line">  * url 请求地址</span><br><span class="line">    * type 请求类型</span><br><span class="line">    * params 请求参数</span><br><span class="line">    * async 同步、异步请求</span><br><span class="line">  */</span><br><span class="line">  request(&#123; url, type, params = &#123;&#125;, async = true &#125;) &#123;</span><br><span class="line">    // xhr全面支持promise</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">      // 判断浏览器支持情况创建xhr对象</span><br><span class="line">      const xhr = window.XMLHttpRequest</span><br><span class="line">        ? new XMLHttpRequest()</span><br><span class="line">        : new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">// 发起请求</span><br><span class="line">      xhr.open(type, url, async);</span><br><span class="line">      xhr.onreadystatechange = function () &#123;</span><br><span class="line">        // if (xhr.readyState !== 4) return reject(`$&#123;url&#125; 请求失败！`);</span><br><span class="line">        // state http请求状态 4</span><br><span class="line">        // status 状态码 200</span><br><span class="line">        if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;</span><br><span class="line">          let data;</span><br><span class="line">          // 通过try/catch 解析json字符串</span><br><span class="line">          try &#123;</span><br><span class="line">            data = JSON.parse(xhr.responseText);</span><br><span class="line">          &#125; catch (err) &#123;</span><br><span class="line">            data = xhr.responseText;</span><br><span class="line">          &#125;</span><br><span class="line">          resolve(data);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      // 判断请求状态</span><br><span class="line">      if(type.toUpperCase()===&quot;POST&quot;||type.toUpperCase()===&quot;POST&quot;)&#123;</span><br><span class="line">        // post|put请求是通过x-www-form-urlencoded模式向服务器传递数据</span><br><span class="line">        // 所以一定要设置请求头</span><br><span class="line">        xhr.setRequestHeader(</span><br><span class="line">          &quot;Content-type&quot;,</span><br><span class="line">          &quot;application/x-www-form-urlencoded&quot;</span><br><span class="line">        );</span><br><span class="line">        xhr.send(params);</span><br><span class="line">      &#125;</span><br><span class="line">      else &#123;</span><br><span class="line">        xhr.send(null);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">class Axios extends Ajax &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super(arguments[0]);</span><br><span class="line">  &#125;</span><br><span class="line">  // serilize 将对象序列化为url字符串</span><br><span class="line">  format(params) &#123;</span><br><span class="line">    let tmp = &quot;&quot;;</span><br><span class="line">    for (let key in params) &#123;</span><br><span class="line">      tmp += `$&#123;encodeURI(key)&#125;=$&#123;encodeURI(params[key])&#125;&amp;`;</span><br><span class="line">    &#125;</span><br><span class="line">    // 截取最后一位字符串有下面几种方式</span><br><span class="line">    // console.log(tmp.substring(0, tmp.length - 1));</span><br><span class="line">    // console.log(tmp.substr(0, tmp.length-1));</span><br><span class="line">    // console.log(tmp.slice(0, tmp.length - 1));</span><br><span class="line">    // console.log(tmp.substring(0, tmp.lastIndexOf(&quot;&amp;&quot;)));</span><br><span class="line">    return tmp.substring(0, tmp.lastIndexOf(&quot;&amp;&quot;));</span><br><span class="line"></span><br><span class="line">    // 利用es6的api完成</span><br><span class="line">    // let tmp = &quot;&quot;;</span><br><span class="line">    // let entries = Object.entries(params);</span><br><span class="line">    // entries.forEach(param =&gt; &#123;</span><br><span class="line">    //   tmp += `$&#123;param[0]&#125;=$&#123;param[1]&#125;&amp;`;</span><br><span class="line">    // &#125;);</span><br><span class="line">    // return tmp.substring(0, tmp.lastIndexOf(&quot;&amp;&quot;));</span><br><span class="line">  &#125;</span><br><span class="line">  get(url, opt = &#123;&#125;, type = &quot;GET&quot;) &#123;</span><br><span class="line">    if (opt.params) &#123;</span><br><span class="line">      url += url.includes(&quot;?&quot;)</span><br><span class="line">        ? this.format(opt.params)</span><br><span class="line">        : &quot;?&quot; + this.format(opt.params);</span><br><span class="line">    &#125;</span><br><span class="line">    return this.request(&#123; url, type &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  post(url, opt = &#123;&#125;, type = &quot;POST&quot;) &#123;</span><br><span class="line">    if (opt) &#123;</span><br><span class="line">      return this.request(&#123; url, opt, type &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  put(url, opt, type = &quot;PUT&quot;) &#123;</span><br><span class="line">    if (opt) &#123;</span><br><span class="line">      return this.request(&#123; url, opt, type &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  delete(url, opt, type = &quot;DELETE&quot;) &#123;</span><br><span class="line">    if (opt) &#123;</span><br><span class="line">      return this.request(&#123; url, opt, type &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据交互 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器输入url的变化</title>
      <link href="/2020/06/19/ds06rd/"/>
      <url>/2020/06/19/ds06rd/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><ul><li><strong>输入地址</strong></li></ul><p>输入想进入的网站地址</p><ul><li><strong>DNS 解析</strong></li></ul><p>网址替换 IP 地址的过程</p><ul><li><strong>TCP 连接</strong></li></ul><p>通过 DNS 解析到的 IP 地址与服务器搭建 TCP 连接</p><ul><li><strong>发送 http 请求</strong></li></ul><p>TCP 连接成功后，向服务器发起请求</p><ul><li><strong>返回 http 相应</strong></li></ul><p>服务器接受并处理完请求，返回 HTTP 响应，一个响应报文格式基本等同于请求报文，由响应行、响应头、空 行、实体组成。</p><ul><li><strong>浏览器解析渲染界面</strong></li></ul><p>首先浏览器解析 HTML 文件并且构建 DOM 树，其次解析 css 文件构建渲染树，等渲染树构建好后，浏览器将对开 始布局渲染树，最后将其渲染到屏幕中。</p><ul><li><strong>断开连接</strong></li></ul><p>界面渲染完后，断开请求连接</p>]]></content>
      
      
      <categories>
          
          <category> 服务端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器输入url的变化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域</title>
      <link href="/2020/06/19/pdzb4f/"/>
      <url>/2020/06/19/pdzb4f/</url>
      
        <content type="html"><![CDATA[<h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><h2 id="为什么跨域？"><a href="#为什么跨域？" class="headerlink" title="为什么跨域？"></a>为什么跨域？</h2><p>目前市场 IT 项目的开发模式：</p><ul><li>集成开发<ul><li>请求本公司的其他服务器</li><li>请求第三方服务器资源</li><li>jsonp (老项目)</li></ul></li><li>前后端分离<ul><li>请求本公司的其他服务器</li><li>请求第三方服务器资源</li><li>jsonp （老项目）</li></ul></li></ul><p>由于同源策略策略的原因，浏览器为了保护服务器出台了同源策略</p><h2 id="同源策略-（same-origin-policy）"><a href="#同源策略-（same-origin-policy）" class="headerlink" title="同源策略 （same origin policy）"></a>同源策略 （same origin policy）</h2><p>协议、域名、端口号都相同被视为同源</p><ul><li>协议 (tcp/ip)<ul><li>文件协议<ul><li>file</li></ul></li><li>网络协议<ul><li>http</li><li>https</li></ul></li><li>传输协议<ul><li>SMTP</li></ul></li></ul></li><li>域名</li><li>端口号</li></ul><h4 id="常见协议的分类"><a href="#常见协议的分类" class="headerlink" title="常见协议的分类"></a>常见协议的分类</h4><ul><li>FTP 传输文件</li><li>SMTP 收发邮件</li><li>TCP 网络协议</li><li>UDP 应用传输协议</li></ul><h4 id="抓包工具"><a href="#抓包工具" class="headerlink" title="抓包工具"></a>抓包工具</h4><ul><li>Wireshark tcp udp</li><li>Fiddler http https</li><li>Web 开发者工具<ul><li>chrome 开发者工具</li><li>firebug<table><thead><tr><th>客户端</th><th>服务端</th><th>解释</th></tr></thead><tbody><tr><td><a href="http://www.baidu.com/">http://www.baidu.com</a></td><td><a href="https://www.baidu.com/">https://www.baidu.com</a></td><td>协议不同，需要跨域访问</td></tr><tr><td>files:///c:/a.html</td><td><a href="http://a.html/">http://a.html</a></td><td>协议不同</td></tr><tr><td><a href="http://www.baidu.com/">http://www.baidu.com:80</a></td><td><a href="http://www.baidu.com/">http://www.baidu.com</a>:8080</td><td>端口不同</td></tr><tr><td><a href="http://www.baidu.com/">http://www.baidu.com</a></td><td><a href="http://www.baidu.com/">http://www.baidu.c</a>n</td><td>域名不同</td></tr><tr><td><a href="http://www.baidu.com/">http://www.baidu.com</a></td><td><a href="http://www.baidu.com/">http://m.baidu.com</a></td><td>域名不同</td></tr></tbody></table></li></ul></li></ul><h2 id="怎么跨域？"><a href="#怎么跨域？" class="headerlink" title="怎么跨域？"></a>怎么跨域？</h2><h3 id="PROXY-（vue、react）"><a href="#PROXY-（vue、react）" class="headerlink" title="* PROXY （vue、react）"></a>* PROXY （vue、react）</h3><p>vue-vue.comfig.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&quot;/api1&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">// 跨域的目标地址</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://localhost:7001&quot;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 路径重写</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&quot;^/api1&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;/api2&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">// 跨域的目标地址</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://localhost:7002&quot;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 路径重写</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&quot;^/api2&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>由于 html 标签中，带有 src 的属性，不受同源策略的约束，我们就可以通过，动态创建 script 标签来实现跨域</p><h3 id="区分-JSONP-和-XHR"><a href="#区分-JSONP-和-XHR" class="headerlink" title="区分 JSONP 和 XHR"></a>区分 JSONP 和 XHR</h3><ul><li>看请求类型</li><li>看参数有没有 callback</li></ul><p>主要利用了回调函数，步骤如下：</p><ul><li>前端向服务端传递一个回调函数</li><li>服务端调用函数，传入参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&quot;/api&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 解析jsonp参数</span></span><br><span class="line">  <span class="keyword">const</span> oUrl = url.parse(req.url);</span><br><span class="line">  <span class="keyword">const</span> oQuery = queryString.parse(oUrl.query);</span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">code</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (!oQuery[<span class="string">&quot;callback&quot;</span>]) &#123;</span><br><span class="line">    res.end(<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.end(<span class="string">`<span class="subst">$&#123;oQuery.callback&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>)`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">url, opt = &#123;&#125;, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> defaultOpt = &#123;</span><br><span class="line">    <span class="attr">jsonpCallback</span>: <span class="string">&quot;__jp&quot;</span>,</span><br><span class="line">    <span class="attr">prefix</span>: <span class="string">&quot;callback&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 扩展运算符</span></span><br><span class="line">  <span class="comment">// opt = &#123; ...defaultOpt, ...opt &#125;;</span></span><br><span class="line">  <span class="comment">// es6 对象的ip</span></span><br><span class="line">  opt = <span class="built_in">Object</span>.assign(defaultOpt, opt);</span><br><span class="line">  <span class="keyword">const</span> oScript = <span class="built_in">document</span>.createElement(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> oWrap = <span class="built_in">document</span>.body || <span class="built_in">document</span>.documentElement.body;</span><br><span class="line">  <span class="keyword">if</span> (!url.includes(opt.prefix)) &#123;</span><br><span class="line">    url += <span class="string">`?<span class="subst">$&#123;opt.prefix&#125;</span>=<span class="subst">$&#123;opt.jsonpCallback&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  oScript.src = url;</span><br><span class="line">  oScript.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;onload&quot;</span>);</span><br><span class="line">    callback(<span class="literal">null</span>, <span class="string">&quot;ok&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  oScript.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;onerror&quot;</span>);</span><br><span class="line">    callback(<span class="string">&quot;guale&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">window</span>[opt.jsonpCallback] = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;;</span><br><span class="line">  oWrap.appendChild(oScript);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&quot;http://localhost:3000/api&quot;</span>;</span><br><span class="line">jsonp(url, &#123;&#125;, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err, res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="URL-编码："><a href="#URL-编码：" class="headerlink" title="URL 编码："></a>URL 编码：</h3><ul><li><p>encodeURI</p></li><li><p>decodeURI</p></li><li><p>encodeURIComponent</p></li><li><p>decodeURIComponent</p><table><thead><tr><th>函数</th><th>描述</th><th>FF</th><th>N</th><th>IE</th></tr></thead><tbody><tr><td><a href="http://blog.csdn.net/js/jsref_decodeURI.asp">decodeURI()</a></td><td>解码某个编码的 URI。</td><td>1</td><td>4</td><td>5.5</td></tr><tr><td><a href="http://blog.csdn.net/js/jsref_decodeURIComponent.asp">decodeURIComponent()</a></td><td>解码一个编码的 URI 组件。</td><td>1</td><td>4</td><td>5.5</td></tr><tr><td><a href="http://blog.csdn.net/js/jsref_encodeURI.asp">encodeURI()</a></td><td>把字符串编码为 URI。</td><td>1</td><td>4</td><td>5.5</td></tr><tr><td><a href="http://blog.csdn.net/js/jsref_encodeURIComponent.asp">encodeURIComponent()</a></td><td>把字符串编码为 URI 组件。</td><td>1</td><td>4</td><td>5.5</td></tr></tbody></table></li><li><p>window.onload</p></li><li><p>DomContentLoaded</p></li><li><p>query.ready | $.ready</p></li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>json</li><li>xml （了解）</li></ul><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>cors 被称为服务端跨域，说白了就是服务器允许某个地址访问<br>下面通过 nodejs 小型 web 服务器 express 举一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原生nodejs</span></span><br><span class="line">app.get(<span class="string">&quot;/api&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="string">&quot;Access-Control-Allow-Origin&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  res.end(</span><br><span class="line">    <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      <span class="attr">code</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&quot;123&quot;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// express的写法</span></span><br><span class="line">app.get(<span class="string">&quot;/api&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">  res.json(&#123;</span><br><span class="line">    <span class="attr">code</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">msg</span>: <span class="number">123</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="服务器代理"><a href="#服务器代理" class="headerlink" title="服务器代理"></a>服务器代理</h3><ul><li>正向代理</li></ul><p>由于服务器请求服务器的数据，不受同源策略的影响，我们可以通过 http.request 来请求目标服务器数据，然后响应给前端。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&quot;/getSingerList&quot;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">&quot;https://u.y.qq.com/cgi-bin/musics.fcg&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> axios.get(url, &#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="attr">origin</span>: <span class="string">&quot;https://y.qq.com&quot;</span>,</span><br><span class="line">      <span class="attr">referer</span>: <span class="string">&quot;https://y.qq.com&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="string">&quot;-&quot;</span>: <span class="string">&quot;getUCGI8660003538803218&quot;</span>,</span><br><span class="line">      <span class="attr">g_tk</span>: <span class="number">5381</span>,</span><br><span class="line">      <span class="attr">sign</span>: <span class="string">&quot;zzaqjmvsi3fu8i2f3fef04bda3a286eeb40136f6b80f4a&quot;</span>,</span><br><span class="line">      <span class="attr">loginUin</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">hostUin</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">      <span class="attr">inCharset</span>: <span class="string">&quot;utf8&quot;</span>,</span><br><span class="line">      <span class="attr">outCharset</span>: <span class="string">&quot;utf-8&quot;</span>,</span><br><span class="line">      <span class="attr">notice</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">platform</span>: <span class="string">&quot;yqq.json&quot;</span>,</span><br><span class="line">      <span class="attr">needNewCode</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">comm</span>: &#123; <span class="attr">ct</span>: <span class="number">24</span>, <span class="attr">cv</span>: <span class="number">0</span> &#125;,</span><br><span class="line">        <span class="attr">singerList</span>: &#123;</span><br><span class="line">          <span class="attr">module</span>: <span class="string">&quot;Music.SingerListServer&quot;</span>,</span><br><span class="line">          <span class="attr">method</span>: <span class="string">&quot;get_singer_list&quot;</span>,</span><br><span class="line">          <span class="attr">param</span>: &#123;</span><br><span class="line">            <span class="attr">area</span>: -<span class="number">100</span>,</span><br><span class="line">            <span class="attr">sex</span>: -<span class="number">100</span>,</span><br><span class="line">            <span class="attr">genre</span>: -<span class="number">100</span>,</span><br><span class="line">            <span class="attr">index</span>: -<span class="number">100</span>,</span><br><span class="line">            <span class="attr">sin</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">cur_page</span>: <span class="number">1</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  res.json(&#123; <span class="attr">code</span>: <span class="number">1</span>, <span class="attr">result</span>: result.data.singerList.data.singerlist &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>反向代理</li></ul><h2 id="伪造请求"><a href="#伪造请求" class="headerlink" title="伪造请求"></a>伪造请求</h2><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 兼容问题</span></span><br><span class="line">  <span class="comment">// 高级浏览器支持XMLHttpRequest</span></span><br><span class="line">  <span class="comment">// 低版本IE通过</span></span><br><span class="line">  <span class="keyword">let</span> xhr;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123;</span><br><span class="line">    xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">    xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  &#125;</span><br><span class="line">  xhr.open(<span class="string">&quot;GET&quot;</span>, url, <span class="literal">false</span>);</span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!xhr.readyState == <span class="number">4</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">      callback(xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  xhr.send();</span><br><span class="line">&#125;</span><br><span class="line">ajax(<span class="string">&quot;http://localhost:3000/api&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鉴权</title>
      <link href="/2020/06/19/hxny06/"/>
      <url>/2020/06/19/hxny06/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/265318/1611215707621-e07794b8-9107-48f3-a043-1f242b7efdc9.jpeg?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#from=url&id=JfduG&margin=%5Bobject%20Object%5D&originHeight=906&originWidth=1598&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h2 id="登录流程图"><a href="#登录流程图" class="headerlink" title="登录流程图"></a>登录流程图</h2><h2 id="token-是什么"><a href="#token-是什么" class="headerlink" title="token 是什么"></a>token 是什么</h2><p>当用户第一次登录后，服务器生成一个 token 并将此 token 返回给客户端，以后客户端只需带上这个 token 前来请求数据即可，无需再次带上用户名和密码。<br>简单 token 的组成；uid(用户唯一的身份标识)、time(当前时间的时间戳)、sign（签名，token 的前几位以哈希算法压缩成的一定长度的十六进制字符串。为防止 token 泄露）。<br>基于 token 机制的身份认证<br>使用 token 机制的身份验证方法，在服务器端不需要存储用户的登录记录。大概的流程：</p><ul><li>客户端使用用户名和密码请求登录。</li><li>服务端收到请求，验证用户名和密码。</li><li>验证成功后，服务端会生成一个 token，然后把这个 token 发送给客户端。</li><li>客户端收到 token 后把它存储起来，可以放在 cookie 或者 Local Storage（本地存储）里。</li><li>客户端每次向服务端发送请求的时候都需要带上服务端发给的 token。</li><li>服务端收到请求，然后去验证客户端请求里面带着 token，如果验证成功，就向客户端返回请求的数据。(如果这个 Token 在服务端持久化（比如存入数据库），那它就是一个永久的身份令牌。)</li></ul><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>客户端通过 ajax 发起请求，拦截请求 interceptor ，对请求进行拦截，判断是否存在 token，存在携带请求头发送请求，不存在直接发送请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (是否存在token) &#123;</span><br><span class="line">      config.headers[<span class="string">&quot;token&quot;</span>] = token;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>• 判断是否存在白名单内，在直接通过<br>• 判断是否携带请求头，没携带直接返回无权限<br>• 判断服务端的 token 是否存在，不存在返回请登录<br>• 判断时间是否超过规定时间，超过返回登录超时<br>• 判断请求头的 token 和服务端的 token 是否相同，不相同就返回 token 鉴权被篡改，相同则通过</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; TokenRead &#125; = <span class="built_in">require</span>(<span class="string">&quot;../utlis/index&quot;</span>); <span class="comment">//jsonwebtoken解析token数据的函数</span></span><br><span class="line"><span class="keyword">const</span> Tg = [<span class="string">&quot;/user/login&quot;</span>, <span class="string">&quot;/user/add&quot;</span>]; <span class="comment">//白名单</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">tok</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//判断是否在白名单，存在直接放行</span></span><br><span class="line">    <span class="keyword">const</span> flag = Tg.includes(ctx.request.url);</span><br><span class="line">    <span class="keyword">if</span> (flag) <span class="keyword">return</span> <span class="keyword">await</span> next();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断请求是否携带请求头</span></span><br><span class="line">    <span class="keyword">if</span> (!ctx.request.header.token)</span><br><span class="line">      <span class="keyword">return</span> (ctx.body = &#123; <span class="attr">code</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&quot;无权限登录&quot;</span> &#125;);</span><br><span class="line">    <span class="comment">//判断服务端的token是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (ctx.session.token === <span class="string">&quot;&quot;</span> || ctx.session.token === <span class="literal">null</span>)</span><br><span class="line">      <span class="keyword">return</span> (ctx.body = &#123; <span class="attr">code</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&quot;请先登录&quot;</span> &#125;);</span><br><span class="line">    <span class="comment">//判断是否超时</span></span><br><span class="line">    <span class="keyword">let</span> &#123; data &#125; = TokenRead(ctx.session.token);</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - data) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> &gt; <span class="number">2</span>)</span><br><span class="line">      <span class="keyword">return</span> (ctx.body = &#123; <span class="attr">code</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&quot;时间到期，请重新登录&quot;</span> &#125;);</span><br><span class="line">    <span class="comment">//判断token是否被篡改</span></span><br><span class="line">    <span class="keyword">if</span> (ctx.session.token != ctx.request.header.token) &#123;</span><br><span class="line">      <span class="keyword">return</span> (ctx.body = &#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&quot;token被篡改&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 鉴权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务端常识</title>
      <link href="/2020/06/19/aa5w45/"/>
      <url>/2020/06/19/aa5w45/</url>
      
        <content type="html"><![CDATA[<h2 id="后台语言"><a href="#后台语言" class="headerlink" title="后台语言"></a>后台语言</h2><ul><li>高级语言 （ 汇编语言）</li><li>低级语言 （机器语言）</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>java<ul><li>c ++</li><li>java web</li><li>android 开发</li><li>. jsp | .jspx 文件</li><li>jar 包</li><li>web 服务器 tomcat</li><li>开发软件 eclipese myeclipse</li></ul></li><li>asp.net<ul><li>c# 底层语言</li><li>web 服务器 iis</li><li>开发软件 visualstudio</li></ul></li><li>php<ul><li>php5 模块</li><li>web 服务器 apache</li></ul></li><li>nodejs</li><li>python</li><li>ruby</li><li>go</li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务端常识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>访问一个网页的全过程</title>
      <link href="/2020/06/19/ekzbyn/"/>
      <url>/2020/06/19/ekzbyn/</url>
      
        <content type="html"><![CDATA[<h1 id="应用层开始"><a href="#应用层开始" class="headerlink" title="应用层开始"></a>应用层开始</h1><h2 id="1-在浏览器输入https-www-taobao-com"><a href="#1-在浏览器输入https-www-taobao-com" class="headerlink" title="1.在浏览器输入https://www.taobao.com"></a>1.在浏览器输入<a href="https://www.taobao.com/">https://www.taobao.com</a></h2><h3 id="浏览器接收-url-开启网络请求线程-URL-包括以下部分"><a href="#浏览器接收-url-开启网络请求线程-URL-包括以下部分" class="headerlink" title="浏览器接收 url 开启网络请求线程,URL 包括以下部分"></a>浏览器接收 url 开启网络请求线程,URL 包括以下部分</h3><ul><li>protocol：协议头 https</li><li>host：主机域名<a href="http://www.taobao.com/">www.taobao.com</a></li><li>port：端口号(默认)</li><li>path：无</li><li>query：无</li><li>fragment：无</li></ul><h3 id="https-协议"><a href="#https-协议" class="headerlink" title="https 协议"></a>https 协议</h3><ul><li>https 协议是基于 http 协议开发的,是比 http 更安全的协议,在 http 协议的基础上增加了 SSL/TLS 加密</li></ul><h2 id="2-DNS-获取-IP-地址"><a href="#2-DNS-获取-IP-地址" class="headerlink" title="2.DNS 获取 IP 地址"></a>2.DNS 获取 IP 地址</h2><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1604665753058-66840a19-8c0f-4375-ba46-345216dd779a.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=h3MhZ&originHeight=192&originWidth=1167&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br><strong>DNS 运行在 UDP 上，使用 53 端口。</strong><br><strong>DNS 与 IP 地址的转化关系如图：</strong><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1604665753056-ddbb0a4d-4d8f-40c5-ab5f-22766fd05fe4.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=jbQ7Z&originHeight=693&originWidth=891&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h2 id="DNS-是一种分层数据库，它的主要层次结构如下"><a href="#DNS-是一种分层数据库，它的主要层次结构如下" class="headerlink" title="DNS 是一种分层数据库，它的主要层次结构如下"></a><strong>DNS 是一种分层数据库，它的主要层次结构如下</strong></h2><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1604665752995-972adf63-dc0a-4c03-8b31-5b86e10edb82.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=ckn61&originHeight=415&originWidth=1214&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>一般，如果平台配备了负载均衡的话，前一步 DNS 解析获得的 IP 地址应该是 Nginx 负载均衡服务器的 IP 地址。所以，之后会将我们的网页请求发送到了 Nginx 负载均衡服务器上。<br>Nginx 根据我们设定的分配算法和规则，选择一台后端的真实 Web 服务器，与之建立 TCP 连接、并转发我们浏览器发出去的网页请求。<br><strong>寻找 IP 地址过程:</strong></p><ul><li>请求一旦发起，浏览器首先要做的事情就是解析这个域名，一般来说，浏览器会首先查看本地硬盘的 hosts 文件，看看其中有没有和这个域名对应的规则，如果有的话就直接使用 hosts 文件里面的 ip 地址。</li><li>如果在本地的 hosts 文件没有能够找到对应的 ip 地址，浏览器会发出一个 DNS 请求到本地 DNS 服务器 。本地 DNS 服务器一般都是你的网络接入服务器商提供，比如中国电信，中国移动。</li><li>查询你输入的网址的 DNS 请求到达本地 DNS 服务器之后，本地 DNS 服务器会首先查询它的缓存记录，如果缓存中有此条记录，就可以直接返回结果，此过程是递归的方式进行查询。如果没有，本地 DNS 服务器还要向 DNS 根服务器进行查询。</li><li>根 DNS 服务器没有记录具体的域名和 IP 地址的对应关系，而是告诉本地 DNS 服务器，你可以到域服务器上去继续查询，并给出域服务器的地址。这种过程是迭代的过程。</li><li>本地 DNS 服务器继续向域服务器发出请求，在这个例子中，请求的对象是.com 域服务器。.com 域服务器收到请求之后，也不会直接返回域名和 IP 地址的对应关系，而是告诉本地 DNS 服务器，你的域名的解析服务器的地址。</li><li>最后，本地 DNS 服务器向域名的解析服务器发出请求，这时就能收到一个域名和 IP 地址对应关系，本地 DNS 服务器不仅要把 IP 地址返回给用户电脑，还要把这个对应关系保存在缓存中，以备下次别的用户查询时，可以直接返回结果，加快网络访问。如果 url 里不包含端口号，则会使用该协议的默认端口号。</li></ul><h2 id="3-根据-HTTP-协议生成-HTTP-请求报文"><a href="#3-根据-HTTP-协议生成-HTTP-请求报文" class="headerlink" title="3.根据 HTTP 协议生成 HTTP 请求报文"></a>3.根据 HTTP 协议生成 HTTP 请求报文</h2><h3 id="HTTP-报文一般包括了：-请求-响应行，请求-响应头部，空白行，请求体-响应数据。"><a href="#HTTP-报文一般包括了：-请求-响应行，请求-响应头部，空白行，请求体-响应数据。" class="headerlink" title="HTTP 报文一般包括了： 请求/响应行，请求/响应头部，空白行，请求体/响应数据。"></a>HTTP 报文一般包括了： 请求/响应行，请求/响应头部，空白行，请求体/响应数据。</h3><p><strong>请求</strong></p><ul><li>【请 求 行】请求方法 空格 请求资源地址(URI、无域名) 空格 HTTP 版本 空格 CRLF(换行符)</li><li>【请 求 头】标识:内容 CRLF(换行符)</li><li>【空 一 行】(表示请求头结束)</li><li>【请求 主体】（即请求正文，用户的主要数据。POST 方式时使用，GET 无请求主体）</li></ul><p><strong>响应</strong></p><ul><li>【响 应 行】HTTP 版本 空格 状态码 空格 状态码的文本描述 空格 CRLF(换行符)</li><li>【响 应 头】标识:内容 CRLF(换行符)</li><li>【空 一 行】(表示响应头结束)</li><li>【响应 主体】所谓响应主体，就是服务器返回的资源的内容。即整个 HTML 文件。</li></ul><h2 id="4-TLS-进行加密-提供保密性和数据完整性"><a href="#4-TLS-进行加密-提供保密性和数据完整性" class="headerlink" title="4.TLS 进行加密,提供保密性和数据完整性"></a>4.TLS 进行加密,提供保密性和数据完整性</h2><h4 id="1-TLS-是对-SSL-的改进-目标是为了更安全-可以确保数据发送到正确的客户端和服务器-途中防止被窃取-并且数据在过程中不发生改变"><a href="#1-TLS-是对-SSL-的改进-目标是为了更安全-可以确保数据发送到正确的客户端和服务器-途中防止被窃取-并且数据在过程中不发生改变" class="headerlink" title="(1)TLS 是对 SSL 的改进,目标是为了更安全,可以确保数据发送到正确的客户端和服务器,途中防止被窃取,并且数据在过程中不发生改变."></a>(1)TLS 是对 SSL 的改进,目标是为了更安全,可以确保数据发送到正确的客户端和服务器,途中防止被窃取,并且数据在过程中不发生改变.</h4><ul><li>TLS 使用“消息认证代码的密钥散列法”，当记录在开放的网络（如因特网）上传送时，该代码确保记录不会被变更。</li><li>增强的伪随机功能（PRF）：PRF 生成密钥数据。在 TLS 中，PRF 使用两种散列算法保证其安全性。如果任一算法暴露了，只要第二种算法未暴露，数据仍然是安全的。</li><li>TLS 提供更多的特定和附加警报，以指示任一会话端点检测到的问题。</li></ul><h4 id="2-TLS-协商过程"><a href="#2-TLS-协商过程" class="headerlink" title="(2)TLS 协商过程"></a>(2)TLS 协商过程</h4><ul><li>客户端发出请求(ClientHello)，客户端表达想跟服务端安全进行通话</li><li>服务器回应 (ServerHello)，服务器收到并返回给客户端证书,拿去验证身份</li><li>客户端回应 Certificate Verify),客户端验证证书的真实性,如果有误发出警告并断开链接,如果无误,客户端就会取出公钥并把秘密消息加密发送至服务端</li><li>服务端最后回应(Server Finish),用私钥将客户端消息解密,然后处理并加密发给客户端,这时加密通道已经建立成功了.双方可以进行加密传输了.</li></ul><h1 id="应用层结束"><a href="#应用层结束" class="headerlink" title="应用层结束"></a>应用层结束</h1><ul><li>在应用层将要发送的数据内容形成了应用层的报文 data,发送到传输层</li></ul><h1 id="传输层开始"><a href="#传输层开始" class="headerlink" title="传输层开始"></a>传输层开始</h1><h2 id="5-TCP-三次握手"><a href="#5-TCP-三次握手" class="headerlink" title="5.TCP 三次握手"></a>5.TCP 三次握手</h2><h4 id="握手过程"><a href="#握手过程" class="headerlink" title="握手过程:"></a>握手过程:</h4><ul><li>第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN©。此时客户端处于 SYN_Send 状态。</li><li>第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN(s)，同时会把客户端的 ISN + 1 作为 ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 SYN_REVD 的状态</li><li>第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 establised 状态。</li><li>服务器收到 ACK 报文之后，也处于 establised 状态，此时，双方以建立起了链接。</li></ul><p><strong>通俗点说就是:</strong></p><ul><li>客户端想要跟服务端进行通信,首先告知服务端一声:“我想跟你通信”</li><li>服务端收到客户端的连接请求,回一个确认消息:“我知道了,你现在能连吗?”</li><li>客户端收到服务端的确认消息后,礼貌的告知一下服务端:“好的,咱们开始通信吧”</li></ul><h1 id="传输层结束"><a href="#传输层结束" class="headerlink" title="传输层结束"></a>传输层结束</h1><ul><li>这些数据通过传输层发送，比如 tcp 协议。所以它们会被送到传输层处理，在这里报文打上了传输头的包头，主要包含端口号，以及 tcp 的各种制信息，这些信息是直接得到的，因为接口中需要指定端口。这样就组成了 tcp 的数据传送单位 segment。tcp 是一种端到端的协议，利用这些信息，比如 tcp 首部中的序号确认序号，根据这些数字，发送的一方不断的进行发送等待确认，发送一个数据段后，会开启一个计数器，只有当收到确认后才会发送下一个，如果超过计数时间仍未收到确认则进行重发，在接受端如果收到错误数据，则将其丢弃，这将导致发送端超时重发。通过 tcp 协议，控制了数据包的发送序列的产生，不断的调整发送序列，实现流控和数据完整。然后待发送的数据段发送到网络层。</li></ul><h1 id="网络层开始"><a href="#网络层开始" class="headerlink" title="网络层开始"></a>网络层开始</h1><h2 id="6-IP-寻址"><a href="#6-IP-寻址" class="headerlink" title="6.IP 寻址"></a>6.IP 寻址</h2><h4 id="网络层开始负责将这样的数据包在网络上传输，如何穿过路由器，最终到达目的地址。在这里，根据目的-ip-地址，就需要查找下一跳路由的地址。首先在本机，要查找本机的路由表。"><a href="#网络层开始负责将这样的数据包在网络上传输，如何穿过路由器，最终到达目的地址。在这里，根据目的-ip-地址，就需要查找下一跳路由的地址。首先在本机，要查找本机的路由表。" class="headerlink" title="网络层开始负责将这样的数据包在网络上传输，如何穿过路由器，最终到达目的地址。在这里，根据目的 ip 地址，就需要查找下一跳路由的地址。首先在本机，要查找本机的路由表。"></a>网络层开始负责将这样的数据包在网络上传输，如何穿过路由器，最终到达目的地址。在这里，根据目的 ip 地址，就需要查找下一跳路由的地址。首先在本机，要查找本机的路由表。</h4><p><strong>查找过程是这样的:</strong></p><ul><li>根据目的地址，得到目的网络号，如果处在同一个内网，则可以直接发送。</li><li>如果不是，则查询路由表，找到一个路由。</li><li>如果找不到明确的路由，此时在路由表中还会有默认网关，也可称为缺省网关，IP 用缺省的网关地址将一个数据传送给下一个指定的路由器，所以网关也可能是路由器，也可能只是内网向特定路由器传输数据的网关。</li><li>路由器收到数据后，它再次为远程主机或网络查询路由，若还未找到路由，该数据包将发送到该路由器的缺省网关地址。而数据包中包含一个最大路由跳数，如果超过这个跳数，就会丢弃数据包，这样可以防止无限传递。路由器收到数据包后，只会查看网络层的包裹数据，目的 ip。所以说它是工作在网络层，传输层的数据对它来说则是透明的。</li><li>如果上面这些步骤都没有成功，那么该数据报就不能被传送。如果不能传送的数据报来自本机，那么一般会向生成数据报的应用程序返回一个“主机不可达”或 “网络不可达”的错误。</li></ul><h3 id="关于-NAT-转换"><a href="#关于-NAT-转换" class="headerlink" title="关于 NAT 转换"></a>关于 NAT 转换</h3><ul><li>如果是在局域网中,每台电脑都有自己的私网 IP,在对外传输的时候,会经过 NAT 转换,改成路由器的公网 IP</li></ul><h2 id="7-ARP-协议获取-MAC-地址"><a href="#7-ARP-协议获取-MAC-地址" class="headerlink" title="7.ARP 协议获取 MAC 地址"></a>7.ARP 协议获取 MAC 地址</h2><h4 id="ARP-协议是将-IP-地址映射成-MAC-地址的-由于是-IP-协议使用了-ARP-协议-因此通常把-ARP-协议划归为网络层-但是-ARP-协议的用途是为了从网络层使用的-IP-地址解析出在数据链路层使用的-MAC-地址"><a href="#ARP-协议是将-IP-地址映射成-MAC-地址的-由于是-IP-协议使用了-ARP-协议-因此通常把-ARP-协议划归为网络层-但是-ARP-协议的用途是为了从网络层使用的-IP-地址解析出在数据链路层使用的-MAC-地址" class="headerlink" title="ARP 协议是将 IP 地址映射成 MAC 地址的,由于是 IP 协议使用了 ARP 协议,因此通常把 ARP 协议划归为网络层,但是 ARP 协议的用途是为了从网络层使用的 IP 地址解析出在数据链路层使用的 MAC 地址."></a>ARP 协议是将 IP 地址映射成 MAC 地址的,由于是 IP 协议使用了 ARP 协议,因此通常把 ARP 协议划归为网络层,但是 ARP 协议的用途是为了从网络层使用的 IP 地址解析出在数据链路层使用的 MAC 地址.</h4><p><strong>获取 MAC 地址过程:</strong></p><ul><li>主机生成一个具有目的 IP 地址(默认网关)的 ARP 查询报文,将该 ARP 报文放置在一个具有广播目的地址(例如 FF:FF:FF:FF:FF:FF:FF)的以太网帧中,并向交换机发送该以太网帧,交换机将该帧交付给所有连接的设备,包括网关路由器。</li><li>网关路由器在接口上收到包含该 ARP 查询报文的帧,发现 ARP 报文中目的地址 IP 地址匹配接口的 IP 地址.网关路由器因此准备一个 ARP 回答,指示它的 MAC 地址对应报文中的 IP 地址,它将 ARP 回答放在一个以太网帧中,其目的地址是源 MAC 地址,并向交换机发送该帧,再由交换机将该帧交付给主机。</li><li>主机接收包含 ARP 回答报文的帧,并从 ARP 回答报文中抽取网关路由器的 MAC 地址。</li><li>将这个 MAC 地址将与 IP 包共同传输给下层。</li></ul><h2 id="8-BGP-外部网关协议"><a href="#8-BGP-外部网关协议" class="headerlink" title="8.BGP 外部网关协议"></a>8.BGP 外部网关协议</h2><h4 id="在网络层用-BGP-协议来控制路由的传播和选择最佳路由。"><a href="#在网络层用-BGP-协议来控制路由的传播和选择最佳路由。" class="headerlink" title="在网络层用 BGP 协议来控制路由的传播和选择最佳路由。"></a>在网络层用 BGP 协议来控制路由的传播和选择最佳路由。</h4><ul><li>路由更新时，BGP 只发送更新的路由，大大减少了 BGP 传播路由所占用的带宽，适用于在 Internet 上传播大量的路由信息。</li><li>BGP 路由通过携带 AS 路径信息彻底解决路由环路问题。</li><li>BGP 提供了丰富的路由策略，能够对路由实现灵活的过滤和选择。</li></ul><h1 id="网络层结束"><a href="#网络层结束" class="headerlink" title="网络层结束"></a>网络层结束</h1><ul><li>在网络层被打包，这样封装上了网络层的包头，包头内部含有源及目的的 ip 地址，该层数据发送单位被称为 packet。</li></ul><h1 id="数据链路层开始"><a href="#数据链路层开始" class="headerlink" title="数据链路层开始"></a>数据链路层开始</h1><h2 id="9-MAC-寻址"><a href="#9-MAC-寻址" class="headerlink" title="9.MAC 寻址"></a>9.MAC 寻址</h2><ul><li>首先通过广播获取足够的 MAC 地址表，交换机使用 MAC 地址通过指向相应端口的交换结构将网络通信转向目的节点。交换机为了知道要使用哪个端口来传送单播帧，它必须首先知道自己的每个端口上都存在哪些节点。</li><li>交换机使用其 MAC 地址表来确定如何处理传入的数据帧。通过记录与其每一个端口相连的节点的 MAC 地址来构建其 MAC 地址表。当某个特定端口上的某个特定节点的 MAC 地址记录到地址表之后，交换机就可以知道在后续传输中，应将目的地为该特定节点的流量从与该节点对应的端口上发出。</li><li>当交换机收到传入的数据帧，而地址表中没有该帧的目的 MAC 地址时，交换机将把该帧从除接收该帧的端口之外的所有端口转发出去。当目的节点响应时，交换机从响应帧的源地址字段中获得的该节点的 MAC 地址，并将其记录在地址表中。在多台交换机互连的网络中，连接其它交换机的端口 MAC 地址表中记录有多个 MAC 地址，用来代表远端节点。通常，用于互连两台交换机的交换机端口在 MAC 地址表中记录了多个 MAC 地址。</li></ul><h1 id="数据链路层结束"><a href="#数据链路层结束" class="headerlink" title="数据链路层结束"></a>数据链路层结束</h1><h2 id="10-服务器接受请求"><a href="#10-服务器接受请求" class="headerlink" title="10.服务器接受请求"></a>10.服务器接受请求</h2><h4 id="用户发起的请求都指向调度服务器（反向代理服务器，譬如安装了-nginx-控制负载均衡），然后调度服务器根据实际的调度算法，分配不同的请求给对应集群中的服务器执行"><a href="#用户发起的请求都指向调度服务器（反向代理服务器，譬如安装了-nginx-控制负载均衡），然后调度服务器根据实际的调度算法，分配不同的请求给对应集群中的服务器执行" class="headerlink" title="用户发起的请求都指向调度服务器（反向代理服务器，譬如安装了 nginx 控制负载均衡），然后调度服务器根据实际的调度算法，分配不同的请求给对应集群中的服务器执行."></a>用户发起的请求都指向调度服务器（反向代理服务器，譬如安装了 nginx 控制负载均衡），然后调度服务器根据实际的调度算法，分配不同的请求给对应集群中的服务器执行.</h4><h4 id="服务端将数据包通过数据链路层-gt-网络层-gt-传输层一层层的解封-最后处理-HTTP-中的请求"><a href="#服务端将数据包通过数据链路层-gt-网络层-gt-传输层一层层的解封-最后处理-HTTP-中的请求" class="headerlink" title="服务端将数据包通过数据链路层-&gt;网络层-&gt;传输层一层层的解封,最后处理 HTTP 中的请求"></a>服务端将数据包通过数据链路层-&gt;网络层-&gt;传输层一层层的解封,最后处理 HTTP 中的请求</h4><h2 id="11-服务端处理请求"><a href="#11-服务端处理请求" class="headerlink" title="11.服务端处理请求"></a>11.服务端处理请求</h2><p><strong>首页请求</strong></p><ul><li>因为输入的 url 是请求进入网站首页的,不带任何参数请求,而且操作简单,这样下来 QPS 即每秒查询量是极大的,服务器需要在极短的时间内处理这些流量,这时候会用到 CDN 系统的缓存服务器将首页的图片迅速分发给用户。</li><li>在网站和用户之间引入 CDN 之后，用户不会有任何与原来不同的感觉。</li><li>使用 CDN 服务的网站，只需将其域名的解析权交给 CDN 的负载均衡设备，CDN 负载均衡设备将为用户选择一台合适的缓存服务器，用户通过访问这台缓存服务器来获取自己所需的数据。</li><li>用户可以以最短的路径，最快的速度对网站进行访问。因此，CDN 可以加速用户访问速度，减少源站中心负载压力。</li></ul><p><strong>其它请求</strong></p><ul><li>后台统一处理请求，处理完后响应结果.一般后端都是有统一的验证的，如安全拦截，跨域验证.如果这一步不符合规则，就直接返回了相应的 http 报文（如拒绝请求等）</li><li>然后当验证通过后，才会进入实际的后台代码，此时是程序接收到请求，然后执行（譬如查询数据库，大量计算等等）</li><li>等程序执行完毕后，就会返回一个 http 响应包</li></ul><h2 id="关于数据库"><a href="#关于数据库" class="headerlink" title="关于数据库"></a>关于数据库</h2><h4 id="对于数亿用户的存储"><a href="#对于数亿用户的存储" class="headerlink" title="对于数亿用户的存储"></a>对于数亿用户的存储</h4><ul><li>合理设计数据库字段</li><li>创建索引</li><li>分库分表</li></ul><p><strong>水平分库分表</strong></p><ul><li>对单个指标通过 Hash 等方式分散在多个库或表中</li><li>简单来说就是把一个表的数据划分到不同的数据库,两个数据库的表结构一样,根据一点的规则来划分数据库,查询的时候也根据一定的规则知悉在哪个数据库</li></ul><p><strong>垂直分库分表</strong></p><ul><li>将不同业务指标分散在不同库和表</li><li>简单来说,就是按照业务功能等划分,比如说把收藏夹和购物车放到不同的库中</li></ul><h2 id="12-服务端提供响应"><a href="#12-服务端提供响应" class="headerlink" title="12.服务端提供响应"></a>12.服务端提供响应</h2><h4 id="服务端处理完请求后-会将所请求的东西响应给客户端"><a href="#服务端处理完请求后-会将所请求的东西响应给客户端" class="headerlink" title="服务端处理完请求后,会将所请求的东西响应给客户端"></a>服务端处理完请求后,会将所请求的东西响应给客户端</h4><ul><li>服务器会以同样的顺序同样的方式将响应数据包发送都客户端</li></ul><h2 id="13-四次挥手"><a href="#13-四次挥手" class="headerlink" title="13.四次挥手"></a>13.四次挥手</h2><h4 id="在这种短链接下-当客户端接受到服务端的响应后进行挥手操作"><a href="#在这种短链接下-当客户端接受到服务端的响应后进行挥手操作" class="headerlink" title="在这种短链接下,当客户端接受到服务端的响应后进行挥手操作"></a>在这种短链接下,当客户端接受到服务端的响应后进行挥手操作</h4><ul><li>第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态。</li><li>第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 + 1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态。</li><li>第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。</li><li>第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 + 1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态。</li><li>服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。</li></ul><p><strong>通俗点说就是:</strong></p><ul><li>客户端:“我要下了,还有什么想跟我说的吗?”</li><li>服务端:“等等,上一句还没说完”</li><li>服务端发完后说:“好了,说完了”</li><li>客户端:“我知道了,拜拜”</li></ul><h2 id="14-浏览器解析和渲染"><a href="#14-浏览器解析和渲染" class="headerlink" title="14.浏览器解析和渲染"></a>14.浏览器解析和渲染</h2><h4 id="1-解析-HTML-构建-DOM-树"><a href="#1-解析-HTML-构建-DOM-树" class="headerlink" title="(1)解析 HTML,构建 DOM 树"></a>(1)解析 HTML,构建 DOM 树</h4><ul><li>HTML 文档会被解析成一棵以 document 为根的 DOM 树，解析过程中如果遇到 JavaScript，则会暂停解析并传输下载相应的文件造成阻塞，故推荐将 JavaScript 脚本放在 HTML 文件的后面。</li></ul><h4 id="2-构建-CSSSOM-树"><a href="#2-构建-CSSSOM-树" class="headerlink" title="(2)构建 CSSSOM 树"></a>(2)构建 CSSSOM 树</h4><ul><li>浏览器根据外部样式，内部样式和内联样式来解析 CSS，构建 CSSSOM 树。</li></ul><h4 id="3-构建渲染树和布局"><a href="#3-构建渲染树和布局" class="headerlink" title="(3)构建渲染树和布局"></a>(3)构建渲染树和布局</h4><ul><li>DOM 树和 CSSOM 树构建完毕后会融合成渲染树，然后浏览器会确认页面各元素的位置。</li></ul><h4 id="4-页面绘制和优化"><a href="#4-页面绘制和优化" class="headerlink" title="(4)页面绘制和优化"></a>(4)页面绘制和优化</h4><ul><li>浏览器根据布局结果进行页面的绘制，并优化页面内容，减小 CPU 消耗。</li></ul><h2 id="15-交互结束"><a href="#15-交互结束" class="headerlink" title="15.交互结束"></a>15.交互结束</h2><p>这时如果以上步骤都不出意外,就得到我们想要访问的网页了.在我们输入网址到网页展示短短几秒的过程中就大致经历了这么多过程.<br>客户端到服务端如上所示,看似只有一次交互,其实中间过程中已经交互了多次,比如握手过程,都是需要进行发包交互的.</p>]]></content>
      
      
      <categories>
          
          <category> 服务端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 访问网页全过程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖和节流</title>
      <link href="/2020/06/19/lsxk1n/"/>
      <url>/2020/06/19/lsxk1n/</url>
      
        <content type="html"><![CDATA[<h2 id="一、为什么要在-JavaScript-中使用防抖与节流："><a href="#一、为什么要在-JavaScript-中使用防抖与节流：" class="headerlink" title="一、为什么要在 JavaScript 中使用防抖与节流："></a>一、为什么要在 JavaScript 中使用防抖与节流：</h2><ul><li>JavaScript 是事件驱动的，大量的操作会触发事件，加入到事件队列中处理。</li><li>而对于某些频繁的事件处理会造成性能的损耗，我们就可以通过防抖和节流来限制事件频繁的发生；</li></ul><h2 id="二、防抖-（延迟生效最后一次执行）"><a href="#二、防抖-（延迟生效最后一次执行）" class="headerlink" title="二、防抖 （延迟生效最后一次执行）"></a>二、防抖 （延迟生效最后一次执行）</h2><h3 id="1，定义和原理"><a href="#1，定义和原理" class="headerlink" title="1，定义和原理"></a>1，定义和原理</h3><p><strong>定义</strong>：函数防抖（debounce），即如果短时间内大量触发同一事件，都会重置计时器，等到事件不触发了，再等待规定的事件，才会执行函数。<br><strong>原理</strong>：设置一个定时器，设置在规定的时间后触发事件处理，每次触发事件都会重置计时器。</p><h3 id="2，用处"><a href="#2，用处" class="headerlink" title="2，用处"></a>2，用处</h3><p>防抖用于搜索框和滚动的监听事件处理，如果没有防抖，那么每输入一个字或者滚动屏幕，都会触发事件，甚至一秒钟触发几十次，性能就会浪费。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">        <span class="comment">// 方案一：状态位</span></span><br><span class="line">        <span class="keyword">const</span> throttle = <span class="function">(<span class="params">fn, delay</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param </span>[Function] fn 需要使用防抖的函数</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param </span>[Number] delay 毫秒，防抖期限值</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">let</span> valid = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!valid) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 执行函数+把状态位设置为无效</span></span><br><span class="line">                valid = <span class="literal">false</span></span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    fn()</span><br><span class="line">                    valid = <span class="literal">true</span></span><br><span class="line">                &#125;, delay)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">​</span><br><span class="line">        <span class="keyword">const</span> showTop = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> scrollTop = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;当前位置：&#x27;</span> + scrollTop)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">window</span>.onscroll = throttle(showTop, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方案二：时间戳</span></span><br><span class="line">        <span class="keyword">const</span> throttle = <span class="function">(<span class="params">fn, delay</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param </span>[Function] fn 需要使用防抖的函数</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param </span>[Number] delay 毫秒，防抖期限值</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">let</span> start</span><br><span class="line">            <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> now = <span class="built_in">Date</span>.now()</span><br><span class="line">                <span class="keyword">if</span> (!start) &#123;</span><br><span class="line">                    start = now</span><br><span class="line">                &#125;</span><br><span class="line">​</span><br><span class="line">                <span class="keyword">if</span> (now - start &gt;= delay) &#123;</span><br><span class="line">                    fn()</span><br><span class="line">                    start = <span class="literal">null</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">​</span><br><span class="line">        <span class="keyword">const</span> showTop = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> scrollTop = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;当前位置：&#x27;</span> + scrollTop)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">window</span>.onscroll = throttle(showTop, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方案三：setTimeout标记</span></span><br><span class="line">        <span class="keyword">const</span> throttle = <span class="function">(<span class="params">fn, delay</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param </span>[Function] fn 需要使用防抖的函数</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param </span>[Number] delay 毫秒，防抖期限值</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">                    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        fn()</span><br><span class="line">                        timer = <span class="literal">null</span></span><br><span class="line">                    &#125;, delay)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">​</span><br><span class="line">        <span class="keyword">const</span> showTop = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> scrollTop = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;当前位置：&#x27;</span> + scrollTop)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">window</span>.onscroll = throttle(showTop, <span class="number">1000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3，应用场景："><a href="#3，应用场景：" class="headerlink" title="3，应用场景："></a>3，应用场景：</h3><ul><li>输入框中频繁的输入内容，搜索或者提交信息；</li><li>频繁的点击按钮，触发某个事件；</li><li>监听浏览器滚动事件，完成某些特定操作；</li><li>用户缩放浏览器的 resize 事件；</li></ul><p>总之，<strong>密集的事件触发，我们只希望触发比较靠后发生的事件，就可以使用防抖函数；</strong></p><h2 id="三、节流-（稀释函数的执行频率）"><a href="#三、节流-（稀释函数的执行频率）" class="headerlink" title="三、节流 （稀释函数的执行频率）"></a>三、节流 （稀释函数的执行频率）</h2><h3 id="1，定义和原理-1"><a href="#1，定义和原理-1" class="headerlink" title="1，定义和原理"></a>1，定义和原理</h3><p>定义：函数节流（throttle），每隔一段时间就执行一次。<br>原理：设置一个定时器，设置 0.5 秒后执行事件，如果时间到了，就会执行函数并重置定时器，等待下一个 0.5 秒后再执行。</p><h3 id="2，用处-1"><a href="#2，用处-1" class="headerlink" title="2，用处"></a>2，用处</h3><p>滚动栏的位置查询，就能设置每 0.5 秒执行一次函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">        <span class="comment">// 方案一：状态位</span></span><br><span class="line">        <span class="keyword">const</span> throttle = <span class="function">(<span class="params">fn, delay</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param </span>[Function] fn 需要使用防抖的函数</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param </span>[Number] delay 毫秒，防抖期限值</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">let</span> valid = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!valid) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 执行函数+把状态位设置为无效</span></span><br><span class="line">                valid = <span class="literal">false</span></span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    fn()</span><br><span class="line">                    valid = <span class="literal">true</span></span><br><span class="line">                &#125;, delay)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">​</span><br><span class="line">        <span class="keyword">const</span> showTop = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> scrollTop = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;当前位置：&#x27;</span> + scrollTop)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">window</span>.onscroll = throttle(showTop, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方案二：时间戳</span></span><br><span class="line">        <span class="keyword">const</span> throttle = <span class="function">(<span class="params">fn, delay</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param </span>[Function] fn 需要使用防抖的函数</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param </span>[Number] delay 毫秒，防抖期限值</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">let</span> start</span><br><span class="line">            <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> now = <span class="built_in">Date</span>.now()</span><br><span class="line">                <span class="keyword">if</span> (!start) &#123;</span><br><span class="line">                    start = now</span><br><span class="line">                &#125;</span><br><span class="line">​</span><br><span class="line">                <span class="keyword">if</span> (now - start &gt;= delay) &#123;</span><br><span class="line">                    fn()</span><br><span class="line">                    start = <span class="literal">null</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">​</span><br><span class="line">        <span class="keyword">const</span> showTop = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> scrollTop = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;当前位置：&#x27;</span> + scrollTop)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">window</span>.onscroll = throttle(showTop, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方案三：setTimeout标记</span></span><br><span class="line">        <span class="keyword">const</span> throttle = <span class="function">(<span class="params">fn, delay</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param </span>[Function] fn 需要使用防抖的函数</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param </span>[Number] delay 毫秒，防抖期限值</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">                    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        fn()</span><br><span class="line">                        timer = <span class="literal">null</span></span><br><span class="line">                    &#125;, delay)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">​</span><br><span class="line">        <span class="keyword">const</span> showTop = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> scrollTop = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;当前位置：&#x27;</span> + scrollTop)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">window</span>.onscroll = throttle(showTop, <span class="number">1000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3，应用场景：-1"><a href="#3，应用场景：-1" class="headerlink" title="3，应用场景："></a>3，应用场景：</h3><ul><li>监听页面的滚动事件；</li><li>鼠标移动事件；</li><li>用户频繁点击按钮操作；</li><li>游戏中的一些设计；</li></ul><p>总之，依然是密集的事件触发，但是这次密集事件触发的过程，不会等待最后一次才进行函数调用，而是会按照一定的频率进行调用；</p><h2 id="四、相同不同："><a href="#四、相同不同：" class="headerlink" title="四、相同不同："></a>四、相同不同：</h2><p>相同：<strong>为了缓解函数频繁调用、大量计算导致页面卡顿</strong><br>不同：<strong>防抖是将多次执行变为最后一次执行，节流是将多次执行变为在规定时间内只执行一次.</strong></p>]]></content>
      
      
      <categories>
          
          <category> 服务端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 防抖 </tag>
            
            <tag> 节流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>登陆交互流程</title>
      <link href="/2020/06/19/cp5gb3/"/>
      <url>/2020/06/19/cp5gb3/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/lake_card_mindmap.jpeg?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 服务端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 登陆交互 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - echarts-map</title>
      <link href="/2020/06/18/agpq4p/"/>
      <url>/2020/06/18/agpq4p/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-echarts-map"><a href="#Vue-echarts-map" class="headerlink" title="Vue - echarts-map"></a>Vue - echarts-map</h1><h2 id="echarts"><a href="#echarts" class="headerlink" title="echarts"></a>echarts</h2><p>前端数据可视化的图标库</p><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>按照官网使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save-dev echart</span><br></pre></td></tr></table></figure><p>但是呢由于 echarts 显然地图依赖包被”搞了”，所以在最新版本中会有一点问题，解决方案如下：</p><ol><li>使用 cdn 引入 echart、echart.china.js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt;</span><br><span class="line">    // 引入echarts外链</span><br><span class="line">    &lt;script src=&quot;https://cdn.staticfile.org/echarts/4.3.0/echarts.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    // 引入中国地图模块</span><br><span class="line">    // 最新版本已经不提供地图相关下载操作</span><br><span class="line">    &lt;script src=&quot;./china.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">     &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>echarts.china.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">&quot;function&quot;</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">    <span class="comment">// AMD. Register as an anonymous module.</span></span><br><span class="line">    define([<span class="string">&quot;exports&quot;</span>, <span class="string">&quot;echarts&quot;</span>], factory);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">typeof</span> <span class="built_in">exports</span> === <span class="string">&quot;object&quot;</span> &amp;&amp;</span><br><span class="line">    <span class="keyword">typeof</span> <span class="built_in">exports</span>.nodeName !== <span class="string">&quot;string&quot;</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// CommonJS</span></span><br><span class="line">    factory(<span class="built_in">exports</span>, <span class="built_in">require</span>(<span class="string">&quot;echarts&quot;</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Browser globals</span></span><br><span class="line">    factory(&#123;&#125;, root.echarts);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="built_in">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span>, echarts</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> log = <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">console</span> !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span> &amp;&amp; <span class="built_in">console</span>.error &amp;&amp; <span class="built_in">console</span>.error(msg);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (!echarts) &#123;</span><br><span class="line">    log(<span class="string">&quot;ECharts is not Loaded&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!echarts.registerMap) &#123;</span><br><span class="line">    log(<span class="string">&quot;ECharts Map is not loaded&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  echarts.registerMap(<span class="string">&quot;china&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;FeatureCollection&quot;</span>,</span><br><span class="line">    <span class="attr">features</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;710000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;MultiPolygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            [<span class="string">&quot;@@°Ü¯Û&quot;</span>],</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&quot;@@ƛĴÕƊÉɼģºðʀ\\ƎsÆNŌÔĚänÜƤɊĂǀĆĴĤǊŨxĚĮǂƺòƌâÔ®ĮXŦţƸZûÐƕƑGđ¨ĭMó·ęcëƝɉlÝƯֹÅŃ^Ó·śŃǋƏďíåɛGɉ¿@ăƑ¥ĘWǬÏĶŁâ&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">            [<span class="string">&quot;@@\\p|WoYG¿¥Ij@¢&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@¡@V^RqBbAnTXeRz¤L«³I&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@ÆEEkWqë @&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@fced&quot;</span>],</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [</span><br><span class="line">            [[<span class="number">122886</span>, <span class="number">24033</span>]],</span><br><span class="line">            [[<span class="number">123335</span>, <span class="number">22980</span>]],</span><br><span class="line">            [[<span class="number">122375</span>, <span class="number">24193</span>]],</span><br><span class="line">            [[<span class="number">122518</span>, <span class="number">24117</span>]],</span><br><span class="line">            [[<span class="number">124427</span>, <span class="number">22618</span>]],</span><br><span class="line">            [[<span class="number">124862</span>, <span class="number">26043</span>]],</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">121.509062</span>, <span class="number">25.044332</span>], <span class="attr">name</span>: <span class="string">&quot;台湾&quot;</span>, <span class="attr">childNum</span>: <span class="number">6</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;130000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;MultiPolygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            [<span class="string">&quot;@@o~Z]ªrºc_ħ²G¼s`jÎŸnüsÂłNX_M`Ç½ÓnUKĜēs¤­©yrý§uģcJe&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@U`Ts¿mÂ&quot;</span>],</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&quot;@@oºƋÄdeVDJj£J|ÅdzÂFt~KŨ¸IÆv|¢r&#125;èonb&#125;`RÎÄn°ÒdÞ²^®lnÐèĄlðÓ×]ªÆ&#125;LiĂ±Ö`^°Ç¶p®đDcŋ`ZÔ¶êqvFÆN®ĆTH®¦O¾IbÐã´BĐɢŴÆíȦpĐÞXR·nndO¤OÀĈƒ­QgµFo|gȒęSWb©osx|hYhgŃfmÖĩnºTÌSp¢dYĤ¶UĈjlǐpäìë|³kÛfw²Xjz~ÂqbTÑěŨ@|oMzv¢ZrÃVw¬ŧĖ¸f°ÐTªqs&#123;S¯r æÝlNd®²Ğ ǆiGĘJ¼lr&#125;~K¨ŸƐÌWöÆzR¤lêmĞLÎ@¡|q]SvKÑcwpÏÏĿćènĪWlĄkT&#125;J¤~ÈTdpddʾĬBVtEÀ¢ôPĎƗè@~kü\\rÊĔÖæW_§¼F´©òDòjYÈrbĞāøŀG&#123;ƀ|¦ðrb|ÀH`pʞkvGpuARhÞÆǶgĘTǼƹS£¨¡ù³ŘÍ]¿ÂyôEP xX¶¹ÜO¡gÚ¡IwÃé¦ÅBÏ|Ç°N«úmH¯âDùyŜŲIÄuĐ¨D¸dɂFOhđ©OiÃ`ww^ÌkÑH«ƇǤŗĺtFu&#123;Z&#125;Ö@U´ʚLg®¯Oı°Ãw ^VbÉsmAê]]w§RRl£ȭµu¯b&#123;ÍDěïÿȧuT£ġěŗƃĝQ¨fVƋƅn­a@³@ďyÃ½IĹÊKŭfċŰóxV@tƯJ]eR¾fe|rHA|h~Ėƍl§ÏlTíb ØoÅbbx³^zÃĶ¶Sj®AyÂhðk`«PËµEFÛ¬Y¨Ļrõqi¼Wi°§Ð±´°^[À|ĠO@ÆxO\\ta\\tĕtû&#123;ġȧXýĪÓjùÎRb^ÎfK[ÝděYfíÙTyuUSyŌŏů@Oi½éŅ­aVcř§ax¹XŻácWU£ôãºQ¨÷Ñws¥qEHÙ|šYQoŕÇyáĂ£MÃ°oťÊP¡mWO¡v&#123;ôvîēÜISpÌhp¨ jdeŔQÖjX³àĈ[n`Yp@UcM`RKhEbpŞlNut®EtqnsÁgAiúoHqCXhfgu~ÏWP½¢G^&#125;¯ÅīGCÑ^ãziMáļMTÃƘrMc|O_¯Ŏ´|morDkO\\mĆJfl@cĢ¬¢aĦtRıÒ¾ùƀ^juųœK­UFyƝīÛ÷ąV×qƥV¿aȉd³BqPBmaËđŻģmÅ®V¹d^KKonYg¯XhqaLdu¥Ípǅ¡KąÅkĝęěhq&#125;HyÃ]¹ǧ£Í÷¿qáµ§g¤o^á¾ZE¤i`ĳ&#123;nOl»WÝĔįhgF[¿¡ßkOüš_ūiǱàUtėGyl&#125;ÓM&#125;jpEC~¡FtoQiHkk&#123;Ãmï&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [</span><br><span class="line">            [[<span class="number">119712</span>, <span class="number">40641</span>]],</span><br><span class="line">            [[<span class="number">121616</span>, <span class="number">39981</span>]],</span><br><span class="line">            [[<span class="number">116462</span>, <span class="number">37237</span>]],</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">114.502461</span>, <span class="number">38.045474</span>], <span class="attr">name</span>: <span class="string">&quot;河北&quot;</span>, <span class="attr">childNum</span>: <span class="number">3</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;140000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;Polygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            <span class="string">&quot;@@ÞĩÒSra&#125;ÁyWix±Üe´lèßÓǏokćiµVZģ¡coTSË¹ĪmnÕńehZg&#123;gtwªpXaĚThȑp&#123;¶Eh®RćƑP¿£Pmc¸mQÝWďȥoÅîɡųAďä³aÏJ½¥PG­ąSM­EÅruµéYÓŌ_dĒCo­Èµ]¯_²ÕjāK~©ÅØ^ÔkïçămÏk]­±cÝ¯ÑÃmQÍ~_apm~ç¡qu&#123;JÅŧ·Ls&#125;EyÁÆcI&#123;¤IiCfUcƌÃp§]ě«vD@¡SÀµMÅwuYY¡DbÑc¡h×]nkoQdaMç~eDÛtT©±@¥ù@É¡ZcW|WqOJmĩl«ħşvOÓ«IqăV¥D[mI~Ó¢cehiÍ]Ɠ~ĥqX·eƷn±&#125;v[ěďŕ]_œ`¹§ÕōIo©b­s^&#125;Ét±ū«³p£ÿ·Wµ|¡¥ăFÏs×¥ŅxÊdÒ&#123;ºvĴÎêÌɊ²¶ü¨|ÞƸµȲLLúÉƎ¤ϊęĔV`_bªS^|dzY|dz¥pZbÆ£¶ÒK&#125;tĦÔņƠPYznÍvX¶Ěn ĠÔzý¦ª÷ÑĸÙUȌ¸dòÜJð´ìúNM¬XZ´¤ŊǸ_tldI&#123;¦ƀðĠȤ¥NehXnYGR° ƬDj¬¸|CĞKqºfƐiĺ©ª~ĆOQª ¤@ìǦɌ²æBÊTŸʂōĖĴŞȀÆÿȄlŤĒötÎ½î¼ĨXh|ªM¤Ðz&quot;</span>,</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [[<span class="number">116874</span>, <span class="number">41716</span>]],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">112.549248</span>, <span class="number">37.857014</span>], <span class="attr">name</span>: <span class="string">&quot;山西&quot;</span>, <span class="attr">childNum</span>: <span class="number">1</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;150000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;MultiPolygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&quot;@@Č^â£ĂhĖMÈÄw\\fŦ°W ¢¾luŸDw\\̀ʉÌÛMĀ[bÓEn&#125;¶Vcês¯PqFB|S³C|kñHdiÄ¥sŉÅPóÑÑE^ÅPpy_YtShQ·aHwsOnŉÃs©iqjUSiº]ïW«gW¡ARëśĳĘů`çõh]y»ǃǛҤxÒm~zf&#125;pf|ÜroÈzrKÈĵSƧż؜Ġu¦ö&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&quot;@@sKCGS|úþXgp&#123;ÁX¿ć&#123;ƱȏñZáĔyoÁhA&#125;ŅĆfdŉ_¹Y°ėǩÑ¡H¯¶oMQqð¡Ë|Ñ`ƭŁX½·óÛxğįÅcQs«tȋǅFù^it«Č¯[hAi©á¥ÇĚ×l|¹y¯YȵƓñǙµïċĻ|Düȭ¶¡oŽäÕG\\ÄT¿Òõr¯LguÏYęRƩɷŌO\\İÐ¢æ^Ŋ ĲȶȆbÜGĝ¬¿ĚVĎgª^íu½jÿĕęjık@Ľ]ėl¥ËĭûÁėéV©±ćn©­ȇÍq¯½YÃÔŉÉNÑÅÝy¹NqáʅDǡËñ­ƁYÅy̱os§ȋµʽǘǏƬɱàưN¢ƔÊuľýľώȪƺɂļxZĈ&#125;ÌŉŪĺœĭFЛĽ̅ȣͽÒŵìƩÇϋÿȮǡŏçƑůĕ~Ç¼ȳÐUfdIxÿ\\G zâɏÙOº·pqy£@qþ@Ǟ˽IBäƣzsÂZÁàĻdñ°ŕzéØűzșCìDȐĴĺf®Àľưø@ɜÖÞKĊŇƄ§͑těï͡VAġÑÑ»d³öǍÝXĉĕÖ&#123;þĉu¸ËʅğU̎éhɹƆ̗̮ȘǊ֥ड़ࡰţાíϲäʮW¬®ҌeרūȠkɬɻ̼ãüfƠSצɩςåȈHϚÎKǳͲOðÏȆƘ¼CϚǚ࢚˼ФÔ¤ƌĞ̪Qʤ´¼mȠJˀƲÀɠmǐnǔĎȆÞǠN~ʢĜ¶ƌĆĘźʆȬ˪ĚĒ¸ĞGȖƴƀj`ĢçĶāàŃºēĢĖćYÀŎüôQÐÂŎŞǆŞêƖoˆDĤÕºÑǘÛˤ³̀gńƘĔÀ^ªƂ`ªt¾äƚêĦĀ¼ÐĔǎ¨Ȕ»͠^ˮÊȦƤøxRrŜH¤¸ÂxDÄ|ø˂˜ƮÐ¬ɚwɲFjĔ²Äw°ǆdÀÉ_ĸdîàŎjÊêTĞªŌŜWÈ|tqĢUB~´°ÎFCU¼pĀēƄN¦¾O¶łKĊOjĚj´ĜYp&#123;¦SĚÍ\\T×ªV÷Ší¨ÅDK°ßtŇĔK¨ǵÂcḷ̌ĚǣȄĽFlġUĵŇȣFʉɁMğįʏƶɷØŭOǽ«ƽū¹Ʊő̝Ȩ§ȞʘĖiɜɶʦ&#125;¨֪ࠜ̀ƇǬ¹ǨE˦ĥªÔêFxúQEr´Wrh¤Ɛ \\talĈDJÜ|[Pll̚¸ƎGú´P¬W¦^¦H]prRn|or¾wLVnÇIujkmon£cX^Bh`¥V¦U¤¸&#125;xRj[^xN[~ªxQ[`ªHÆÂExx^wN¶Ê|¨ìMrdYpoRzNyÀDs~bcfÌ`L¾n|¾T°c¨È¢ar¤`[|òDŞĔöxElÖdHÀI`Ď\\Àì~ÆR¼tf¦^¢ķ¶eÐÚMptgjɡČÅyġLûŇV®ÄÈƀĎ°P|ªVVªj¬ĚÒêp¬E|ŬÂc|ÀtƐK f&#123;ĘFĒƌXƲąo½Ę\\¥o&#125;Ûu£ç­kX&#123;uĩ«āíÓUŅßŢqŤ¥lyň[oi&#123;¦LńðFȪȖĒL¿Ìf£K£ʺoqNwğc`uetOj×°KJ±qÆġmĚŗos¬qehqsuH&#123;¸kH¡ÊRǪÇƌbȆ¢´äÜ¢NìÉʖ¦â©Ż؛Ç@Vu»Aylßí¹ĵêÝlISò³C¹Ìâ²i¶Ìoú^H²CǜңǄ z¼g^èöŰ_Ĳĕê&#125;gÁnUI«m]jvV¼euhwqAaW_µj»çjioQR¹ēÃßt@r³[ÛlćË^ÍÉáGOUÛOB±XkÅ¹£k|e]olkVÍ¼ÕqtaÏõjgÁ£§U^RLËnX°ÇBz^~wfvypV ¯ƫĉ˭ȫƗŷɿÿĿƑ˃ĝÿÃǃßËőó©ǐȍŒĖM×ÍEyxþp]ÉvïèvƀnÂĴÖ@V~Ĉ³MEĸÅĖtējyÄDXÄxGQuv_i¦aBçw˛wD©&#123;tāmQ&#123;EJ§KPśƘƿ¥@sCTÉ&#125;ɃwƇy±gÑ&#125;T[÷kÐç¦«SÒ¥¸ëBX½HáÅµÀğtSÝÂa[ƣ°¯¦Pï¡]£ġÒk®G²èQ°óMq&#125;EóƐÇ\\@áügQÍu¥FTÕ¿Jû]|mvāÎYua^WoÀa·­ząÒot×¶CLƗi¯¤mƎHǊ¤îìɾŊìTdåwsRÖgĒųúÍġäÕ&#125;Q¶¿A[¡&#123;d×uQAMxVvMOmăl«ct[wº_ÇÊjbÂ£ĦS_éQZ_lwgOiýe`YYLq§IÁǳ£ÙË[ÕªuƏ³ÍTs·bÁĽäė[b[ŗfãcn¥îC¿÷µ[ŏÀQ­ōĉm¿Á^£mJVmL[&#123;Ï_£F¥Ö&#123;ŹA&#125;×Wu©ÅaųĳƳhB&#123;·TQqÙIķËZđ©Yc|M¡LeVUóK_QWk_ĥ¿ãZ»X\\ĴuUèlG®ěłTĠğDŃOrÍdÆÍz]±ŭ©Å]ÅÐ&#125;UË¥©TċïxgckfWgi\\ÏĒ¥HkµEë&#123;»ÏetcG±ahUiñiWsɁ·cCÕk]wȑ|ća&#125;wVaĚá G°ùnM¬¯&#123;ÈÐÆA¥ÄêJxÙ¢hP¢ÛºµwWOóFÁz^ÀŗÎú´§¢T¤ǻƺSėǵhÝÅQgvBHouʝl_o¿Ga&#123;ïq&#123;¥|ſĿHĂ÷aĝÇqZñiñC³ª»E`¨åXēÕqÉû[l&#125;ç@čƘóO¿¡FUsAʽīccocÇS&#125;£IS~ălkĩXçmĈŀÐoÐdxÒuL^T&#123;r@¢ÍĝKén£kQyÅõËXŷƏL§~&#125;kq»IHėǅjĝ»ÑÞoå°qTt|r©ÏS¯·eŨĕx«È[eM¿yupN~¹ÏyN£&#123;©għWí»Í¾səšǅ_ÃĀɗ±ąĳĉʍŌŷSÉA±åǥɋ@ë£R©ąP©&#125;ĹªƏj¹erLDĝ·&#123;i«ƫC£µ&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [[[<span class="number">127444</span>, <span class="number">52594</span>]], [[<span class="number">113793</span>, <span class="number">40312</span>]]],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123;</span><br><span class="line">          <span class="attr">cp</span>: [<span class="number">111.670801</span>, <span class="number">40.818311</span>],</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;内蒙古&quot;</span>,</span><br><span class="line">          <span class="attr">childNum</span>: <span class="number">2</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;210000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;MultiPolygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            [<span class="string">&quot;@@L@@sa&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@MnNm&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@dc&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@eÀC@b&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@fXwkbrÄ`qg&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@^jtWQ&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@~ Y]c&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@G`ĔN^_¿ZÃM&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@iX¶BY&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@YZ&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@L_&#123;Epf&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@^WqCT\\&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@\\[§t|¤_&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@m`n_&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@Ïxǌ&#123;q_×^Giip&quot;</span>],</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&quot;@@@é^BntaÊU]x ¯ÄPĲ­°hʙK³VÕ@Y~|EvĹsÇ¦­L^pÃ²ŸÒG Ël]xxÄ_fT¤Ď¤cPC¨¸TVjbgH²sdÎdHt`B²¬GJję¶[ÐhjeXdlwhðSČ¦ªVÊÏÆZÆŶ®²^ÎyÅÎcPqńĚDMħĜŁH­kçvV[ĳ¼WYÀäĦ`XlR`ôLUVfK¢&#123;NZdĒªYĸÌÚJRr¸SA|ƴgŴĴÆbvªØX~źB|¦ÕE¤Ð`\\|KUnnI]¤ÀÂĊnŎR®Ő¿¶\\ÀøíDm¦ÎbŨabaĘ\\ľãÂ¸atÎSƐ´©v\\ÖÚÌǴ¤Â¨JKrZ_ZfjþhPkx`YRIjJcVf~sCN¤ EhæmsHy¨SðÑÌ\\\\ĐRZk°IS§fqŒßýáĞÙÉÖ[^¯ǤŲê´\\¦¬ĆPM¯£»uïpùzExanµyoluqe¦W^£ÊL&#125;ñrkqWňûPUP¡ôJoo·U&#125;£[·¨@XĸDXm­ÛÝºGUCÁª½&#123;íĂ^cjk¶Ã[q¤LÉö³cux«zZf²BWÇ®Yß½ve±ÃCý£W&#123;Ú^q^sÑ·¨ÍOt¹·C¥GDrí@wÕKţÃ«V·i&#125;xËÍ÷i©ĝɝǡ]&#123;c±OW³Ya±_ç©HĕoƫŇqr³Lys[ñ³¯OSďOMisZ±ÅFC¥Pq&#123;Ã[Pg&#125;\\¿ghćOk^ģÁFıĉĥM­oEqqZûěŉ³F¦oĵhÕP&#123;¯~TÍlªNßYÐ&#123;Ps&#123;ÃVUeĎwk±ŉVÓ½ŽJãÇÇ»Jm°dhcÀffdF~ĀeĖd`sx² ®EżĀdQÂd^~ăÔH¦\\LKpĄVez¤NP ǹÓRÆąJSh­a[¦´ÂghwmBÐ¨źhI|VV|p] Â¼èNä¶ÜBÖ¼L`¼bØæKVpoúNZÞÒKxpw|ÊEMnzEQIZZNBčÚFÜçmĩWĪñtÞĵÇñZ«uD±|Əlĳ¥ãn·±PmÍada CLǑkùó¡³Ï«QaċÏOÃ¥ÕđQȥċƭy³ÃA&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [</span><br><span class="line">            [[<span class="number">123686</span>, <span class="number">41445</span>]],</span><br><span class="line">            [[<span class="number">126019</span>, <span class="number">40435</span>]],</span><br><span class="line">            [[<span class="number">124393</span>, <span class="number">40128</span>]],</span><br><span class="line">            [[<span class="number">126117</span>, <span class="number">39963</span>]],</span><br><span class="line">            [[<span class="number">125322</span>, <span class="number">40140</span>]],</span><br><span class="line">            [[<span class="number">126686</span>, <span class="number">40700</span>]],</span><br><span class="line">            [[<span class="number">126041</span>, <span class="number">40374</span>]],</span><br><span class="line">            [[<span class="number">125584</span>, <span class="number">40168</span>]],</span><br><span class="line">            [[<span class="number">125453</span>, <span class="number">40165</span>]],</span><br><span class="line">            [[<span class="number">125362</span>, <span class="number">40214</span>]],</span><br><span class="line">            [[<span class="number">125280</span>, <span class="number">40291</span>]],</span><br><span class="line">            [[<span class="number">125774</span>, <span class="number">39997</span>]],</span><br><span class="line">            [[<span class="number">125976</span>, <span class="number">40496</span>]],</span><br><span class="line">            [[<span class="number">125822</span>, <span class="number">39993</span>]],</span><br><span class="line">            [[<span class="number">125509</span>, <span class="number">40217</span>]],</span><br><span class="line">            [[<span class="number">122731</span>, <span class="number">40949</span>]],</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">123.429096</span>, <span class="number">41.796767</span>], <span class="attr">name</span>: <span class="string">&quot;辽宁&quot;</span>, <span class="attr">childNum</span>: <span class="number">16</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;220000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;Polygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            <span class="string">&quot;@@pä³PClFbbÍzwBGĭZÅi»lY­ċ²SgkÇ£^Sqd¯R©é£¯S\\cZ¹iűƏCuƍÓXoR&#125;M^o£R&#125;oªU­FuuXHlEÅÏ©¤ÛmTþ¤D²ÄufàÀ­XXÈ±AeyYw¬dvõ´KÊ£\\rµÄlidā]|î©¾DÂVH¹Þ®ÜWnCķ W§@\\¸~¤Vp¸póIO¢VOŇürXql~òÉK]¤¥Xrfkvzpm¶bwyFoúvð¼¤ N°ąO¥«³[éǡű_°Õ\\ÚÊĝþâőàerR¨­JYlďQ[ ÏYëÐ§TGztnß¡gFkMāGÁ¤ia ÉÈ¹`\\xs¬dĆkNnuNUuP@vRY¾\\¢GªóĄ~RãÖÎĢùđŴÕhQxtcæëSɽŉíëǉ£ƍG£nj°KƘµDsØÑpyĆ¸®¿bXp]vbÍZuĂ&#123;n^IüÀSÖ¦EvRÎûh@â[ƏÈô~FNr¯ôçR±­HÑlĢ^¤¢OðævxsŒ]ÞÁTĠs¶¿âÆGW¾ìA¦·TÑ¬è¥ÏÐJ¨¼ÒÖ¼ƦɄxÊ~StD@Ă¼Ŵ¡jlºWvÐzƦZÐ²CH AxiukdGgetqmcÛ£Ozy¥cE&#125;|¾cZk¿uŐã[oxGikfeäT@SUwpiÚFM©£è^Ú`@v¶eňf heP¶täOlÃUgÞzŸU`l&#125;ÔÆUvØ_Ō¬Öi^ĉi§²ÃB~¡ĈÚEgc|DC_Ȧm²rBx¼MÔ¦ŮdĨÃâYxƘDVÇĺĿg¿cwÅ\\¹¥Yĭl¤OvLjM_a W`zļMž·\\swqÝSAqŚĳ¯°kRē°wx^ĐkǂÒ\\]nrĂ&#125;²ĊŲÒøãh·M&#123;yMzysěnĒġV·°G³¼XÀ¤¹i´o¤ŃÈ`ÌǲÄUĞd\\iÖmÈBĤÜɲDEh LG¾ƀÄ¾&#123;WaYÍÈĢĘÔRîĐj&#125;ÇccjoUb½&#123;h§Ǿ&#123;KƖµÎ÷GĀÖŠåưÎs­lyiē«`å§H¥Ae^§GK&#125;iã\\c]v©ģZmÃ|[M&#125;ģTɟĵÂÂ`ÀçmFK¥ÚíÁbX³ÌQÒHof&#123;]ept·GŋĜYünĎųVY^ydõkÅZW«WUa~U·SbwGçǑiW^qFuNĝ·EwUtW·Ýďæ©PuqEzwAVXRãQ`­©GMehccďÏd©ÑW_ÏYƅ»é\\ɹ~ǙG³mØ©BšuT§Ĥ½¢Ã_Ã½L¡ýqT^rme\\PpZZbyuybQefµ]UhĿDCmûvaÙNSkCwncćfv~YÇG&quot;</span>,</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [[<span class="number">130196</span>, <span class="number">42528</span>]],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">125.3245</span>, <span class="number">43.886841</span>], <span class="attr">name</span>: <span class="string">&quot;吉林&quot;</span>, <span class="attr">childNum</span>: <span class="number">1</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;230000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;MultiPolygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            [<span class="string">&quot;@@ƨĶTLÇyqpÇÛqe&#123;~oyen&#125;s`qiXGù]Ëp½©lÉÁp]Þñ´FĂ^fäîºkàz¼BUvÈ@&quot;</span>],</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&quot;@@UµNÿ¥īèçHÍøƕ¶Lǽ|g¨|a¾pVidd~ÈiíďÓQġėÇZÎXb½|ſÃH½KFgɱCģÛÇAnjÕc[VĝǱÃËÇ_ £ń³pj£º¿»WH´¯U¸đĢmtĜyzzNN|g¸÷äűÑ±ĉā~mq^[ǁÑďlw]¯xQĔ¯l°řĴrBÞTxr[tŽ¸ĻN_yX`biNKuP£kZĮ¦[ºxÆÀdhĹŀUÈƗCwáZħÄŭcÓ¥»NAw±qȥnD`&#123;ChdÙFć&#125;¢A±Äj¨]ĊÕjŋ«×`VuÓÅ~_kŷVÝyhVkÄãPsOµfgeŇµf@u_Ù ÙcªNªÙEojVxT@ãSefjlwH\\pŏäÀvlY½d&#123;F~¦dyz¤PÜndsrhfHcvlwjF£G±DÏƥYyÏu¹XikĿ¦ÏqƗǀOŜ¨LI|FRĂn sª|C˜zxAè¥bfudTrFWÁ¹Am|ĔĕsķÆF´N&#125;ćUÕ@Áĳſmuçuð^ÊýowFzØÎĕNőǏȎôªÌŒǄàĀÄ˄ĞŀƒʀĀƘŸˮȬƬĊ°Uzouxe]&#125;AyÈW¯ÌmKQ]Īºif¸ÄX|sZt|½ÚUÎ lk^p&#123;f¤lºlÆW A²PVÜPHÊâ]ÎĈÌÜk´\\@qàsĔÄQºpRij¼èi`¶bXrBgxfv»uUi^v~J¬mVp´£´VWrnP½ì¢BX¬hðX¹^TjVriªjtŊÄmtPGx¸bgRsT`ZozÆO]ÒFôÒOÆŊvÅpcGêsx´DR&#123;AEOr°x|íb³Wm~DVjºéNNËÜ˛ɶ­GxŷCSt&#125;]ûōSmtuÇÃĕNāg»íT«u&#125;ç½BĵÞʣ¥ëÊ¡MÛ³ãȅ¡ƋaǩÈÉQG¢·lG|tvgrrf«ptęŘnÅĢrI²¯LiØsPf_vĠdxM prʹL¤¤eËÀđKïÙVY§]Ióáĥ]ķK¥j|pŇ\\kzţ¦šnņäÔVĂîĪ¬|vW®l¤èØrxm¶ă~lÄƯĄ̈́öȄEÔ¤ØQĄĄ»ƢjȦOǺ¨ìSŖÆƬyQv`cwZSÌ®ü±Ǆ]ŀç¬B¬©ńzƺŷɄeeOĨSfm ĊƀP̎ēz©ĊÄÕÊmgÇsJ¥ƔŊśæÎÑqv¿íUOµªÂnĦÁ_½ä@êí£P&#125;Ġ[@gġ&#125;gɊ×ûÏWXá¢užƻÌsNÍ½ƎÁ§čŐAēeL³àydl¦ĘVçŁpśǆĽĺſÊQíÜçÛġÔsĕ¬Ǹ¯YßċġHµ ¡eå`ļrĉŘóƢFìĎWøxÊkƈdƬv|I|·©NqńRŀ¤éeŊŀàŀU²ŕƀBQ£Ď&#125;L¹Îk@©ĈuǰųǨÚ§ƈnTËÇéƟÊcfčŤ^XmHĊĕË«W·ċëx³ǔķÐċJāwİ_ĸȀ^ôWr­°oú¬ĦŨK~ȰCĐ´Ƕ£fNÎèâw¢XnŮeÂÆĶ¾¾xäLĴĘlļO¤ÒĨA¢Êɚ¨®ØCÔ ŬGƠƦYĜĘÜƬDJg_ͥœ@čŅĻA¶¯@wÎqC½Ĉ»NăëKďÍQÙƫ[«ÃígßÔÇOÝáWñuZ¯ĥŕā¡ÑķJu¤E å¯°WKÉ±_d_&#125;&#125;vyõu¬ï¹ÓU±½@gÏ¿rÃ½DgCdµ°MFYxw¿CG£Rƛ½Õ&#123;]L§&#123;qqą¿BÇƻğëܭǊË|c²&#125;Fµ&#125;ÙRsÓpg±QNqǫŋRwŕnéÑÉK«SeYRŋ@&#123;¤SJ&#125;D Ûǖ֍]gr¡µŷjqWÛham³~S«Þ]&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [[[<span class="number">127123</span>, <span class="number">51780</span>]], [[<span class="number">134456</span>, <span class="number">44547</span>]]],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123;</span><br><span class="line">          <span class="attr">cp</span>: [<span class="number">126.642464</span>, <span class="number">45.756967</span>],</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;黑龙江&quot;</span>,</span><br><span class="line">          <span class="attr">childNum</span>: <span class="number">2</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;320000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;Polygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            <span class="string">&quot;@@cþÅPi`ZRu¥É\\]~°Y`µÓ^phÁbnÀşúòaĬºTÖŒbe¦¦&#123;¸ZâćNp©Hr|^mjhSEb\\afv`sz^lkljÄtg¤D­¾X¿À|ĐiZȀåB·î&#125;GL¢õcßjayBFµÏC^ĭcÙt¿sğH]j&#123;s©HM¢QnDÀ©DaÜÞ·jgàiDbPufjDk`dPOîhw¡ĥ¥GP²ĐobºrYî¶aHŢ´ ]´rılw³r_&#123;£DB_Ûdåuk|Ũ¯F Cºyr&#123;XFye³Þċ¿ÂkĭB¿MvÛpm`rÚã@Ę¹hågËÖƿxnlč¶Åì½Ot¾dJlVJĂǀŞqvnO^JZż·Q&#125;êÍÅmµÒ]ƍ¦Dq&#125;¬R^èĂ´ŀĻĊIÔtĲyQŐĠMNtR®òLhĚs©»&#125;OÓGZz¶A\\jĨFäOĤHYJvÞHNiÜaĎÉnFQlNM¤B´ĄNöɂtpŬdfåqm¿QûùŞÚb¤uŃJŴu»¹ĄlȖħŴw̌ŵ²ǹǠ͛hĭłƕrçü±Yxcitğ®jű¢KOķCoy`å®VTa­_Ā]ŐÝɞï²ʯÊ^]afYǸÃĆēĪȣJđ͍ôƋÄÄÍīçÛɈǥ£­ÛmY`ó£Z«§°Ó³QafusNıǅ_k&#125;¢m[ÝóDµ¡RLčiXyÅNïă¡¸iĔÏNÌŕoēdōîåŤûHcs&#125;~Ûwbù¹£¦ÓCtOPrE^ÒogĉIµÛÅʹK¤½phMü`oæŀ&quot;</span>,</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [[<span class="number">121740</span>, <span class="number">32276</span>]],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">118.767413</span>, <span class="number">32.041544</span>], <span class="attr">name</span>: <span class="string">&quot;江苏&quot;</span>, <span class="attr">childNum</span>: <span class="number">1</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;330000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;MultiPolygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            [<span class="string">&quot;@@E^dQ]K&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@jX^j&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@sfbU&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@qP\\xz[ck&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@R¢FX&#125;°[s_&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@Cb\\&#125;&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@e|v\\la&#123;u&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@v~u&#125;&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@QxÂF¯&#125;&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@¹nvÞs¯o&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@rSkUEj&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@bi­ZP&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@p[&#125;INf&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@À¿&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@¹dnb&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@rSBnR&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@g~h&#125;&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@FlEk&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@OdPc&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@v[u\\&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@FjâL~wyoo~sµL\\&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@¬e¹aN&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@\\nÔ¡q]L³ë\\ÿ®QÖ&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@ÊA­©[¬&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@Kxv­&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@@hlIk]&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@pW&#123;o||j&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@Md|_mC&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@¢X£ÏylD¼XtH&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@hlÜ[LykAvyfw^E¤&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@fp¤MusR&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@®_ma~LÁ¬Z&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@iMxZ&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@ZcYd&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@Z~dOSo|A¿qZv&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@@`EN¡v&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@|TY&#123;&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@@n@m&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@XWkCT\\&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@ºwZRkĕWO¢&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@X®±GrÆª\\ÔáXq&#123;&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@ůTG°ĄLHm°UC&quot;</span>],</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&quot;@@¤aÜx~&#125;dtüGæţŎíĔcŖpMËÐjē¢·ðĄÆMzjWKĎ¢Q¶À_ê_Bıi«pZgf¤Nrq]§ĂN®«H±yƳí¾×ŸīàLłčŴǝĂíÀBŖÕªÁŖHŗŉåqûõi¨hÜ·ñt»¹ýv_[«¸mYL¯QªmĉÅdMgÇjcº«ę¬­K­´B«Âącoċ\\xKd¡gěŧ«®á[~ıxu·ÅKsËÉc¢Ù\\ĭƛëbf¹­ģSĜkáƉÔ­ĈZB&#123;aMµfzŉfåÂŧįƋǝÊĕġć£g³ne­ą»@­¦S®\\ßðChiqªĭiAuA­µ_W¥ƣO\\lċĢttC¨£t`PZäuXßBsĻyekOđġĵHuXBµ]×­­\\°®¬F¢¾pµ¼kŘó¬Wät¸|@L¨¸µrºù³Ù~§WIZW®±Ð¨ÒÉx`²pĜrOògtÁZ&#125;þÙ]¡FKwsPlU[&#125;¦Rvn`hq¬\\nQ´ĘRWb_ rtČFIÖkĦPJ¶ÖÀÖJĈĄTĚòC ²@PúØz©Pî¢£CÈÚĒ±hŖl¬â~nm¨f©iļ«mntuÖZÜÄjL®EÌFª²iÊxØ¨IÈhhst&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">            [<span class="string">&quot;@@o\\VzRZ&#125;y&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@@°¡mÛGĕ¨§Ianá[ýƤjfæØLäGr&quot;</span>],</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [</span><br><span class="line">            [[<span class="number">125592</span>, <span class="number">31553</span>]],</span><br><span class="line">            [[<span class="number">125785</span>, <span class="number">31436</span>]],</span><br><span class="line">            [[<span class="number">125729</span>, <span class="number">31431</span>]],</span><br><span class="line">            [[<span class="number">125513</span>, <span class="number">31380</span>]],</span><br><span class="line">            [[<span class="number">125223</span>, <span class="number">30438</span>]],</span><br><span class="line">            [[<span class="number">125115</span>, <span class="number">30114</span>]],</span><br><span class="line">            [[<span class="number">124815</span>, <span class="number">29155</span>]],</span><br><span class="line">            [[<span class="number">124419</span>, <span class="number">28746</span>]],</span><br><span class="line">            [[<span class="number">124095</span>, <span class="number">28635</span>]],</span><br><span class="line">            [[<span class="number">124005</span>, <span class="number">28609</span>]],</span><br><span class="line">            [[<span class="number">125000</span>, <span class="number">30713</span>]],</span><br><span class="line">            [[<span class="number">125111</span>, <span class="number">30698</span>]],</span><br><span class="line">            [[<span class="number">125078</span>, <span class="number">30682</span>]],</span><br><span class="line">            [[<span class="number">125150</span>, <span class="number">30684</span>]],</span><br><span class="line">            [[<span class="number">124014</span>, <span class="number">28103</span>]],</span><br><span class="line">            [[<span class="number">125008</span>, <span class="number">31331</span>]],</span><br><span class="line">            [[<span class="number">125411</span>, <span class="number">31468</span>]],</span><br><span class="line">            [[<span class="number">125329</span>, <span class="number">31479</span>]],</span><br><span class="line">            [[<span class="number">125626</span>, <span class="number">30916</span>]],</span><br><span class="line">            [[<span class="number">125417</span>, <span class="number">30956</span>]],</span><br><span class="line">            [[<span class="number">125254</span>, <span class="number">30976</span>]],</span><br><span class="line">            [[<span class="number">125199</span>, <span class="number">30997</span>]],</span><br><span class="line">            [[<span class="number">125095</span>, <span class="number">31058</span>]],</span><br><span class="line">            [[<span class="number">125083</span>, <span class="number">30915</span>]],</span><br><span class="line">            [[<span class="number">124885</span>, <span class="number">31015</span>]],</span><br><span class="line">            [[<span class="number">125218</span>, <span class="number">30798</span>]],</span><br><span class="line">            [[<span class="number">124867</span>, <span class="number">30838</span>]],</span><br><span class="line">            [[<span class="number">124755</span>, <span class="number">30788</span>]],</span><br><span class="line">            [[<span class="number">124802</span>, <span class="number">30809</span>]],</span><br><span class="line">            [[<span class="number">125267</span>, <span class="number">30657</span>]],</span><br><span class="line">            [[<span class="number">125218</span>, <span class="number">30578</span>]],</span><br><span class="line">            [[<span class="number">125200</span>, <span class="number">30562</span>]],</span><br><span class="line">            [[<span class="number">124968</span>, <span class="number">30474</span>]],</span><br><span class="line">            [[<span class="number">125167</span>, <span class="number">30396</span>]],</span><br><span class="line">            [[<span class="number">124955</span>, <span class="number">29879</span>]],</span><br><span class="line">            [[<span class="number">124714</span>, <span class="number">29781</span>]],</span><br><span class="line">            [[<span class="number">124762</span>, <span class="number">29462</span>]],</span><br><span class="line">            [[<span class="number">124325</span>, <span class="number">28754</span>]],</span><br><span class="line">            [[<span class="number">123990</span>, <span class="number">28459</span>]],</span><br><span class="line">            [[<span class="number">125366</span>, <span class="number">31477</span>]],</span><br><span class="line">            [[<span class="number">125115</span>, <span class="number">30363</span>]],</span><br><span class="line">            [[<span class="number">125369</span>, <span class="number">31139</span>]],</span><br><span class="line">            [[<span class="number">122495</span>, <span class="number">31878</span>]],</span><br><span class="line">            [[<span class="number">125329</span>, <span class="number">30690</span>]],</span><br><span class="line">            [[<span class="number">125192</span>, <span class="number">30787</span>]],</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">120.153576</span>, <span class="number">30.287459</span>], <span class="attr">name</span>: <span class="string">&quot;浙江&quot;</span>, <span class="attr">childNum</span>: <span class="number">45</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;340000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;MultiPolygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            [<span class="string">&quot;@@^iuLX^&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@e©Ehl&quot;</span>],</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&quot;@@°ZÆëĎµmkǀwÌÕæhºgBĝâqÙĊzÖgņtÀÁĂÆáhEz|WzqD¹°Eŧl&#123;ævÜcA`¤C`|´qxĲkq^³³GšµbíZ¹qpa±ď OH¦Ħx¢gPícOl_iCveaOjChß¸iÝbÛªCC¿mRV§¢A|t^iĠGÀtÚsd]ĮÐDE¶zAb àiödK¡~H¸íæAǿYj&#123;ď¿À½W®£ChÃsikkly]_teu[bFaTign&#123;]GqªoĈMYá|·¥f¥őaSÕėNµñĞ«Im_m¿Âa]uĜp Z_§&#123;Cäg¤°r[_YjÆOdý[I[á·¥Q_nùgL¾mvˊBÜÆ¶ĊJhpc¹O]iŠ]¥ jtsggJÇ§w×jÉ©±EFË­KiÛÃÕYvsm¬njĻª§emná&#125;k«ŕgđ²ÙDÇ¤í¡ªOy×Où±@DñSęćăÕIÕ¿IµĥOjNÕËT¡¿tNæŇàåyķrĕq§ÄĩsWÆßF¶X®¿mwRIÞfßoG³¾©uyHį&#123;Ɓħ¯AFnuPÍÔzVdàôº^Ðæd´oG¤&#123;S¬ćxã&#125;ŧ×Kǥĩ«ÕOEÐ·ÖdÖsƘÑ¨[Û^Xr¢¼§xvÄÆµ`K§ tÒ´Cvlo¸fzŨð¾NY´ı~ÉĔēßúLÃÃ_ÈÏ|]ÂÏFlg`ben¾¢pUh~ƴĖ¶_r sĄ~cƈ]|r c~`¼&#123;À&#123;ȒiJjz`îÀT¥Û³]u&#125;fïQl&#123;skloNdjäËzDvčoQďHI¦rbtHĔ~BmlRV_ħTLnñH±DL¼Lªl§Ťa¸ĚlK²\\RòvDcÎJbt[¤D@®hh~kt°ǾzÖ@¾ªdbYhüóZ ň¶vHrľ\\ÊJuxAT|dmÀO[ÃÔG·ĚąĐlŪÚpSJ¨ĸLvÞcPæķŨ®mÐálwKhïgA¢ųÆ©Þ¤OÈm°K´&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [</span><br><span class="line">            [[<span class="number">121722</span>, <span class="number">32278</span>]],</span><br><span class="line">            [[<span class="number">119475</span>, <span class="number">30423</span>]],</span><br><span class="line">            [[<span class="number">119168</span>, <span class="number">35472</span>]],</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">117.283042</span>, <span class="number">31.86119</span>], <span class="attr">name</span>: <span class="string">&quot;安徽&quot;</span>, <span class="attr">childNum</span>: <span class="number">3</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;350000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;MultiPolygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            [<span class="string">&quot;@@zht´]&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@aj^~ĆG©O&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@ed¨C&#125;&#125;i&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@@vPGsQ&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@sBzddW]Q&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@S¨Q&#123;&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@NVucW&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@qptBAq&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@¸[mu&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@Q\\pD]_&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@jSwUadpF&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@eXª~&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@AjvFso&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@fT_Çí\\v|ba¦jZÆy°&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@IjJi&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@wJIx«¼AoNe&#123;M­&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@K±¡ÓČäeZ&quot;</span>],</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&quot;@@k¡¹Eh~c®wBkUplÀ¡I~Māe£bN¨gZý¡a±Öcp©PhI¢QqÇGj|¥U g[Ky¬ŏv@OptÉEF\\@ åA¬V&#123;XģĐBycpě¼³Ăp·¤¥ohqqÚ¡ŅLs^Ã¡§qlÀhH¨MCe»åÇGD¥zPO£čÙkJA¼ßėuĕeûÒiÁŧSW¥Qûŗ½ùěcÝ§SùĩąSWó«íęACµeRåǃRCÒÇZÍ¢ź±^dlstjD¸ZpuÔâÃH¾oLUêÃÔjjēò´ĄWƛ^Ñ¥Ħ@ÇòmOw¡õyJyD&#125;¢ďÑÈġfZda©º²z£NjD°Ötj¶¬ZSÎ~¾c°¶ÐmxO¸¢Pl´SL|¥AȪĖMņĲg®áIJČĒü` QF¬h|ĂJ@zµ |ê³È ¸UÖŬŬÀEttĸr]ðM¤ĶĲHtÏ AĬkvsq^aÎbvdfÊòSD´Z^xPsĂrvƞŀjJd×ŘÉ ®AÎ¦ĤdxĆqAZRÀMźnĊ»İÐZ YXæJyĊ²·¶q§·K@·&#123;sXãô«lŗ¶»o½E¡­«¢±¨Y®Ø¶^AvWĶGĒĢPlzfļtàAvWYãO_¤sD§ssČġ[kƤPX¦`¶®BBvĪjv©jx[L¥àï[F¼ÍË»ğV`«Ip&#125;ccÅĥZEãoP´B@D¸m±z«Ƴ¿å³BRØ¶Wlâþäą`]Z£Tc ĹGµ¶Hm@_©k¾xĨôȉðX«½đCIbćqK³ÁÄš¬OAwã»aLŉËĥW[ÂGIÂNxĳ¤D¢îĎÎB§°_JGs¥E@¤ućPåcuMuw¢BI¿]zG¹guĮck\\_&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [</span><br><span class="line">            [[<span class="number">123250</span>, <span class="number">27563</span>]],</span><br><span class="line">            [[<span class="number">122541</span>, <span class="number">27268</span>]],</span><br><span class="line">            [[<span class="number">123020</span>, <span class="number">27189</span>]],</span><br><span class="line">            [[<span class="number">122916</span>, <span class="number">27125</span>]],</span><br><span class="line">            [[<span class="number">122887</span>, <span class="number">26845</span>]],</span><br><span class="line">            [[<span class="number">122808</span>, <span class="number">26762</span>]],</span><br><span class="line">            [[<span class="number">122568</span>, <span class="number">25912</span>]],</span><br><span class="line">            [[<span class="number">122778</span>, <span class="number">26197</span>]],</span><br><span class="line">            [[<span class="number">122515</span>, <span class="number">26757</span>]],</span><br><span class="line">            [[<span class="number">122816</span>, <span class="number">26587</span>]],</span><br><span class="line">            [[<span class="number">123388</span>, <span class="number">27005</span>]],</span><br><span class="line">            [[<span class="number">122450</span>, <span class="number">26243</span>]],</span><br><span class="line">            [[<span class="number">122578</span>, <span class="number">25962</span>]],</span><br><span class="line">            [[<span class="number">121255</span>, <span class="number">25103</span>]],</span><br><span class="line">            [[<span class="number">120987</span>, <span class="number">24903</span>]],</span><br><span class="line">            [[<span class="number">122339</span>, <span class="number">25802</span>]],</span><br><span class="line">            [[<span class="number">121042</span>, <span class="number">25093</span>]],</span><br><span class="line">            [[<span class="number">122439</span>, <span class="number">26024</span>]],</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">119.306239</span>, <span class="number">26.075302</span>], <span class="attr">name</span>: <span class="string">&quot;福建&quot;</span>, <span class="attr">childNum</span>: <span class="number">18</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;360000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;Polygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            <span class="string">&quot;@@ĢĨƐgļ¼ÂMD~ņªe^\\^§ý©j×cZØ¨zdÒa¶lÒJìõ`oz÷@¤uŞ¸´ôęöY¼HČƶajlÞƩ¥éZ[|h&#125;^U  ¥pĄžƦO lt¸Æ Q\\aÆ|CnÂOjt­ĚĤdÈF`¶@Ðë ¦ōÒ¨SêvHĢûXD®QgÄWiØPÞìºr¤ǆNĠ¢lĄtZoCƞÔºCxrpĠV®Ê&#123;f_Y`_eq®Aot`@oDXfkp¨|s¬\\DÄSfè©Hn¬^DhÆyøJhØxĢĀLÊƠPżċĄwȠĚ¦G®ǒĤäTŠÆ~Ħw«|TF¡nc³Ïå¹]ĉđxe&#123;ÎÓvOEm°BƂĨİ|Gvz½ª´HàpeJÝQxnÀW­EµàXÅĪt¨ÃĖrÄwÀFÎ|ňÓMå¼ibµ¯»åDT±m[r«_gmQu~¥V\\OkxtL E¢Ú^~ýêPóqoě±_Êw§ÑªåƗā¼mĉŹ¿NQYBąrwģcÍ¥B­ŗÊcØiIƝĿuqtāwO]³YCñTeÉcaubÍ]trluīBÐGsĵıN£ï^ķqss¿FūūVÕ·´Ç&#123;éĈýÿOER_đûIċâJh­ŅıNȩĕB¦K&#123;Tk³¡OP·wnµÏd¯&#125;½TÍ«YiµÕsC¯iM¤­¦¯P|ÿUHvhe¥oFTuõ\\OSsMòđƇiaºćXĊĵà·çhƃ÷Ç&#123;ígu^đgm[×zkKN¶Õ»lčÓ&#123;XSÆv©_ÈëJbVkĔVÀ¤P¾ºÈMÖxlò~ªÚàGĂ¢B±ÌKyáV¼Ã~­`gsÙfIƋlę¹e|~udjuTlXµf`¿Jd[\\L²&quot;</span>,</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [[<span class="number">116689</span>, <span class="number">26234</span>]],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">115.892151</span>, <span class="number">28.676493</span>], <span class="attr">name</span>: <span class="string">&quot;江西&quot;</span>, <span class="attr">childNum</span>: <span class="number">1</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;370000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;MultiPolygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            [<span class="string">&quot;@@Xjd]&#123;K&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@itbFHy&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@HlGk&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@TGy&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@K¬U&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@WdXc&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@PtOs&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@LnXhc&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@ppVu]Or&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@cdzAUa&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@udRhnCI&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@oIpR&quot;</span>],</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&quot;@@Ľč&#123;fzƤîKÎMĮ]ZF½Y]â£ph¶¨râøÀÎǨ¤^ºÄGz~grĚĜlĞÆLĆǆ¢Îo¦cvKbgr°WhmZp L]LºcUÆ­nżĤÌĒbAnrOA´ȊcÀbƦUØrĆUÜøĬƞEzVL®öØBkŖÝĐĖ¹ŧ̄±ÀbÎÉnb²ĦhņBĖįĦåXćì@L¯´ywƕCéÃµė ƿ¸lµ¾Z|ZWyFY¨Mf~C¿`à_RÇzwƌfQnny´INoƬèôº|sTJULîVjǎ¾ĒØDz²XPn±ŴPè¸ŔLƔÜƺ_TüÃĤBBċÈöA´faM¨&#123;«M`¶d¡ôÖ°mȰBÔjj´PM|c^d¤u¤Û´ä«ƢfPk¶Môl]Lb&#125;su^ke&#123;lCMrDÇ­]NÑFsmoõľHyGă&#123;&#123;çrnÓEƕZGª¹Fj¢ïWuøCǷë¡ąuhÛ¡^KxC`C\\bÅxì²ĝÝ¿_NīCȽĿåB¥¢·IŖÕy\\¹kxÃ£Č×GDyÃ¤ÁçFQ¡KtŵƋ]CgÏAùSedcÚźuYfyMmhUWpSyGwMPqŀÁ¼zK¶G­Y§Ë@´śÇµƕBm@IogZ¯uTMx&#125;CVKï&#123;éƵP_K«pÛÙqċtkkù]gTğwoɁsMõ³ăAN£MRkmEÊčÛbMjÝGuIZGPģãħE[iµBEuDPÔ~ª¼ęt]ûG§¡QMsğNPŏįzs£Ug&#123;đJĿļā³]ç«Qr~¥CƎÑ^n¶ÆéÎR~Ż¸YI] PumŝrƿIā[xeÇ³L¯v¯s¬ÁY~&#125;ťuŁgƋpÝĄ_ņī¶ÏSR´ÁP~¿Cyċßdwk´SsX|t`Ä ÈðAªìÎT°¦Dda^lĎDĶÚY°`ĪŴǒàŠv\\ebZHŖR¬ŢƱùęOÑM­³FÛWp[&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [</span><br><span class="line">            [[<span class="number">123806</span>, <span class="number">39303</span>]],</span><br><span class="line">            [[<span class="number">123821</span>, <span class="number">39266</span>]],</span><br><span class="line">            [[<span class="number">123742</span>, <span class="number">39256</span>]],</span><br><span class="line">            [[<span class="number">123702</span>, <span class="number">39203</span>]],</span><br><span class="line">            [[<span class="number">123649</span>, <span class="number">39066</span>]],</span><br><span class="line">            [[<span class="number">123847</span>, <span class="number">38933</span>]],</span><br><span class="line">            [[<span class="number">123580</span>, <span class="number">38839</span>]],</span><br><span class="line">            [[<span class="number">123894</span>, <span class="number">37288</span>]],</span><br><span class="line">            [[<span class="number">123043</span>, <span class="number">36624</span>]],</span><br><span class="line">            [[<span class="number">123344</span>, <span class="number">38676</span>]],</span><br><span class="line">            [[<span class="number">123522</span>, <span class="number">38857</span>]],</span><br><span class="line">            [[<span class="number">123628</span>, <span class="number">38858</span>]],</span><br><span class="line">            [[<span class="number">118260</span>, <span class="number">36742</span>]],</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">117.000923</span>, <span class="number">36.675807</span>], <span class="attr">name</span>: <span class="string">&quot;山东&quot;</span>, <span class="attr">childNum</span>: <span class="number">13</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;410000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;Polygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            <span class="string">&quot;@@ýLùµP³swIÓxcŢĞð´E®ÚPtĴXØxÂ¶@«ŕŕQGYfa[şußǩđš_X³ĳÕčC]kbc¥CS¯ëÍB©÷³­Si_&#125;mYTt³xlàcČzÀD&#125;ÂOQ³ÐTĨ¯ƗòËŖ[hłŦv~&#125;ÂZ«¤lPÇ£ªÝŴÅR§ØnhctâknÏ­ľŹUÓÝdKuķI§oTũÙďkęĆH¸Ó\\Ä¿PcnS&#123;wBIvÉĽ[GqµuŇôYgûZca©@½Õǽys¯&#125;lgg@­C\\£asIdÍuCQñ[L±ęk·ţb¨©kK»KC²òGKmĨS`UQnk&#125;AGēsqaJ¥ĐGRĎpCuÌy ã iMcplk|tRkðev~^´¦ÜSí¿_iyjI|ȑ|¿_»d&#125;q^&#123;Ƈdă&#125;tqµ`Ƴĕg&#125;V¡om½faÇo³TTj¥tĠRyK&#123;ùÓjuµ&#123;t&#125;uËRivGçJFjµÍyqÎàQÂFewixGw½Yŷpµú³XU½ġyłåkÚwZX·l¢Á¢KzOÎÎjc¼htoDHr|­J½&#125;JZ_¯iPq&#123;tę½ĕ¦Zpĵø«kQĹ¤]MÛfaQpě±ǽ¾]u­Fu÷nčÄ¯ADp&#125;AjmcEÇaª³o³ÆÍSƇĈÙDIzËčľ^KLiÞñ[aA²zzÌ÷D|[íÄ³gfÕÞd®|`Ć~oĠƑô³ŊD×°¯CsøÀ«ìUMhTº¨¸ǡîSÔDruÂÇZÖEvPZW~ØÐtĄE¢¦Ðy¸bô´oŬ¬²Ês~]®tªapŎJ¨Öº_Ŕ`Ŗ^Đ\\Ĝu~m²Ƹ¸fWĦrƔ&#125;Î^gjdfÔ¡J&#125;\\n C¦þWxªJRÔŠu¬ĨĨmFdM&#123;\\d\\YÊ¢ú@@¦ª²SÜsC&#125;fNècbpRmlØ^gd¢aÒ¢CZZxvÆ¶N¿¢T@uC¬^ĊðÄn|lGlRjsp¢ED&#125;Fio~ÔN~zkĘHVsǲßjŬŢ`Pûàl¢\\ÀEhİgÞē X¼Pk|m&quot;</span>,</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [[<span class="number">118256</span>, <span class="number">37017</span>]],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">113.665412</span>, <span class="number">34.757975</span>], <span class="attr">name</span>: <span class="string">&quot;河南&quot;</span>, <span class="attr">childNum</span>: <span class="number">1</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;420000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;MultiPolygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            [<span class="string">&quot;@@AB&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@lskt&quot;</span>],</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&quot;@@¾«&#125;&#123;ra®pîÃ\\&#123;øCËyyB±b\\òÝjKL ]ĎĽÌJyÚCƈćÎT´Å´pb©ÈdFin~BCo°BĎÃømv®E^vǾ½Ĝ²RobÜeN^ĺ£R¬lĶ÷YoĖ¥Ě¾|sOr°jY`~I¾®I&#123;GqpCgyl&#123;£ÍÍyPLÂ¡¡¸kWxYlÙæŁĢz¾V´W¶ùŸo¾ZHxjwfxGNÁ³Xéæl¶EièIH ujÌQ~v|sv¶Ôi|ú¢FhQsğ¦SiŠBgÐE^ÁÐ&#123;čnOÂÈUÎóĔÊēĲ&#125;Z³½Mŧïeyp·uk³DsÑ¨L¶_ÅuÃ¨w»¡WqÜ]\\Ò§tƗcÕ¸ÕFÏǝĉăxŻČƟOKÉġÿ×wg÷IÅzCg]m«ªGeçÃTC«[t§&#123;loWeC@ps_Bp­rf_``Z|ei¡oċMqow¹DƝÓDYpûsYkıǃ&#125;s¥ç³[§cY§HK«Qy]¢wwö¸ïx¼ņ¾Xv®ÇÀµRĠÐHM±cÏdƒǍũȅȷ±DSyúĝ£ŤĀàtÖÿï[îb\\&#125;pĭÉI±Ñy¿³x¯No|¹HÏÛmjúË~TuęjCöAwě¬Rđl¯ Ñb­ŇTĿ_[IčĄʿnM¦ğ\\É[T·k¹©oĕ@A¾wya¥Y\\¥Âaz¯ãÁ¡k¥ne£ÛwE©Êō¶˓uoj_U¡cF¹­[WvP©whuÕyBF`RqJUw\\i¡&#123;jEPïÿ½fćQÑÀQ&#123;°fLÔ~wXgītêÝ¾ĺHd³fJd]HJ²EoU¥HhwQsƐ»Xmg±çve]DmÍPoCc¾_hhøYrŊU¶eD°Č_N~øĹĚ·`z]Äþp¼äÌQv\\rCé¾TnkžŐÚÜa¼ÝƆĢ¶ÛodĔňÐ¢JqPb ¾|J¾fXƐîĨ_Z¯À&#125;úƲN_ĒÄ^ĈaŐyp»CÇÄKñL³ġM²wrIÒŭxjb[n«øæà ^²­h¯ÚŐªÞ¸Y²ĒVø&#125;Ā^İ´LÚm¥ÀJÞ&#123;JVųÞŃx×sxxƈē ģMřÚðòIfĊŒ\\Ʈ±ŒdÊ§ĘDvČ_Àæ~Dċ´A®µ¨ØLV¦êHÒ¤&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [</span><br><span class="line">            [[<span class="number">113712</span>, <span class="number">34000</span>]],</span><br><span class="line">            [[<span class="number">115612</span>, <span class="number">30507</span>]],</span><br><span class="line">            [[<span class="number">113649</span>, <span class="number">34054</span>]],</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">114.298572</span>, <span class="number">30.584355</span>], <span class="attr">name</span>: <span class="string">&quot;湖北&quot;</span>, <span class="attr">childNum</span>: <span class="number">3</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;430000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;MultiPolygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            [<span class="string">&quot;@@nFTs&quot;</span>],</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&quot;@@ßÅÆá½ÔXrCOËRïÿĩ­TooQyÓ[ŅBE¬ÎÓXaį§Ã¸G °ITxpúxÚĳ¥ÏĢ¾edÄ©ĸGàGhM¤Â_U&#125;Ċ&#125;¢pczfþg¤ÇòAVM&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&quot;@@©KA·³CQ±Á«³BUƑ¹AtćOwD]JiØSm¯b£ylXHËÑ±H«C^õľAÅ§¤É¥ïyuǙuA¢^&#123;ÌC´­¦ŷJ£^[ª¿ĕ~ƇN skóā¹¿ï]ă~÷O§­@Vm¡Qđ¦¢Ĥ&#123;ºjÔª¥nf´~Õo×ÛąMąıuZmZcÒ ĲĪ²SÊǄŶ¨ƚCÖŎªQØ¼rŭ­«&#125;NÏürÊ¬mjr@ĘrTW ­SsdHzƓ^ÇÂyUi¯DÅYlŹu&#123;hT&#125;mĉ¹¥ěDÿë©ıÓ[Oº£¥ótł¹MÕƪ`PDiÛU¾ÅâìUñBÈ£ýhedy¡oċ`pfmjP~kZaZsÐd°wj§@Ĵ®w~^kÀÅKvNmX\\¨aŃqvíó¿F¤¡@ũÑVw&#125;S@j&#125;¾«pĂrªg àÀ²NJ¶¶DôK|^ª°LX¾ŴäPĪ±£EXd^¶ĲÞÜ~u¸ǔMRhsRe`ÄofIÔ\\Ø  ićymnú¨cj ¢»GČìƊÿÐ¨XeĈĀ¾Oð Fi ¢|[jVxrIQ_EzAN¦zLU`cªxOTu RLÄ¢dVi`p˔vŎµªÉF~Ød¢ºgİàw¸Áb[¦Zb¦z½xBĖ@ªpºlS¸Ö\\Ĕ[N¥ˀmĎăJ\\ŀ`ňSÚĖÁĐiOĜ«BxDõĚivSÌ&#125;iùÜnÐºG&#123;p°M´wÀÒzJ²ò¨ oTçüöoÛÿñőĞ¤ùTz²CȆȸǎŪƑÐc°dPÎğË¶[È½u¯½WM¡­ÉB·rínZÒ `¨GA¾\\pēXhÃRC­üWGġuTé§ŎÑ©ò³I±³&#125;_EÃħg®ęisÁPDmÅ&#123;b[RÅs·kPŽƥóRoOV~]&#123;g\\êYƪ¦kÝbiċƵGZ»Ěõó·³vŝ£ø@pyö_ëIkÑµbcÑ§y×dYØªiþ¨[]f]Ņ©C&#125;ÁN»hĻħƏĩ&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [</span><br><span class="line">            [[<span class="number">115640</span>, <span class="number">30489</span>]],</span><br><span class="line">            [[<span class="number">112543</span>, <span class="number">27312</span>]],</span><br><span class="line">            [[<span class="number">116690</span>, <span class="number">26230</span>]],</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">112.982279</span>, <span class="number">28.19409</span>], <span class="attr">name</span>: <span class="string">&quot;湖南&quot;</span>, <span class="attr">childNum</span>: <span class="number">3</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;440000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;MultiPolygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            [<span class="string">&quot;@@QdAua&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@lxDLo&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@sbhNLo&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@Ă ā&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@WltO[[&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@Kr]S&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@eI]y&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@I|Mym&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@Û³LS¼Y&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@nvºBëui©`¾&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@zdÛJw®&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@°¯&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@a yAª¸ËJIxØ@ĀHAmÃV¡ofuo&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@sŗÃÔėAƁZÄ ~°ČPäh&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@¶ÝÌvmĞh­ıQ&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@HdSjĒ¢D&#125;waru«ZqadYM&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@el\\LqqU&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@~rMo\\&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@f^C&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@øPªoj÷ÍÝħXČx°Q¨ıXNv&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@gÇƳo[~tly&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@EÆC¿&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@OP&quot;</span>],</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&quot;@@wđógĝ[³¡VÙæÅöMÌ³¹pÁaËýý©D©ÜJŹƕģGą¤&#123;ÙūÇO²«BƱéAÒĥ¡«BhlmtÃPµyU¯ucd·w_bŝcīímGO|KPȏŹãŝIŕŭŕ@Óoo¿ē±ß&#125;ŭĲWÈCőâUâǙIğŉ©IĳE×Á³AówXJþ±ÌÜÓĨ£L]ĈÙƺZǾĆĖMĸĤfÎĵlŨnÈĐtFFĤêk¶^k°f¶g&#125;®Faf`vXŲxl¦ÔÁ²¬Ð¦pqÊÌ²iXØRDÎ&#125;Ä@ZĠsx®AR~®ETtĄZƈfŠŠHâÒÐAµ\\S¸^wĖkRzalŜ|E¨ÈNĀňZTpBh£\\ĎƀuXĖtKL¶G|»ĺEļĞ~ÜĢÛĊrOÙîvd]n¬VÊĜ°RÖpMƂªFbwEÀ©\\¤]ŸI®¥D³|Ë]CöAŤ¦æ´¥¸Lv¼¢ĽBaôF~®²GÌÒEYzk¤°ahlVÕI^CxĈPsBƒºV¸@¾ªR²ĨN]´_eavSivc&#125;p&#125;Đ¼ƌkJÚe th_¸ ºx±ò_xNË²@ă¡ßH©Ùñ&#125;wkNÕ¹ÇO½¿£ĕ]ly_WìIÇª`uTÅxYĒÖ¼kÖµMjJÚwn\\hĒv]îh|ÈƄøèg¸Ķß ĉĈWb¹ƀdéĘNTtP[öSvrCZaGubo´ŖÒÇĐ~¡zCIözx¢PnÈñ @ĥÒ¦]ƞV&#125;³ăĔñiiÄÓVépKG½ÄÓávYoC·sitiaÀyŧÎ¡ÈYDÑům&#125;ý|m[węõĉZÅxUO&#125;÷N¹³ĉo_qtăqwµŁYÙǝŕ¹tïÛUÃ¯mRCºĭ|µÕÊK½Rē ó]GªęAx»HO£|ām¡diď×YïYWªŉOeÚtĐ«zđ¹TāúEá²\\ķÍ&#125;jYàÙÆſ¿Çdğ·ùTßÇţʄ¡XgWÀǇğ·¿ÃOj YÇ÷Qěi&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [</span><br><span class="line">            [[<span class="number">117381</span>, <span class="number">22988</span>]],</span><br><span class="line">            [[<span class="number">116552</span>, <span class="number">22934</span>]],</span><br><span class="line">            [[<span class="number">116790</span>, <span class="number">22617</span>]],</span><br><span class="line">            [[<span class="number">116973</span>, <span class="number">22545</span>]],</span><br><span class="line">            [[<span class="number">116444</span>, <span class="number">22536</span>]],</span><br><span class="line">            [[<span class="number">116931</span>, <span class="number">22515</span>]],</span><br><span class="line">            [[<span class="number">116496</span>, <span class="number">22490</span>]],</span><br><span class="line">            [[<span class="number">116453</span>, <span class="number">22449</span>]],</span><br><span class="line">            [[<span class="number">113301</span>, <span class="number">21439</span>]],</span><br><span class="line">            [[<span class="number">118726</span>, <span class="number">21604</span>]],</span><br><span class="line">            [[<span class="number">118709</span>, <span class="number">21486</span>]],</span><br><span class="line">            [[<span class="number">113210</span>, <span class="number">20816</span>]],</span><br><span class="line">            [[<span class="number">115482</span>, <span class="number">22082</span>]],</span><br><span class="line">            [[<span class="number">113171</span>, <span class="number">21585</span>]],</span><br><span class="line">            [[<span class="number">113199</span>, <span class="number">21590</span>]],</span><br><span class="line">            [[<span class="number">115232</span>, <span class="number">22102</span>]],</span><br><span class="line">            [[<span class="number">115739</span>, <span class="number">22373</span>]],</span><br><span class="line">            [[<span class="number">115134</span>, <span class="number">22184</span>]],</span><br><span class="line">            [[<span class="number">113056</span>, <span class="number">21175</span>]],</span><br><span class="line">            [[<span class="number">119573</span>, <span class="number">21271</span>]],</span><br><span class="line">            [[<span class="number">119957</span>, <span class="number">24020</span>]],</span><br><span class="line">            [[<span class="number">115859</span>, <span class="number">22356</span>]],</span><br><span class="line">            [[<span class="number">116561</span>, <span class="number">22649</span>]],</span><br><span class="line">            [[<span class="number">116285</span>, <span class="number">22746</span>]],</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">113.280637</span>, <span class="number">23.125178</span>], <span class="attr">name</span>: <span class="string">&quot;广东&quot;</span>, <span class="attr">childNum</span>: <span class="number">24</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;450000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;MultiPolygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            [<span class="string">&quot;@@H TQ§A&quot;</span>],</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&quot;@@ĨÊªLƊDÎĹĐCǦė¸zÚGn£¾rªŀÜt¬@ÖÚSx~øOŒŶÐÂæȠ\\ÈÜObĖw^oÞLf¬°bI lTØBÌF£Ć¹gñĤaYt¿¤VSñK¸¤nM¼JE±½¸ñoÜCƆæĪ^ĚQÖ¦^f´QüÜÊz¯lzUĺš@ìp¶n]sxtx¶@~ÒĂJb©gk&#123;°~c°`Ô¬rV\\la¼¤ôá`¯¹LCÆbxEræOv[H­[~|aB£ÖsºdAĐzNÂðsÞÆĤªbab`ho¡³F«èVlo¤ÔRzpp®SĪº¨ÖºNĳd`a¦¤F³ºDÎńĀìCĜº¦Ċ~nS|gźvZkCÆj°zVÈÁƔ]LÊFZgčP­kini«qÇczÍY®¬Ů»qR×ō©DÕ§ƙǃŵTÉĩ±ıdÑnYYĲvNĆĆØÜ Öp&#125;e³¦m©iÓ|¹ħņ|ª¦QF¢Â¬ʖovg¿em^ucà÷gÕuíÙćĝ&#125;FĻ¼Ĺ&#123;µHKsLSđƃrč¤[AgoSŇYMÿ§Ç&#123;FśbkylQxĕ]T·¶[BÑÏGáşşƇeăYSs­FQ&#125;­BwtYğÃ@~CÍQ ×WjË±rÉ¥oÏ ±«ÓÂ¥kwWűmcih³K~µh¯e]lµélEģEďsmÇŧē`ãògK_ÛsUʝćğ¶höO¤Ǜn³c`¡y¦CezYwa[ďĵűMę§]XÎ_íÛ]éÛUćİÕBƣ±dy¹T^dûÅÑŦ·PĻþÙ`K¦¢ÍeĥR¿³£[~äu¼dltW¸oRM¢ď\\z&#125;Æzdvň&#123;ÎXF¶°Â_ÒÂÏL©ÖTmu¼ãlīkiqéfA·Êµ\\őDc¥ÝFyÔćcűH_hLÜêĺĐ¨c&#125;rn`½Ì@¸¶ªVLhŒ\\Ţĺk~Ġið°|gtTĭĸ^xvKVGréAébUuMJVÃO¡qĂXËSģãlýà_juYÛÒBG^éÖ¶§EGÅzěƯ¤EkN[kdåucé¬dnYpAyČ&#123;`]þ¯TbÜÈk¡ĠvàhÂƄ¢Jî¶²&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [[[<span class="number">111707</span>, <span class="number">21520</span>]], [[<span class="number">107619</span>, <span class="number">25527</span>]]],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">108.320004</span>, <span class="number">22.82402</span>], <span class="attr">name</span>: <span class="string">&quot;广西&quot;</span>, <span class="attr">childNum</span>: <span class="number">2</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;460000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;Polygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            <span class="string">&quot;@@¦Ŝil¢XƦƞòïè§ŞCêɕrŧůÇąĻõ·ĉ³œ̅kÇm@ċȧŧĥĽʉ­ƅſȓÒË¦ŝE&#125;ºƑ[ÍĜȋ gÎfǐÏĤ¨êƺ\\Ɔ¸ĠĎvʄȀÐ¾jNðĀÒRZǆzÐŘÎ°H¨Ƣb²_Ġ &quot;</span>,</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [[<span class="number">112750</span>, <span class="number">20508</span>]],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">110.33119</span>, <span class="number">20.031971</span>], <span class="attr">name</span>: <span class="string">&quot;海南&quot;</span>, <span class="attr">childNum</span>: <span class="number">1</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;510000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;MultiPolygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            [<span class="string">&quot;@@LqKr&quot;</span>],</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&quot;@@[ĻéV£_ţġñpG réÏ·~ąSfy×Í·ºſƽiÍıƣıĻmHH&#125;siaX@iÇ°ÁÃ×t«­T¤JJJyJÈ`Ohß¦¡uËhIyCjmÿwZGTiSsOB²fNmsPa&#123;M&#123;õE^Hj&#125;gYpaeu¯oáwHjÁ½M¡pMuåmni&#123;fk\\oÎqCwEZ¼KĝAy&#123;m÷LwO×SimRI¯rKõBS«sFe]fµ¢óY_ÆPRcue°Cbo×bd£ŌIHgtrnyPt¦foaXďxlBowz_&#123;ÊéWiêEGhÜ¸ºuFĈIxf®Y½ĀǙ]¤EyF²ċw¸¿@g¢§RGv»áW`ÃĵJwi]t¥wO­½a[×]`Ãi­üL¦LabbTÀåc&#125;ÍhÆh®BHî|îºÉk­¤Sy£ia©taį·Ɖ`ō¥UhOĝLk&#125;©Fos´JmµlŁuønÑJWÎªYÀïAetTŅÓGË«bo&#123;ıwodƟ½OġÜÂµxàNÖ¾P²§HKv¾]|BÆåoZ`¡Ø`ÀmºĠ~ÌÐ§nÇ¿¤]wğ@srğu~Io[é±¹ ¿ſđÓ@qg¹zƱřaí°KtÇ¤V»Ã[ĩǭƑ^ÇÓ@áťsZÏÅĭƋěpwDóÖáŻneQËq·GCœýS]x·ýq³OÕ¶Qzßti&#123;řáÍÇWŝŭñzÇWpç¿JXĩè½cFÂLiVjx&#125;\\NŇĖ¥GeJA¼ÄHfÈu~¸Æ«dE³ÉMA|bÒćhG¬CMõƤąAvüVéŀ_VÌ³ĐwQj´·ZeÈÁ¨X´Æ¡Qu·»ÕZ³ġqDoy`L¬gdp°şp¦ėìÅĮZ°Iähzĵf²å ĚÑKpIN|Ñz]ń·FU×é»R³MÉ»GM«kiér&#125;Ã`¹ăÞmÈnÁîRǀ³ĜoİzŔwǶVÚ£À]ɜ»ĆlƂ²ĠþTº·àUȞÏʦ¶I«dĽĢdĬ¿»Ĕ×h\\c¬ä²GêëĤł¥ÀǿżÃÆMº&#125;BÕĢyFVvwxBèĻĒ©ĈtCĢɽŠȣ¦āæ·HĽîôNÔ~^¤Ɗu^s¼&#123;TA¼ø°¢İªDè¾Ň¶ÝJ®Z´ğ~Sn|ªWÚ©òzPOȸbð¢|øĞŒQìÛÐ@ĞǎRS¤Á§di´ezÝúØã]HqkIþËQÇ¦ÃsÇ¤[E¬ÉŪÍxXƒ·ÖƁİlƞ¹ª¹|XÊwnÆƄmÀêErĒtD®ċæcQE®³^ĭ¥©l&#125;äQtoŖÜqÆkµªÔĻĴ¡@Ċ°B²Èw^^RsºTĀ£ŚæQPJvÄz^Đ¹Æ¯fLà´GC²dt­ĀRt¼¤ĦOðğfÔðDŨŁĞƘïPÈ®âbMüÀXZ ¸£@Å»»QÉ­]dsÖ×_Í_ÌêŮPrĔĐÕGĂeZÜîĘqBhtO ¤tE[h|YÔZśÎs´xº±Uñt|OĩĠºNbgþJy^dÂY Į]Řz¦gC³R`Āz¢Aj¸CL¤RÆ»@­Ŏk\\Ç´£YW&#125;z@Z&#125;Ã¶oû¶]´^NÒ&#125;èNªPÍy¹`S°´ATeVamdUĐwʄvĮÕ\\uÆŗ¨Yp¹àZÂmWh&#123;á&#125;WØǍÉüwga§áCNęÎ[ĀÕĪgÖÉªXøx¬½Ů¦¦[NÎLÜUÖ´òrÙŠxR^JkĳnDX&#123;U~ET&#123;ļº¦PZcjF²Ė@pg¨B&#123;u¨ŦyhoÚD®¯¢ WòàFÎ¤¨GDäz¦kŮPġqË¥À]eâÚ´ªKxīPÖ|æ[xÃ¤JÞĥsNÖ½I¬nĨY´®ÐƐmDŝuäđđEbee_v¡&#125;ìęǊē&#125;qÉåT¯µRs¡M@&#125;ůaa­¯wvƉåZw\\Z&#123;åû^&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [[[<span class="number">108815</span>, <span class="number">30935</span>]], [[<span class="number">110617</span>, <span class="number">31811</span>]]],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">104.065735</span>, <span class="number">30.659462</span>], <span class="attr">name</span>: <span class="string">&quot;四川&quot;</span>, <span class="attr">childNum</span>: <span class="number">2</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;520000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;MultiPolygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            [<span class="string">&quot;@@G\\lY£in&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@q|mc¯tÏVSÎ&quot;</span>],</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&quot;@@hÑ£IsNgßHHªķÃh_¹¡ĝÄ§ń¦uÙùgS¯JH|sÝÅtÁïyMDč»eÕtA¤&#123;b\\&#125;G®u\\åPFqwÅaDK°ºâ_£ùbµmÁÛĹM[q|hlaªāI&#125;Ñµ@swtwm^oµDéĽŠyVky°ÉûÛR³e¥]RÕěħ[ƅåÛDpJiVÂF²I»mN·£LbÒYbWsÀbpkiTZĄă¶Hq`ĥ_J¯ae«KpÝx]aĕÛPÇȟ[ÁåŵÏő÷Pw&#125;TÙ@Õs«ĿÛq©½m¤ÙH·yǥĘĉBµĨÕnđ]K©œáGçş§ÕßgǗĦTèƤƺ&#123;¶ÉHÎd¾ŚÊ·OÐjXWrãLyzÉAL¾ę¢bĶėy_qMĔąro¼hĊw¶øV¤w²Ĉ]ÊKx|`ź¦ÂÈdrcÈbe¸`I¼čTF´¼Óýȃr¹ÍJ©k_șl³´_pĐ`oÒh¶pa^ÓĔ&#125;D»^Xy`d[KvJPhèhCrĂĚÂ^Êƌ wZL­Ġ£ÁbrzOIlMMĪŐžËr×ÎeŦtw|¢mKjSǘňĂStÎŦEtqFT¾Eì¬¬ôxÌO¢ K³ŀºäYPVgŎ¦ŊmŞ¼VZwVlz¤£Tl®ctĽÚó&#123;G­AÇge~Îd¿æaSba¥KKûj®_Ä^\\Ø¾bP®¦x^sxjĶI_Ä Xâ¼Hu¨Qh¡À@Ëô&#125;±GNìĎlT¸`V~R°tbÕĊ`¸úÛtÏFDu[MfqGH·¥yAztMFe|R_GkChZeÚ°tov`xbDnÐ&#123;E&#125;ZèxNEÞREn[Pv@&#123;~rĆAB§EO¿|UZ~ìUf¨J²ĂÝÆsªB`s¶fvö¦Õ~dÔq¨¸º»uù[[§´sb¤¢zþF¢ÆÀhÂW\\ıËIÝo±ĭŠ£þÊs&#125;¡R]ěDg´VG¢j±®èºÃmpU[Áëº°rÜbNu¸&#125;º¼`niºÔXĄ¤¼ÔdaµÁ_ÃftQQgR·Ǔv&#125;Ý×ĵ]µWc¤F²OĩųãW½¯K©]&#123;LóµCIµ±Mß¿h©āq¬o½~@i~TUxŪÒ¢@£ÀEîôruńb[§nWuMÆLl¿]x&#125;ĳ­½&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [</span><br><span class="line">            [[<span class="number">112158</span>, <span class="number">27383</span>]],</span><br><span class="line">            [[<span class="number">112105</span>, <span class="number">27474</span>]],</span><br><span class="line">            [[<span class="number">112095</span>, <span class="number">27476</span>]],</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">106.713478</span>, <span class="number">26.578343</span>], <span class="attr">name</span>: <span class="string">&quot;贵州&quot;</span>, <span class="attr">childNum</span>: <span class="number">3</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;530000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;Polygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            <span class="string">&quot;@@[ùx½&#125;ÑRHYīĺûsÍniEoã½Ya²ė&#123;c¬ĝgĂsAØÅwďõzFjw&#125;«Dx¿&#125;Uũlê@HÅ­F¨ÇoJ´Ónũuą¡Ã¢pÒÅØ TF²xa²ËXcÊlHîAßËŁkŻƑŷÉ©hW­æßUËs¡¦&#125;teèÆ¶StÇÇ&#125;Fd£jĈZĆÆ¤Tč\\D&#125;O÷£U§~ŃGåŃDĝ¸Tsd¶¶Bª¤u¢ŌĎo~t¾ÍŶÒtD¦ÚiôözØX²ghįh½Û±¯ÿm·zR¦Ɵ`ªŊÃh¢rOÔ´£Ym¼èêf¯ŪĽncÚbw\\zlvWªâ ¦gmĿBĹ£¢ƹřbĥkǫßeeZkÙIKueT»sVesbaĕ  ¶®dNĄÄpªy¼³BE®lGŭCǶwêżĔÂepÍÀQƞpC¼ŲÈ­AÎô¶RäQ^Øu¬°_Èôc´¹ò¨PÎ¢hlĎ¦´ĦÆ´sâÇŲPnÊD^¯°Upv&#125;®BPÌªjǬxSöwlfòªvqĸ|`H­viļndĜ­Ćhňem·FyÞqóSį¯³X_ĞçêtryvL¤§z¦c¦¥jnŞklD¤øz½ĜàĂŧMÅ|áƆàÊcðÂFÜáŢ¥\\\\ºİøÒÐJĴîD¦zK²ǏÎEh~CD­hMn^ÌöÄ©ČZÀaüfɭyœpį´ěFűk]Ôě¢qlÅĆÙa¶~ÄqêljN¬¼HÊNQ´ê¼VØ¸E^ŃÒyM&#123;JLoÒęæe±Ķygã¯JYÆĭĘëo¥Šo¯hcK«z_prC´ĢÖY¼ v¸¢RÅW³Â§fÇ¸Yi³xR´ďUË`êĿUûuĆBƣöNDH«ĈgÑaB&#123;ÊNF´¬c·Åv&#125;eÇÃGB»If¦HňĕM~[iwjUÁKE¾dĪçWIèÀoÈXòyŞŮÈXâÎŚj|àsRyµÖPr´þ ¸^wþTDŔHr¸RÌmfżÕâCôoxĜƌÆĮÐYtâŦÔ@]ÈǮƒ\\Ī¼Ä£UsÈ¯LbîƲŚºyhr@ĒÔƀÀ²º\\êpJ&#125;ĠvqtĠ@^xÀ£È¨mËÏğ&#125;n¹_¿¢×Y_æpÅA^&#123;½Lu¨GO±Õ½ßM¶wÁĢÛPƢ¼pcĲx|apÌ¬HÐŊSfsðBZ¿©XÏÒKk÷Eû¿SrEFsÕūkóVǥŉiTL¡n&#123;uxţÏhôŝ¬ğōNNJkyPaqÂğ¤K®YxÉƋÁ]āęDqçgOgILu\\_gz]W¼~CÔē]bµogpÑ_oď`´³Țkl`IªºÎȄqÔþ»E³ĎSJ»_f·adÇqÇc¥Á_Źw&#123;L^É±ćxU£µ÷xgĉp»ĆqNē`rĘzaĵĚ¡K½ÊBzyäKXqiWPÏÉ¸½řÍcÊG|µƕƣGË÷k°_^ý|_zċBZocmø¯hhcæ\\lMFlư£ĜÆyHF¨µêÕ]HAàÓ^it `þßäkĤÎT~Wlÿ¨ÔPzUCNVv [jâôDôď[&#125;z¿msSh¯&#123;jïğl&#125;šĹ[őgK©U·µË@¾m_~q¡f¹ÅË^»f³ø&#125;Q¡ÖË³gÍ±^Ç\\ëÃA_¿bWÏ[¶ƛé£F&#123;īZgm@|kHǭƁć¦UĔť×ë&#125;ǝeďºȡȘÏíBÉ£āĘPªĳ¶ŉÿy©nď£G¹¡I±LÉĺÑdĉÜW¥&#125;gÁ&#123;aqÃ¥aıęÏZï`&quot;</span>,</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [[<span class="number">104636</span>, <span class="number">22969</span>]],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">102.712251</span>, <span class="number">25.040609</span>], <span class="attr">name</span>: <span class="string">&quot;云南&quot;</span>, <span class="attr">childNum</span>: <span class="number">1</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;540000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;Polygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            <span class="string">&quot;@@ÂhľxŖxÒVºÅâAĪÝȆµę¯Ňa±r_w~uSÕňqOj]ɄQ£ZUDûoY»©M[L¼qãË&#123;VÍçWVi]ë©Ä÷àyƛhÚU°adcQ~Mx¥cc¡ÙaSyFÖk­uRýq¿ÔµQĽ³aG&#123;¿FµëªéĜÿª@¬·K·àariĕĀ«V»ŶĴūgèLǴŇƶaftèBŚ£^âǐÝ®M¦ÁǞÿ¬LhJ¾óƾÆºcxwf]Y´¦|QLn°adĊ\\¨oǀÍŎ´ĩĀd`tÊQŞŕ|¨C^©Ĉ¦¦ÎJĊ&#123;ëĎjª²rÐl`¼Ą[t|¦Stè¾PÜK¸dƄı]s¤î_v¹ÎVòŦj£Əsc¬_Ğ´|Ł¦Av¦w`ăaÝaa­¢e¤ı²©ªSªÈMĄwÉØŔì@T¤Ę\\õª@þo´­xA sÂtŎKzó´ÇĊµ¢r^nĊ­Æ¬×üG¢³ &#123;âĊ]G~bÀgVjzlhǶfOfdªB]pjTOtĊn¤&#125;®¦Č¥d¢¼»ddY¼t¢eȤJ¤&#125;Ǿ¡°§¤AÐlc@ĝsªćļđAçwxUuzEÖġ~AN¹ÄÅȀŻ¦¿ģŁéì±Hãd«g[Ø¼ēÀcīľġ¬cJµÐʥVȝ¸ßS¹ý±ğkƁ¼ą^ɛ¤Ûÿb[&#125;¬ōõÃ]ËNm®g@Bg&#125;ÍF±ǐyL¥íCIĳÏ÷Ñį[¹¦[âšEÛïÁÉdƅß&#123;âNÆāŨß¾ě÷yC£k­´ÓH@Â¹TZ¥¢į·ÌAÐ§®Zcv½Z­¹|ÅWZqgW|ieZÅYVÓqdqbc²R@c¥Rã»GeeƃīQ&#125;J[ÒK¬Ə|oėjġĠÑN¡ð¯EBčnwôɍėª²CλŹġǝʅįĭạ̃ūȹ]ΓͧgšsgȽóϧµǛęgſ¶ҍć`ĘąŌJÞä¤rÅň¥ÖÁUětęuůÞiĊÄÀ\\Æs¦ÓRb|Â^řÌkÄŷ¶½÷f±iMÝ@ĥ°G¬ÃM¥n£Øąğ¯ß§aëbéüÑOčk£&#123;\\eµª×MÉfm«Ƒ&#123;Å×Gŏǩãy³©WÑăû··Qòı&#125;¯ãIéÕÂZ¨īès¶ZÈsæĔTŘvgÌsN@îá¾ó@ÙwU±ÉTå»£TđWxq¹Zobs[×¯cĩvėŧ³BM|¹kªħ¥TzNYnÝßpęrñĠĉRS~½ěVVµõ«M££µBĉ¥áºae~³AuĐh`Ü³ç@BÛïĿa©|z²Ý¼D£àč²ŸIûI āóK¥&#125;rÝ_Á´éMaň¨~ªSĈ½½KÙóĿeƃÆB·¬ën×W|Uº&#125;LJrƳlŒµ`bÔ`QÐÓ@s¬ñIÍ@ûws¡åQÑßÁ`ŋĴ&#123;ĪTÚÅTSÄ³Yo|Ç[Ç¾µMW¢ĭiÕØ¿@MhpÕ]jéò¿OƇĆƇpêĉâlØwěsǩĵ¸cbU¹ř¨WavquSMzeo_^gsÏ·¥Ó@~¯¿RiīB\\qTGªÇĜçPoÿfñòą¦óQīÈáPābß&#123;ZŗĸIæÅhnszÁCËìñÏ·ąĚÝUm®ó­L·ăUÈíoù´Êj°ŁŤ_uµ^°ìÇ@tĶĒ¡ÆM³Ģ«İĨÅ®ğRāðggheÆ¢zÊ©Ô\\°ÝĎz~ź¤PnMĪÖB£kné§żćĆKĒ°¼L¶èâz¨u¦¥LDĘz¬ýÎmĘd¾ßFzhg²Fy¦ĝ¤ċņbÎ@yĄæm°NĮZRÖíJ²öLĸÒ¨Y®ƌÐVàtt_ÚÂyĠz]ŢhzĎ&#123;ÂĢXc|ÐqfO¢¤ögÌHNPKŖUú´xx[xvĐCûĀìÖT¬¸^&#125;Ìsòd´_KgžLĴÀBon|H@Êx¦BpŰŌ¿fµƌA¾zǈRx¶FkĄźRzŀ~¶[´HnªVƞuĒ­È¨ƎcƽÌm¸ÁÈM¦x͊ëÀxǆBú^´W£dkɾĬpw˂ØɦļĬIŚÊnŔa¸~J°îlɌxĤÊÈðhÌ®gT´øàCÀ^ªerrƘd¢İP|Ė ŸWªĦ^¶´ÂLaT±üWƜǀRÂŶUńĖ[QhlLüAÜ\\qRĄ©&quot;</span>,</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [[<span class="number">90849</span>, <span class="number">37210</span>]],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">91.132212</span>, <span class="number">29.660361</span>], <span class="attr">name</span>: <span class="string">&quot;西藏&quot;</span>, <span class="attr">childNum</span>: <span class="number">1</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;610000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;Polygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            <span class="string">&quot;@@p¢ȮµûGĦ&#125;Ħðǚ¶òƄjɂz°&#123;ºØkÈęâ¦jªBg\\ċ°s¬]jú EȌǆ¬stRÆdĠİwÜ¸ôW¾ƮłÒ_&#123;Ìû¼jº¹¢GǪÒ¯ĘZ`ºŊecņą~BÂgzpâēòYǠȰÌTÎ¨ÂW|fcă§uF@N¢XLRMº[ğȣſï|¥Jkc`sŉǷY¹W@µ÷Kãï³ÛIcñ·VȋÚÒķø©þ¥yÓğęmWµÎumZyOŅƟĥÓ~sÑL¤µaÅY¦ocyZ&#123;y c]&#123;Ta©`U_Ěē£ωÊƍKùK¶ȱÝƷ§&#123;û»ÅÁȹÍéuĳ|¹cÑdìUYOuFÕÈYvÁCqÓTǢí§·S¹NgV¬ë÷Át°DØ¯C´ŉƒópģ&#125;ċcEËFéGU¥×K§­¶³BČ&#125;C¿åċ`wġB·¤őcƭ²ő[Å^axwQOÿEËßŚĤNĔwƇÄńwĪ­o[_KÓª³ÙnKÇěÿ]ďă_d©·©Ýŏ°Ù®g]±ßå¬÷m\\iaǑkěX&#123;¢|ZKlçhLtŇîŵœè[É@ƉĄEtƇÏ³­ħZ«mJ×¾MtÝĦ£IwÄå\\Õ&#123;OwĬ©LÙ³ÙgBƕŀrÌĢŭO¥lãyC§HÍ£ßEñX¡­°ÙCgpťzb`wIvA|§hoĕ@E±iYd¥OĻ¹S|&#125;F@¾oAO²&#123;tfÜ¢FǂÒW²°BĤh^Wx&#123;@¬­F¸¡ķn£P|ªĴ@^ĠĈæbÔc¶lYi^MicĎ°Â[ävï¶gv@ÀĬ·lJ¸sn|¼u~a]ÆÈtŌºJpþ£KKf~¦UbyäIĺãnÔ¿^­ŵMThĠÜ¤ko¼Ŏìąǜh`[tRd²Ĳ_XPrɲlXiL§à¹H°Ȧqº®QCbAŌJ¸ĕÚ³ĺ§ `d¨YjiZvRĺ±öVKkjGȊÄePĞZmļKÀ[`ösìhïÎoĬdtKÞ&#123;¬èÒÒBÔpĲÇĬJŊ¦±J«Y§@·pHµàåVKepWftsAÅqC·¬ko«pHÆuK@oHĆÛķhxenS³àǍrqƶRbzy¸ËÐl¼EºpĤ¼x¼½~Ğà@ÚüdK^mÌSj&quot;</span>,</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [[<span class="number">110234</span>, <span class="number">38774</span>]],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">108.948024</span>, <span class="number">34.263161</span>], <span class="attr">name</span>: <span class="string">&quot;陕西&quot;</span>, <span class="attr">childNum</span>: <span class="number">1</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;620000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;MultiPolygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            [<span class="string">&quot;@@VuUv&quot;</span>],</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&quot;@@ũEĠtt~nkh`Q¦ÅÄÜdwAb×ĠąJ¤DüègĺqBqj°lI¡ĨÒ¤úSHbjÎB°aZ¢KJO[|A£Dx&#125;NĂ¬HUnrk kp¼Y kMJn[aGáÚÏ[½rc&#125;aQxOgsPMnUsncZsKúvAtÞġ£®ĀYKdnFw¢JE°Latf`¼h¬we|Æbj&#125;GA·~W`¢MC¤tL©Ĳ°qdfObÞĬ¹ttu`^ZúE`[@Æsîz®¡CƳƜG²R¢RmfwĸgÜą G@pzJM½mhVy¸uÈÔO±¨&#123;LfæU¶ßGĂq\\ª¬²I¥IŉÈīoıÓÑAçÑ|«LÝcspīðÍgtë_õ\\ĉñLYnĝgRǡÁiHLlõUĹ²uQjYi§Z_c¨´ĹĖÙ·ŋIaBD­R¹ȥr¯GºßK¨jWkɱOqWĳ\\a­Q\\sg_ĆǛōëp»£lğÛgSŶN®À]ÓämĹãJaz¥V&#125;Le¤Lýo¹IsŋÅÇ^bz³tmEÁ´a¹cčecÇNĊãÁ\\č¯dNj]jZµkÓdaćå]ğĳ@ ©O&#123;¤ĸm¢E·®«|@Xwg]Aģ±¯XǁÑǳªcwQÚŝñsÕ³ÛV_ý¥\\ů¥©¾÷w©WÕÊĩhÿÖÁRo¸V¬âDb¨hûxÊ×ǌ~Zâg|XÁnßYoº§ZÅŘv[ĭÖʃuďxcVbnUSfB¯³_TzºÎO©çMÑ~M³]µ^püµÄY~y@X~¤Z³[Èōl@®Å¼£QK·Di¡ByÿQ_´D¥hŗy^ĭÁZ]cIzýah¹MĪğPs&#123;ò²Vw¹t³ŜË[Ñ&#125;X\\gsF£sPAgěp×ëfYHāďÖqēŭOÏëdLü\\it^c®RÊº¶¢H°mrY£B¹čIoľu¶uI]vģSQ&#123;UŻÅ&#125;QÂ|Ì°ƅ¤ĩŪU ęĄÌZÒ\\v²PĔ»ƢNHĂyAmƂwVm`]ÈbH`Ì¢²ILvĜH®¤Dlt_¢JJÄämèÔDëþgºƫaʎÌrêYi~ Îİ¤NpÀA¾Ĕ¼bð÷®üszMzÖĖQdȨýv§Tè|ªHÃ¾a¸|Ð ƒwKĢx¦ivr^ÿ ¸l öæfƟĴ·PJv&#125;n\\h¹¶v·À|\\ƁĚN´ĜçèÁz]ġ¤²¨QÒŨTIlªťØ&#125;¼˗ƦvÄùØEÂ«FïËIqōTvāÜŏíÛßÛVj³âwGăÂíNOPìyV³ŉĖýZso§HÑiYw[ß\\X¦¥c]ÔƩÜ·«jÐqvÁ¦m^ċ±R¦΋ƈťĚgÀ»IïĨʗƮ°ƝĻþÍAƉſ±tÍEÕÞāNUÍ¡\\ſčåÒʻĘm ƭÌŹöʥëQ¤µ­ÇcƕªoIýIÉ_mkl³ăƓ¦j¡YzŇi&#125;Msßõīʋ &#125;ÁVm_[n&#125;eı­Uĥ¼ªI&#123;Î§DÓƻėojqYhĹT©oūĶ£]ďxĩǑMĝq`B´ƃ˺Чç~²ņj@¥@đ´ί&#125;ĥtPńÇ¾V¬ufÓÉCtÓ̻¹£G³]ƖƾŎĪŪĘ̖¨ʈĢƂlɘ۪üºňUðǜȢƢż̌ȦǼĤŊɲĖÂ­Kq´ï¦ºĒǲņɾªǀÞĈĂD½ĄĎÌŗĞrôñnN¼â¾ʄľԆ|Ǆ֦ज़ȗǉ̘̭ɺƅêgV̍ʆĠ·ÌĊv|ýĖÕWĊǎÞ´õ¼cÒÒBĢ͢UĜð͒s¨ňƃLĉÕÝ@ɛƯ÷¿Ľ­ĹeȏĳëCȚDŲyê×Ŗyò¯ļcÂßYtÁƤyAã˾J@ǝrý@¤rz¸oP¹ɐÚyáHĀ[JwcVeȴÏ»ÈĖ&#125;ƒŰŐèȭǢόĀƪÈŶë;Ñ̆ȤМľĮEŔĹŊũ~ËUă&#123;ĻƹɁύȩþĽvĽƓÉ@ēĽɲßǐƫʾǗĒpäWÐxnsÀ^ƆwW©¦cÅ¡Ji§vúF¶¨c~c¼īeXǚ\\đ¾JwÀďksãAfÕ¦L&#125;waoZD½Ml«]eÒÅaÉ²áo½FõÛ]ĻÒ¡wYR£¢rvÓ®y®LFLzĈôe]gx&#125;|KK&#125;xklL]c¦£fRtív¦PĤoH&#123;tK&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [[[<span class="number">108619</span>, <span class="number">36299</span>]], [[<span class="number">108589</span>, <span class="number">36341</span>]]],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">103.823557</span>, <span class="number">36.058039</span>], <span class="attr">name</span>: <span class="string">&quot;甘肃&quot;</span>, <span class="attr">childNum</span>: <span class="number">2</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;630000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;MultiPolygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            [<span class="string">&quot;@@InJm&quot;</span>],</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&quot;@@CÆ½OŃĦsΰ~Ē³¦@@Ņi±è&#125;ШƄ˹A³r_ĞǒNĪĐw¤^ŬĵªpĺSZgrpiƼĘÔ¨C|ÍJ©Ħ»®VĲ~f\\m `UnÂ~ʌĬàöNt~ňjy¢ZiƔ¥Ąk´nl`JÊJþ©pdƖ®È£¶ìRʦźõƮËnʼėæÑƀĎ[¢VÎĂMÖÝÎF²sƊƀÎBļýƞ¯ʘƭðħ¼Jh¿ŦęΌƇ¥²Q]Č¥nuÂÏri¸¬ƪÛ^Ó¦d¥[Wàx\\ZjÒ¨GtpþYŊĕ´zUOëPîMĄÁxH´áiÜUàîÜŐĂÛSuŎrJðÌ¬EFÁú×uÃÎkrĒ&#123;V&#125;İ«O_ÌËĬ©ÓŧSRÑ±§Ģ£^ÂyèçěM³Ƃę&#123;[¸¿uºµ[gt£¸OƤĿéYõ·kĀq]juw¥DĩƍõÇPéÄ½G©ã¤GuȧþRcÕĕNyyût­øï»a½ē¿BMoį£Íj&#125;éZËqbʍƬh¹ìÿÓAçãnIÃ¡I`ks£CG­ěUy×Cy@¶ʡÊBnāzGơMē¼±O÷õJËĚăVĪũƆ£¯&#123;ËL½ÌzżVR|ĠTbuvJvµhĻĖHAëáa­OÇðñęNwœľ·LmI±íĠĩPÉ×®ÿscB³±JKßĊ«`ađ»·QAmOVţéÿ¤¹SQt]]Çx±¯A@ĉĳ¢Óļ©l¶ÅÛrŕspãRk~¦ª]Į­´FRåd­ČsCqđéFn¿ÅƃmÉx&#123;W©ºƝºįkÕƂƑ¸wWūÐ©ÈF£\\tÈ¥ÄRÈýÌJ lGr^×äùyÞ³fjc¨£ÂZ|ǓMĝÏ@ëÜőRĝ÷¡&#123;aïȷPu°ËXÙ&#123;©TmĠ&#125;Y³­ÞIňµç½©C¡į÷¯B»|St»]vųs»&#125;MÓ ÿʪƟǭA¡fs»PY¼c¡»¦cċ­¥£~msĉPSi^o©AecPeǵkgyUi¿h&#125;aHĉ^|á´¡HØûÅ«ĉ®]m¡qĉ¶³ÈyôōLÁstB®wn±ă¥HSòė£Së@×œÊăxÇN©©T±ª£Ĳ¡fb®Þbb_Ą¥xu¥B&#123;łĝ³«`dƐt¤ťiñÍUuºí`£^tƃĲc·ÛLO½sç¥Ts&#123;ă\\_»kÏ±q©čiìĉ|ÍI¥ć¥]ª§D&#123;ŝŖÉR_sÿc³ĪōƿÎ§p[ĉc¯bKmR¥&#123;³Ze^wx¹dƽÅ½ôIg §Mĕ ƹĴ¿ǣÜÍ]Ý]snåA&#123;eƭ`ǻŊĿ\\ĳŬűYÂÿ¬jĖqßb¸L«¸©@ěĀ©ê¶ìÀEH|´bRľÓ¶rÀQþvl®ÕETzÜdb hw¤&#123;LRdcb¯ÙVgƜßzÃôì®^jUèXÎ|UäÌ»rK\\ªN¼pZCüVY¤ɃRi^rPŇTÖ&#125;|br°qňbĚ°ªiƶGQ¾²x¦PmlŜ[Ĥ¡ΞsĦÔÏâ\\ªÚŒU\\f¢N²§x|¤§xĔsZPòʛ²SÐqF`ªVÞŜĶƨVZÌL`¢dŐIqr\\oäõFÎ·¤»Ŷ×h¹]ClÙ\\¦ďÌį¬řtTӺƙgQÇÓHţĒ´ÃbEÄlbʔC|CŮkƮ[ʼ¬ň´KŮÈΰÌĪ¶ƶlðļATUvdTGº̼ÔsÊDÔveOg&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [[[<span class="number">105308</span>, <span class="number">37219</span>]], [[<span class="number">95370</span>, <span class="number">40081</span>]]],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">101.778916</span>, <span class="number">36.623178</span>], <span class="attr">name</span>: <span class="string">&quot;青海&quot;</span>, <span class="attr">childNum</span>: <span class="number">2</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;640000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;MultiPolygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&quot;@@KëÀęĞ«Oęȿȕı]ŉ¡åįÕÔ«ǴõƪĚQÐZhv K°öqÀÑS[ÃÖHƖčËnL]ûcÙß@ĝ¾&#125;w»»oģF¹»kÌÏ·&#123;zP§B­¢íyÅt@@á]Yv_ssģ¼ißĻL¾ġsKD£¡N_X¸&#125;B~HaiÅf&#123;«x»ge_bsKF¯¡IxmELcÿZ¤­ĢÝsuBLùtYdmVtNmtOPhRw~bd¾qÐ\\âÙH\\bImlNZ»loqlVmGā§~QCw¤&#123;A\\PKNY¯bFkC¥sks_Ã\\ă«¢ħkJi¯rrAhĹûç£CUĕĊ_ÔBixÅÙĄnªÑaM~ħpOu¥sîeQ¥¤^dkKwlL~&#123;L~hw^ófćKyE­K­zuÔ¡qQ¤xZÑ¢^ļöÜ¾Ep±âbÊÑÆ^fk¬NC¾YpxbK~¥eÖäBlt¿Đx½I[ĒǙWf»Ĭ&#125;d§dµùEuj¨IÆ¢¥dXªƅx¿]mtÏwßRĶX¢͎vÆzƂZò®ǢÌʆCrâºMÞzÆMÒÊÓŊZÄ¾r°Î®Ȉmª²ĈUªĚîøºĮ¦ÌĘk^FłĬhĚiĀĖ¾iİbjÕ&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">            [<span class="string">&quot;@@mfwěwMrŢªv@G&quot;</span>],</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [[[<span class="number">109366</span>, <span class="number">40242</span>]], [[<span class="number">108600</span>, <span class="number">36303</span>]]],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">106.278179</span>, <span class="number">38.46637</span>], <span class="attr">name</span>: <span class="string">&quot;宁夏&quot;</span>, <span class="attr">childNum</span>: <span class="number">2</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;650000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;Polygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            <span class="string">&quot;@@QØĔ²X¨~ǘBºjʐßØvKƔX¨vĊOÃ·¢i@~cĝe_«E&#125;QxgɪëÏÃ@sÅyXoŖ&#123;ô«ŸuXêÎf`C¹ÂÿÐGĮÕĞXŪōŸMźÈƺQèĽôe|¿ƸJR¤ĘEjcUóº¯Ĩ_ŘÁMª÷Ð¥OéÈ¿ÖğǤǷÂFÒzÉx[]­Ĥĝœ¦EP&#125;ûƥé¿İƷTėƫœŕƅƱB»Đ±ēO¦E&#125;`cȺrĦáŖuÒª«ĲπdƺÏØZƴwʄ¤ĖGĐǂZĶèH¶&#125;ÚZצʥĪï|ÇĦMŔ»İĝǈì¥Βba­¯¥ǕǚkĆŵĦɑĺƯxūД̵nơʃĽá½M»òmqóŘĝčË¾ăCćāƿÝɽ©ǱŅ¹đ¥³ðLrÁ®ɱĕģŉǻ̋ȥơŻǛȡVï¹Ň۩ûkɗġƁ§ʇė̕ĩũƽō^ƕUv£ƁQïƵkŏ½ΉÃŭÇ³LŇʻ«ƭ\\lŭD&#123;ʓDkaFÃÄa³ŤđÔGRÈƚhSӹŚsİ«ĐË[¥ÚDkº^Øg¼ŵ¸£EÍöůŉT¡c_ËKYƧUśĵÝU_©rETÏʜ±OñtYwē¨&#123;£¨uM³x½şL©Ùá[ÓÐĥ Νtģ¢\\śnkOw¥±T»ƷFɯàĩÞáB¹ÆÑUwŕĽw[mG½Èå~Æ÷QyěCFmĭZīŵVÁƿQƛûXS²b½KÏ½ĉS©ŷXĕ&#123;ĕK·¥Ɨcqq©f¿]ßDõU³h­gËÇïģÉɋwk¯í&#125;I·œbmÉřīJɥĻˁ×xoɹīlc¤³Xù]ǅA¿w͉ì¥wÇN·ÂËnƾƍdÇ§đ®ƝvUm©³G\\&#125;µĿQyŹlăµEwǇQ½yƋBe¶ŋÀůo¥AÉw@&#123;Gpm¿AĳŽKLh³`ñcËtW±»ÕSëüÿďDu\\wwwù³VLŕOMËGh£õP¡erÏd&#123;ġWÁč|yšg^ğyÁzÙs`s|ÉåªÇ&#125;m¢Ń¨`x¥ù^&#125;Ì¥H«YªƅAÐ¹n~ź¯f¤áÀzgÇDIÔ´AňĀÒ¶ûEYospõD[&#123;ù°]uJqU|Soċxţ[õÔĥkŋÞŭZËºóYËüċrw ÞkrťË¿XGÉbřaDü·Ē÷AÃª[ÄäIÂ®BÕĐÞ_¢āĠpÛÄȉĖġDKwbmÄNôfƫVÉviǳHQµâFù­Âœ³¦&#123;YGd¢ĚÜO &#123;Ö¦ÞÍÀP^bƾl[vt×ĈÍEË¨¡Đ~´î¸ùÎhuè`¸HÕŔVºwĠââWò@&#123;ÙNÝ´ə²ȕn&#123;¿¥&#123;l÷eé^eďXj©î\\ªÑòÜìc\\üqÕ[Č¡xoÂċªbØ­ø|¶ȴZdÆÂońéG\\¼C°ÌÆn´nxÊOĨŪƴĸ¢¸òTxÊǪMīĞÖŲÃɎOvʦƢ~FRěò¿ġ~åŊúN¸qĘ[Ĕ¶ÂćnÒPĒÜvúĀÊbÖ&#123;Äî¸~Ŕünp¤ÂH¾ĄYÒ©ÊfºmÔĘcDoĬMŬS¤s²ʘÚžȂVŦ èW°ªB|ĲXŔþÈJĦÆæFĚêYĂªĂ]øªŖNÞüAfɨJ¯ÎrDDĤ`mz\\§~D¬&#123;vJÂ«lµĂb¤pŌŰNĄ¨ĊXW|ų ¿¾ɄĦƐMTòP÷fØĶK¢ȝ˔Sô¹òEð­`Ɩ½ǒÂň×äı§ĤƝ§C~¡hlåǺŦŞkâ~&#125;FøàĲaĞfƠ¥Ŕd®U¸źXv¢aƆúŪtŠųƠjdƺƺÅìnrh\\ĺ¯äɝĦ]èpĄ¦´LƞĬ´ƤǬ˼Ēɸ¤rºǼ²¨zÌPðŀbþ¹ļD¢¹\\ĜÑŚ¶ZƄ³àjĨoâȴLÊȮĐ­ĚăÀêZǚŐ¤qȂ\\L¢ŌİfÆs|zºeªÙæ§΢&#123;Ā´ƐÚ¬¨Ĵà²łhʺKÞºÖTiƢ¾ªì°`öøu®Ê¾ãØ&quot;</span>,</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [[<span class="number">88824</span>, <span class="number">50096</span>]],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">87.617733</span>, <span class="number">43.792818</span>], <span class="attr">name</span>: <span class="string">&quot;新疆&quot;</span>, <span class="attr">childNum</span>: <span class="number">1</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;110000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;Polygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            <span class="string">&quot;@@ĽOÁûtŷmiÍt_H»Ĩ±d`¹­&#123;bwYr³S]§§o¹qGtm_SŧoaFLgQN_dV@Zom_ć\\ßcÂ±x¯oœRcfe£o§ËgToÛJíĔóu|wP¤XnO¢ÉŦ¯rNÄā¤zâŖÈRpŢZÚ&#123;GrFt¦Òx§ø¹RóäV¤XdżâºWbwŚ¨Ud®bêņ¾jnŎGŃŶnzÚSeîĜZczî¾i]ÍQaúÍÔiþĩȨWĢü|Ėu[qb[swP@ÅğP¿&#123;\\¥A¨ÏÑ¨j¯X\\¯MKpA³[Hīu&#125;&#125;&quot;</span>,</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [[<span class="number">120023</span>, <span class="number">41045</span>]],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">116.405285</span>, <span class="number">39.904989</span>], <span class="attr">name</span>: <span class="string">&quot;北京&quot;</span>, <span class="attr">childNum</span>: <span class="number">1</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;120000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;Polygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            <span class="string">&quot;@@ŬgX§Ü«E¶FÌ¬O_ïlÁgz±AXeµÄĵ&#123;¶]gitgIj·¥îakS¨ÐƎk&#125;ĕ&#123;gBqGf&#123;¿aU^fIư³õ&#123;YıëNĿk©ïËZŏR§òoY×Ógcĥs¡bġ«@dekąI[nlPqCnp&#123;ō³°`&#123;PNdƗqSÄĻNNâyj]äÒD ĬH°Æ]~¡HO¾X&#125;ÐxgpgWrDGpù^LrzWxZ^¨´T\\|~@IzbĤjeĊªz£®ĔvěLmV¾Ô_ÈNW~zbĬvG²ZmDM~~&quot;</span>,</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [[<span class="number">120237</span>, <span class="number">41215</span>]],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">117.190182</span>, <span class="number">39.125596</span>], <span class="attr">name</span>: <span class="string">&quot;天津&quot;</span>, <span class="attr">childNum</span>: <span class="number">1</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;310000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;MultiPolygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            [<span class="string">&quot;@@ɧư¬EpƸÁxc&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@©ª&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@MA&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@QpİE§ÉC¾&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@bŝÕÕEȣÚƥêImɇǦèÜĠÚÃƌÃ͎ó&quot;</span>],</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&quot;@@ǜûȬɋŭ×^sYɍDŋŽąñCG²«ªč@h_p¯A&#123;oloY¬j@Ĳ`gQÚhr|ǀ^MĲvtbe´R¯Ô¬¨Yô¤r]ìƬį&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [</span><br><span class="line">            [[<span class="number">124702</span>, <span class="number">32062</span>]],</span><br><span class="line">            [[<span class="number">124547</span>, <span class="number">32200</span>]],</span><br><span class="line">            [[<span class="number">124808</span>, <span class="number">31991</span>]],</span><br><span class="line">            [[<span class="number">124726</span>, <span class="number">32110</span>]],</span><br><span class="line">            [[<span class="number">124903</span>, <span class="number">32376</span>]],</span><br><span class="line">            [[<span class="number">124438</span>, <span class="number">32149</span>]],</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">121.472644</span>, <span class="number">31.231706</span>], <span class="attr">name</span>: <span class="string">&quot;上海&quot;</span>, <span class="attr">childNum</span>: <span class="number">6</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;500000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;MultiPolygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&quot;@@vjG~nGŘŬĶȂƀƾ¹¸ØÎezĆT¸&#125;êÐqHðqĖä¥^CÆIj²p\\_ æüY|[YxƊæu°xb®Űb@~¢NQt°¶Sæ Ê~rǉĔëĚ¢~uf`faĔJåĊnÖ]jƎćÊ@£¾a®£Ű&#123;ŶĕFègLk&#123;Y|¡ĜWƔtƬJÑxq±ĢN´òKLÈÃ¼D|s`ŋć]Ã`đMûƱ½~Y°ħ`ƏíW½eI½&#123;aOIrÏ¡ĕŇapµÜƅġ^ÖÛbÙŽŏml½SêqDu[RãË»ÿw`»y¸_ĺę&#125;÷`M¯ċfCVµqŉ÷Zgg`d½pDOÎCn^uf²ènh¼WtƏxRGg¦pVFI±G^Ic´ecGĹÞ½sëĬhxW&#125;KÓe­XsbkF¦LØgTkïƵNï¶&#125;Gyw\\oñ¡nmĈzj@Óc£»Wă¹Ój_m»¹·~MvÛaq»­ê\\ÂoVnÓØÍ²«bq¿efE Ĝ^Q~ Évýş¤²ĮpEİ&#125;zcĺL½¿gÅ¡ýE¡ya£³t\\¨\\vú»¼§·Ñr_oÒý¥u_n»_At©ÞÅ±ā§IVeëY&#125;&#123;VPÀFA¨ąB&#125;q@|Ou\\FmQFÝMwå&#125;]|FmÏCawu_p¯sfÙgYDHl`&#123;QEfNysB¦zG¸rHeN\\CvEsÐùÜ_·ÖĉsaQ¯&#125;_UxÃđqNH¬Äd^ÝŰR¬ã°wećJE·vÝ·HgéFXjÉê`|ypxkAwWĐpb¥eOsmzwqChóUQl¥F^lafanòsrEvfQdÁUVfÎvÜ^eftET¬ôA\\¢sJnQTjPØxøK|nBzĞ»LYFDxÓvr[ehľvN¢o¾NiÂxGpâ¬zbfZo~hGi]öF||NbtOMn eA±tPTLjpYQ|SHYĀxinzDJÌg¢và¥Pg_ÇzIIII£®S¬ØsÎ¼£N&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">            [<span class="string">&quot;@@ifjN@s&quot;</span>],</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [[[<span class="number">109628</span>, <span class="number">30765</span>]], [[<span class="number">111725</span>, <span class="number">31320</span>]]],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">106.504962</span>, <span class="number">29.533155</span>], <span class="attr">name</span>: <span class="string">&quot;重庆&quot;</span>, <span class="attr">childNum</span>: <span class="number">2</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;810000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;MultiPolygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [</span><br><span class="line">            [<span class="string">&quot;@@AlBk&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@mn&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;@@EpFo&quot;</span>],</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&quot;@@ea¢pl¸Eõ¹hj[]ÔCÎ@lj¡uBX´AI¹[yDU]W`çwZkmcMpÅv&#125;IoJlcafŃK°ä¬XJmÐ đhI®æÔtSHnEÒrÈc&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">            [<span class="string">&quot;@@rMUwAS®e&quot;</span>],</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [</span><br><span class="line">            [[<span class="number">117111</span>, <span class="number">23002</span>]],</span><br><span class="line">            [[<span class="number">117072</span>, <span class="number">22876</span>]],</span><br><span class="line">            [[<span class="number">117045</span>, <span class="number">22887</span>]],</span><br><span class="line">            [[<span class="number">116975</span>, <span class="number">23082</span>]],</span><br><span class="line">            [[<span class="number">116882</span>, <span class="number">22747</span>]],</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">114.173355</span>, <span class="number">22.320048</span>], <span class="attr">name</span>: <span class="string">&quot;香港&quot;</span>, <span class="attr">childNum</span>: <span class="number">5</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;820000&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">        <span class="attr">geometry</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;Polygon&quot;</span>,</span><br><span class="line">          <span class="attr">coordinates</span>: [<span class="string">&quot;@@kÊd°å§s&quot;</span>],</span><br><span class="line">          <span class="attr">encodeOffsets</span>: [[<span class="number">116279</span>, <span class="number">22639</span>]],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">properties</span>: &#123; <span class="attr">cp</span>: [<span class="number">113.54909</span>, <span class="number">22.198951</span>], <span class="attr">name</span>: <span class="string">&quot;澳门&quot;</span>, <span class="attr">childNum</span>: <span class="number">1</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">UTF8Encoding</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>由于我们使用的是 vue 项目，而且还使用了 cdn，所以需要将 echarts 通过 external 引入到项目当中：</p><p>webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">externals</span>: &#123;</span><br><span class="line">    <span class="attr">echarts</span>: <span class="string">&quot;echarts&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>vue.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">    <span class="attr">externals</span>: &#123;</span><br><span class="line">      <span class="attr">echarts</span>: <span class="string">&quot;echarts&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li> vue 项目如果使用了 eslint，通过 cdn 形式引入 echarts 直接去使用，eslint 会报错</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-undef */</span></span><br></pre></td></tr></table></figure><ol><li>实现地图</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;mapChart&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;`width:$&#123;width&#125;;height:$&#123;height&#125;`&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">/* eslint-disable no-undef */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;MapChart&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">width</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">type</span>: <span class="built_in">String</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">default</span>: <span class="string">&quot;100%&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">height</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">type</span>: <span class="built_in">String</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">default</span>: <span class="string">&quot;300px&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">options</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">type</span>: <span class="built_in">Object</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">require</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.init();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.wraper = <span class="built_in">this</span>.$refs.mapChart;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.charts = echarts.init(<span class="built_in">this</span>.wraper);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.charts.setOption(<span class="built_in">this</span>.options);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue用echarts-map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React - Typescript</title>
      <link href="/2020/06/18/apd0o9/"/>
      <url>/2020/06/18/apd0o9/</url>
      
        <content type="html"><![CDATA[<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>通过脚手架搭建项目，并选择模板开始 typescript 支持 , 如果发现安装包后没有生成 tsconfig 相关配置的同学，可以将 nodejs 升级到最新版本重新下包即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app &lt;projectname&gt; --template typescript</span><br></pre></td></tr></table></figure><h3 id="暴露项目配置"><a href="#暴露项目配置" class="headerlink" title="暴露项目配置"></a>暴露项目配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run eject</span><br></pre></td></tr></table></figure><h3 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h3><p>config/webpack.config.js 在 alias 添加下面配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alias: &#123;</span><br><span class="line">  <span class="string">&quot;@&quot;</span>: paths.appSrc,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="启动项目关闭打开新页面"><a href="#启动项目关闭打开新页面" class="headerlink" title="启动项目关闭打开新页面"></a>启动项目关闭打开新页面</h3><p>scripts/start.js 注释 143 行代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// openBrowser(urls.localUrlForBrowser);</span></span><br></pre></td></tr></table></figure><h3 id="配置-prettier-实现-git-提交自动格式化代码"><a href="#配置-prettier-实现-git-提交自动格式化代码" class="headerlink" title="配置 prettier 实现 git 提交自动格式化代码"></a>配置 prettier 实现 git 提交自动格式化代码</h3><p>由于我们在具体的项目开发中，会涉及到多人协作（多个团队成员在一个项目中开发代码），书写代码风格还有编辑器的一些格式化插件的不同风格，导致整个项目代码乱七八糟。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>由于脚手架初始化开启了 eslint 相关配置，所以只需要安装对应的插件即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev --save-exact prettier</span><br><span class="line"> yarn add prettier -D</span><br></pre></td></tr></table></figure><h4 id="项目根目录添加配置文件"><a href="#项目根目录添加配置文件" class="headerlink" title="项目根目录添加配置文件"></a>项目根目录添加配置文件</h4><ul><li>.prettierrc.json</li><li>.prettierignore</li></ul><h4 id="配置-git-hook"><a href="#配置-git-hook" class="headerlink" title="配置 git hook"></a>配置 git hook</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx mrm lint-staged</span><br></pre></td></tr></table></figure><p>安装结束后会多了个 husky（哈士奇）的配置，以及 package.json 新增配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;lint-staged&quot;</span>: &#123;</span><br><span class="line">   <span class="string">&quot;*.js&quot;</span>: <span class="string">&quot;eslint --cache --fix&quot;</span>,</span><br><span class="line">   <span class="string">&quot;*.&#123;js,css,md,ts,tsx&#125;&quot;</span>: <span class="string">&quot;prettier --write&quot;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>由于本项目是支持 typescript 所以需要添加 ts、tsx 配置</p><h4 id="配置合并"><a href="#配置合并" class="headerlink" title="配置合并"></a>配置合并</h4><p>由于 eslint 与 prettier 会有一些冲突，需要安装下面插件配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add  eslint-config-prettier -D</span><br></pre></td></tr></table></figure><p>同时在 .eslintrc 或者 package.json/eslintConfig 对象中中添加 perttier 配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;extends&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;react-app&quot;</span>,</span><br><span class="line">        <span class="string">&quot;react-app/jest&quot;</span>,</span><br><span class="line">        <span class="string">&quot;prettier&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React-组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - Vuex</title>
      <link href="/2020/06/15/gbrf2p/"/>
      <url>/2020/06/15/gbrf2p/</url>
      
        <content type="html"><![CDATA[<h2 id="Vuex-是什么？"><a href="#Vuex-是什么？" class="headerlink" title="Vuex 是什么？"></a>Vuex 是什么？</h2><h2 id="Vuex-有什么作用？"><a href="#Vuex-有什么作用？" class="headerlink" title="Vuex 有什么作用？"></a>Vuex 有什么作用？</h2><p>某个状态的变化可以在组件内实时监测、并进行处理</p><h2 id="Vuex-优劣"><a href="#Vuex-优劣" class="headerlink" title="Vuex 优劣"></a>Vuex 优劣</h2><ul><li>可维护性会下降，你要想修改数据，你得维护三个地方</li><li>可读性会下降，因为一个组件里的数据，你根本就看不出来是从哪来的</li><li>增加耦合，大量的上传派发，会让耦合性大大的增加，本来 Vue 用 Component 就是为了减少耦合，现在这么用，和组件化的初衷相背。</li></ul><h2 id="Vuex-的属性"><a href="#Vuex-的属性" class="headerlink" title="Vuex 的属性"></a>Vuex 的属性</h2><ul><li>mode</li><li>state(存放状态)</li><li>action(提交 mutation，进行异步操作)</li><li>getters(state 的计算属性)</li><li>modules(将 store 模块化)</li><li>mutation(更改状态逻辑，进行同步操作)</li><li>plugins</li></ul><h3 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h3><ul><li>true 严格模式</li><li>false 非严格模式</li></ul><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><ul><li>Vuex 其实就是一个仓库，仓库里面放了很多对象。其中 state 就是存放数据源的地方，对应与 Vue 对象里面的 data</li><li>其中 state 里面存放的数据为响应式数据,Vue 组件从 store 仓库中读取数据，若仓库中的数据发生改变的时候，依赖这个数据的组件也会随之更新</li><li>state 通过 mapState 把全局的 state 和 getters 映射到当前组件的 computed 计算属性中</li></ul><h3 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h3><ul><li>getters 可以对 state 进行计算操作，相当于就是 store 的计算属性</li><li>虽然在组件内也有计算属性，但是 getters 可以在多组件复用</li><li>如果一个状态只在一个组件内使用，可以不用 getters</li></ul><h3 id="mutation"><a href="#mutation" class="headerlink" title="mutation"></a>mutation</h3><p>修改仓库数据的唯一途径就是提交（commit） mutations 方法</p><h3 id="action"><a href="#action" class="headerlink" title="action"></a>action</h3><p>类似 mutations，一般情况下，actions 用来处理有副作用的操作，并且不可以直接更改仓库的状态（严格模式下）</p><ul><li>mutation 必须是同步操作</li><li>action 可以包含任意的异步操作</li><li>action 提交的是 mutation，不是直接变更状态（严格模式下）</li><li>dispatch 视图触发 action，action 触发 mutation</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="comment">// 存放状态</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="comment">// state的计算属性</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="comment">// 更改state中状态的逻辑，同步操作</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">// 提交mutation，异步操作</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 如果将store分成一个个的模块的话，则需要用到modules。</span></span><br><span class="line">  <span class="comment">//然后在每一个module中写state, getters, mutations, actions等。</span></span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: moduleA,</span><br><span class="line">    <span class="attr">b</span>: moduleB,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Vuex-辅助函数"><a href="#Vuex-辅助函数" class="headerlink" title="Vuex - 辅助函数"></a>Vuex - 辅助函数</h2><p>首先在讲解用法前我们先创建一个仓库实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Mockurl&#125; <span class="keyword">from</span> <span class="string">&#x27;@/until&#x27;</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">      <span class="attr">count</span>:<span class="number">0</span>,</span><br><span class="line">      <span class="attr">data</span>:[]，</span><br><span class="line">      <span class="attr">sex</span>:<span class="number">0</span></span><br><span class="line">      &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">      <span class="function"><span class="title">changeData</span>(<span class="params">state,actions</span>)</span>&#123;</span><br><span class="line">          state.data = [...actions.data]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">add</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">        ++state.count</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">dis</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">        --state.count</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">      <span class="function"><span class="title">getData</span>(<span class="params">store</span>)</span>&#123;</span><br><span class="line">          axios.get(<span class="string">&#x27;/get/data&#x27;</span>).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">              store.commit(<span class="string">&#x27;changeData&#x27;</span>,data)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>:&#123;</span><br><span class="line">      <span class="function"><span class="title">sex</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> state.sex === <span class="number">0</span> ? <span class="string">&#x27;男&#x27;</span>:<span class="string">&#x27;女&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="mapState-读取仓库状态"><a href="#mapState-读取仓库状态" class="headerlink" title="mapState 读取仓库状态"></a>mapState 读取仓库状态</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// 写法一</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// mapState返回值是对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// 结合扩展运算符展开对象,方便扩展计算属性</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="attr">computed</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  ...mapState([<span class="string">&#x27;count&#x27;</span>]),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="function"><span class="title">val</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="keyword">return</span> someval</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 写法二</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">computed</span>:mapState([<span class="string">&#x27;count&#x27;</span>]),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 写法三</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">computed</span>:mapState(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">count</span>:<span class="function"><span class="params">store</span>=&gt;</span>store.count;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="mapGetters-数据派生"><a href="#mapGetters-数据派生" class="headerlink" title="mapGetters 数据派生"></a>mapGetters 数据派生</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  性别:&#123;&#123;sex&#125;&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">computed</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      ...mapGetters([<span class="string">&#x27;sex&#x27;</span>])</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="mapMutations-修改仓库状态"><a href="#mapMutations-修改仓库状态" class="headerlink" title="mapMutations 修改仓库状态"></a>mapMutations 修改仓库状态</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">&quot;dis&quot;</span> &gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;&#123;count&#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span> &gt;</span>+<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ...mapMutations([<span class="string">&#x27;add&#x27;</span>,<span class="string">&#x27;dis&#x27;</span>])</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="mapActions-异步处理"><a href="#mapActions-异步处理" class="headerlink" title="mapActions 异步处理"></a>mapActions 异步处理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> <span class="attr">methods</span>:&#123;</span><br><span class="line">    ...mapActions([<span class="string">&#x27;getData&#x27;</span>])</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="Vue3-x"><a href="#Vue3-x" class="headerlink" title="Vue3.x"></a>Vue3.x</h3><p>通过 useStore 绑定仓库共享的状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;about&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">const</span> store = useStore();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> name = computed(<span class="function">()=&gt;</span>store.state.app.name)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 通过返回函数提交mutations</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">add</span>:<span class="function">()=&gt;</span>store.commit(<span class="string">&#x27;add&#x27;</span>,<span class="number">123</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue X </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - 移动端适配</title>
      <link href="/2020/06/15/rm42gc/"/>
      <url>/2020/06/15/rm42gc/</url>
      
        <content type="html"><![CDATA[<h2 id="下载依赖"><a href="#下载依赖" class="headerlink" title="下载依赖"></a>下载依赖</h2><p>由于 vue-cli 脚手架一直再更新，包括 webpack 及相关依赖都在升级，下面代码仅供参考<br>本人目前使用 <strong>@vue/cli 4.5.9</strong>, 下面是依赖包的版本号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cnpm install postcss</span><br><span class="line">cnpm install postcss-loader</span><br><span class="line">cnpm install postcss-pxtorem</span><br><span class="line">cnpm install autoprefix</span><br></pre></td></tr></table></figure><p>方式一：vue.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pxtorem = <span class="built_in">require</span>(<span class="string">&quot;postcss-pxtorem&quot;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">loaderOptions</span>: &#123;</span><br><span class="line">      <span class="attr">postcss</span>: &#123;</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">          pxtorem(&#123;</span><br><span class="line">            <span class="attr">rootValue</span>: <span class="number">16</span>, <span class="comment">// 根字体大小，如果设计图是750的话 记得除2</span></span><br><span class="line">            <span class="attr">unitPrecision</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="attr">propList</span>: [<span class="string">&quot;*&quot;</span>], <span class="comment">// 作用在哪些属性上 我这里用的是通配符</span></span><br><span class="line">            <span class="attr">selectorBlackList</span>: [<span class="string">&quot;vant-&quot;</span>], <span class="comment">// 将哪些html元素排除在外，我这里添加了一个vant的</span></span><br><span class="line">            <span class="attr">replace</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">mediaQuery</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">minPixelValue</span>: <span class="number">12</span>,</span><br><span class="line">            <span class="attr">exclude</span>: <span class="regexp">/node_modules/i</span>,</span><br><span class="line">          &#125;),</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>方式二：项目根目录添加.postcssrc.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: &#123;</span><br><span class="line">    <span class="attr">autoprefixer</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&quot;postcss-pxtorem&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">rootValue</span>: <span class="number">16</span>, <span class="comment">// 根字体大小，如果设计图是750的话 记得除2</span></span><br><span class="line">      <span class="attr">unitPrecision</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">propList</span>: [<span class="string">&quot;*&quot;</span>], <span class="comment">// 作用在哪些属性上 我这里用的是通配符</span></span><br><span class="line">      <span class="attr">selectorBlackList</span>: [<span class="string">&quot;vant-&quot;</span>], <span class="comment">// 将哪些html元素排除在外，我这里添加了一个vant的</span></span><br><span class="line">      <span class="attr">replace</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">mediaQuery</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">minPixelValue</span>: <span class="number">12</span>,</span><br><span class="line">      <span class="attr">exclude</span>: <span class="regexp">/node_modules/i</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="浏览器兼容前缀"><a href="#浏览器兼容前缀" class="headerlink" title="浏览器兼容前缀"></a>浏览器兼容前缀</h2><p>方式一：<br>项目根目录创建 vue.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;browserslist&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;defaults&quot;</span>,</span><br><span class="line">    <span class="string">&quot;not ie &lt;= 8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;chrome &gt;= 14&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目根目录创建.postcssrc.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">&quot;autoprefixer&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">loaderOptions</span>: &#123;</span><br><span class="line">      <span class="attr">postcss</span>: &#123;</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">          <span class="comment">// 自动添加兼容css前缀</span></span><br><span class="line">          autoprefixer(),</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>方式二：项目根目录添加.postcssrc.js</p><ol><li>项目根目录创建 .browserslistrc</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">defaults</span><br><span class="line">not ie &lt;= <span class="number">8</span></span><br><span class="line">chrome &gt;= <span class="number">14</span></span><br></pre></td></tr></table></figure><ol><li>项目根目录创建.postcssrc.js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: &#123;</span><br><span class="line">    <span class="attr">autoprefixer</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="动态设置根节点-html-的-fontSize"><a href="#动态设置根节点-html-的-fontSize" class="headerlink" title="动态设置根节点 html 的 fontSize"></a>动态设置根节点 html 的 fontSize</h2><p>可以再 main.js 中直接引入下面的脚本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> baseSize = <span class="number">16</span>; <span class="comment">// 32</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setRem</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> scale = <span class="built_in">document</span>.documentElement.clientWidth / <span class="number">375</span>; <span class="comment">// 750</span></span><br><span class="line">    <span class="built_in">document</span>.documentElement.style.fontSize =</span><br><span class="line">      baseSize * <span class="built_in">Math</span>.min(scale, <span class="number">2</span>) + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    setRem();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue移动端适配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - 修饰符</title>
      <link href="/2020/06/14/yyh3h7/"/>
      <url>/2020/06/14/yyh3h7/</url>
      
        <content type="html"><![CDATA[<h2 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 标准浏览器</span></span><br><span class="line">  event.preventDefault();</span><br><span class="line">  <span class="comment">// IE浏览器</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="阻止冒泡"><a href="#阻止冒泡" class="headerlink" title="阻止冒泡"></a>阻止冒泡</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 标准浏览器</span></span><br><span class="line">  event.stoppropagation();</span><br><span class="line">  <span class="comment">// IE浏览器</span></span><br><span class="line">  event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Vue-事件修饰符"><a href="#Vue-事件修饰符" class="headerlink" title="Vue 事件修饰符"></a>Vue 事件修饰符</h2><p>Vue.js 为 v-on 提供了事件修饰符。之前提过，修饰符是由点开头的指令后缀来表示的。</p><table><thead><tr><th><strong>事件修饰符</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>stop</td><td>阻止冒泡</td></tr><tr><td>prevent</td><td>阻止默认行为</td></tr><tr><td>once</td><td><a href="mailto:&#x56;&#x75;&#x65;&#x40;&#x32;&#x2e;&#x31;&#x2e;&#52;">&#x56;&#x75;&#x65;&#x40;&#x32;&#x2e;&#x31;&#x2e;&#52;</a>新增，事件执行一次</td></tr><tr><td>passive</td><td>执行默认方法</td></tr><tr><td>capture</td><td>事件只作于自身 -去捕获</td></tr><tr><td>self</td><td>事件只作于自身-不捕获</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">&quot;clickHandlerdoThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;clickHandler&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 修饰符可以串联 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">&quot;clickHandler&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">&quot;clickHandler&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.passive</span>=<span class="string">&quot;handlerClick&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="string">&quot;@/assets/css/reset.css&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="string">&quot;@/assets/css/common.css&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="string">&quot;@/assets/css/style.css&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">clickHandler</span>(<span class="params">e</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      e.preventDefault();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(e);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="Vue-按键修饰符"><a href="#Vue-按键修饰符" class="headerlink" title="Vue 按键修饰符"></a>Vue 按键修饰符</h2><p>keyCode 的事件用法已经被废弃了并可能不会被最新的浏览器支持。使用 keyCode attribute 也是允许的：<br>​</p><p>| enter |</p><p>|  |<br>|  |</p><p>|</p><p>|</p><p>|<br>|</p><p>|</p><p>|<br>|</p><p>|</p><p>|<br>|</p><p>|</p><p>|<br>|</p><p>|</p><p>|<br>|</p><p>|</p><p>|</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue修饰符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - 插槽</title>
      <link href="/2020/06/11/ycxxk7/"/>
      <url>/2020/06/11/ycxxk7/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>Vue 实现了一套内容分发的 API，这套 API 的设计灵感源自 <a href="https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md">Web Components 规范草案</a>，将 <slot> 元素作为承载分发内容的出口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 布局组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;layout&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    // name用于匹配插槽slot接参</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;header&#x27;</span> <span class="attr">:slotProps</span>=<span class="string">&#x27;slotProps&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;&#123;slotProps&#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">    // 没有name默认为default</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    // 可在插槽中放入默认值，在不指定此插槽时，默认显示默认值</span></span><br><span class="line"><span class="xml">        这是头部插槽</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">name</span>: <span class="string">&#x27;Layout&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用插槽</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;home&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Layout</span>&gt;</span></span></span><br><span class="line"><span class="xml">    // 用template模板v-slot指令匹配所对应的name的插槽</span></span><br><span class="line"><span class="xml">    // slot</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>=<span class="string">&#x27;slotProps&#x27;</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">      // 不指定v-slot，默认defualt</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">template</span>&gt;</span>主体<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">      // 不写插槽则不会显示或显示插槽的原本默认值</span></span><br><span class="line"><span class="xml">//footer</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">&#x27;./Layout&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      Layout,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">slotProps</span>: <span class="string">&#x27;123&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue插槽 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - 过滤器</title>
      <link href="/2020/06/11/fogrlr/"/>
      <url>/2020/06/11/fogrlr/</url>
      
        <content type="html"><![CDATA[<h3 id="全局过滤器-实现字符串反转"><a href="#全局过滤器-实现字符串反转" class="headerlink" title="全局过滤器 - 实现字符串反转"></a>全局过滤器 - 实现字符串反转</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.filter(<span class="string">&quot;aaa&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val);</span><br><span class="line">  <span class="keyword">return</span> val.split(<span class="string">&quot;&quot;</span>).reverse().join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="局部过滤器-实现字符串反转"><a href="#局部过滤器-实现字符串反转" class="headerlink" title="局部过滤器 - 实现字符串反转"></a>局部过滤器 - 实现字符串反转</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;&#123; text | aaa &#125;&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">text</span>: <span class="string">&quot;memeda!&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 局部过滤器</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">filters</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">aaa</span>: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> val</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        .split(<span class="string">&quot;&quot;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        .reverse()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        .join(<span class="string">&quot;&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>过滤器用于进行文本内容格式化处理，全局过滤器可以再任意 Vue 实例中使用。比如对一些时间进行指定方式的格式化。</li></ul><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><ul><li>Vue.filter(“过滤器名称”, 执行函数);</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">&quot;过滤器名称&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 逻辑代码</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;处理结果&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h4><ul><li>过滤器可以在元素内容中使用插值表达式，并将过滤器与插值表达式结合进行内容处理。</li><li>也可以在属性绑定指令中 v-bind 中使用，对绑定的内容进行过滤处理。</li><li>不论是在插值表达式中使用，还是在 v-bind 中使用，都需要通过管道符 | 连接数据。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="comment">// 在 v-bind 中使用，管道符前面是需要过滤的数据 后面是过滤器名称</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;id | filterId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 在 插值表达式 中使用</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; content | filterContent &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ul><li>在 Vue 中，可以将一个数据传入到多个过滤器中进行处理。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line"><span class="comment">// 在 插值表达式 中使用</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; content | filterA | filterB &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>一个过滤器可以传入多个参数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line"><span class="comment">// 在 插值表达式 中使用 content是第一个参数，par1是第二个参数，par2是第二个参数。</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; content | filterContent(par1, par2) &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="局部过滤器"><a href="#局部过滤器" class="headerlink" title="局部过滤器"></a>局部过滤器</h3><ul><li>局部过滤器只能在当前 Vue 实例中使用。</li></ul><h4 id="语法：-1"><a href="#语法：-1" class="headerlink" title="语法："></a>语法：</h4><ul><li>局部过滤器也可以将一个数据同时传入到多个过滤器中处理，一个过滤器中也可以同时接受多个参数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">filters</span>: &#123;</span><br><span class="line">    过滤器名称<span class="number">1</span>: <span class="function"><span class="keyword">function</span> (<span class="params">value, arg2</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 逻辑代码</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;处理结果&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    过滤器名称<span class="number">2</span>: <span class="function"><span class="keyword">function</span> (<span class="params">value, arg2</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 逻辑代码</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;处理结果&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue过滤器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - 内置指令</title>
      <link href="/2020/06/11/ag77cu/"/>
      <url>/2020/06/11/ag77cu/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="常用内置指令"><a href="#常用内置指令" class="headerlink" title="常用内置指令"></a>常用内置指令</h2><ul><li>v-if 判断不符合条件不进行渲染</li><li>v-else</li><li>v-text</li><li>v-html</li><li>v-show 不符合条件元素 display：none</li><li>v-for 循环遍历</li><li>v-model 双向绑定</li><li>v-bind 动态赋值 简化 :</li><li>v-on 事件绑定 简化@ 事件对象穿回来 $event</li></ul><h2 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h2><p>这个指令让视图只渲染一次，将来就算相应的数据发生变化，也不会重新渲染。该指令主要在希望静态显示不需要更新数据的时候使用。</p><h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><p>这个指令主要在需要操作原始 HTML 的时候使用。</p><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><p>该指令在需要绑定 HTML 标签属性的时候使用。为了方便，该指令还有一个缩写:，例如:class=”myClass”就相当于 v-bind:class=”myClass”。</p><h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><p>该指令主要用于绑定事件处理程序。该指令有缩写@，例如@click=”onClick”就相当于 v-on:click=”onClick”。</p><h4 id="v-show、v-if、v-else-和-v-else-if"><a href="#v-show、v-if、v-else-和-v-else-if" class="headerlink" title="v-show、v-if、v-else 和 v-else-if"></a>v-show、v-if、v-else 和 v-else-if</h4><p>这几个指令主要用于条件渲染，将在后面进行介绍。</p><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><p>该指令用于渲染整个列表，将在后面进行介绍。</p><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><p>该指令可以让页面元素和数据进行双向绑定。默认情况下数据和页面元素是单向绑定的，使用该指令可以让其变成双向绑定。该指令主要用于处理表单等场景。</p><h2 id="v-show-amp-v-if-区别？"><a href="#v-show-amp-v-if-区别？" class="headerlink" title="v-show &amp; v-if 区别？"></a>v-show &amp; v-if 区别？</h2><p>表现：<br>v-show 通过 css 的 display 属性控制组件、元素的显隐<br>v-if 通过插入、移除 dom 控制组件、元素的显影<br>性能：<br>v-show 有更多的初始化消耗<br>v-if 有更多的切换消耗</p><h2 id="文本插值-amp-表达式"><a href="#文本插值-amp-表达式" class="headerlink" title="文本插值 &amp; 表达式"></a>文本插值 &amp; 表达式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    // 文本插值、模板语法</span></span><br><span class="line"><span class="xml">    &#123;&#123; htext &#125;&#125;</span></span><br><span class="line"><span class="xml">    // 表达式就是通过&#123;&#123;&#125;&#125;进行一些运算 （加减乘除求模求余过滤器）</span></span><br><span class="line"><span class="xml">    &#123;&#123; htext + &quot;666&quot; &#125;&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">stext</span>: <span class="string">&quot;乌鸡哥&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">htext</span>: <span class="string">&quot;&lt;h3&gt;乌鸡哥&lt;/h3&gt;&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="v-text-amp-v-html"><a href="#v-text-amp-v-html" class="headerlink" title="v-text &amp; v-html"></a>v-text &amp; v-html</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"> // 原样输出</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;htext&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    // 解析htext中的标签</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;htext&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">htext</span>: <span class="string">&quot;&lt;h3&gt;乌鸡哥&lt;/h3&gt;&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue内置指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - 变异方法</title>
      <link href="/2020/06/11/api8or/"/>
      <url>/2020/06/11/api8or/</url>
      
        <content type="html"><![CDATA[<h2 id="数据已经被改变，视图没有更新怎么办？"><a href="#数据已经被改变，视图没有更新怎么办？" class="headerlink" title="数据已经被改变，视图没有更新怎么办？"></a>数据已经被改变，视图没有更新怎么办？</h2><p>由于 vue 的数据是双向绑定的数据，如果我们在实例被创建之后修改、操作我们的数据源，就会导致，数据改变，视图没有更新</p><h2 id="Vue-set"><a href="#Vue-set" class="headerlink" title="Vue.$set"></a>Vue.$set</h2><ul><li>Vue.set 全局的 set 方法</li><li>this.$set vue 单文件实例里面可以通过 this 来访问</li></ul><h2 id="变异方法"><a href="#变异方法" class="headerlink" title="变异方法"></a>变异方法</h2><ul><li>push</li><li>pop</li><li>shift</li><li>unshift</li><li>splice</li><li>sort</li><li>reverse</li></ul><p><strong>push() 接收任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度</strong><br><strong>pop() 从数组末尾移除最后一项，减少数组的 length 值，然后返回移除的项</strong><br><strong>shift() 移除数组中的第一个项并返回该项，同时数组的长度减 1</strong><br><strong>unshift() 在数组前端添加任意个项并返回新数组长度</strong><br><strong>splice() 删除原数组的一部分成员，并可以在被删除的位置添加入新的数组成员</strong><br><strong>sort() 调用每个数组项的 toString()方法，然后比较得到的字符串排序，返回经过排序之后的数组</strong><br><strong>reverse() 用于反转数组的顺序，返回经过排序之后的数组</strong></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue变异方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2020/06/11/ypg1yl/"/>
      <url>/2020/06/11/ypg1yl/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是数据结构"><a href="#什么是数据结构" class="headerlink" title="什么是数据结构"></a>什么是数据结构</h2><p>数据在计算机中如何组成的一门学问</p><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><ul><li>运行存储 （内存条，我们可以在内存当中进行运算）<ul><li>堆内存<ul><li>引用数据类型</li></ul></li><li>栈内存<ul><li>变量名</li><li>基本数据类型</li></ul></li></ul></li><li>物理存储 （硬盘）<ul><li>机械硬盘 （不易损坏，读写速度较慢）</li><li>固态硬盘 （耗材，书写速度较快）</li></ul></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>javascript 数据类型，就是变量赋值时值类型声明</p><ul><li>基本数据类型<ul><li>number</li><li>string</li><li>boolean</li><li>null</li><li>undefined</li><li>symbol</li></ul></li><li>引用类型<ul><li>Set</li><li>Map</li><li>object</li><li>array</li><li>function</li></ul></li></ul><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>由于 javascript 提供的存储数据的方式比较单一，不能满足我们日常工作生活的需要，脱胎与后端就产生了一些常见数据结构。<br>数据结构就是一种定义如果对数据进行增删改查的一种模式。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - Eslint</title>
      <link href="/2020/06/04/phm6xb/"/>
      <url>/2020/06/04/phm6xb/</url>
      
        <content type="html"><![CDATA[<p>可组装的 JavaScript 和 JSX 检查工具</p><h2 id="ESLint-规则"><a href="#ESLint-规则" class="headerlink" title="ESLint 规则"></a>ESLint 规则</h2><ul><li>自定义规则</li><li>社区提供规则<ul><li>standard</li><li>prettier</li><li>airbnb</li></ul></li></ul><h2 id="VSCode-插件"><a href="#VSCode-插件" class="headerlink" title="VSCode 插件"></a>VSCode 插件</h2><ol><li><strong>vetur</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Name: Vetur</span><br><span class="line"><span class="attr">Id</span>: octref.vetur</span><br><span class="line"><span class="attr">Description</span>: Vue tooling <span class="keyword">for</span> VS Code</span><br><span class="line"><span class="attr">Version</span>: <span class="number">0.33</span><span class="number">.1</span></span><br><span class="line"><span class="attr">Publisher</span>: Pine Wu</span><br><span class="line">VS Marketplace Link: https:<span class="comment">//marketplace.visualstudio.com/items?itemName=octref.vetur</span></span><br></pre></td></tr></table></figure><ol><li><strong>prettier</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Name: Prettier - Code formatter</span><br><span class="line"><span class="attr">Id</span>: esbenp.prettier-vscode</span><br><span class="line"><span class="attr">Description</span>: Code formatter using prettier</span><br><span class="line"><span class="attr">Version</span>: <span class="number">6.4</span><span class="number">.0</span></span><br><span class="line"><span class="attr">Publisher</span>: Prettier</span><br><span class="line">VS Marketplace Link: https:<span class="comment">//marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode</span></span><br></pre></td></tr></table></figure><h2 id="ESLint-配置"><a href="#ESLint-配置" class="headerlink" title="ESLint 配置"></a>ESLint 配置</h2><ul><li>package.json/eslintOptions</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;eslintOptions&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">env</span>: &#123;</span><br><span class="line">      <span class="attr">node</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">extends</span>: [<span class="string">&#x27;plugin:vue/vue3-essential&#x27;</span>, <span class="string">&#x27;eslint:recommended&#x27;</span>, <span class="string">&#x27;@vue/prettier&#x27;</span>],</span><br><span class="line">    <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">      <span class="attr">parser</span>: <span class="string">&#x27;babel-eslint&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rules</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;no-console&#x27;</span>: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;warn&#x27;</span> : <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;no-debugger&#x27;</span>: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;warn&#x27;</span> : <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>项目根目录创建 .eslintrc.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&quot;plugin:vue/vue3-essential&quot;</span>, <span class="string">&quot;eslint:recommended&quot;</span>, <span class="string">&quot;@vue/prettier&quot;</span>],</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">parser</span>: <span class="string">&quot;babel-eslint&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&quot;no-console&quot;</span>: process.env.NODE_ENV === <span class="string">&quot;production&quot;</span> ? <span class="string">&quot;warn&quot;</span> : <span class="string">&quot;off&quot;</span>,</span><br><span class="line">    <span class="string">&quot;no-debugger&quot;</span>: process.env.NODE_ENV === <span class="string">&quot;production&quot;</span> ? <span class="string">&quot;warn&quot;</span> : <span class="string">&quot;off&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="项目编辑器配置"><a href="#项目编辑器配置" class="headerlink" title="项目编辑器配置"></a>项目编辑器配置</h2><ul><li>配置 vscode-settings.json 设置编辑器</li><li>通过 .editorconfig 设置编辑器</li></ul><p>.editorconfig</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># http:<span class="comment">//editorconfig.org</span></span><br><span class="line">root = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = <span class="number">2</span></span><br><span class="line">end_of_line = lf</span><br><span class="line">charset = utf-<span class="number">8</span></span><br><span class="line">trim_trailing_whitespace = <span class="literal">true</span></span><br><span class="line">insert_final_newline = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[*.md]</span><br><span class="line">trim_trailing_whitespace = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">[Makefile]</span><br><span class="line">indent_style = tab</span><br></pre></td></tr></table></figure><h2 id="Prettier-配置"><a href="#Prettier-配置" class="headerlink" title="Prettier 配置"></a>Prettier 配置</h2><p>在文件根目录下创建.prettierrc, 进行自定义规则设置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;singleQuote&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;semi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;bracketSpacing&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;htmlWhitespaceSensitivity&quot;</span>: <span class="string">&quot;ignore&quot;</span>,</span><br><span class="line">  <span class="string">&quot;arrowParens&quot;</span>: <span class="string">&quot;avoid&quot;</span>,</span><br><span class="line">  <span class="string">&quot;endOfLine&quot;</span>: <span class="string">&quot;lf&quot;</span>,</span><br><span class="line">  <span class="string">&quot;trailingComma&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">  <span class="string">&quot;jsxSingleQuote&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="脚手架命令"><a href="#脚手架命令" class="headerlink" title="脚手架命令"></a>脚手架命令</h2><p>npm run lint 命令，可以一键将项目代码格式化成符合 eslint+prettier 验证规则</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;serve&quot;</span>: <span class="string">&quot;vue-cli-service serve&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;vue-cli-service build&quot;</span>,</span><br><span class="line">    <span class="string">&quot;lint&quot;</span>: <span class="string">&quot;vue-cli-service lint&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VueEslint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - 组件通讯</title>
      <link href="/2020/06/03/zyn00n/"/>
      <url>/2020/06/03/zyn00n/</url>
      
        <content type="html"><![CDATA[<p>vue 已经成为当下最热的前端框架之一，在学生的面试过程中最常问的问题非组件通讯莫属了。<br>下面我将会详细介绍 vue 当中，组件通讯的几种方式，以及表达技巧。</p><h2 id="为什么需要组件通讯？"><a href="#为什么需要组件通讯？" class="headerlink" title="为什么需要组件通讯？"></a>为什么需要组件通讯？</h2><p>vue 是组件化开发，我们项目代码中的各个模块都是通过组件组合而成，而且组件之间的参数都会有相互依赖的关系，所以我们需要熟练掌握组件通讯</p><h2 id="组件通讯的分类："><a href="#组件通讯的分类：" class="headerlink" title="组件通讯的分类："></a>组件通讯的分类：</h2><ul><li>父子组件</li><li>同级组件</li><li>跨域组件</li></ul><h3 id="1、父子通讯："><a href="#1、父子通讯：" class="headerlink" title="1、父子通讯："></a>1、父子通讯：</h3><p>父组件向子组件 Child 传递参数：</p><ul><li>attr1 静态传参</li><li>arr2 动态传参</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">attr1</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">:attr2</span>=<span class="string">&quot;msg&quot;</span>&gt;</span>this is header<span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&quot;./child&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">name</span>: <span class="string">&#x27;Header&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">msg</span>:<span class="string">&quot;12323&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  Child</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>子组件：<br>子组件通过 props 来获得父组件传递的参数</p><ul><li>数组 简单</li><li>对象 完整</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这里是子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="attr">name</span>: <span class="string">&#x27;Child&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="comment">// props两种写法</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="comment">// props:[&quot;attr1&quot;,&quot;attr2&quot;],</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="attr">props</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="attr">attr1</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">type</span>:<span class="string">&quot;String|Number|Boolean|Null|Undefined|Array|Object|Function&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">default</span>:<span class="string">&quot;默认值&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">require</span>: <span class="literal">true</span>|<span class="literal">false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="子父通讯"><a href="#子父通讯" class="headerlink" title="子父通讯"></a>子父通讯</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">子： <span class="built_in">this</span>.$emit(<span class="string">&#x27;事件名&#x27;</span>,<span class="string">&quot;任意数据类型的值&quot;</span>)</span><br><span class="line">父：v-on:事件名=<span class="string">&quot;回掉函数&quot;</span></span><br></pre></td></tr></table></figure><p>父组件-子组件传递一个函数，子组件调用父组件传递过来的函数，传入参数，父组件传递的这个函数就可以通过回调形参，拿到子组件传递的参数</p><h3 id="跨级通讯"><a href="#跨级通讯" class="headerlink" title="跨级通讯"></a>跨级通讯</h3><ul><li>Vue v2.2 新增 provide/inject</li></ul><p>父组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">provide</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">key</span>:val,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ...</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;DialogFooot&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">inject</span>:[<span class="string">&quot;key1&quot;</span>,...],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>Vue v2.4 新增 $attrs</li></ul><p>想要使用$attrs 在父组件中不可以通过 props 去定义<br>祖先组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Parent</span> <span class="attr">:key1</span>=<span class="string">&quot;key1&quot;</span> <span class="attr">:key2</span>=<span class="string">&quot;key2&quot;</span> <span class="attr">...</span>&gt;</span><span class="tag">&lt;/<span class="name">Parent</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;Origine&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">key1</span>:val1,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">key2</span>:val2</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>父组件 - Parent：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    // 父组件可以通过$attrs获得祖先组件中的数据</span></span><br><span class="line"><span class="xml">    // 不需要通过props去接受</span></span><br><span class="line"><span class="xml">  &#123;&#123;$attrs&#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Child</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attr&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;Parent&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">inheritAttrs</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    // 子组件需要获得父组件的参数，父组件通过v-bind将$attr绑定</span></span><br><span class="line"><span class="xml">  &#123;&#123;$attrs&#125;&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;Child&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">inheritAttrs</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// js方式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.$attrs)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="EventHub-amp-EventBus"><a href="#EventHub-amp-EventBus" class="headerlink" title="EventHub &amp; EventBus"></a>EventHub &amp; EventBus</h3><p>由于 vue 原生支持发布、订阅模式，我们通过 new Vue() 创建新的实例。<br>utils/hub.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue();</span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">import</span> EventHub form <span class="string">&quot;@/utils/events&quot;</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.$eventHub = EventHub;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">组件内部：</span><br><span class="line">子：<span class="built_in">this</span>.$eventhub.emit(<span class="string">&#x27;eventname&#x27;</span>,callback);</span><br><span class="line">父：<span class="built_in">this</span>.$eventhub.$on(<span class="string">&#x27;event&#x27;</span>,callback)</span><br></pre></td></tr></table></figure><h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue组件通讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - 组件通信</title>
      <link href="/2020/06/02/ifls53/"/>
      <url>/2020/06/02/ifls53/</url>
      
        <content type="html"><![CDATA[<h2 id="通讯"><a href="#通讯" class="headerlink" title="通讯"></a>通讯</h2><ol><li><p>props<br>父组件给子组件添加属性 :fatherName=”name” 传值，子组件通过 props:[‘fatherName’] 接收； 子组件可以通过 this.$emit(‘changeFatherName’,’吴彦祖’) 向父组件发送事件和数据， 父组件通过 @changeFatherName=”changeFatherName” 监听事件和传递过来的数据</p></li><li><p>sync/update<br>v2.3 新增语法糖，会扩展成一个更新父组件绑定值的 v-on 侦听器；<br><son :fatherName.sync="name" ref="son"></son>子组件 update:propName 直接修改数据，父组件无需定义监听事件来接收数据 this.$emit(‘update:fatherName’, ‘吴彦祖’) 适合基本数据类型的传递和修改</p></li><li><p>provide/inject<br>父组件通过 provide:{fatherAge:30}传值，子组件通过 inject:[“fatherAge”]接收,provide 传递的数据， 不仅所有子组件都可以接收，所有后代组件均可以通过 inject 接收到</p></li><li><p>$attrs/$listeners<br>v2.4 新增<br>$attrs 包含了父作用域中不作为 prop 被识别 (且获取) 的属性绑定 (class 和 style 除外)。 例如，父组件传递了 fatherName,fatherAge,fatherJob 三个属性 而子组件只通过props接收了fatherName 属性 子组件会默认渲染成<div fatherage="30" fatherjob="engineer"></div>， inheritAttrs:false 可以阻止这种默认行为， 子组件可以通过 v-bind=”$attrs” 将这些属性传递给孙组件，相当于:fatherAge=”$attrs.fatherAge” :fatherJob=”$attrs.fatherJob”<br>$listeners 包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器，它可以通过 v-on=”$listeners” 传入内部组件 本例中子组件 可以用$listeners 将父组件的 changeFatherName 事件监听传递给孙组件，使孙组件可以跨级修改父组件 data</p></li><li><p>$children/$parent<br>父组件通过$children访问子组件属性和方法，子组件通过$parent 访问父组件属性和方法，this.$children[0].age=2 修改子组件数据，同理this.$parent.age=30 修改父组件数据</p></li><li><p>子组件直接修改 props/inject 传过来的值</p></li></ol><p>如果 props 是基本数据类型,子组件中的 prop 会变化，父组件中不会变化且控制台会报错<br>如果 props 是引用数据类型,父组件和子组件都会成功修改且不会报错(不建议这么做)</p><p>EventBus<br>eventBus 又称为事件总线，在 vue 中可以使用它来作为沟通桥梁的概念, 就像是所有组件共用相同的事件中心， 可以向该中心注册发送事件或接收事件， 所有组件都可以通知其他组件。 （维护困难，eventName 起名字困难，不易维护，不及时注销事件会产生各种问题，复杂项目中还是使用 Vuex）</p><p>localStorage/sessionStorage<br>本地存储，某些业务中使用较多，比如记住用户 tocken 系统设置等 window.localStorage.getItem(key) 获取数据，通过 window.localStorage.setItem(key,value) 存储数据; 注意：value 只能值字符串类型，需要用 JSON.parse() / JSON.stringify() 转换 sessionStorage 同理</p><h3 id="父向子通信"><a href="#父向子通信" class="headerlink" title="父向子通信"></a>父向子通信</h3><p>父组件通过自定义属性向子组件通信，而子组件需要通过在 props 中接收该自定义属性名来完成通信，根据属性值的不同又分为静态和动态传参（例:<Child mian="title"></Child>为静态传参，如果 mian 是通过 v-bind 来绑定的数据，则为动态传参）<br>父组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:mian</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&#x27;@/Child&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;Parent&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">title</span>:<span class="string">&#x27;我是父亲&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    Child</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  &#123;&#123;title&#125;&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;Child&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">props</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">title</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">type</span>:<span class="built_in">String</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="子向父通信"><a href="#子向父通信" class="headerlink" title="子向父通信"></a>子向父通信</h3><p>方案一：this.$emit(eventname,data)<br>父组件通过 v-on 来监听子组件，通过回调函数获取参数<br>子组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;val&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;Child&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">val</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$emit(<span class="string">&#x27;list&#x27;</span>,<span class="number">123</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>父组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">v-on:list</span>=<span class="string">&quot;add&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&#x27;@/Child&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;Parent&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">add</span>(<span class="params">data</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(data)<span class="comment">//123</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    Child</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>方案二：</p><p>父组件向子组件传递一个函数<br>子组件调用父组件的函数，并传入参数<br>父组件声明函数位置，就可以获得对应参数</p><p>父组件调用子组件函数</p><p>ref 获得子组件实例，调用函数即可<br>ref 获得子组件实例，通过实例派发一个事件发射器，子组件监听派发事件，触发函数</p><h3 id="同级组件通讯"><a href="#同级组件通讯" class="headerlink" title="同级组件通讯"></a>同级组件通讯</h3><ul><li>EventBus</li><li>EventHub</li></ul><h3 id="跨级组件通讯"><a href="#跨级组件通讯" class="headerlink" title="跨级组件通讯"></a>跨级组件通讯</h3><p>provoder inject<br>父组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    父组件</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&#x27;@/components/Child&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    Child,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">provide</span>(<span class="params"></span>)</span>&#123;    <span class="comment">//provide作为一个方法使用 ( 推荐使用 )。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="string">&#x27;userName&#x27;</span> : <span class="string">&#x27;zhangsan&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">  provide : &#123;  //provide也可以作为一个对象进行使用.</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">    &quot;userName&quot; : &#x27;zhangsan&#x27;,</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">  &#125;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">  */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  子组件</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// inject:[&#x27;userName&#x27;]     //inject后面用一个数组接收</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">inject</span>:&#123;                   <span class="comment">//inject后面可以是一个对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">userName</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">default</span>:<span class="string">&#x27;默认值&#x27;</span>  <span class="comment">//指定默认值</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>$attrs $listener</p><p>this.$attrs 使用方法：</p><p>父组件:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    我是父组件</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">a</span>=<span class="string">&#x27;a&#x27;</span> <span class="attr">:b</span>=<span class="string">&#x27;b&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&#x27;@/components/Child&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>:<span class="string">&#x27;Parent&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">b</span>:<span class="number">123</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  Child</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  我是子组件</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>:<span class="string">&#x27;Child&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.$attrs) <span class="comment">//返回值为对象，获取父组件上传的所有值  &#123;a:a,b:123&#125;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue组件通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - transition过渡动画</title>
      <link href="/2020/06/02/cn97xn/"/>
      <url>/2020/06/02/cn97xn/</url>
      
        <content type="html"><![CDATA[<h2 id="自定义过渡动画"><a href="#自定义过渡动画" class="headerlink" title="自定义过渡动画"></a>自定义过渡动画</h2><ul><li>enter-class</li><li>enter-active-class</li><li>leave-class</li><li>leave-active-class</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change&quot;</span>&gt;</span>dianwo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">transition</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">enter-class</span>=<span class="string">&quot;fade-enter&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">enter-active-class</span>=<span class="string">&quot;fade-enter-active&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">leave-class</span>=<span class="string">&quot;fade-leave&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">leave-active-class</span>=<span class="string">&quot;fade-leave-active&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">show</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">change</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.show = !<span class="built_in">this</span>.show</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.fade-enter,</span><br><span class="line">.fade-leave-active &#123;</span><br><span class="line">  <span class="attr">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">.fade-leave,</span><br><span class="line">.fade-enter-active &#123;</span><br><span class="line">  <span class="attr">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  transition: opacity 5s ease-<span class="keyword">in</span>;</span><br><span class="line">&#125;</span><br><span class="line"> &lt;style&gt;</span><br></pre></td></tr></table></figure><h2 id="自定义函数过渡动画"><a href="#自定义函数过渡动画" class="headerlink" title="自定义函数过渡动画"></a>自定义函数过渡动画</h2><h2 id="animate-css-动画"><a href="#animate-css-动画" class="headerlink" title="animate.css 动画"></a>animate.css 动画</h2><ul><li>下载 animate.css 动画库</li><li>全局引入</li><li>transition 调用</li></ul><p>由于 animate.css 升级，需要注意版本号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i --save-dev animate.css@<span class="number">4.1</span><span class="number">.1</span></span><br><span class="line">npm i --save-dev animate.css@<span class="number">3.7</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> animate <span class="keyword">from</span> <span class="string">&quot;animate.css&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(animate);</span><br></pre></td></tr></table></figure><p>本人目前使用<a href="mailto:&#97;&#x6e;&#x69;&#109;&#x61;&#x74;&#x65;&#x2e;&#99;&#115;&#x73;&#64;&#x34;&#46;&#x31;&#46;&#49;">&#97;&#x6e;&#x69;&#109;&#x61;&#x74;&#x65;&#x2e;&#99;&#115;&#x73;&#64;&#x34;&#46;&#x31;&#46;&#49;</a>，需要按照下面方法调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Layout</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change&quot;</span>&gt;</span>dianwo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 老版animate--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">transition</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">enter-active-class</span>=<span class="string">&quot;animated bounceInLeft&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">leave-active-class</span>=<span class="string">&quot;animated bounceOutRight&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="comment">&lt;!-- 新版animate--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">transition</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">enter-active-class</span>=<span class="string">&quot;animate__animated animate__bounceInLeft&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">leave-active-class</span>=<span class="string">&quot;animate__animated animate__bounceOutRight&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">&#x27;@/components/layout&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">show</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    Layout</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">change</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.show = !<span class="built_in">this</span>.show</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="keyword">@import</span> url(<span class="string">&#x27;./assets/css/reset.css&#x27;</span>);</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="keyword">@import</span> url(<span class="string">&#x27;./assets/css/common.css&#x27;</span>);</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="keyword">@import</span> url(<span class="string">&#x27;./assets/css/style.css&#x27;</span>);</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>由于 animate.css 演示效果时，我们复制的代码没有前缀，建议使用 animate4.x 以下版本<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1624258173299-9a6e516a-e591-4295-adf7-77538fdccba3.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=uKPRu&originHeight=674&originWidth=1073&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue过渡动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - key值的作用</title>
      <link href="/2020/06/01/uw9u4m/"/>
      <url>/2020/06/01/uw9u4m/</url>
      
        <content type="html"><![CDATA[<p><strong>key 的作用是为了在 diff 算法执行时更快的找到对应的节点，提高 diff 速度</strong><br>​</p><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1608212957127-995e32ad-08f3-4691-893d-edb4e33a34b5.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=cXbni&originHeight=395&originWidth=703&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>​</p><ul><li>vue 的 key 的值加的区别</li></ul><p>vue 中循环需加 :key=“唯一标识” ，唯一标识可以使 item 里面 id index 等，因为 vue 组件高度复用增加 key 可以标识组件的唯一性，为了更好地区别各个组件 key 的作用主要是为了高效的更新虚拟 DOM</p><ul><li>不加的 key 的值得区别</li></ul><p>不带有 key，并且使用简单的模板，基于这个前提下，可以更有效的复用节点，diff 速度来看也是不带 key 更加快速的，因为带 key 在增删节点上有耗时。这就是 vue 文档所说的默认模式。但是这个并不是 key 作用，而是没有 key 的情况下可以对节点就地复用，提高性能。这种模式会带来一些隐藏的副作用，比如可能不会产生过渡效果，或者在某些节点有绑定数据（表单）状态，会出现状态错位。VUE 文档也说明了。还有就是 key 的作用是为了在 diff 算法执行时更快的找到对应的节点，提高 diff 速度<br><strong>总结</strong><br>key 的作用主要是为了高效率的更新虚拟 DOM。另外 vue 中在使用相同标签名元素的过渡切换时，也会使用到 key 属性，其目的也是为了让 vue 可以区分它们，否则 vue 只会替换其内部属性而不会触发过渡效果。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vuekey值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - 组件传参</title>
      <link href="/2020/06/01/lkrn1f/"/>
      <url>/2020/06/01/lkrn1f/</url>
      
        <content type="html"><![CDATA[<h3 id="父子传参"><a href="#父子传参" class="headerlink" title="父子传参"></a>父子传参</h3><p>父组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;parent&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        父组件</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Child</span> <span class="attr">msg</span>=<span class="string">&#x27;msg&#x27;</span> <span class="attr">:data</span>=<span class="string">&#x27;data&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&#x27;./Child&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">name</span>:<span class="string">&quot;parent&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">data</span>:<span class="number">123</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;child&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    子组件</span></span><br><span class="line"><span class="xml">        &#123;&#123;data&#125;&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&#x27;./Child&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">name</span>:<span class="string">&quot;child&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">props</span>:[</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        data:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">type</span>:<span class="built_in">String</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">msg</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">type</span>:<span class="built_in">String</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  ]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">data</span>:<span class="number">123</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    Child</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>​</p><h3 id="子父传参"><a href="#子父传参" class="headerlink" title="子父传参"></a>子父传参</h3><p>​</p><p>父组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        父组件</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:btnClick</span>=<span class="string">&#x27;btnClick&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&quot;./Chile.vue&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;parent&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">btnClick</span>(<span class="params">msg</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(msg);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    Child</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>​</p><p>子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;con&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;clickBtn&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">name</span>:<span class="string">&quot;child&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">props</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">btnClick</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">type</span>:<span class="built_in">Function</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">con</span>:<span class="string">&#x27;1111s&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="title">clickBtn</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// this.$emit(&#x27;btnClick&#x27;,this.con)</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.btnClick(<span class="built_in">this</span>.con)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>· $emit 、v-on<br>·       父组件中 通过v-on监听子组件的事件，通过回调函数获得参数<br>·       子组件调用事件，this.$emit(‘父组件传的事件名称’,需要的参数)<br>·<br>· 父组件向组件，传递一个函数<br>· 子组件调用父组件的函数，并传入参数<br>· 父组件在声明函数的位置，就可以获得对应的参数</p><h3 id="父组件调用子组件方法"><a href="#父组件调用子组件方法" class="headerlink" title="父组件调用子组件方法"></a>父组件调用子组件方法</h3><p>父组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- father.vue --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;click&quot;</span>&gt;</span>点击父组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">ref</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&quot;./child&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="function"><span class="title">click</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.$refs.child.$emit(<span class="string">&#x27;childMethod&#x27;</span>,<span class="string">&#x27;发送给方法一的数据&#x27;</span>) <span class="comment">// 方法1:触发监听事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.$refs.child.callMethod() <span class="comment">// 方法2:直接调用</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            child,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- child.vue --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.monitoring() <span class="comment">// 注册监听事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="function"><span class="title">monitoring</span>(<span class="params"></span>)</span> &#123; <span class="comment">// 监听事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.$on(<span class="string">&#x27;childMethod&#x27;</span>, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="built_in">console</span>.log(<span class="string">&#x27;方法1:触发监听事件监听成功&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="built_in">console</span>.log(res)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="function"><span class="title">callMethod</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(<span class="string">&#x27;方法2:直接调用调用成功&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>同级组件通讯</strong><br>全局匹配 Eventbus<br>Vue.prototype.$bus = new Vue();<br>父组件<br>引入兄弟组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- 测试组件传参页面 --&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;send&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        send页面</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Parent</span>&gt;</span><span class="tag">&lt;/<span class="name">Parent</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Brother</span>&gt;</span><span class="tag">&lt;/<span class="name">Brother</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Parent <span class="keyword">from</span> <span class="string">&quot;@/components/Paternity/Parent&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Brother <span class="keyword">from</span> <span class="string">&quot;@/components/Brother/Brother.vue&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;Send&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      Parent,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      Brother</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>子组件<br>$bus.$emit 发送信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;brother&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;brother&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$bus.$emit(<span class="string">&quot;my&quot;</span>, <span class="string">&quot;我是Grandson1&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>子组件二<br>$bus.$on 监听事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Brother <span class="keyword">from</span> <span class="string">&quot;../Brother/Brother.vue&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">this</span>.$bus.$on(<span class="string">&quot;my&quot;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(data);  <span class="comment">//我是Grandson1</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>· EventBus vue 实例<br><strong>跨级组件通讯</strong><br>​</p><p>爷爷组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;send&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        send页面</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Parent</span> <span class="attr">:name</span>=<span class="string">&#x27;name&#x27;</span> @<span class="attr">click</span>=<span class="string">&#x27;clickEv&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">Parent</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Parent <span class="keyword">from</span> <span class="string">&quot;@/components/Paternity/Parent&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">name</span>:<span class="string">&quot;Send&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">name</span>:<span class="string">&#x27;zyn&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="title">clickEv</span>(<span class="params">msg</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(msg)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        Parent</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>父组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        父组件</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Child</span> <span class="attr">v-bind</span>=<span class="string">&#x27;$attrs&#x27;</span> <span class="attr">v-on</span>=<span class="string">&#x27;$listeners&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&quot;./Chile.vue&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;parent&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>:</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    Child</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;&#123;$attrs.name&#125;&#125; //zyn</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">&#x27;&#x27;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">name</span>:<span class="string">&quot;child&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">con</span>:<span class="string">&#x27;1111s&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         <span class="built_in">this</span>.$emit(<span class="string">&#x27;click&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>· $attrs、$listeners<br>· $atters 接收参数<br>· $listeners 接收事件<br>· provide inject<br>· provide 是一个对象，或者是一个返回对象的函数。里面呢就包含要给子孙后代的东西，也就是属性和属性值<br>· inject 一个字符串数组，或者是一个对象。属性值可以是一个对象，包含 from 和 default 默认值。<br>​</p><p>爷爷组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;send&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        send页面</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Parent</span>&gt;</span><span class="tag">&lt;/<span class="name">Parent</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Parent <span class="keyword">from</span> <span class="string">&quot;@/components/Paternity/Parent&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;Send&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">msg</span>: <span class="string">&quot;A&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">provide</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">message</span>: <span class="built_in">this</span>.msg</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      Parent</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>父组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    父组件</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Child</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&quot;./Chile.vue&quot;</span>; <span class="comment">//注意引入</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;parent&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>: &#123; Child &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">inject</span>: [<span class="string">&quot;message&quot;</span>], <span class="comment">//接收父组件的值</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        子组件</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">name</span>:<span class="string">&quot;child&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">inject</span>: [<span class="string">&quot;message&quot;</span>], <span class="comment">//接收爷爷组件的值</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.message); <span class="comment">// A</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue组件传参 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - 添加水印</title>
      <link href="/2020/05/28/hcp9at/"/>
      <url>/2020/05/28/hcp9at/</url>
      
        <content type="html"><![CDATA[<p>创建 watermark.js 文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> watermark = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> setWatermark = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> id = <span class="string">&quot;1.23452384164.123412415&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(id) !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(<span class="built_in">document</span>.getElementById(id));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> can = <span class="built_in">document</span>.createElement(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">  can.width = <span class="number">150</span>;</span><br><span class="line">  can.height = <span class="number">120</span>;</span><br><span class="line">  <span class="keyword">let</span> cans = can.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">  cans.rotate((-<span class="number">20</span> * <span class="built_in">Math</span>.PI) / <span class="number">180</span>);</span><br><span class="line">  cans.font = <span class="string">&quot;20px Vedana&quot;</span>;</span><br><span class="line">  cans.fillStyle = <span class="string">&quot;rgba(200, 200, 200, 0.20)&quot;</span>;</span><br><span class="line">  cans.textAlign = <span class="string">&quot;left&quot;</span>;</span><br><span class="line">  cans.textBaseline = <span class="string">&quot;Middle&quot;</span>;</span><br><span class="line">  cans.fillText(str, can.width / <span class="number">3</span>, can.height / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  div.id = id;</span><br><span class="line">  div.style.pointerEvents = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">  div.style.top = <span class="string">&quot;0px&quot;</span>;</span><br><span class="line">  div.style.left = <span class="string">&quot;0px&quot;</span>;</span><br><span class="line">  div.style.position = <span class="string">&quot;fixed&quot;</span>;</span><br><span class="line">  div.style.zIndex = <span class="string">&quot;100000&quot;</span>;</span><br><span class="line">  div.style.width = <span class="built_in">document</span>.documentElement.clientWidth + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">  div.style.height = <span class="built_in">document</span>.documentElement.clientHeight + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">  div.style.background =</span><br><span class="line">    <span class="string">&quot;url(&quot;</span> + can.toDataURL(<span class="string">&quot;image/png&quot;</span>) + <span class="string">&quot;) left top repeat&quot;</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">  <span class="keyword">return</span> id;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 该方法只允许调用一次</span></span><br><span class="line">watermark.set = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> id = setWatermark(str);</span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(id) === <span class="literal">null</span>) &#123;</span><br><span class="line">      id = setWatermark(str);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">500</span>);</span><br><span class="line">  <span class="built_in">window</span>.onresize = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setWatermark(str);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> watermark;</span><br></pre></td></tr></table></figure><p>在 app.vue 中 mounted 方法内调用该方法即可全局添加如个别页面需要单独添加可在单个文件的 mounted 生命周期里调用方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    Watermark.set(<span class="string">&quot;水印内容&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue添加水印 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - 行内样式设置</title>
      <link href="/2020/05/23/qshb5e/"/>
      <url>/2020/05/23/qshb5e/</url>
      
        <content type="html"><![CDATA[<p>1.直接在元素上通过:style 的形式，书写样式对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :style=<span class="string">&quot;&#123;color:&#x27;red&#x27;,&#x27;font-weight&#x27;:200&#125;&quot;</span>&gt;这是一个H1&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>2.将样式对象定义在 data 中，并直接引用到:style 中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj1&quot;</span>&gt;</span>这是一个H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">styleObj1</span>: &#123;<span class="attr">color</span>:<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;font-weight&#x27;</span>:<span class="number">200</span>,<span class="string">&#x27;font-size&#x27;</span>:<span class="string">&#x27;40px&#x27;</span>&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>3.在:style 中通过数组，引用多个 data 上的样式对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">&quot;[styleObj1,styleObj2]&quot;</span>&gt;</span>这是一个H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">styleObj1</span>: &#123;<span class="attr">color</span>:<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;font-weight&#x27;</span>:<span class="number">200</span>,<span class="string">&#x27;font-size&#x27;</span>:<span class="string">&#x27;40px&#x27;</span>&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">styleObj2</span>: &#123;<span class="string">&#x27;font-style&#x27;</span>:<span class="string">&#x27;italic&#x27;</span>&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue行内样式设置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React - 高阶组件</title>
      <link href="/2020/05/22/krok20/"/>
      <url>/2020/05/22/krok20/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是高阶组件"><a href="#什么是高阶组件" class="headerlink" title="什么是高阶组件"></a>什么是高阶组件</h3><ul><li>本身就是一个函数，接收一个组件没返回一个组件</li><li>重用代码，有很多时候组件需要用到同样的一个逻辑，为了提升性能和优化代码，我们可以把这份逻辑提出来，封装成为高阶组件</li><li>不想触碰这些组件内部逻辑，这时候可以使用高阶组件，一个独立于原有组件的函数，可以产生新的组件</li><li>高阶组件实现方式可以分两大类</li></ul><p>-代理方式的高阶组件 -继承方式的高阶组件</p><ul><li>只继承</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Color</span>(<span class="params">Component: any</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &quot;<span class="attr">red</span>&quot;, <span class="attr">fontSize:</span> &quot;<span class="attr">20px</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Component</span> <span class="attr">num</span>=<span class="string">&#123;0&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Color;</span><br></pre></td></tr></table></figure><ul><li>代理</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Color</span>(<span class="params">obj: any</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.add !== <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">Component: any</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">Ss</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">                <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> (</span><br><span class="line">                        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>404<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">                    );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Ss</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">Component: any</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">ColorS</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">                <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> (</span><br><span class="line">                        <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27;, <span class="attr">fontSize:</span> &#x27;<span class="attr">20px</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Component</span> <span class="attr">num</span>=<span class="string">&#123;0&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">                    );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ColorS</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Color</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">使用  Color(处理参数)(component)</span><br></pre></td></tr></table></figure><h3 id="怎么在高阶组件获取-ref"><a href="#怎么在高阶组件获取-ref" class="headerlink" title="怎么在高阶组件获取 ref"></a>怎么在高阶组件获取 ref</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">父组件</span><br><span class="line"> &lt;Ee getRef=&#123;<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(e)</span><br><span class="line"> &#125;&#125; /&gt;</span><br><span class="line"></span><br><span class="line">高阶组件</span><br><span class="line"> &lt;Component num=&#123;<span class="number">0</span>&#125; &#123;...this.props&#125; /&gt;</span><br><span class="line">把props传给子组件</span><br><span class="line"></span><br><span class="line">使用高阶的组件</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props: any</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line">        props.getRef(<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">babel-plugin-transform-decorators-legacy</span><br><span class="line">@babel/plugin-proposal-decorators</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React-组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - 生命周期</title>
      <link href="/2020/05/18/tkang4/"/>
      <url>/2020/05/18/tkang4/</url>
      
        <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><ul><li><ol><li>beforeCreate 实例组件刚创建，元素和 DOM 数据、事件还都没有初始化</li></ol></li><li><ol start="2"><li>created 数据 data 已经初始化完成，方法已经可以调用，但是 DOM 未渲染，一般可以进行 axjx 请求</li></ol></li><li><ol start="3"><li>beforeMount vue template 完成解析 尚未挂载到 el 节点</li></ol></li><li><ol start="4"><li>mounted 将解析好的模板挂载到 el 元素 (相当于原生时间的 DOMContentLoaded)</li></ol></li><li><ol start="5"><li>beforeUpdate 只要页面数据改变了都会触发，数据更新之前，页面数据还是原来的数据，当你请求赋值一个数据的时候会执行这个周期，数据没有改变不执行</li></ol></li><li>6 . updated 知道是页面数据改变了都会触发，数据更新完毕，页面的数据是更新完成的，beforeUpdate 和 updated 要谨慎使用，因为页面数据更新都会触发，容易影响性能和死循环</li><li><ol start="7"><li>beforeDestroy 这个周期是在组件销毁之前执行，清除残存数据，比如：计时器 公共变量</li></ol></li><li><ol start="8"><li>Destoryed 和 beforeDestroy 一样</li></ol></li><li><ol start="9"><li> activated 缓存组件激活时调用</li></ol></li><li>10.deactivated 缓存组件停用的调用</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue生命周期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React - 高阶组件路由拦截</title>
      <link href="/2020/05/17/alk1x4/"/>
      <url>/2020/05/17/alk1x4/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Redirect &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getCookie &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ROUTER_WHITELIST &#125; <span class="keyword">from</span> <span class="string">&quot;@/config/except&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hocInterceptor = <span class="function"><span class="keyword">function</span> (<span class="params">WraperComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">componentName</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 查找当前路由在路由白名单中是否存在</span></span><br><span class="line">      <span class="keyword">const</span> inWhiteList = ROUTER_WHITELIST.find(</span><br><span class="line">        <span class="function">(<span class="params">router</span>) =&gt;</span> router === <span class="built_in">this</span>.props.location.pathname</span><br><span class="line">      );</span><br><span class="line">      <span class="comment">// 缓存中是否有登陆态</span></span><br><span class="line">      <span class="keyword">const</span> hasToken = getCookie(<span class="string">&quot;token&quot;</span>) === <span class="literal">null</span> ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 判断不在白名单也没有登陆台，跳转到登陆页面</span></span><br><span class="line">      <span class="keyword">return</span> !inWhiteList &amp;&amp; hasToken ? (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">WraperComponent</span>&gt;</span><span class="tag">&lt;/<span class="name">WraperComponent</span>&gt;</span></span></span><br><span class="line">      ) : (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Redirect</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">from</span>=<span class="string">&#123;this.props.location.pathname&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">to</span>=<span class="string">&quot;/user/login&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        &gt;</span><span class="tag">&lt;/<span class="name">Redirect</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> hocInterceptor;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React-组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - 起步</title>
      <link href="/2020/05/11/gllgl4/"/>
      <url>/2020/05/11/gllgl4/</url>
      
        <content type="html"><![CDATA[<h2 id="创建脚手架"><a href="#创建脚手架" class="headerlink" title="创建脚手架"></a>创建脚手架</h2><ul><li>vue-cli 第二代已经停止维护</li><li>@vue-cli 第三代脚手架、支持 vue3.x 及 typescript 等</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -g vue-cli</span><br><span class="line">npm i -g @vue/cli</span><br></pre></td></tr></table></figure><h2 id="vue-不同版本文件介绍"><a href="#vue-不同版本文件介绍" class="headerlink" title="vue 不同版本文件介绍"></a>vue 不同版本文件介绍</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vue.runtime.js ：生产的运行时，需要预编译，比完整版小<span class="number">30</span>%左右，前端性能最优</span><br><span class="line">vue.runtime.esm.js：生产运行时，esm标准。</span><br><span class="line">vue.esm.js：开发运行时，esm标准。</span><br><span class="line">vue.runtime.common.js:生产运行时，commonJS标准。</span><br></pre></td></tr></table></figure><ul><li>vue.min.js</li><li>vue.esm.browser..js</li><li>vue.esm.js</li><li>vue.runtime.esm.js</li></ul><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>render 渲染组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;@/router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> h(App),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>component 渲染组件 ( template 解析需要通过 vue.esm.js 支持)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="attr">vue$</span>: <span class="string">&quot;vue/dist/vue.esm.js&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;@/router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;App/&gt;`</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    App,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Vue-实例属性"><a href="#Vue-实例属性" class="headerlink" title="Vue 实例属性"></a>Vue 实例属性</h2><ul><li>el 挂载元素</li><li>render 接受一个 vue 组件，将其替换到 el 挂载元素</li><li>computed 计算属性</li></ul><p>-1. 不能用异步<br>-2. 不能改变 data 的值</p><ul><li>data 组件的内部状态</li><li>methods 事件属性</li><li>components 注册组件</li><li>watch 数据监听</li><li>生命周期钩子函数</li></ul><h3 id="Vue-实例对象"><a href="#Vue-实例对象" class="headerlink" title="Vue 实例对象"></a>Vue 实例对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue();</span><br><span class="line"><span class="comment">// 相当于el挂载元素, $mount为手动挂载</span></span><br><span class="line">vm.$mount;</span><br><span class="line"><span class="comment">// 手动设置对象的双向绑定</span></span><br><span class="line"><span class="built_in">console</span>.log(vm.set);</span><br><span class="line"><span class="comment">// 获得vue实例的挂载元素</span></span><br><span class="line"><span class="built_in">console</span>.log(vm.el);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="built_in">console</span>.log(vm.data);</span><br></pre></td></tr></table></figure><h3 id="Vue-组件内部获得实例的属性、方法"><a href="#Vue-组件内部获得实例的属性、方法" class="headerlink" title="Vue 组件内部获得实例的属性、方法"></a>Vue 组件内部获得实例的属性、方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      this is home page</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">name</span>:<span class="string">&quot;home&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$set();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$el();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$data</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$forceUpdate()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  <span class="attr">num1</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">num2</span>:<span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">  <span class="comment">// 监听实例中属性的值的变化，动态实时去计算（看起来是方法，用起来像data属性，必须有返回值）</span></span><br><span class="line">  <span class="comment">// 相当 watch的变形</span></span><br><span class="line"><span class="function"><span class="title">summary</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.num1+<span class="built_in">this</span>.num2;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 计算属性是只读属性，如果想修改，可以通过get、set访问器来实现</span></span><br><span class="line">  <span class="attr">total</span>:&#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">// 必须返回一些值</span></span><br><span class="line">    <span class="keyword">return</span> somevalue</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">newVal</span>)</span>&#123;</span><br><span class="line">      <span class="comment">// 接受新值</span></span><br><span class="line">    someValue = newVal;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有些时候计算属性的依赖参数，不能通过组件内部来获取时，我们可以通过 methods 的传参，替代 computed</p><h3 id="watch-监听"><a href="#watch-监听" class="headerlink" title="watch 监听"></a>watch 监听</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监视是否是404页面然后将不需要的取消展示</span></span><br><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">  <span class="attr">n</span>:&#123;</span><br><span class="line">    $route(newVal,oldVal)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;，</span><br><span class="line">    deep：<span class="literal">true</span> ，深度监控</span><br><span class="line">    <span class="attr">immediate</span>:<span class="literal">true</span> <span class="comment">//立即监控</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue起步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows 卸载软件</title>
      <link href="/2020/05/10/dn00gi/"/>
      <url>/2020/05/10/dn00gi/</url>
      
        <content type="html"><![CDATA[<h2 id="控制面板卸载"><a href="#控制面板卸载" class="headerlink" title="控制面板卸载"></a>控制面板卸载</h2><p>win+r 回车打开运行，输入 contorl 回车<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/dc2e4210-2773-45a0-b00f-87fd8169be4e.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=mHzFX&originHeight=237&originWidth=413&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>控制面板右上角渲染“类别”点击程序模块下的<strong>卸载程序</strong><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/01b7095d-4815-4f03-a4ab-5d3b65b71f8c.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=mfNJ0&originHeight=726&originWidth=1159&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>选择想要卸载的软件，右键卸载即可<br>有些软件可能需要解除占用，关闭相关软件、服务，重启电脑按照步骤一重试<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/3771ed9f-fda3-41f4-9f09-d7154a08734e.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=nIPea&originHeight=726&originWidth=1159&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改ip地址&amp;DNS</title>
      <link href="/2020/05/10/kfglvt/"/>
      <url>/2020/05/10/kfglvt/</url>
      
        <content type="html"><![CDATA[<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ul><li>win+r 输入 control (打开控制面板)</li><li>依次打开 控制面板 - 网络和 Internet - 网络和共享中心</li><li>找到左侧的更改适配器设置</li><li>选择点亮的 “以太网” -属性 - 选择 TCP/IPV4</li></ul><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/0bceffcd-7dad-46f0-b336-17ba6b744a6c.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=sQEhy&originHeight=934&originWidth=1169&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 改IP </tag>
            
            <tag> 改DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改host文件</title>
      <link href="/2020/05/10/tp4y28/"/>
      <url>/2020/05/10/tp4y28/</url>
      
        <content type="html"><![CDATA[<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li>打开命令行工具 win+R</li><li>输入 drivers</li><li>打开 etc 目录</li><li>复制 host 文件到桌面，并修改</li><li>将修改好的 host，替换 drivers/etc/host</li></ol><p>tips：host 文件不可以直接更改需要通过替换方式来覆盖 host 文件。</p><h2 id="github-访问缓慢"><a href="#github-访问缓慢" class="headerlink" title="github 访问缓慢"></a>github 访问缓慢</h2><ul><li>修改 host 文件</li><li>复制下面全部内部，修改 host 文件（如果公司有特定的 host 配置，需要自行添加）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"># Copyright (c) <span class="number">1993</span>-<span class="number">2009</span> Microsoft Corp.</span><br><span class="line">#</span><br><span class="line"># This is a sample HOSTS file used by Microsoft TCP/IP <span class="keyword">for</span> Windows.</span><br><span class="line">#</span><br><span class="line"># This file contains the mappings <span class="keyword">of</span> IP addresses to host names. Each</span><br><span class="line"># entry should be kept on an individual line. The IP address should</span><br><span class="line"># be placed <span class="keyword">in</span> the first column followed by the corresponding host name.</span><br><span class="line"># The IP address and the host name should be separated by at least one</span><br><span class="line"># space.</span><br><span class="line">#</span><br><span class="line"># Additionally, comments (such <span class="keyword">as</span> these) may be inserted on individual</span><br><span class="line"># lines or following the machine name denoted by a <span class="string">&#x27;#&#x27;</span> symbol.</span><br><span class="line">#</span><br><span class="line"># For example:</span><br><span class="line">#</span><br><span class="line">#      <span class="number">102.54</span><span class="number">.94</span><span class="number">.97</span>     rhino.acme.com          # source server</span><br><span class="line">#       <span class="number">38.25</span><span class="number">.63</span><span class="number">.10</span>     x.acme.com              # x client host</span><br><span class="line"></span><br><span class="line"># localhost name resolution is handled within DNS itself.</span><br><span class="line">#<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>       localhost</span><br><span class="line">#::<span class="number">1</span>             localhost</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Github Hosts</span><br><span class="line"># Update <span class="number">20210707</span></span><br><span class="line"># domain: github.com</span><br><span class="line"><span class="number">140.82</span><span class="number">.113</span><span class="number">.4</span> github.com</span><br><span class="line"><span class="number">140.82</span><span class="number">.113</span><span class="number">.9</span> nodeload.github.com</span><br><span class="line"><span class="number">140.82</span><span class="number">.114</span><span class="number">.5</span> api.github.com</span><br><span class="line"><span class="number">140.82</span><span class="number">.113</span><span class="number">.9</span> codeload.github.com</span><br><span class="line"><span class="number">185.199</span><span class="number">.108</span><span class="number">.133</span> raw.github.com</span><br><span class="line"><span class="number">185.199</span><span class="number">.108</span><span class="number">.153</span> training.github.com</span><br><span class="line"><span class="number">185.199</span><span class="number">.108</span><span class="number">.153</span> assets-cdn.github.com</span><br><span class="line"><span class="number">185.199</span><span class="number">.108</span><span class="number">.153</span> documentcloud.github.com</span><br><span class="line"><span class="number">185.199</span><span class="number">.108</span><span class="number">.154</span> help.github.com</span><br><span class="line"></span><br><span class="line"># domain: githubstatus.com</span><br><span class="line"><span class="number">185.199</span><span class="number">.108</span><span class="number">.153</span> githubstatus.com</span><br><span class="line"></span><br><span class="line"># domain: fastly.net</span><br><span class="line"><span class="number">199.232</span><span class="number">.69</span><span class="number">.194</span> github.global.ssl.fastly.net</span><br><span class="line"></span><br><span class="line"># domain: githubusercontent.com</span><br><span class="line"><span class="number">185.199</span><span class="number">.108</span><span class="number">.133</span> raw.githubusercontent.com</span><br><span class="line"><span class="number">185.199</span><span class="number">.108</span><span class="number">.133</span> cloud.githubusercontent.com</span><br><span class="line"><span class="number">185.199</span><span class="number">.108</span><span class="number">.133</span> gist.githubusercontent.com</span><br><span class="line"><span class="number">185.199</span><span class="number">.108</span><span class="number">.133</span> marketplace-screenshots.githubusercontent.com</span><br><span class="line"><span class="number">185.199</span><span class="number">.108</span><span class="number">.133</span> repository-images.githubusercontent.com</span><br><span class="line"><span class="number">185.199</span><span class="number">.108</span><span class="number">.133</span> user-images.githubusercontent.com</span><br><span class="line"><span class="number">185.199</span><span class="number">.108</span><span class="number">.133</span> desktop.githubusercontent.com</span><br><span class="line"><span class="number">185.199</span><span class="number">.108</span><span class="number">.133</span> avatars.githubusercontent.com</span><br><span class="line"><span class="number">185.199</span><span class="number">.108</span><span class="number">.133</span> avatars0.githubusercontent.com</span><br><span class="line"><span class="number">185.199</span><span class="number">.108</span><span class="number">.133</span> avatars1.githubusercontent.com</span><br><span class="line"><span class="number">185.199</span><span class="number">.108</span><span class="number">.133</span> avatars2.githubusercontent.com</span><br><span class="line"><span class="number">185.199</span><span class="number">.108</span><span class="number">.133</span> avatars3.githubusercontent.com</span><br><span class="line"><span class="number">185.199</span><span class="number">.108</span><span class="number">.133</span> avatars4.githubusercontent.com</span><br><span class="line"><span class="number">185.199</span><span class="number">.108</span><span class="number">.133</span> avatars5.githubusercontent.com</span><br><span class="line"><span class="number">185.199</span><span class="number">.108</span><span class="number">.133</span> avatars6.githubusercontent.com</span><br><span class="line"><span class="number">185.199</span><span class="number">.108</span><span class="number">.133</span> avatars7.githubusercontent.com</span><br><span class="line"><span class="number">185.199</span><span class="number">.108</span><span class="number">.133</span> avatars8.githubusercontent.com</span><br><span class="line"># End <span class="keyword">of</span> the section</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> host </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微机组装与维护</title>
      <link href="/2020/05/10/lbuh21/"/>
      <url>/2020/05/10/lbuh21/</url>
      
        <content type="html"><![CDATA[<h2 id="操作系统的类型"><a href="#操作系统的类型" class="headerlink" title="操作系统的类型"></a>操作系统的类型</h2><ul><li>windows</li><li>os</li><li>linux</li></ul><h2 id="windows-如何安装操作系统"><a href="#windows-如何安装操作系统" class="headerlink" title="windows 如何安装操作系统"></a>windows 如何安装操作系统</h2><h2 id="os-如何安装操作系统"><a href="#os-如何安装操作系统" class="headerlink" title="os 如何安装操作系统"></a>os 如何安装操作系统</h2>]]></content>
      
      
      <categories>
          
          <category> 常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微机组装 </tag>
            
            <tag> 微机维护 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>兼容</title>
      <link href="/2020/05/10/za92aa/"/>
      <url>/2020/05/10/za92aa/</url>
      
        <content type="html"><![CDATA[<p>目前浏览器分为三大厂商</p><ul><li>微软<ul><li>trident - ie 浏览器<ul><li>ie5 ～ ie11</li><li>edge</li></ul></li><li>webkit- chrome edge</li></ul></li><li>谷歌 webkit - chrome 浏览器</li><li>火狐 gecko - firfox moz</li><li>欧朋</li></ul><h3 id="常见兼容"><a href="#常见兼容" class="headerlink" title="常见兼容"></a>常见兼容</h3><ul><li>阻止冒泡</li><li>阻止默认行为</li></ul><p>function fun(e){ e.stopporgation(); e.cancleBubble= true; e.preventDefault(); e.returnvalue = false; }</p>]]></content>
      
      
      <categories>
          
          <category> 常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 兼容 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机常用单位</title>
      <link href="/2020/05/10/ogchyg/"/>
      <url>/2020/05/10/ogchyg/</url>
      
        <content type="html"><![CDATA[<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>b byte 字节</li><li>kb</li><li>m</li><li>g</li><li>tb</li></ul><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/091189eb-bfa8-4420-b6f0-230b72ce6cea.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=wWhEB&originHeight=680&originWidth=1169&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单位 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网常见名词</title>
      <link href="/2020/05/10/uwxnmu/"/>
      <url>/2020/05/10/uwxnmu/</url>
      
        <content type="html"><![CDATA[<p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/ec83e569-67bf-43da-b6d0-f2daf299224a.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=QJ4zk&originHeight=5040&originWidth=3658&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h2 id="网"><a href="#网" class="headerlink" title="网"></a>网</h2><h3 id="万维网"><a href="#万维网" class="headerlink" title="万维网"></a>万维网</h3><ul><li>什么是万维网 万维网 WWW 是 World Wide Web 的简称</li></ul><h3 id="因特网"><a href="#因特网" class="headerlink" title="因特网"></a>因特网</h3><ul><li>是什么 internet 网 因特网（Internet）是一组全球信息资源的总汇</li></ul><h3 id="互联网"><a href="#互联网" class="headerlink" title="互联网"></a>互联网</h3><ul><li>什么是互联网 互联网（internet），又称国际网络，指的是网络与网络之间所串连成的庞大网络，这些网络以一组通用的协议相连，形成逻辑上的单一巨大国际网络。</li><li>因特网和互联网的关系 没有多大的区别,因特网是互联网中的一种。</li></ul><h2 id="windows-软件类型"><a href="#windows-软件类型" class="headerlink" title="windows 软件类型"></a>windows 软件类型</h2><ul><li>-智能安装</li><li>• exe exe 是一个安装引导程序。主要是用于检查安装的环境，当检查成功后，会自动再安装 msi 文件</li><li>• msi 直接安装</li><li>-绿色安装</li></ul><h2 id="常见服务端框架设计模式"><a href="#常见服务端框架设计模式" class="headerlink" title="常见服务端框架设计模式"></a>常见服务端框架设计模式</h2><ul><li>ASP.NET 三层架构</li><li>Spring</li><li>MVC</li><li>Egg &amp; Koa</li></ul><h2 id="常见前端框架设计模式"><a href="#常见前端框架设计模式" class="headerlink" title="常见前端框架设计模式"></a>常见前端框架设计模式</h2><ul><li>mvvm(vue、react、angularjs)</li><li>mvc<ul><li>module 模型层</li><li>view 视图层 表示层 ui 层</li><li>controller 控制器</li></ul></li></ul><h3 id="编程思想"><a href="#编程思想" class="headerlink" title="编程思想"></a>编程思想</h3><h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><ul><li>面向对象(Object Oriented)是软件开发方法。面向对象的概念和应用已超越了程序设计和软件开发，扩展到如数据库系统、交互式界面、应用结构、应用平台、分布式系统、网络管理结构、CAD 技术、人工智能等领域。面向对象是一种对现实世界理解和抽象的方法，是计算机编程技术发展到一定阶段后的产物。</li></ul><h4 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h4><ul><li>“面向过程”(Procedure Oriented)是一种以过程为中心的编程思想。这些都是以什么正在发生为主要目标进行 编程，不同于面向对象的是谁在受影响。与面向对象明显的不同就是封装、继承、类。</li></ul><h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><ul><li>URL</li><li>URI</li></ul><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><ul><li>协议+域名+端口号 <a href="http://localhost:3000/">http://localhost:3000</a></li><li>ip 地址 127.0.0.1</li><li>supervisor 无限重启 先走所有的中间件 在走路由</li><li>sc delete 文件夹名称 删除系统服务</li><li>services.msc 启动本地服务</li></ul><h3 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h3><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>web api 接口</li><li>interface</li></ul><h2 id="后台管理系统分类"><a href="#后台管理系统分类" class="headerlink" title="后台管理系统分类"></a>后台管理系统分类</h2><ul><li>CMS(内容管理)</li><li>CRM(客户关系管理)</li><li>OA(办公软件自动化）</li><li>SASS 平台</li><li>RBAC 主体对客体进行了什么样的操作</li></ul><h2 id="应用分类"><a href="#应用分类" class="headerlink" title="应用分类"></a>应用分类</h2><ul><li>SPA single page webapplication 单页应用</li><li>MPA 多也应用</li><li>PWA 离线应用</li><li>SSR serer slide render 服务端渲染</li></ul><h2 id="名词-C-篇"><a href="#名词-C-篇" class="headerlink" title="名词 - C 篇"></a><strong>名词 - C 篇</strong></h2><p><strong>CPC</strong><br>Cost Per Click，每次点击成本<br>每次消费者点击你的广告，你所需要支付给平台的费用</p><p><strong>CPA</strong><br>Cost Per Action，每次完成行动成本<br>让消费者留下对品牌的实际印象、填写表格甚至注册成员会员等，正式进入到你的行销漏斗中，所要花费的金额。CPA 是一种按广告投放实际效果计价方式的广告，即按回应的有效问卷或定单来计费，而不限广告投放量。CPA 的计价方式对于网站而言有一定的风险，但若广告投放成功，其收益也比 CPM 的计价方式要大得多。</p><p><strong>CPM</strong><br>Cost Per 1000 impression，每千次曝光成本<br>每一千个人看到你的广告，你所需要支付的广告费用，是一种展示付费广告，只要展示了广告主的广告内容，广告主就为此付费。这种广告的效果不是很好，但是却能给有一定流量的网站、博客带来稳定的收入。</p><p><strong>CTR</strong><br>Click-Through Rate，点击率<br>人们看到你的广告并且点击广告的比率。比方说，你的广告曝光了 1000 次，但看到广告并且点进去的人只有 5 个，那么点击率就是（5÷1000）×100%= 0.5%。</p><p><strong>CPR</strong><br>Cost Per Response，每回应成本<br>以浏览者的每一个回应计费。</p><p><strong>CPP</strong><br>Cost Per Purchase，每购买成本<br>指广告主为规避广告费用风险，只有在网络用户点击旗帜广告并进行在线交易后，才按销售笔数付给广告站点费用。</p><p><strong>CPT</strong><br>Cost Per Time，按时长付费<br>一种以时间来计费的广告。</p><p><strong>CMS</strong><br>content management system，内容管理系统<br>该系统可应用于手工操作、电脑或网络。作为一种中央储存器（central repository），内容管理系统可将相关内容集中储存并具有群组管理、版本控制等功能。</p><p><strong>CR</strong><br>conversion rate，网站转化率<br>指用户进行了相应目标行动的访问次数与总访问次数的比率。</p><h2 id="名词-P-篇"><a href="#名词-P-篇" class="headerlink" title="名词 - P 篇"></a><strong>名词 - P 篇</strong></h2><p><strong>PPC</strong><br>Pay-per-Click，每点击付费<br>是根据点击广告或者电子邮件信息的用户数量来付费的一种网络广告定价模式。是企业付费于购买搜索引擎特定版位的关键字行销方式，PPC 计费方式采点击付费制(Pay Per Click)，是一种有别于传统干扰式广告的传播方式，在用户在搜索的同时，协助潜在客户可以更容易地主动接近企业提供的产品及服务。是按照点击付费(业绩)的广告的一种。</p><p><strong>PPS</strong><br>Pay Per Sale<br>PPS 广告是根据网络广告所产生的直接销售数量而付费的一种定价模式。根据你的网站的访问者到广告主所产生的直接销售额而得到一定百分比的提成模式。与 CPS 广告类似。广告商对每一位介绍到该网站的进行消费的网站，按产品或服务销售收入的百分比支付的费用结构。</p><p><strong>PPL</strong><br>Pay-per-Lead，根据每次通过网络广告产生的引导付费的定价模式<br>PPL 广告常用于网络会员制营销模式中为联盟网站制定的佣金模式，类似于 CPL 广告。</p><p><strong>PR 推广</strong><br>Public Relations，公关推广，也指品牌推广。</p><p><strong>PR 值</strong><br>PageRank，用来表现网页等级的一个标准<br>级别分别是 0 到 10，是 Google 用于评测一个网页“重要性”的一种方法。</p><p><strong>PGC</strong><br>Professionally-generated Content，专业生产内容<br>相较 UGC 而言，更加专业。PGC 的创作主体，是拥有专业知识、拥有内容相关领域资质的、拥有一定权威的舆论领袖。如果说 UGC 是一般用户，那么 PGC 是专业用户。这是 PGC&amp;UGC 二者的区别。</p><p><strong>POP</strong><br>Point Of Purchase，卖点广告<br>本来是指商业销售中的一种店头促销工具，其型式不拘，但以摆设在店头的展示物为主，如吊牌、海报、小贴纸、纸货架、展示架、纸堆头、大招牌、实物模型、旗帜等等，都是林立在 POP 的范围内。其主要商业用途是刺激引导消费和活跃卖场气氛。</p>]]></content>
      
      
      <categories>
          
          <category> 常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常见名词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>还在为使用什么变量名发愁吗？</title>
      <link href="/2020/05/10/pf2kbi/"/>
      <url>/2020/05/10/pf2kbi/</url>
      
        <content type="html"><![CDATA[<p>程序员最头疼的事情除了头发以外就是给变量或函数命名，一开始学编程语言的时候还可以 abc、a1、x2 等方式命名，等到工作过程中开始真正的项目开发时，如果还是这样随意的命名，即使同事可以忍受你的 abc，隔几个月自己再重新看代码说不定都想锤自己一顿。<br>这个时候，英语好的同学可以挤尽脑子想一些与中文意思差不多的单词，英语捉急的便只能求助有道翻译。但这两种方法最后的效果都让人很不满意。<br>有没有第三方工具可以帮助大家轻轻松松的给变量或函数命名呢？<br>那必须是有的：变量命名网站 Codelf。<br>Codelf 是通过搜索在线开源平台 Github, Bitbucket, Google Code, Codeplex, Sourceforge, Fedora Projec 的项目源码，帮开发者从中找出已有的匹配关键字的变量名。它支持中文查询，可以根据需要查询尽可能满足我们所需要的结果，并展示与查询结果相关的支持各种编程语言的代码片段以及代码库。<br>网站地址：<a href="https://unbug.github.io/codelf">https://unbug.github.io/codelf</a><br>比如说搜索「人工智能」，很快的 Codelf 在总多的优秀项目源码中找出了大神们经常使用的变量名。<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/04c97c11-c451-46bc-b391-fed917c3e2a2.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=bboqx&originHeight=568&originWidth=1080&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 变量名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>错误&amp;警告&amp;异常</title>
      <link href="/2020/05/10/kixsif/"/>
      <url>/2020/05/10/kixsif/</url>
      
        <content type="html"><![CDATA[<h2 id="错误-Error"><a href="#错误-Error" class="headerlink" title="错误 - Error"></a>错误 - Error</h2><p>包括语法错误、类型错误、编译错误、依赖丢失、空指针</p><h2 id="警告-Warning"><a href="#警告-Warning" class="headerlink" title="警告 - Warning"></a>警告 - Warning</h2><p>不符合编码规范、语义有问题，使用了保留字，给出的警告信息</p><h2 id="异常-Exception"><a href="#异常-Exception" class="headerlink" title="异常 - Exception"></a>异常 - Exception</h2><p>程序逻辑、运行没有出错，只是用户的输入、执行不符合我们既定的规则，程序捕获到异常，给出的提示信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> COLOR_RED = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> COLOR_YELLOW = <span class="string">&quot;yellow&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> COLOR_BLUE = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> MY_BLUE = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ColorException</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.message = message;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&quot;ColorException&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getConstantName</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (color) &#123;</span><br><span class="line">    <span class="keyword">case</span> COLOR_RED:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;COLOR_RED&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> COLOR_YELLOW:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;COLOR_YELLOW &quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> COLOR_BLUE:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;COLOR_BLUE&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> MY_BLUE:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;MY_BLUE&quot;</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ColorException(<span class="string">&quot;Can&#x27;t find this color&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 错误 </tag>
            
            <tag> 警告 </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - 原型&amp;原型链&amp;原型继承</title>
      <link href="/2020/05/02/sz45ti/"/>
      <url>/2020/05/02/sz45ti/</url>
      
        <content type="html"><![CDATA[<h2 id="一、原型-prototype-和-proto"><a href="#一、原型-prototype-和-proto" class="headerlink" title="一、原型 prototype 和 proto"></a>一、原型 prototype 和 <strong>proto</strong></h2><ul><li>每个对象都有一个<strong>proto</strong>属性，并且指向它的 prototype 原型对象</li><li>每个构造函数都有一个 prototype 原型对象<ul><li>prototype 原型对象里的 constructor 指向构造函数本身</li></ul></li></ul><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1608506335535-406d357d-abdb-4db6-80e2-f1e61fbd2c8b.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"></p><p><strong>有的同学可能会问 prototype 和 <strong>proto</strong>有什么用呢？</strong><br>实例对象的<strong>proto</strong>指向构造函数的 prototype，从而实现继承。<br>prototype 对象相当于特定类型所有实例对象都可以访问的公共容器</p><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1608506335575-b5e4b595-6409-4bf3-924d-fbc50c6d8681.jpeg?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=QL3ik&originHeight=500&originWidth=720&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><p><strong>看一下代码就清楚了</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">nick, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.nick = nick;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.nick);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">&quot;Byron&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">&quot;Casper&quot;</span>, <span class="number">25</span>);</span><br><span class="line">p1.sayName(); <span class="comment">// Byron</span></span><br><span class="line">p2.sayName(); <span class="comment">// Casper</span></span><br><span class="line">p1.__proto__ === Person.prototype; <span class="comment">//true</span></span><br><span class="line">p2.__proto__ === Person.prototype; <span class="comment">//true</span></span><br><span class="line">p1.__proto__ === p2.__proto__; <span class="comment">//true</span></span><br><span class="line">Person.prototype.constructor === Person; <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>注意 1. 当 Object.prototype.<strong>proto</strong><br>已被大多数浏览器厂商所支持的今天，其存在和确切行为仅在 ECMAScript 2015 规范中被标准化为传统功能，以确保 Web 浏览器的兼容性。为了更好的支持，建议只使用 <a href="https://link.zhihu.com/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf">Object.getPrototypeOf()</a><br>。2. Object.create(null) 新建的对象是没有<strong>proto</strong>属性的。</p><h2 id="二、原型链"><a href="#二、原型链" class="headerlink" title="二、原型链"></a>二、原型链</h2><p>请看以下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.valueOf(); <span class="comment">//  [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>我们再来看一张图</p><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1608506335565-ea0313ee-147d-43c5-811b-52e69bc74f8d.jpeg?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=ZT5YI&originHeight=747&originWidth=720&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><p>按照之前的理论，如果自身没有该方法，我们应该去 Array.prototype 对象里去找，但是你会发现 arr.<strong>proto</strong>上压根就没有 valueOf 方法，那它是从哪里来的呢？<br><strong>各位客官，请看这张图</strong></p><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1608506335577-e223d3dc-6c58-4115-9677-e9042924092e.jpeg?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=gxTpy&originHeight=450&originWidth=720&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><p>很奇怪我们在 Array.prototype.<strong>proto</strong>里找到了 valueOf 方法，为什么呢？</p><h2 id="查找-valueOf-方法的过程"><a href="#查找-valueOf-方法的过程" class="headerlink" title="查找 valueOf 方法的过程"></a>查找 valueOf 方法的过程</h2><p>当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。<br>查找 valueOf 大致流程</p><ol><li>当前实例对象 obj，查找 obj 的属性或方法，找到后返回</li><li>没有找到，通过 obj. <strong>proto</strong>，找到 obj 构造函数的 prototype 并且查找上面的属性和方法，找到后返回</li><li>没有找到，把 Array.prototype 当做 obj，重复以上步骤</li></ol><p>当然不会一直找下去，原型链是有终点的，最后查找到 Object.prototype 时<br>Object.prototype.<strong>proto</strong> === null，意味着查找结束</p><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1608506335539-d1998bba-641d-47b8-a621-54b141aa785d.jpeg?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=l6mty&originHeight=679&originWidth=713&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><p>我们来看看上图的关系</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">arr.__proto__ === <span class="built_in">Array</span>.prototype;</span><br><span class="line"><span class="literal">true</span>;</span><br><span class="line"><span class="built_in">Array</span>.prototype.__proto__ === <span class="built_in">Object</span>.prototype;</span><br><span class="line"><span class="literal">true</span>;</span><br><span class="line">arr.__proto__.__proto__ === <span class="built_in">Object</span>.prototype;</span><br><span class="line"><span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 原型链的终点</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span>;</span><br><span class="line"><span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p><strong>原型链如下：</strong><br>arr —&gt; Array.prototype —&gt; Object.prototype —&gt; null<br><strong>这就是传说中的原型链，层层向上查找，最后还没有就返回 undefined</strong></p><h2 id="三、JavaScript-中的继承"><a href="#三、JavaScript-中的继承" class="headerlink" title="三、JavaScript 中的继承"></a>三、JavaScript 中的继承</h2><h2 id="3-1-什么是继承？"><a href="#3-1-什么是继承？" class="headerlink" title="3.1 什么是继承？"></a>3.1 什么是继承？</h2><p>继承是指一个对象直接使用另外一个对象的属性和方法</p><p>由此可见只要实现属性和方法的继承，就达到继承的效果</p><ul><li>得到一个对象的属性</li><li>得到一个对象的方法</li></ul><h2 id="3-2-属性如何继承？"><a href="#3-2-属性如何继承？" class="headerlink" title="3.2 属性如何继承？"></a>3.2 属性如何继承？</h2><p>我们先创建一个 Person 类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法定义在构造函数的原型上</span></span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>此时我想创建一个 Teacher 类，我希望它可以继承 Person 所有的属性，并且额外添加属于自己特定的属性；</p><ul><li>一个新的属性，subject——这个属性包含了教师教授的学科。</li></ul><p>定义 Teacher 的构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Teacher</span>(<span class="params">name, age, subject</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="built_in">this</span>, name, age);</span><br><span class="line">  <span class="built_in">this</span>.subject = subject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>属性的继承是通过在一个类内执行另外一个类的构造函数，通过 call 指定 this 为当前执行环境，这样就可以得到另外一个类的所有属性。</strong><br>Person.call(this, name, age)</p><p>我们实例化一下看看</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> teacher = <span class="keyword">new</span> Teacher(<span class="string">&quot;jack&quot;</span>, <span class="number">25</span>, <span class="built_in">Math</span>);</span><br><span class="line">teacher.age;</span><br><span class="line"><span class="number">25</span>;</span><br><span class="line">teacher.name;</span><br><span class="line">(<span class="string">&quot;jack&quot;</span>);</span><br></pre></td></tr></table></figure><p>很明显 Teacher 成功继承了 Person 的属性</p><h2 id="3-3-方法如何继承？"><a href="#3-3-方法如何继承？" class="headerlink" title="3.3 方法如何继承？"></a>3.3 方法如何继承？</h2><p>我们需要让 Teacher 从 Person 的原型对象里继承方法。我们要怎么做呢？<br>我们都知道类的方法都定义在 prototype 里，那其实我们只需要把 Person.prototype 的备份赋值给 Teacher.prototype 即可</p><p>Teacher.prototype = Object.create(Person.prototype)</p><p><a href="https://link.zhihu.com/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create">Object.create</a>简单说就是新建一个对象，使用现有的对象赋值给新建对象的<strong>proto</strong></p><p>可能有人会问为什么是备份呢？<br>因为如果直接赋值，那会是引用关系，意味着修改 Teacher. prototype，也会同时修改 Person.prototype，这是不合理的。</p><p>另外注意一点就是，在给 Teacher 类添加方法时，应该在修改 prototype 以后，否则会被覆盖掉，原因是赋值前后的属性值是不同的对象。</p><p>最后还有一个问题，我们都知道 prototype 里有个属性 constructor 指向构造函数本身，但是因为我们是复制其他类的 prototype，所以这个指向是不对的，需要更正一下。<br>如果不修改，会导致我们类型判断出错</p><p>Teacher.prototype.constructor = Teacher</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Teacher.prototype = <span class="built_in">Object</span>.create(Person.prototype)</span><br><span class="line">Teacher.prototype.constructor</span><br><span class="line">ƒ <span class="function"><span class="title">Person</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">    <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line">Teacher.prototype.constructor = Teacher</span><br><span class="line">ƒ <span class="function"><span class="title">Teacher</span>(<span class="params">name, age, subject</span>)</span> &#123;</span><br><span class="line">    Person.call(<span class="built_in">this</span>, name, age)</span><br><span class="line">    <span class="built_in">this</span>.subject = subject</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>继承方法的最终方案：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Teacher.prototype = <span class="built_in">Object</span>.create(Person.prototype);</span><br><span class="line">Teacher.prototype.constructor = Teacher;</span><br></pre></td></tr></table></figure><h2 id="3-4-hasOwnProperty"><a href="#3-4-hasOwnProperty" class="headerlink" title="3.4 hasOwnProperty"></a>3.4 hasOwnProperty</h2><p>在原型链上查询属性比较耗时，对性能有影响，试图访问不存在的属性时会遍历整个原型链。<br>遍历对象属性时，每个可枚举的属性都会被枚举出来。 要检查是否具有自己定义的属性，而不是原型链上的属性，必须使用 hasOwnProperty 方法。<br><a href="https://link.zhihu.com/?target=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty">hasOwnProperty</a> 是 JavaScript 中唯一处理属性并且不会遍历原型链的方法。</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><h2 id="prototype-和-proto"><a href="#prototype-和-proto" class="headerlink" title="prototype 和 proto"></a>prototype 和 <strong>proto</strong></h2><ul><li>每个对象都有一个<strong>proto</strong>属性，并且指向它的 prototype 原型对象</li><li>每个构造函数都有一个 prototype 原型对象<ul><li>prototype 原型对象里的 constructor 指向构造函数本身</li></ul></li></ul><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>每个对象都有一个<strong>proto</strong>，它指向它的 prototype 原型对象，而 prototype 原型对象又具有一个自己的 prototype 原型对象，就这样层层往上直到一个对象的原型 prototype 为 null<br>这个查询的路径就是原型链</p><h2 id="JavaScript-中的继承"><a href="#JavaScript-中的继承" class="headerlink" title="JavaScript 中的继承"></a>JavaScript 中的继承</h2><ul><li>属性继承</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法定义在构造函数的原型上</span></span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Teacher</span>(<span class="params">name, age, subject</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="built_in">this</span>, name, age);</span><br><span class="line">  <span class="built_in">this</span>.subject = subject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法继承</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Teacher.prototype = <span class="built_in">Object</span>.create(Person.prototype);</span><br><span class="line">Teacher.prototype.constructor = Teacher;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原型&amp;原型链&amp;原型继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React - Router</title>
      <link href="/2020/05/01/nndsbr/"/>
      <url>/2020/05/01/nndsbr/</url>
      
        <content type="html"><![CDATA[<h4 id="依赖包"><a href="#依赖包" class="headerlink" title="依赖包"></a>依赖包</h4><ul><li>react-router：提供了 router 的核心 api。如 Router、Route、Switch 等，但没有提供有关 dom 操作进行路由跳转的 api；</li><li>react-router-dom：提供了 BrowserRouter、Route、Link 等 api，可以通过 dom 操作触发事件控制路由。</li></ul><h4 id="安装-react-router"><a href="#安装-react-router" class="headerlink" title="安装 react-router"></a>安装 react-router</h4><p>因为 react-router-dom 有 react-router 的依赖，所以就可以这样安装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -S/-save react-router-dom</span><br></pre></td></tr></table></figure><p><strong>路由的模式有两种：</strong></p><ul><li>老浏览器提供的 hash 模式， 我们称之为： HashRouter</li><li>H5 提供的的 history 模式，我们称之为 BrowserRouter (注意： H5 模式的路由需要后端支持)</li></ul><p><strong>使用路由</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserRouter &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>路由的展示区域</strong><br><strong>书写路由展示区域， 使用 Route path 是路径 component 是组件</strong></p><ul><li>第一种写法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">&quot;/Home&quot;</span> component=&#123;home&#125;&gt;&lt;/Route&gt;</span><br></pre></td></tr></table></figure><ul><li>第二种写法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path = <span class="string">&quot;/Home&quot;</span> render=&#123;<span class="function">(<span class="params">props</span>)=&gt;</span>&#123;<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Home</span> /&gt;</span></span>&#125;&gt;&lt;/Route&gt;</span><br></pre></td></tr></table></figure><ul><li>第一种写法路由上会自己自动加上路由元信息，而第二种需要手动的去在 render 函数上加上路由元信息</li></ul><p><strong>路由的重定向</strong></p><ul><li>第一种方式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Redirect to=<span class="string">&quot;/&quot;</span> component=&#123;Home&#125; /&gt;</span><br></pre></td></tr></table></figure><ul><li>第二种方式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Redirect <span class="keyword">from</span>=<span class="string">&quot;/&quot;</span> to=<span class="string">&quot;/home&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p><strong>路径完全匹配 exact/</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route to=<span class="string">&quot;/&quot;</span> component=&#123;Home&#125; exact /&gt;</span><br></pre></td></tr></table></figure><p><strong>Switch ( 路由只匹配一次 )</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> <span class="attr">exact</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/mine&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Mine&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/mine/login&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Login&#125;</span> <span class="attr">exact</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/list&quot;</span> <span class="attr">component</span>=<span class="string">&#123;List&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">&lt;/Switch&gt;</span><br></pre></td></tr></table></figure><p><strong>NavLink( 路由激活时可以用 activeClassName 来添加 active 类名 )</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;NavLink activeClassName=<span class="string">&quot;active&quot;</span> className=<span class="string">&quot;nav-link&quot;</span> to=<span class="string">&quot;/home&quot;</span>&gt;</span><br><span class="line">  Home</span><br><span class="line">&lt;/NavLink&gt;</span><br></pre></td></tr></table></figure><p><strong>Link</strong><br>Link 组件用于取代元素，生成一个链接，允许用户点击后跳转到另一个路由。它基本上就是元素的 React 版本，可以接收 Router 的状态。</p><Link to="/home">Home</Link><p><strong>NavLink 和 Link 的区别：</strong><br>Link 使用 to 参数来描述需要定位的页面。它的值既可是字符串，也可以是 location 对象（包含 pathname、search、hash、与 state 属性）如果其值为字符串，将会被转换为 location 对象；replace(bool)：为 true 时，点击链接后将使用新地址替换掉访问历史记录里面的原地址；为 false 时，点击链接后将在原有访问历史记录的基础上添加一个新的纪录。默认为 false；<br><NavLink>是<Link>的一个特定版本，会在匹配上当前的 url 的时候给已经渲染的元素添加参数，组件的属性有</p><ul><li>activeClassName(string)：设置选中样式，默认值为 active</li><li>activeStyle(object)：当元素被选中时，为此元素添加样式</li><li>exact(bool)：为 true 时，只有当导致和完全匹配 class 和 style 才会应用</li><li>strict(bool)：为 true 时，在确定为位置是否与当前 URL 匹配时，将考虑位置 pathname 后的斜线</li><li>isActive(func)判断链接是否激活的额外逻辑的功能</li></ul><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ul><li>路由的概念：随着浏览器地址栏的变化，展示给用户不同的界面（视图组件）</li><li>路由模式：hash 模式（#） | history 模式</li><li>路由应用场景：需要实现多页面跳转功能</li></ul><h2 id="react-项目中的路由"><a href="#react-项目中的路由" class="headerlink" title="react 项目中的路由"></a>react 项目中的路由</h2><p>路由插件 react-router-dom 下载命令 ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react-router-dom -S</span><br></pre></td></tr></table></figure><h3 id="路由插件的常见的内置组件"><a href="#路由插件的常见的内置组件" class="headerlink" title="路由插件的常见的内置组件"></a>路由插件的常见的内置组件</h3><ul><li>BrowerRouter 路由根组件</li><li>Redirect 路由重定向组件</li><li>Switch 避免路由重复匹配的组件，子项只能是 Redirect 或者 Route</li><li>Route 路由视图组件 加载路由</li><li>NavLink 路由跳转组件 自带高亮 active 类</li><li>Link 路由跳转 没有高亮</li></ul><h4 id="路由元信息-一般用路由视图组件-Route-加载的组件具备路由信息"><a href="#路由元信息-一般用路由视图组件-Route-加载的组件具备路由信息" class="headerlink" title="路由元信息 一般用路由视图组件 Route 加载的组件具备路由信息"></a>路由元信息 一般用路由视图组件 Route 加载的组件具备路由信息</h4><ul><li>history 路由跳转</li><li>location 获取一般路由传参</li><li>match 获取动态路由传参</li></ul><h2 id="高阶路由"><a href="#高阶路由" class="headerlink" title="高阶路由"></a>高阶路由</h2><ul><li>高阶路由包裹不具备路由元信息的组件可使其携带路由元信息</li></ul><h3 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h3><h4 id="方式一-标签跳转-NavLink-Link"><a href="#方式一-标签跳转-NavLink-Link" class="headerlink" title="方式一 标签跳转 NavLink / Link"></a>方式一 标签跳转 NavLink / Link</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入路由内置组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/del&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><h4 id="方式二-js-方式跳转-路又远信息-history-对象可以实现路由跳转"><a href="#方式二-js-方式跳转-路又远信息-history-对象可以实现路由跳转" class="headerlink" title="方式二 js 方式跳转 路又远信息 history 对象可以实现路由跳转"></a>方式二 js 方式跳转 路又远信息 history 对象可以实现路由跳转</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意使用js方式跳转 时  条件：当前组件必须具备路由元信息</span></span><br><span class="line"><span class="built_in">this</span>.props.history.push(<span class="string">&quot;/del&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><h4 id="state-方式传参-页面刷新-参数依旧存在"><a href="#state-方式传参-页面刷新-参数依旧存在" class="headerlink" title="state 方式传参 页面刷新 参数依旧存在"></a>state 方式传参 页面刷新 参数依旧存在</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳转传参</span></span><br><span class="line"><span class="built_in">this</span>.props.history.push(&#123;</span><br><span class="line">  <span class="attr">pathname</span>: <span class="string">&quot;/del&quot;</span>,</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="comment">// 参     数</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 获取参数</span></span><br><span class="line"><span class="built_in">this</span>.props.location.state.obj;</span><br></pre></td></tr></table></figure><h4 id="query-传参-页面刷新参数不存在"><a href="#query-传参-页面刷新参数不存在" class="headerlink" title="query 传参 页面刷新参数不存在"></a>query 传参 页面刷新参数不存在</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳转传参</span></span><br><span class="line"><span class="built_in">this</span>.props.history.push(&#123;</span><br><span class="line">  <span class="attr">pathname</span>: <span class="string">&quot;/路径&quot;</span>,</span><br><span class="line">  <span class="attr">query</span>: &#123;</span><br><span class="line">    <span class="attr">obj</span>: item,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//获取参数</span></span><br><span class="line"><span class="built_in">this</span>.props.location.query.obj;</span><br></pre></td></tr></table></figure><h4 id="动态路由传参"><a href="#动态路由传参" class="headerlink" title="动态路由传参"></a>动态路由传参</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.设置锚点  形参</span></span><br><span class="line">&lt;Route path=<span class="string">&quot;/detail/:id&quot;</span> component-=&#123;Detail&#125; /&gt;;</span><br><span class="line"><span class="comment">//2.路由跳转传参  实参</span></span><br><span class="line"><span class="built_in">this</span>.props.history.push(<span class="string">`/detail/$(item.id)`</span>);</span><br><span class="line"><span class="comment">//3.获取动态路由传参</span></span><br><span class="line"><span class="built_in">this</span>.porps.match.params.id;</span><br></pre></td></tr></table></figure><h3 id="封装路由"><a href="#封装路由" class="headerlink" title="封装路由"></a>封装路由</h3><ul><li>在项目的 src 目录下新建 router 文件夹，router 文件目录下新建 index.js 和 config.js</li><li>router/config.js —生成路由配置表，路由配置表=数组，每一个路由即一个对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入一级路由视图组件</span></span><br><span class="line">  <span class="keyword">import</span> Index <span class="keyword">from</span> <span class="string">&#x27;../views/Index&#x27;</span></span><br><span class="line">  <span class="comment">//引入二级路由</span></span><br><span class="line">  improt Home <span class="keyword">from</span> <span class="string">&#x27;../views/index/Home&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> routes=[</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">          <span class="attr">redirect</span>:<span class="string">&#x27;/index/home&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="attr">path</span>:<span class="string">&#x27;/index&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>:Index,</span><br><span class="line">          <span class="attr">children</span>:[</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="attr">path</span>:<span class="string">&#x27;/index/home&#x27;</span>,</span><br><span class="line">                  <span class="attr">component</span>:Home</span><br><span class="line">              &#125;</span><br><span class="line">          ]</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;];</span><br><span class="line">  <span class="comment">//抛出路由表</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> routes;</span><br></pre></td></tr></table></figure><ul><li>router/index.js 加载路由视图组件的函数组件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载路由视图组件的函数组件 -条件-路由路径对应路由视图组件---对应的关系 ---》获取路由配置表</span></span><br><span class="line">   <span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">   <span class="comment">//引入路由内置组件</span></span><br><span class="line">   <span class="keyword">import</span> &#123;React,Redirect,Switch &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line">   <span class="keyword">const</span> RouterView =<span class="function">(<span class="params">props</span>)=&gt;</span>&#123;</span><br><span class="line">       <span class="keyword">let</span> reds=props.routes.filter(<span class="function"><span class="params">e</span>=&gt;</span>e.redirect);</span><br><span class="line">       <span class="keyword">let</span> comS=props.routes.filter(<span class="function"><span class="params">e</span>=&gt;</span>e.component);</span><br><span class="line">       <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">             &#123;</span></span><br><span class="line"><span class="xml">             //渲染route视图组件</span></span><br><span class="line"><span class="xml">                 comS.map((item,index)=&gt;&#123;</span></span><br><span class="line"><span class="xml">                    return <span class="tag">&lt;<span class="name">Route</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">path</span>=<span class="string">&#123;item.path&#125;</span> <span class="attr">render</span>=<span class="string">&#123;(RouteProps)</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="xml">                         if(item.children)&#123;</span></span><br><span class="line"><span class="xml">                             return <span class="tag">&lt;<span class="name">item.component</span> &#123;<span class="attr">...RouteProps</span>&#125; <span class="attr">routes</span>=<span class="string">&#123;item.children&#125;</span>  /&gt;</span></span></span><br><span class="line"><span class="xml">                         &#125;else&#123;</span></span><br><span class="line"><span class="xml">                             return <span class="tag">&lt;<span class="name">item.component</span> &#123;<span class="attr">...RouteProps</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">                         &#125;</span></span><br><span class="line"><span class="xml">                    &#125;)&#125;  /&gt;</span></span><br><span class="line"><span class="xml">                 &#125;)</span></span><br><span class="line"><span class="xml">             &#125;</span></span><br><span class="line"><span class="xml">       //渲染重定向</span></span><br><span class="line"><span class="xml">               &#123;</span></span><br><span class="line"><span class="xml">                   reds.map((item,index)=&gt; &#123;</span></span><br><span class="line"><span class="xml">                          return <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&#123;item.redirect&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                   &#125;)</span></span><br><span class="line"><span class="xml">               &#125;</span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">// 引入路由内置组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="comment">// 引入加载路由视图得函数组件</span></span><br><span class="line"><span class="keyword">import</span> RouterView <span class="keyword">from</span> <span class="string">&quot;./router/index&quot;</span>;</span><br><span class="line"><span class="comment">// 引入路由配置表</span></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&quot;./router/config&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="xml">          &#123;/* 加载/展示路由视图组件 */&#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">RouterView</span> <span class="attr">routes</span>=<span class="string">&#123;config&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由拦截-路由守卫"><a href="#路由拦截-路由守卫" class="headerlink" title="路由拦截/路由守卫"></a>路由拦截/路由守卫</h3><ul><li>i. 设置标识在需要路由守卫对象中设置标识</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">           <span class="attr">path</span>:<span class="string">&#x27;/index/my&#x27;</span>,</span><br><span class="line">           <span class="attr">component</span>:<span class="string">&#x27;My&#x27;</span>,</span><br><span class="line">           <span class="attr">autoLogin</span>:<span class="literal">true</span>,<span class="comment">//第一步设置标识</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ii. 判断是否需要路由守卫 加载路由对象的时候判断是否需要路由守卫</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二部 判断当前路由对象是否需要路由守卫</span></span><br><span class="line">    <span class="keyword">if</span>(item.autoList)&#123;</span><br><span class="line">        <span class="comment">//需要路由守卫</span></span><br><span class="line">    &#125;esle&#123;</span><br><span class="line">        <span class="comment">//不需要路由守卫</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>iii. 判断是否登录 登录凭证 token</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第三步  判断当前登录状态 一登录 未登录 凭证token 本地存储</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;token&quot;</span>) ? (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">item.component</span> &#123;<span class="attr">...routeProps</span>&#125; &#123;<span class="attr">...itrm.children</span>&#125; /&gt;</span></span></span><br><span class="line">) : (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Redirect</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    <span class="attr">to</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">pathname:</span> &quot;/<span class="attr">login</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">path:</span> <span class="attr">item.path</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">    &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">  /&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>iv. 获取 token 登录成功后 拿到 token ，跳转路由拦截之前的路由路径</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本地存储 token</span></span><br><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&quot;token&quot;</span>, res.data.token);</span><br><span class="line"><span class="comment">//跳转兰姐之前的页面</span></span><br><span class="line"><span class="built_in">this</span>.props.history.push(<span class="built_in">this</span>.props.location.path);</span><br></pre></td></tr></table></figure><p>​</p><h3 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h3><h4 id="方式一：React-lazy"><a href="#方式一：React-lazy" class="headerlink" title="方式一：React.lazy"></a>方式一：React.lazy</h4><p>fallback 属性接受任何在组件加载过程中你想展示的 React 元素。你可以将 Suspense 组件置于懒加载组件之上的任何位置。你甚至可以用一个 Suspense 组件包裹多个懒加载组件。<br>React.lazy 接受一个函数，这个函数需要动态调用 import()。它必须返回一个 Promise，该 Promise 需要 resolve 一个 default export 的 React 组件。<br>然后应在 Suspense 组件中渲染 lazy 组件，如此使得我们可以使用在等待加载 lazy 组件时做优雅降级（如 loading 指示器等）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Suspense &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> OtherComponent = React.lazy(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./OtherComponent&quot;</span>));</span><br><span class="line"><span class="keyword">const</span> AnotherComponent = React.lazy(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./AnotherComponent&quot;</span>));</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">OtherComponent</span> /&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">AnotherComponent</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方式二：react-loadable-（适用于-reactV16-8-以下）"><a href="#方式二：react-loadable-（适用于-reactV16-8-以下）" class="headerlink" title="方式二：react-loadable （适用于 reactV16.8 以下）"></a>方式二：react-loadable （适用于 reactV16.8 以下）</h4><p>下载插件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-loadable</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Loadable <span class="keyword">from</span> <span class="string">&quot;react-loadable&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Loading</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>正在加载..<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> LoadableComponent = Loadable(&#123;</span><br><span class="line">  <span class="attr">loader</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./my-component&quot;</span>),</span><br><span class="line">  <span class="attr">loading</span>: Loading,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React-组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React - memo</title>
      <link href="/2020/04/24/ng0i8w/"/>
      <url>/2020/04/24/ng0i8w/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">memo</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> arg = <span class="built_in">Array</span>.protoytype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="comment">// 判断传入的函数有没有cache缓存</span></span><br><span class="line">    fn.cache = fn.cache || &#123;&#125;;</span><br><span class="line">    <span class="comment">// 判断传入的函数纯cache缓存有没有对应的参数</span></span><br><span class="line">    <span class="comment">// 有，直接返回值</span></span><br><span class="line">    <span class="comment">// 没有进行计算，并往函数的cache缓存存入计算的结果，下次直接返回值</span></span><br><span class="line">    <span class="keyword">return</span> fn.cache[arg] ? fn.cache[arg] : (fn.cache[arg] = fn.call(<span class="built_in">this</span>, arg));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 功能函数</span></span><br><span class="line"><span class="keyword">var</span> sqrt = <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(num);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> memoSqart = memo(sqart);</span><br><span class="line"></span><br><span class="line">memoSqart(<span class="number">4</span>); <span class="comment">// 计算并存值</span></span><br><span class="line">memoSqart(<span class="number">4</span>); <span class="comment">// 直接返回缓存的值</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React-组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React - Hook</title>
      <link href="/2020/04/23/mb8fz1/"/>
      <url>/2020/04/23/mb8fz1/</url>
      
        <content type="html"><![CDATA[<h3 id="useState-状态钩子"><a href="#useState-状态钩子" class="headerlink" title="useState 状态钩子"></a>useState 状态钩子</h3><ul><li>useState（）给函数式组件引入状态 state ，纯函数不能有状态，所以状态放在钩子里面</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入钩子组件</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//用钩子引入state状态</span></span><br><span class="line">  <span class="comment">//数组的第一个成员是一个变量，指向状态初始值，第二个值是一个函数，用来更新状态，约定是</span></span><br><span class="line">  <span class="comment">//set前缀加上状态的变量名</span></span><br><span class="line">  <span class="keyword">const</span> [buttonText, setButtonText] = useState(<span class="string">&quot;Click me, please&quot;</span>);</span><br><span class="line">  <span class="comment">//改变state状态</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> setButtonText(<span class="string">&quot;Thanks, been clicked!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>&#123;buttonText&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="useContext-共享状态钩子"><a href="#useContext-共享状态钩子" class="headerlink" title="useContext 共享状态钩子"></a>useContext 共享状态钩子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="comment">//创建一个Context</span></span><br><span class="line"><span class="keyword">const</span> AppContext = React.createContext(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Navbar = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//子组件通过useContext() 钩子用来引入Context对象，从中获取username属性</span></span><br><span class="line">  <span class="keyword">const</span> &#123; username &#125; = useContext(AppContext);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;navbar&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>AwesomeSite<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;username&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Messages = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; username &#125; = useContext(AppContext);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;messages&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Messages<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>1 message for &#123;username&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;message&quot;</span>&gt;</span>useContext is awesome!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用AppContext.Provider 提供一个Context对象，这个对象可以被组建共享</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">AppContext.Provider</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">value</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">username:</span> &quot;<span class="attr">superawesome</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Navbar</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Messages</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">AppContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootElement = <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, rootElement);</span><br></pre></td></tr></table></figure><h3 id="userReducer-action-钩子"><a href="#userReducer-action-钩子" class="headerlink" title="userReducer(): action 钩子"></a>userReducer(): action 钩子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Reducer修改state返回新的state</span></span><br><span class="line"><span class="keyword">const</span> myReducer = <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;countUp&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">count</span>: state.count + <span class="number">1</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//数组的第一个成员是当前状态，第二个成员是发送action的dispatch函数</span></span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useReducer(myReducer, &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;countUp&quot; &#125;)&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: &#123;state.count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootElement = <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, rootElement);</span><br></pre></td></tr></table></figure><p>由于 Hooks 可以提供共享状态和 Reducer 函数，所以它在这些方面可以取代 Redux。但是，它没法提供中间件（middleware）和时间旅行（time travel），如果你需要这两个功能，还是要用 Redux。</p><h3 id="useEffect-副作用钩子"><a href="#useEffect-副作用钩子" class="headerlink" title="useEffect 副作用钩子"></a>useEffect 副作用钩子</h3><ul><li>用来引入有副作用的操作，最常见的就是向服务器请求数据，之前放在 componentDidMount 里面的代码，现在可以放在这里</li><li>useEffect 接收两个参数，第一个是函数，一步的操作代码放在里面，第二个是一个数组，用于给出 Effect 的依赖项，只要这个数组发生变化，useEffect()就会执行，第二个参数省略，每次组件渲染时，就会执行 useRffect</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Person = <span class="function">(<span class="params">&#123; personId &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = useState(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> [person, setPerson] = useState(&#123;&#125;);</span><br><span class="line">  <span class="comment">//用来执行有副作用的操作</span></span><br><span class="line">  useEffect(</span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      setLoading(<span class="literal">true</span>);</span><br><span class="line">      fetch(<span class="string">`https://swapi.co/api/people/<span class="subst">$&#123;personId&#125;</span>/`</span>)</span><br><span class="line">        .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">        .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">          setPerson(data);</span><br><span class="line">          setLoading(<span class="literal">false</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//第二个参数为数组,依赖的参数发生变化就会执行useEffect</span></span><br><span class="line">    [personId]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (loading === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Loading ...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>You&#x27;re viewing: &#123;person.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Height: &#123;person.height&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Mass: &#123;person.mass&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [show, setShow] = useState(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Person</span> <span class="attr">personId</span>=<span class="string">&#123;show&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        Show:</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setShow(&quot;1&quot;)&#125;&gt;Luke<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setShow(&quot;2&quot;)&#125;&gt;C-3PO<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootElement = <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, rootElement);</span><br></pre></td></tr></table></figure><h3 id="useMemo-防止子组件重复执行"><a href="#useMemo-防止子组件重复执行" class="headerlink" title="useMemo 防止子组件重复执行"></a>useMemo 防止子组件重复执行</h3><p>父组件状态发生变化，子组件也会重新执行一次 （对应类组件的 componentWillReciveProps，shouldComponentUpdate）<br>要防止子组件方法调用，我们可以使用 useMemo 来取消没有必要的重新计算</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Children <span class="keyword">from</span> <span class="string">&#x27;./comp2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ShareContext: any = createContext(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SecondHand</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = useState(<span class="string">&#x27;名称&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [content, setContent] = useState(<span class="string">&#x27;内容&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setName(new Date().getTime())&#125;&gt;name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setContent(new Date().getTime())&#125;&gt;</span></span><br><span class="line"><span class="xml">          content</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Children</span> <span class="attr">name</span>=<span class="string">&#123;name&#125;</span> <span class="attr">content</span>=<span class="string">&#123;content&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">ShareContext.Provider</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SecondHand;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useMemo &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Children</span>(<span class="params">&#123; name, content &#125;: any</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> curName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;curName is call&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> name + <span class="string">&quot; 最新时间&quot;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> curContent = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;curContent is call&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> content + <span class="string">&quot; 最新时间&quot;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> cur1 = useMemo(<span class="function">() =&gt;</span> curName(), [name]);</span><br><span class="line">  <span class="keyword">const</span> cur2 = useMemo(<span class="function">() =&gt;</span> curContent(), [content]);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>content:&#123;cur1&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>content:&#123;cur2&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 useMemo 就可以实现，点击 name，子组件只重绘 name，点击 content，子组件只重绘 content，减少了页面没有必要的页面重绘，用来提升组件性能，与类组件 shouldComponentUpdate 达到的效果一样。</p><h3 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h3><p>useRef 可以保存组件节点、变量<br>react 获得组件节点方式：</p><ul><li>ref=”” 通过 this.refs 调用</li><li>ref={(ref)=&gt;this.btnRef=ref}</li><li>this.btfRef = React.createRef() ref={this.btnRef}</li></ul><p>上面三种方式是类组件获得组件实例的方式，或多或少都用到来 this，在函数式组件并不适用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Component</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> btnRef = useRef(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">ref</span>=<span class="string">&quot;btnRef&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-useContext、useReducer-封装一个类似于-redux-仓库"><a href="#使用-useContext、useReducer-封装一个类似于-redux-仓库" class="headerlink" title="使用 useContext、useReducer 封装一个类似于 redux 仓库"></a>使用 useContext、useReducer 封装一个类似于 redux 仓库</h3><ul><li>第一步 创建 store.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">//定义共享数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Context = createContext(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//定义仓库初始值</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> defayltState = &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//定义修改数据方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state, action) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;add&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">count</span>: state.count + <span class="number">1</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>第二步 父组件挂载 context</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@format </span>*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; useState, useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Son <span class="keyword">from</span> <span class="string">&quot;./son&quot;</span>;</span><br><span class="line"><span class="comment">//引入配置</span></span><br><span class="line"><span class="keyword">import</span> myReducer, &#123; defayltState, Context &#125; <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useReducer(myReducer, defayltState);</span><br><span class="line">  <span class="comment">//调用后数组第一个成员是当前状态，第二个是发送action的dispatch函数</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">//通过context 挂载共享属性</span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Context.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">...state</span>, <span class="attr">dispatch</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;state.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;add&quot; &#125;)&#125;&gt;add 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Son</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Context.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第三步 在子组件调用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useContext, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Context &#125; <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>; <span class="comment">//引入context</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> con = useContext(Context); <span class="comment">//拿到数据</span></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;200&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;, []); <span class="comment">//数组为空只有初始化页面执行,不传递参数每次数据更改都会执行</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      this is son---&#123;con.count&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> con.dispatch(&#123; type: &quot;add&quot; &#125;)&#125;&gt;子组件 add1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Son;</span><br></pre></td></tr></table></figure><h3 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h3><h3 id="React-memo"><a href="#React-memo" class="headerlink" title="React.memo"></a>React.memo</h3><p>在类组件中数据发生变化，子组件依赖 props 监听到依赖，就算值一样也会发生 re-render（重绘）</p><ul><li>shouldComponentUpdate+componentWillRecieveProps 来判断</li><li>React.PureComponent 来定义类</li></ul><p>在函数式组件中，我们可以通过 React.memo()来优化组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通的函数式组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">&#123; seconds &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;I am rendering&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>I am update every &#123;seconds&#125; seconds<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似shouldComponentUpdate 判断参数，是否进行重绘</span></span><br><span class="line"><span class="comment">// return true 重绘</span></span><br><span class="line"><span class="comment">// return false 不重绘</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">areEqual</span>(<span class="params">prevProps, nextProps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (prevProps.seconds === nextProps.seconds) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// React.memo(函数式组件,[依赖判断函数])</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.memo(Child, areEqual);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React-Hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React - 组件通讯</title>
      <link href="/2020/04/19/piixso/"/>
      <url>/2020/04/19/piixso/</url>
      
        <content type="html"><![CDATA[<h2 id="父子通讯"><a href="#父子通讯" class="headerlink" title="父子通讯"></a>父子通讯</h2><p>父级组件调用子组件，通过 props 来传递参数，子组件通过 this.props 来接收</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Children</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; datalist &#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; datalist &#125; = [];</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Children</span> <span class="attr">datalist</span>=<span class="string">&#123;datalist&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="子父通讯"><a href="#子父通讯" class="headerlink" title="子父通讯"></a>子父通讯</h2><p>父级组件通过 props 给子组件传递一个回调函数，子级组件调用父级传递过来的回调，将参数返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Children</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; getData &#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    getData([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>this is children<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">getData</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//[1,2,3,4,5]</span></span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Children</span> <span class="attr">getData</span>=<span class="string">&#123;this.getData&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="同级通讯"><a href="#同级通讯" class="headerlink" title="同级通讯"></a>同级通讯</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npm install --save events</span><br><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> EventBus = <span class="keyword">new</span> EventEmitter()</span><br><span class="line"><span class="comment">//事件订阅</span></span><br><span class="line">EventBus.on(<span class="string">&quot;message&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">text</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(text)  <span class="comment">//hello world</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//事件发布</span></span><br><span class="line">EventBus.emit(<span class="string">&quot;message&quot;</span>, <span class="string">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="跨级组件通讯-发布订阅模式"><a href="#跨级组件通讯-发布订阅模式" class="headerlink" title="跨级组件通讯 - 发布订阅模式"></a>跨级组件通讯 - 发布订阅模式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> eventProxy = &#123;</span><br><span class="line">  <span class="comment">// onObj 存放多个监听事件的对象</span></span><br><span class="line">  <span class="comment">// oneObj 存放多个监听事件的对象,获取一次清空</span></span><br><span class="line">  <span class="attr">onObj</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">oneObj</span>: &#123;&#125;,</span><br><span class="line">  <span class="comment">//监听事件</span></span><br><span class="line">  <span class="attr">$on</span>: <span class="function"><span class="keyword">function</span> (<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 当前请求事件在对象中是否存在</span></span><br><span class="line">    <span class="comment">//不存在 返回一个[]</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.onObj[key] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.onObj[key] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将事件处理函数添加到对应的key</span></span><br><span class="line">    <span class="built_in">this</span>.onObj[key].push(fn);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">$once</span>: <span class="function"><span class="keyword">function</span> (<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.oneObj[key] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.oneObj[key] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.oneObj[key].push(fn);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 移除事件监听</span></span><br><span class="line">  <span class="attr">$remove</span>: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.onObj[key] = [];</span><br><span class="line">    <span class="built_in">this</span>.oneObj[key] = [];</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 触发器或者发射器</span></span><br><span class="line">  <span class="attr">$emit</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> key, args;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//trigger(&quot;update&quot;,data1,data2,data3)</span></span><br><span class="line">    <span class="comment">// 获取trigger函数的arguments，得到类数组</span></span><br><span class="line">    <span class="comment">// key 获取传参序列的第一项</span></span><br><span class="line">    key = <span class="built_in">arguments</span>[<span class="number">0</span>]; <span class="comment">//onObj[arguments[0]</span></span><br><span class="line">    <span class="comment">//类数组没有数组的slice,通过call改变this指向，让类数组继承数组的slice方法，完成截取功能</span></span><br><span class="line">    args = [].concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)); <span class="comment">//data1,data2,data3</span></span><br><span class="line">    <span class="comment">// console.log(this.onObj[key][0]())</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.onObj[key] !== <span class="literal">undefined</span> &amp;&amp; <span class="built_in">this</span>.onObj[key].length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> <span class="built_in">this</span>.onObj[key]) &#123;</span><br><span class="line">        <span class="comment">// console.log(args)</span></span><br><span class="line">        <span class="built_in">this</span>.onObj[key][i].call(<span class="literal">null</span>, args);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.oneObj[key] !== <span class="literal">undefined</span> &amp;&amp; <span class="built_in">this</span>.oneObj[key].length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> <span class="built_in">this</span>.oneObj[key]) &#123;</span><br><span class="line">        <span class="comment">// null 继承 this.oneObj[key][i]函数并调用，参数是args</span></span><br><span class="line">        <span class="built_in">this</span>.oneObj[key][i].apply(<span class="literal">null</span>, args);</span><br><span class="line">        <span class="comment">// console.log(args)</span></span><br><span class="line">        <span class="built_in">this</span>.oneObj[key][i] = <span class="literal">undefined</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.oneObj[key] = [];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">eventProxy.$on(<span class="string">&quot;update&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;);</span><br><span class="line">eventProxy.$once(<span class="string">&quot;update&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;);</span><br><span class="line">eventProxy.$emit(<span class="string">&quot;update&quot;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="跨级通讯"><a href="#跨级通讯" class="headerlink" title="跨级通讯"></a>跨级通讯</h2><p><strong>案例描述</strong>:<br>当前有三个组件，包裹顺序依次是： Parent &gt; Middle &gt; Children 现在 Parent 组件有数据要传递给 Children 组件</p><ul><li>Parent &gt; Middle &gt; Children 具体方案请参考 props 传参</li><li>Parent &gt; Children 具体方案如下，通 context 对象完成数据传递：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="comment">// 子级</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Children</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="comment">// props类型校验</span></span><br><span class="line">  <span class="keyword">static</span> propsTypes =&#123;</span><br><span class="line">   <span class="attr">propA</span>: PropTypes.string</span><br><span class="line">   <span class="attr">methodA</span>: PropTypes.func</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// props默认值的设置</span></span><br><span class="line"><span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 跨级组件接收参数</span></span><br><span class="line"> <span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line">   <span class="attr">propA</span>: PropTypes.string</span><br><span class="line">   <span class="attr">methodA</span>: PropTypes.func</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">   this is children: &#123;this.context.propA&#125;</span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">// 中间</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Middle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">   render () &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Children</span> /&gt;</span></span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">// 父级</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"> <span class="comment">// 声明Context对象属性</span></span><br><span class="line"> <span class="keyword">static</span> childContextTypes = &#123;</span><br><span class="line">   <span class="attr">propA</span>: PropTypes.string,</span><br><span class="line">   <span class="attr">methodA</span>: PropTypes.func</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 返回Context对象，方法名是约定好的</span></span><br><span class="line"> getChildContext () &#123;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     <span class="attr">propA</span>: <span class="string">&#x27;propA&#x27;</span>,</span><br><span class="line">     <span class="attr">methodA</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;methodA&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">Middle</span>/&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="跨级组件通讯（新）"><a href="#跨级组件通讯（新）" class="headerlink" title="跨级组件通讯（新）"></a>跨级组件通讯（新）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">conts &#123; Provider ,Consumer&#125;= React.createContect([defaultValue])</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">     <span class="comment">//Consumer只能通过一个回调函数返回一react元素</span></span><br><span class="line">         <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line"><span class="xml">             &#123;context =&gt; <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                 &#123;</span></span><br><span class="line"><span class="xml">                     context.map(item=&gt;&#123;</span></span><br><span class="line"><span class="xml">                         return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                             &#123;item.name&#125;</span></span><br><span class="line"><span class="xml">                         <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                     &#125;)</span></span><br><span class="line"><span class="xml">                 &#125;</span></span><br><span class="line"><span class="xml">             <span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;/<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Middleware</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">             this is Middleware</span></span><br><span class="line"><span class="xml">             <span class="tag">&lt;<span class="name">Child</span>/&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">         <span class="built_in">super</span>()</span><br><span class="line">         <span class="built_in">this</span>.state = &#123;</span><br><span class="line">             <span class="attr">productList</span>: [&#123;</span><br><span class="line">                 <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">                 <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">             &#125;, &#123;</span><br><span class="line">                 <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">                 <span class="attr">name</span>: <span class="string">&quot;lisi&quot;</span></span><br><span class="line">             &#125;]</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;wraper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">             <span class="tag">&lt;<span class="name">Header</span>&gt;</span><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span></span><br><span class="line"><span class="xml">             <span class="tag">&lt;<span class="name">Layout</span>&gt;</span></span></span><br><span class="line"><span class="xml">             //value 固定写法用来给子组件传参</span></span><br><span class="line"><span class="xml">                 <span class="tag">&lt;<span class="name">Provider</span> <span class="attr">value</span>=<span class="string">&#123;this.state.productList&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                     <span class="tag">&lt;<span class="name">Middleware</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                 <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line"><span class="xml">             <span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="父组件向子组件通讯"><a href="#父组件向子组件通讯" class="headerlink" title="父组件向子组件通讯"></a>父组件向子组件通讯</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">父组件</span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&quot;./Child&quot;</span>;<span class="comment">//引入子组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;sara&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name &#125; = <span class="built_in">this</span>.state;<span class="comment">//解构出来定义的状态</span></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">name</span>=<span class="string">&#123;name&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span>;将状态传递给子组件</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">子组件可以用类组件，也可以用函数组件</span><br><span class="line">类组件：</span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.props);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;name&#125;=<span class="built_in">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">函数组件：</span><br><span class="line"> <span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">&#123; name &#125;</span>) </span>&#123;<span class="comment">//将用到的属性从props属性上解构出来</span></span><br><span class="line"> <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="父组件向子组件传-（值-amp-amp-回调函数）"><a href="#父组件向子组件传-（值-amp-amp-回调函数）" class="headerlink" title="父组件向子组件传 （值&amp;&amp;回调函数）"></a>父组件向子组件传 （值&amp;&amp;回调函数）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">父组件;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">bgcolor</span>: <span class="string">&quot;pink&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  bgchange = <span class="function">(<span class="params">color</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      <span class="attr">bgcolor</span>: color,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Today</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">bgcolor</span>=<span class="string">&#123;this.state.bgcolor&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">changeColor</span>=<span class="string">&#123;(color)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="xml">            this.bgchange(color);</span></span><br><span class="line"><span class="xml">          &#125;&#125;</span></span><br><span class="line"><span class="xml">        &gt;<span class="tag">&lt;/<span class="name">Today</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">子组件</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Toda</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.props.changeColor(<span class="string">&#x27;skyblue&#x27;</span>)；<span class="comment">//从父组件传递过来的回调</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>父组件的背景颜色 &#123;this.props.bgcolor&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;(e)</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="xml">            this.handleClick(e);</span></span><br><span class="line"><span class="xml">        &#125;&#125;&gt;改变父组件背景<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子组件向父组件通讯"><a href="#子组件向父组件通讯" class="headerlink" title="子组件向父组件通讯"></a>子组件向父组件通讯</h3><ul><li>利用回调函数传值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">父组件</span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&quot;./Child&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Child</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">childEvent</span>=<span class="string">&#123;options</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="xml">            //向子组件传递一个函数</span></span><br><span class="line"><span class="xml">          this.callback(options);</span></span><br><span class="line"><span class="xml">        &#125;&#125;</span></span><br><span class="line"><span class="xml">      /&gt;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">callback</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(options);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="xml">          this.add();</span></span><br><span class="line"><span class="xml">        &#125;&#125;</span></span><br><span class="line"><span class="xml">      &gt;</span></span><br><span class="line"><span class="xml">        点击</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//再子组件中点击的时候 接收父组件传递参数</span></span><br><span class="line">    <span class="built_in">this</span>.props.childEvent(<span class="string">&quot;我是子组件传递过来的&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="跨级组件通讯"><a href="#跨级组件通讯" class="headerlink" title="跨级组件通讯"></a>跨级组件通讯</h3><h5 id="context-层层组件传递-props-参考链接https-www-jianshu-com-p-65b348bf86ad"><a href="#context-层层组件传递-props-参考链接https-www-jianshu-com-p-65b348bf86ad" class="headerlink" title="context 层层组件传递 props[参考链接https://www.jianshu.com/p/65b348bf86ad]"></a>context 层层组件传递 props[参考链接<a href="https://www.jianshu.com/p/65b348bf86ad">https://www.jianshu.com/p/65b348bf86ad</a>]</h5><p>例如 A 组件和 B 组件之间进行通信，需要先找到 A 和 B 公共的父组件，A 先向 C 组件通信，C 组件通过 props 和 B 组件通信，此时 C 组件起的就是中间件的作用。<br>使用 context，是一个全局变量，像是一个大容器，再任何地方都可以访问到，我们可以把要通信的信息放在 context 上，然后再其他组件中可以随意取到。<br>React 官网不建议使用大量的 context,尽管他可以减少逐层传递，当组件结构复杂的时候，并不知道 context 是从哪里传过来的，context 是一个全局变量。<br>​</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/5375334/1611657468677-62133e6c-20f1-4138-b7db-e9a4a49513ca.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_YnflkLTlvabnpZY=,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10#from=url&id=Xi2Jl&margin=%5Bobject%20Object%5D&originHeight=395&originWidth=618&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>准备工作 再 src 下新建 content/index.js 目录</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">content / index.js;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.创建Context</span></span><br><span class="line"><span class="keyword">import</span> &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> Context = createContext();</span><br><span class="line"><span class="comment">//2.解构 内置组件Provider Consumer</span></span><br><span class="line"><span class="keyword">const</span> &#123; Provider, Consumer &#125; = Context;</span><br><span class="line"><span class="comment">//3.抛出内置组件</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  Provider, <span class="comment">//嵌套最外层 传递参数</span></span><br><span class="line">  Consumer, <span class="comment">//接收参数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">App.js中;</span><br><span class="line"><span class="comment">//1.引入Provider</span></span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">&quot;./context/index.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Parent <span class="keyword">from</span> <span class="string">&quot;./components/Parent&quot;</span>; <span class="comment">//引入父组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小人头&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">value</span>=<span class="string">&#123;this.state.name&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">border:</span> &quot;<span class="attr">1px</span> <span class="attr">solid</span> <span class="attr">green</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">width:</span> &quot;<span class="attr">60</span>%&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">margin:</span> &quot;<span class="attr">50px</span> <span class="attr">auto</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">textAlign:</span> &quot;<span class="attr">center</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">            &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">          &gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>父组件定义的值:&#123;this.state.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Parent</span> /&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">父组件;</span><br><span class="line"><span class="keyword">import</span> &#123; Consumer &#125; <span class="keyword">from</span> <span class="string">&quot;../context/index&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Grandson <span class="keyword">from</span> <span class="string">&quot;./Grandson&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">//Consumer容器,可以拿到上文传递下来的name属性,并可以展示对应的值</span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;(name) =&gt; (</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">border:</span> &quot;<span class="attr">1px</span> <span class="attr">solid</span> <span class="attr">blue</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">width:</span> &quot;<span class="attr">70</span>%&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">margin:</span> &quot;<span class="attr">20px</span> <span class="attr">auto</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">textAlign:</span> &quot;<span class="attr">center</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">        &gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>子组件，获取父组件的值:&#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">          &#123;/* 孙组件内容 */&#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Grandson</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      )&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parent;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Consumer孙组件;</span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Consumer &#125; <span class="keyword">from</span> <span class="string">&quot;../context/index.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Grandson</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;/** <span class="tag">&lt;<span class="name">Consumer</span>&gt;</span>&#123;name =&gt; <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;<span class="tag">&lt;/<span class="name">Consumer</span>&gt;</span> 格式一定不能错 */&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;(name) =&gt; (</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">border:</span> &quot;<span class="attr">1px</span> <span class="attr">solid</span> <span class="attr">green</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">width:</span> &quot;<span class="attr">65</span>%&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">margin:</span> &quot;<span class="attr">50px</span> <span class="attr">auto</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">textAlign:</span> &quot;<span class="attr">center</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">            &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">          &gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>孙组件。获取传递下来的值:&#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        )&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="没有嵌套关系组件之间的通讯"><a href="#没有嵌套关系组件之间的通讯" class="headerlink" title="没有嵌套关系组件之间的通讯"></a>没有嵌套关系组件之间的通讯</h3><ul><li>使用自定义事件机制</li></ul><p>自定义事件是典型的发布订阅模式，通过向事件对象上添加事件监听器和触发事件来实现组件之间的通信</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install events --save</span><br><span class="line">在src下新建一个util目录里面建一个events.js</span><br><span class="line"><span class="keyword">import</span> &#123; EventEmitter &#125; <span class="keyword">from</span> <span class="string">&#x27;events&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> EventEmitter();</span><br></pre></td></tr></table></figure><h3 id="使用-ref"><a href="#使用-ref" class="headerlink" title="使用 ref"></a>使用 ref</h3><p>再需要获取组件实例上</p><Form   {...layout} _ref_='childForm'/>再用到这个个form表单的组件内，this.refs.addForm.refs.childForm.validateFields();]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React-组件通讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - 路由原理</title>
      <link href="/2020/04/17/ultbw4/"/>
      <url>/2020/04/17/ultbw4/</url>
      
        <content type="html"><![CDATA[<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>hash</li></ul><p>hash 是通过锚点链接(#)来实现的, 锚点不会向服务端发送请求。<br>我们可以通过 location 相关 api 控制浏览器记录修改，hashchange 事件，监听地址栏锚点地址，重新渲染路由视图</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;hashchange&quot;</span>, funcRef, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><ul><li>history</li></ul><p>html5 新增的 api，history 会向服务器发送请求。<br>我们可以通过 pushState、replaceState 对浏览器历史记录修改，popState 事件监听状态变更，重新渲染路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">history.pushState()</span><br><span class="line">history.replaceState()</span><br><span class="line">history.go()</span><br><span class="line">history.back() 等价于 history.go(-<span class="number">1</span>)</span><br><span class="line">history.forward() 则等价于 history.go(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><h3 id="1-直观区别："><a href="#1-直观区别：" class="headerlink" title="1.直观区别："></a>1.直观区别：</h3><p>hash 模式 url 带#号，history 模式不带#号。</p><h3 id="2-深层区别："><a href="#2-深层区别：" class="headerlink" title="2.深层区别："></a>2.深层区别：</h3><p>hash 模式 url 里面永远带着#号，我们在开发当中默认使用这个模式。<br>如果用户考虑 url 的规范那么就需要使用 history 模式，因为 history 模式没有#号，是个正常的 url 适合推广宣传<br>功能也有区别，比如我们在开发 app 的时候有分享页面，那么这个分享出去的页面就是用 vue 或是 react 做的，<br>咱们把这个页面分享到第三方的 app 里，有的 app 里面 url 是不允许带有#号的，所以要将#号去除那么就要使用</p><p>路由模式配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="comment">// mode: &#x27;history&#x27;,</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;hash&quot;</span>,</span><br><span class="line">  routes,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>history api 可以分为两大部分，切换和修改，参考 MDN，切换历史状态包括 back、forward、go 三个方法，对应浏览器的前进，后退，跳转操作，有同学说了，(谷歌)浏览器只有前进和后退，没有跳转，嗯，在前进后退上长按鼠标，会出来所有当前窗口的历史记录，从而可以跳转(也许叫跳更合适)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">history.go(-<span class="number">2</span>); <span class="comment">//后退两次</span></span><br><span class="line">history.go(<span class="number">2</span>); <span class="comment">//前进两次</span></span><br><span class="line">history.back(); <span class="comment">//后退</span></span><br><span class="line">hsitory.forward(); <span class="comment">//前进</span></span><br></pre></td></tr></table></figure><h3 id="修改历史状态包括了-pushState-replaceState"><a href="#修改历史状态包括了-pushState-replaceState" class="headerlink" title="修改历史状态包括了 pushState,replaceState"></a>修改历史状态包括了 pushState,replaceState</h3><p>两个方法,这两个方法接收三个参数:stateObj,title,url</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">history.pushState(&#123; <span class="attr">color</span>: <span class="string">&quot;red&quot;</span> &#125;, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">history.back();</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  history.forward();</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">window</span>.onpopstate = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(event.state);</span><br><span class="line">  <span class="keyword">if</span> (event.state &amp;&amp; event.state.color === <span class="string">&quot;red&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.style.color = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过 pushstate 把页面的状态保存在 state 对象中，当页面的 url 再变回这个 url 时，可以通过 event.state 取到这个 state 对象，从而可以对页面状态进行还原，这里的页面状态就是页面字体颜色，其实滚动条的位置，阅读进度，组件的开关的这些页面状态都可以存储到 state 的里面。</p><h3 id="history-模式的问题"><a href="#history-模式的问题" class="headerlink" title="history 模式的问题"></a>history 模式的问题</h3><p>通过 history api，我们丢掉了丑陋的#，但是它也有个问题：不怕前进，不怕后退，就怕<strong>刷新</strong>，<strong>f5</strong>，（如果后端没有准备的话）,因为刷新是实实在在地去请求服务器的,不玩虚的。 在 hash 模式下，前端路由修改的是#中的信息，而浏览器请求时是不带它玩的，所以没有问题.但是在 history 下，你可以自由的修改 path，当刷新时，如果服务器中没有相应的响应或者资源，会分分钟刷出一个 404 来。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue路由原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - 作用域</title>
      <link href="/2020/04/17/lhvqis/"/>
      <url>/2020/04/17/lhvqis/</url>
      
        <content type="html"><![CDATA[<h1 id="一、闭包"><a href="#一、闭包" class="headerlink" title="一、闭包"></a>一、闭包</h1><p>一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure）。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures</a><br>但是我们需要的不只是字面意思，下面测试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;Mozilla&quot;</span>; <span class="comment">// name 是一个被 init 创建的局部变量</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">displayName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// displayName() 是内部函数，一个闭包</span></span><br><span class="line">    alert(name); <span class="comment">// 使用了父函数中声明的变量</span></span><br><span class="line">  &#125;</span><br><span class="line">  displayName();</span><br><span class="line">&#125;</span><br><span class="line">init();</span><br></pre></td></tr></table></figure><p>init() 创建了一个局部变量 name 和一个名为 displayName() 的函数。displayName() 是定义在 init() 里的内部函数，并且仅在 init() 函数体内可用。请注意，displayName() 没有自己的局部变量。然而，因为它可以访问到外部函数的变量，所以 displayName() 可以使用父函数 init() 中声明的变量 name 。<br>闭包有三个特性： 1.函数嵌套函数 2.函数内部可以引用外部的参数和变量 3.参数和变量不会被垃圾回收机制回收<br>闭包的优点<br>1、全局变量可能会造成命名冲突，使用闭包不用担心这个问题，因为它是私有化，加强了封装性，这样保护变量的安全<br>2、每个模块都可以调用，当程序越来越复杂之后，会带不可预测的危险<br>闭包的缺点<br>1、如果闭包使用不当，就会导致变量不会被垃圾回收机制回收，造成内存泄露</p><h1 id="二、js-中自执行函数-function-和-function-区别"><a href="#二、js-中自执行函数-function-和-function-区别" class="headerlink" title="二、js 中自执行函数(function(){})()和(function(){}())区别"></a>二、js 中自执行函数(function(){})()和(function(){}())区别</h1><p><a href="https://blog.csdn.net/stpice/article/details/80586444">https://blog.csdn.net/stpice/article/details/80586444</a><br>这两种写法，都是一种立即执行函数的写法，这种函数在函数定义的地方就直接执行了。</p><p>内嵌套<br>（function(){}()）<br><strong>方式一，调用函数，得到返回值。强制函数直接量执行再返回一个引用，引用在去调用执行</strong><br>外嵌套<br>(function(){})()<br><strong>方式二，调用函数，得到返回值。强制运算符使函数调用执行</strong></p><h2 id="三、ES5-与-ES6-块级作用域"><a href="#三、ES5-与-ES6-块级作用域" class="headerlink" title="三、ES5 与 ES6 块级作用域"></a>三、ES5 与 ES6 块级作用域</h2><p><a href="https://segmentfault.com/a/1190000011444396">https://segmentfault.com/a/1190000011444396</a><br>es5:<br>es5 只有函数具备作用域<br>es5 模拟块级作用域<br>es5 弱类型语言，只有函数具备块级作用域<br>es6:<br>es6 let/const 看见{} 就会在离它最近的{}内形成自己的封闭作用域<br>注意： 在 ES6 中，{}就是一个块级作用域。</p><h3 id="var-声明之函数作用域和全局作用域。"><a href="#var-声明之函数作用域和全局作用域。" class="headerlink" title="var 声明之函数作用域和全局作用域。"></a>var 声明之函数作用域和全局作用域。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="number">1</span> + <span class="number">1</span> === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;xixi&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getName();</span><br></pre></td></tr></table></figure><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>特点：重复声明会报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName4ES6</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="number">1</span> + <span class="number">1</span> === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">&quot;xixi&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getName4ES6(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>特点：值不可以改变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;wanger&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> c = <span class="number">0</span>; c &lt; arr.length; c++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">    <span class="keyword">const</span> filepath = path.join(__dirname, <span class="string">`<span class="subst">$&#123;arr[j]&#125;</span>.txt`</span>);</span><br><span class="line">    fs.readFile(filepath, <span class="function">(<span class="params">err, file</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">      <span class="built_in">console</span>.log(file.toString());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="临时性死区"><a href="#临时性死区" class="headerlink" title="临时性死区"></a>临时性死区</h3><p>1、let、const 不允许声明之前调用，调用了就会报错<br>2、声明之前调用变量，就会形成这个变量得暂时性死区<br>const 和 let 同样具有块级作用域，不能重复声明，临时性死区的概念。它还具有两个特有的特性：声明的同时必须初始化、变量引用不可以改变。<br>就是在调用之前使用，暂时性死区只能是 let 和 const 中出现</p><h1 id="四、拷贝分类"><a href="#四、拷贝分类" class="headerlink" title="四、拷贝分类"></a>四、拷贝分类</h1><p><a href="https://www.jianshu.com/p/94dbef2de298">https://www.jianshu.com/p/94dbef2de298</a><br>拷贝分为二种</p><p>1、浅拷贝<br>浅拷贝：只复制指向某个对象的指针，而不是复制对象本身，新对象旧对象还是共同享用同一块内存<br>浅拷贝的特点<br>(1) 对于基本数据类型的成员对象，因为基础数据类型是值传递的，所以是直接将属性值赋值给新的对象。基础类型的拷贝，其中一个对象修改该值，不会影响另外一个。<br>(2) 对于引用类型，比如数组或者类对象，因为引用类型是引用传递，所以浅拷贝只是把内存地址赋值给了成员变量，它们指向了同一内存空间。改变其中一个，会对另外一个也产生影响。</p><p>2、深拷贝<br>深拷贝：会另外创造一个一模一样的对象，新对象跟原来的对象不会共享一个内存，修改新对象也不会改到原对象上<br>(1) 对于基本数据类型的成员对象，因为基础数据类型是值传递的，所以是直接将属性值赋值给新的对象。基础类型的拷贝，其中一个对象修改该值，不会影响另外一个（和浅拷贝一样）。<br>(2) 对于引用类型，比如数组或者类对象，深拷贝会新建一个对象空间，然后拷贝里面的内容，所以它们指向了不同的内存空间。改变其中一个，不会对另外一个也产生影响。<br>(3) 对于有多层对象的，每个对象都需要实现 Cloneable 并重写 clone() 方法，进而实现了对象的串行层层拷贝。<br>(4) 深拷贝相比于浅拷贝速度较慢并且花销较大。</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作用域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - 路由</title>
      <link href="/2020/04/16/gep3xq/"/>
      <url>/2020/04/16/gep3xq/</url>
      
        <content type="html"><![CDATA[<p>路由的概念来自于后端，前端没有正真的路由，仅仅是模拟实现。</p><h2 id="为什么要使用路由？"><a href="#为什么要使用路由？" class="headerlink" title="为什么要使用路由？"></a>为什么要使用路由？</h2><p>因为当我们的前端项目比较复杂、页面文件较多，通过传统 a 标签跳转同步页面，会导致页面白屏、闪白、响应不及时，用户体验较差、代码不易维护。<br>通过解析浏览器地址栏参数，根据路由参数，局部重绘页面视图，结合 innerHTML、appendChild，异步操作请求数据来局部更新我们的页面。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>hash 哈希（/#/&lt;路由名称&gt;）不会向服务器发起请求</li><li>history 历史 （/&lt;路由名称&gt;） 会向服务器发起请求</li></ul><h2 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h2><p>| name | 路由名称 |</p><p>|  |<br>| —- | ——– |<br>| path | 路由路径 |</p><p>|<br>| component | 路由组件 |</p><p>|<br>| meta | 路由信息对象 |</p><p>|<br>| alias | 路由别名 |</p><p>|<br>| redirect | 路由重定向 |</p><p>|<br>| * | 通配符 |</p><p>|</p><h2 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h2><p>项目较大或者页面较多，为了提升组件加载速度，通过按需加载路由组件提升性能</p><p>router/routes.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/xxx.vue&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes;</span><br></pre></td></tr></table></figure><p>router/index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&quot;./routes&quot;</span>;</span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;history&quot;</span>,</span><br><span class="line">  routes,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="路由-404"><a href="#路由-404" class="headerlink" title="路由 404"></a>路由 404</h2><p>router/routes.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&quot;/404&quot;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;notFound&quot;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/notFound&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">  <span class="attr">redirect</span>: <span class="string">&quot;/404&quot;</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="全局导航守"><a href="#全局导航守" class="headerlink" title="全局导航守"></a>全局导航守</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter();</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="路由独享的守卫-beforeEnter"><a href="#路由独享的守卫-beforeEnter" class="headerlink" title="路由独享的守卫 beforeEnter"></a>路由独享的守卫 beforeEnter</h2><p>router/routes.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/foo&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/somepage.vue&quot;</span>),</span><br><span class="line">    <span class="comment">//方法与全局前置守卫的方法参数是一样的</span></span><br><span class="line">    <span class="attr">beforeEnter</span>: <span class="function"><span class="keyword">function</span> (<span class="params">to, <span class="keyword">from</span>, next</span>) </span>&#123;&#125;,</span><br><span class="line">    <span class="attr">afterEnter</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="组件内的守卫"><a href="#组件内的守卫" class="headerlink" title="组件内的守卫"></a>组件内的守卫</h2><p>views/somepage.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">//在渲染该组件的对应路由被confirm前调用</span></span><br><span class="line">    <span class="comment">//不能获取组件实例  this</span></span><br><span class="line">    <span class="comment">//因为当守卫执行前，组件实例还没被创建</span></span><br><span class="line">    <span class="function"><span class="title">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(to, <span class="keyword">from</span>, next);</span><br><span class="line">      next();</span><br><span class="line">      <span class="comment">// 在渲染该组件的对应路由被 confirm 前调用</span></span><br><span class="line">      <span class="comment">// 不！能！获取组件实例 `this`</span></span><br><span class="line">      <span class="comment">// 因为当守卫执行前，组件实例还没被创建</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">beforeRouteUpdate</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(to, <span class="keyword">from</span>, next);</span><br><span class="line">      next();</span><br><span class="line">      <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">      <span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class="line">      <span class="comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">      <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">      <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">      <span class="built_in">console</span>.log(to, <span class="keyword">from</span>, next);</span><br><span class="line">      next();</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h2><ul><li>path+query</li><li>name+params</li><li>动态路由传参</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git - gihub使用指南</title>
      <link href="/2020/04/15/eh12bf/"/>
      <url>/2020/04/15/eh12bf/</url>
      
        <content type="html"><![CDATA[<h3 id="为什么需要用到版本控制工具"><a href="#为什么需要用到版本控制工具" class="headerlink" title="为什么需要用到版本控制工具"></a>为什么需要用到版本控制工具</h3><ul><li>开发模式<ul><li>集成开发</li><li>前后端分离</li></ul></li></ul><ol><li>多人协作提升工作效率</li><li>减少代码冗余</li><li>减少沟通成本</li><li>代码回滚</li><li>代码备份</li><li>历史代码对比</li></ol><h3 id="版本控制工具分类与区别"><a href="#版本控制工具分类与区别" class="headerlink" title="版本控制工具分类与区别"></a>版本控制工具分类与区别</h3><h4 id="集中式版本控制"><a href="#集中式版本控制" class="headerlink" title="集中式版本控制"></a>集中式版本控制</h4><ul><li>svn</li><li>tfs</li></ul><h4 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h4><ul><li>git</li></ul><p>集中式：客户端与服务端需要同时在线，才可以完成增删改查 （操作型）<br>分布式：客户端可以先自行保存快照，在合适的环境下，提交到服务器 （命令行）</p><table><thead><tr><th>git</th><th>svn</th></tr></thead><tbody><tr><td>1. Git 是一个分布式的版本控制工具</td><td>1. SVN 是集中版本控制工具</td></tr><tr><td>2.它属于第 3 代版本控制工具</td><td>2.它属于第 2 代版本控制工具</td></tr><tr><td>3.客户端可以在其本地系统上克隆整个存储库</td><td>3.版本历史记录存储在服务器端存储库中</td></tr><tr><td>4.即使离线也可以提交</td><td>4.只允许在线提交</td></tr><tr><td>5.Push/pull 操作更快</td><td>5.Push/pull 操作较慢</td></tr><tr><td>6.工程可以用 commit 自动共享 6.没有任何东西自动共享</td><td></td></tr></tbody></table><p>|</p><h3 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h3><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1609897890105-aa6703df-2f7b-424d-b9c2-eb1b7db6a7da.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=M4XLE&originHeight=499&originWidth=829&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>git init：仓库的初始化；</li><li>git status：查看当前仓库的状态；</li><li>git diff：查看仓库与上次修改的内容；</li><li>git add：将文件添加至暂存区；</li><li>git commit：提交代码；</li><li>git clone：克隆代码；</li><li>git branch：查看当前分支；</li><li>git checkout：切换当前分支；</li><li>git log</li><li>git pull<ul><li>git fetch</li><li>git merge</li></ul></li><li>git push</li><li>git config</li></ul><h3 id="提交时发生冲突，你能解释冲突是如何产生的吗？你是如何解决的？"><a href="#提交时发生冲突，你能解释冲突是如何产生的吗？你是如何解决的？" class="headerlink" title="提交时发生冲突，你能解释冲突是如何产生的吗？你是如何解决的？"></a>提交时发生冲突，你能解释冲突是如何产生的吗？你是如何解决的？</h3><p>开发过程中，我们都有自己的特性分支，所以冲突发生的并不多，但也碰到过。诸如公共类的公共方法，我和别人同时修改同一个文件，他提交后我再提交就会报冲突的错误。 发生冲突，在 IDE 里面一般都是对比本地文件和远程分支的文件，然后把远程分支上文件的内容手工修改到本地文件，然后再提交冲突的文件使其保证与远程分支的文件一致，这样才会消除冲突，然后再提交自己修改的部分。特别要注意下，修改本地冲突文件使其与远程仓库的文件保持一致后，需要提交后才能消除冲突，否则无法继续提交。必要时可与同事交流，消除冲突。 发生冲突，也可以使用命令。</p><ul><li>通过 git stash 命令，把工作区的修改提交到栈区，目的是保存工作区的修改；</li><li>通过 git pull 命令，拉取远程分支上的代码并合并到本地分支，目的是消除冲突；</li><li>通过 git stash pop 命令，把保存在栈区的修改部分合并到最新的工作空间中；</li></ul><h3 id="git-本地仓库和远程仓库的创建和链接"><a href="#git-本地仓库和远程仓库的创建和链接" class="headerlink" title="git 本地仓库和远程仓库的创建和链接"></a>git 本地仓库和远程仓库的创建和链接</h3><ol><li><strong>第一种使用方法</strong><ol><li>先创建一个远程仓库（也就是在 github 上创建一个远程仓库）</li><li>然后再通过 git clone 远程仓库的地址 克隆到本地</li><li>将我们写好的项目放到 clone 下来的文件夹里</li><li>通过 git add . ( . 点是选中所有的文件，也可以改成某个文件名只提交某一个文件)这是添加到暂时存储</li><li>通过 git commit -m “（这里边是描述信息）” 推送到本地仓库</li><li>通过 git push 将我们的项目推送到远程仓库</li></ol></li><li><strong>第二种使用方法</strong><ol><li>先创建一个远程仓库（也就是在 github 上创建一个远程仓库）</li><li>然后在自己电脑上创建一个文件</li><li>在自己创建的文件里点右键 选中 git bash here 进入命令行</li><li>在命令行里输入 git init 创建一个本地仓库</li><li>再输入 git add . 添加到暂时存储</li><li>再输入 git commit -m “（这里是描述信息）”推送到本地仓库</li><li>再输入 git remote add 自定义名 远程仓库地址 绑定本地仓库和远程仓库</li><li>再输入 git push 自定义名 master 添加到远程仓库</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 版本控制 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gihub使用指南 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git - 提交规范</title>
      <link href="/2020/04/15/ffzokr/"/>
      <url>/2020/04/15/ffzokr/</url>
      
        <content type="html"><![CDATA[<h2 id="初始化一个本地仓库"><a href="#初始化一个本地仓库" class="headerlink" title="初始化一个本地仓库"></a>初始化一个本地仓库</h2><p>在开始操作之前，确保你的系统环境已经安装了 Git， <a href="https://git-scm.com/">https://git-scm.com</a> 上提供了各个系统环境的 Git 下载。<br>在使用 git 命令进行操作之前，你需要一个 git 仓库，你可以移动到你的工作目录，命令行中执行:</p><p>$ git init Initialized empty Git repository in /path/to/work/directory/.git/</p><p>这样你就可以得到一个本地仓库了，你会看到工作目录下已经新增了一个 <em>.git</em> 目录。</p><p><em>注：某些系统中可能预设隐藏以 . 开头的文件夹，可能需要开启相关设置才能看到</em></p><h2 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h2><p>当然如果你已经有了一个远程仓库，你就不需要初始化一个本地仓库了，你可以使用：</p><p>$ git clone <remote address></p><p>上面的命令会将链接指向的远程仓库克隆到本地，这样你也得到了一个 <em>git</em> 仓库，并且这个仓库是与远程仓库关联的，如果你有远程仓库的权限，你就可以对这个仓库推送你的提交。</p><h2 id="查看仓库状态"><a href="#查看仓库状态" class="headerlink" title="查看仓库状态"></a>查看仓库状态</h2><p>上面我们已经初始化了一个空仓库，我们可以通过指令：</p><p>$ git status On branch master No commits yet nothing to commit (create/copy files and use “git add” to track)</p><p>通过 <em>git status</em> 查看当前的仓库(或代码分支)的状态。</p><h2 id="追踪文件修改"><a href="#追踪文件修改" class="headerlink" title="追踪文件修改"></a>追踪文件修改</h2><p>接下来我们可以为这个仓库添加一些文件, 在工作目录下执行：</p><p>$ touch index.js</p><p>上面的指令为我们在工作目录下创建一个名为 index.js 的文件, 使用 git status 可以查看到已经添加了一个 index.js 文件, 下面我们在这个文件中写入一些内容：</p><p>$ echo “console.log(‘learning git!’);” &gt; index.js</p><p>上面这条指令为我们将 <em>“console.log(‘learning git!’)”</em> 这个内容写入了 <em>index.js</em> 文件中。此时查看仓库状态如下：</p><p>$ git status On branch master No commits yet Untracked files: (use “git add <file>…” to include in what will be commited) index.js nothing added to commit but untracked files present(use “git add” to track)</p><p>可以看到信息反馈说到 index.js 这个文件是未追踪的(<em>Untracked files</em>), 而在 git 中，如果一个文件需要 git 进行版本控制与内容修改追踪，那么就需要先将它加入到 git 仓库的暂存区 (<em>stage</em>) 中。将文件加入到暂存区只需要执行：</p><p>$ git add index.js</p><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1547711556978-9d79b950-934e-463c-9e90-cf70dd02a060.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=k2xV8&originHeight=343&originWidth=675&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br><em>(将工作区的修改通过 add 命令移到暂存区)</em></p><p>相信很多人在使用 git 添加修改或者新增文件的时候，会习惯直接使用</p><p>$ git add .</p><p>直接将当前目录下的修改的全部文件添加到暂存区(<em>stage</em>), 一般情况下，这样的方式既方便又快捷，但是我仍然推荐在执行 <em>git add</em> 先使用 <em>git status</em> 命令来查看一下仓库有哪些文件被修改了，这样是因为如果你的仓库中使用了 git 的子模块功能，直接 <em>git add .</em> 会将子模块的 commit ID 也一并添加到暂存区，万一这个 commit ID 的提交并不是你的本意，那么提交到远程可能会导致子模块错乱的问题。<br>为了养成良好习惯，最好在 <em>git add</em> 前使用 <em>git status</em> 查看一下仓库状态。</p><h2 id="提交文件修改的历史信息"><a href="#提交文件修改的历史信息" class="headerlink" title="提交文件修改的历史信息"></a>提交文件修改的历史信息</h2><p>通过 git add 我们已经将对文件的操作(新增或修改, 删除等)添加到了暂存区 (<em>stage</em>) 中，但是这样是不够的，我们还需要对这个操作记录成一个历史记录：</p><p>$ git commit -m “Add a file named index.js” [master (root-commit) 910f65f] Add a file named index.js 1 file changed, 1 insertion(+) create mode 100644 index.js</p><p>这样我们对文件的操作生成一条历史记录，历史记录可以通过 <em>git log</em> 进行查看。不加 -m 参数直接 commit 的提交信息会默认使用 vim 编辑器进行编辑(对于 vim 编辑器的操作介绍请看后面章节)。对于 commit 记录，原则上我们应该每个 commit 所记录的修改保持纯洁与单一，不允许比如对两个 bug 的修复都提交到一个 commit 中的情况，这样一旦 bug A 的修复会导致另一个问题，但是 bug B 的修复是没有问题的，此时如果回退该 commit，虽然回退了 bug A 的提交，但是也丢失 bug B 的修复工作了。<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1547711591808-dc465940-7d09-4c2b-b87a-66bd2e25fe0c.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=tsPsQ&originHeight=350&originWidth=1021&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br><em>(将暂存区的修改通过 commit 命令存储到历史库中)</em><br><em>注：笔者不推荐 commit -m 的操作，因为这不符合提交规范，这里是为了简短说明 commit 的使用，详情请看后面章节</em></p><h2 id="Vim-编辑器的简单介绍"><a href="#Vim-编辑器的简单介绍" class="headerlink" title="Vim 编辑器的简单介绍"></a>Vim 编辑器的简单介绍</h2><p>使用 git commit 命令会默认使用 vim 编辑器进行提交信息的编写，同时笔者不推荐使用 git commit -m 的方式来提交信息，因为这样编写出来的提交信息不符合规范，只能说明一些简短信息或者甚至直接为空，尤其是空信息是不被允许的。所以这里会简单介绍 vim 的基本用法，有兴趣的读者可以搜索相关 vim 的学习资料进行深入学习。<br>当你使用 add 命令将对于文件的修改添加到缓存区后，你可以使用输入 git commit 然后直接回车，然后你会进入到 vim 编辑器的界面，你会在界面上看到类似下面的信息：</p><h1 id="Please-enter-the-commit-message-for-your-changes-Lines-starting-with-‘-’-will-be-ignored-and-an-empty-message-aborts-the-commit-Committer-shawn-x7a-104-x61-x6e-x67-120-105-x61-x6e-x67-64-122-104-97-110-103-120-x69-x61-110-x67-100-101-77-x61-x63-66-111-111-107-45-x50-x72-x6f-x2e-x6c-111-99-x61-x6c-On-branch-master-Changes-to-be-committed-modified-index-js-“-path-to-working-directory-git-learning-git-COMMIT-EDITMSG”-10L-274C"><a href="#Please-enter-the-commit-message-for-your-changes-Lines-starting-with-‘-’-will-be-ignored-and-an-empty-message-aborts-the-commit-Committer-shawn-x7a-104-x61-x6e-x67-120-105-x61-x6e-x67-64-122-104-97-110-103-120-x69-x61-110-x67-100-101-77-x61-x63-66-111-111-107-45-x50-x72-x6f-x2e-x6c-111-99-x61-x6c-On-branch-master-Changes-to-be-committed-modified-index-js-“-path-to-working-directory-git-learning-git-COMMIT-EDITMSG”-10L-274C" class="headerlink" title="Please enter the commit message for your changes. Lines starting # with ‘#’ will be ignored, and an empty message aborts the commit. # # Committer: shawn &#x7a;&#104;&#x61;&#x6e;&#x67;&#120;&#105;&#x61;&#x6e;&#x67;&#64;&#122;&#104;&#97;&#110;&#103;&#120;&#x69;&#x61;&#110;&#x67;&#100;&#101;&#77;&#x61;&#x63;&#66;&#111;&#111;&#107;&#45;&#x50;&#x72;&#x6f;&#x2e;&#x6c;&#111;&#99;&#x61;&#x6c; # # On branch master # Changes to be committed: # modified: index.js # ~ ~ “~/path/to/working/directory/git-learning/.git/COMMIT_EDITMSG” 10L, 274C"></a>Please enter the commit message for your changes. Lines starting # with ‘#’ will be ignored, and an empty message aborts the commit. # # Committer: shawn <a href="mailto:&#x7a;&#104;&#x61;&#x6e;&#x67;&#120;&#105;&#x61;&#x6e;&#x67;&#64;&#122;&#104;&#97;&#110;&#103;&#120;&#x69;&#x61;&#110;&#x67;&#100;&#101;&#77;&#x61;&#x63;&#66;&#111;&#111;&#107;&#45;&#x50;&#x72;&#x6f;&#x2e;&#x6c;&#111;&#99;&#x61;&#x6c;">&#x7a;&#104;&#x61;&#x6e;&#x67;&#120;&#105;&#x61;&#x6e;&#x67;&#64;&#122;&#104;&#97;&#110;&#103;&#120;&#x69;&#x61;&#110;&#x67;&#100;&#101;&#77;&#x61;&#x63;&#66;&#111;&#111;&#107;&#45;&#x50;&#x72;&#x6f;&#x2e;&#x6c;&#111;&#99;&#x61;&#x6c;</a> # # On branch master # Changes to be committed: # modified: index.js # ~ ~ “~/path/to/working/directory/git-learning/.git/COMMIT_EDITMSG” 10L, 274C</h1><p>以 <em>#</em> 开头的信息是注释，不用担心他们会添加到你的提交信息中，而且如果你没有填写信息就直接退出则该 commit 会被中断。</p><h5 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h5><p>接下来，当你需要填写数据的时候，你需要按下 “i” 键进入插入模式，进入插入模式之后才能进行文本的插入与编写，然后就可以类似在一般的编辑器下编写你想填写的信息。<br>而当你编写完信息后，你需要先退出插入模式而回到原来的普通模式，退出插入模式你只需要按下 “esc” 键。</p><h5 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h5><p>当你想退出 vim 编辑器的时候，我们需要进入命令模式，在普通模式下输入 <strong>:</strong> ， 进入命令模式，输入 <em>wq</em> 回车,就可以保存并退出编辑了，下面提供一些常用的命令供大家参考：</p><p>:q 退出 :q! 强制退出，不进行保存 :wq 保存并退出 :wq! 强制保存并退出</p><h2 id="使用分支"><a href="#使用分支" class="headerlink" title="使用分支"></a>使用分支</h2><p>分支功能是 git 最为强大的功能之一，它能够让你并发地在多个场景下进行开发。并且可以让你同时开发不同功能而不冲突，用于区分功能或版本。<br>在企业里面，有规模的开发团队在开发功能的时候是不可能大家都在一个分支上开发的，因为这可能需要不断地解决冲突，此外功能与功能间通常相互独立，在同一个分支上开发本就不合理。<br>你可以执行下面这个命令来创建一个分支：</p><p>$ git branch <branch-name></p><p>例如你执行 <em>git branch test</em> 这条命令创建了一条分支，实际上你是创建了一个指向该 commit 节点的名为 test 的指针：<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1547711624226-97eafbf3-ad2d-47f9-950d-fdbf5a186751.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=pvmGT&originHeight=248&originWidth=458&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br><em>(创建一个名为 test 的分支)</em></p><h2 id="在不同场景间切换"><a href="#在不同场景间切换" class="headerlink" title="在不同场景间切换"></a>在不同场景间切换</h2><p>在日常开发的时候，我们可能经常会需要切换到不同的开发场景，比如你正在一个功能分支上开发，但是产品经理或者测试忽然需要你在线上环境看一个问题，所以你需要将你目前的代码切换到线上环境的代码，当你需要切换分支的时候，可以：</p><p>$ git checkout <branch-name>|<tag>|<commit hash id></p><p>上面只是 git checkout 的使用场景之一，checkout 不仅可以切换分支，还可以切换 tag，或者 commit hash id 等环境的代码。比如你需要切换到上面创建的 test 分支，那么你需要执行 <em>git checkout test</em> 这条指令，在 git 中是使用 Head 指针来指向当前提交记录的，而 checkout 命令实际上是将 git 的 head 指针指向了 test 这一指针：<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1547711643701-5f5d0274-1e96-4996-97ad-bd5b6fa0cd72.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=FP1eE&originHeight=392&originWidth=557&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br><em>(将当前工作分支由 master 分支变为 test 分支)</em></p><p>那么现在的当前工作分支就是 test 分支了。这里就会明白，实际上 checkout 命令的本质就是移动 git 的 Head 指针。<br>当然，直接 checkout 可能会不能顺利切换过去，因为你的工作区内对于某些文件的修改没有提交，会 git 阻止你进行分支切换，提醒你先对文件的修改进行 commit 提交，相关的 commit 提交操作像上面的章节一样操作就可以，但是如果你因为一些其他原因不希望进行 commit 比如这部分的修改不满足一个 commit 或者这些是实验性的代码，所以你可以将当前的工作区修改进行 “储藏”：</p><p>$ git stash</p><p>git stash 命令可以为你保存起目前的代码，并将这些修改压入到一个栈中，换言之你可以多次进行 stash。<br>然后当你解决了问题，想回到原来的工作代码环境，你只需要切换到原来的分支上，进行：</p><p>$ git stash pop</p><p>这里会默认拿栈顶的代码(也就是最近一次 stash 的代码)修改记录并将其反映到你的工作区中。</p><h2 id="Git-多人合作基本模型"><a href="#Git-多人合作基本模型" class="headerlink" title="Git 多人合作基本模型"></a>Git 多人合作基本模型</h2><p>在实际的软件研发过程中，团队作战的场景远远多于单兵作战，所以仅仅是掌握上面章节对于自己本地仓库进行操作的 git 指令是不够的，我们会需要一个远程的集中式仓库。所谓集中式仓库就是团队中所有人的代码都上传到这个地方进行存储，有了集中式的仓库，可以方便地进行成果共享与协作。</p><h3 id="添加远程仓库地址"><a href="#添加远程仓库地址" class="headerlink" title="添加远程仓库地址"></a>添加远程仓库地址</h3><p>如果你已经使用 <em>git init</em> 初始化了一个 git 仓库，并且你想要将你的工作成果放到一个远程仓库上，为可能的多人协作做准备的话，你需要为你的本地仓库添加远程连接，也即是说将你本地仓库的历史库放到一个远程服务器的仓库中保存里面：</p><p>$ git remote add <name> <remote address></p><p>使用 <em>git remote add</em> 命令为本地仓库添加一个远程仓库的地址，地址可以是 <em>http/https</em> 格式的也可以是 <em>ssh</em> 格式的。而 name 是指这个远程仓库链接名称，比如：</p><p>$ git remote add origin <a href="https://github.com/username/example">https://github.com/username/example</a></p><p>当然，如果你的仓库是通过 <em>git clone</em> 克隆下来的，你可以不需要添加一个远程仓库链接。</p><h3 id="将本地修改推送到远程仓库"><a href="#将本地修改推送到远程仓库" class="headerlink" title="将本地修改推送到远程仓库"></a>将本地修改推送到远程仓库</h3><p>当你有若干个 <em>commit</em> 提交记录需要更新到远程仓库，在执行了 <em>commit</em> 命令后，使用：</p><p>$ git push origin master Counting objects: 3, done. Writing objects: 100% (3/3), 274 bytes | 274.00 KiB/s, done. Total 3 (delta 0), reused 0 (delta 0) To <a href="https://github.com/username/example.git">https://github.com/username/example.git</a> * [new branch] master -&gt; master</p><p>这样就可以将你本地的 <em>commit</em> 提交传送到远程仓库中进行共享。注意第一个推送修改的时候需要指定远程连接的名称(这里是 origin, 即上一步添加远程仓库地址的名称), 并指定推送的分支名(这里是 master 分支)。</p><h3 id="拉取并合并他人修改"><a href="#拉取并合并他人修改" class="headerlink" title="拉取并合并他人修改"></a>拉取并合并他人修改</h3><p>当团队其他成员对该分支上的代码进行了修改并且已经 <em>push</em> 到远程仓库后，你可以将他的提交拉取到本地并且将他的提交进行合并自己本地仓库上，通过：</p><p>$ git pull There is no tracking information for the current branch. Please specify which branch you want to merge with. See git-pull(1) for details. git pull <remote> <branch> If you wish to set tracking information for this branch you can do so with: git branch –set-upstream-to=origin/<branch> master</p><p>第一次拉取远程仓库的修改的时候，会出现像上面 <em>“There is no tracking information for the current branch”</em> 的错误，这是因为本地分支与远程分支没有建立起关联关系，所以我们需要通过以下两种方式来达到目的:</p><ol><li>通过执行 <em>pull</em> 命令的时候指定分支</li></ol><p>$ git pull origin master</p><ol><li>通过执行 <em>branch</em> 命令建立本地分支与远程分支的关联关系后再次执行 <em>pull</em> 命令</li></ol><p>$ git branch –set-upstream-to=origin/master Branch ‘master’ set up to track remote branch ‘master’ from ‘origin’. $ git pull</p><p>这样，你本地仓库就会出现其他人提交的代码修改了。</p><h3 id="协作基本模型"><a href="#协作基本模型" class="headerlink" title="协作基本模型"></a>协作基本模型</h3><p>使用 git 的 push 命令与 pull 命令其实已经可以实现多人代码共享的情景，你对本地代码进行了很多修改，同时创建了很多 commit 记录，然后你可以通过 push 推送到远程仓库，团队其他人通过 pull 命令拉取你的提交，同时他们也有可能将他们的 commit 记录提交远程仓库，你可以使用 pull 命令拉取他们的提交。<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1547711680419-6f868118-f0c9-4f0c-9aa9-3e93c46b9a68.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=d8JCS&originHeight=375&originWidth=483&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br><em>(团队基本协作模型)</em><br>_<br>但是大家并行开发同时进行提交，大概率会出现 push 的时候被 git 阻止的情况，原因是两个并行的提交，远程仓库需要对两者的提交顺序进行编排，所以会要求你先进行 pull 命令执行，将远程的提交拉取下来并合并到本地分支，在本地编排好你的本地提交记录与其他人的提交记录之后，才允许你进行 push 命令的执行。</p><h2 id="Git-工作流与分支管理规范"><a href="#Git-工作流与分支管理规范" class="headerlink" title="Git 工作流与分支管理规范"></a>Git 工作流与分支管理规范</h2><p>对于一些规模比较大的团队，一般会使用 git 分支来管理与规范不同环境的代码。</p><h3 id="分支管理的必要性"><a href="#分支管理的必要性" class="headerlink" title="分支管理的必要性"></a>分支管理的必要性</h3><p>也许你会有疑问为什么我们会需要分支管理，并且需要分如此多的分支？因为在软件开发中，我们通常会有几个阶段，比如开发阶段，冒烟阶段，提测阶段，预发布阶段与上线阶段，而这些阶段都会对应有不同的部署环境，如果我们没有分支管理与将这些环境分别用不同的分支进行区分，代码版本管理将会无从谈起。所以我们会给分出很多分支，并且赋予这些分支不同的角色对应不同的环境与阶段。<br><em>注：1. 冒烟这一术语原来自硬件行业，在软件工程中指由开发人员自身对新的程序代码进行测试，确保新的代码不出故障</em></p><h3 id="使用-gitflow-工作流"><a href="#使用-gitflow-工作流" class="headerlink" title="使用 gitflow 工作流"></a>使用 gitflow 工作流</h3><p>对于分支的管理，推荐使用 gitflow 工作流的模式，流程大概如下图：<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1547711700486-cff85698-8f15-4397-b845-22ae6efa4935.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=PBUCx&originHeight=1524&originWidth=1150&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br><em>(gitflow 分支管理)</em><br>对上面的分支说明如下：</p><ul><li>feature branches。功能分支，一般是从 develop 开发分支上检出(checkout)</li><li>develop。公共的开发主线分支，feature 功能分支的代码开发完成后，经过 code review 后会合并到此分支</li><li>release branches。测试、发布主线，此分支是从 develop 分支上检出(checkout), 一般是提测阶段会使用该分支的代码</li><li>bugfix。修复 release 分支问题，</li><li>hotfix。紧急修复，一般是用于修复上线后的生产环境的问题。</li><li>master。可发布的稳定版分支</li></ul><p><em>注：gitflow 分支管理图来自网络</em></p><h4 id="功能开发流程"><a href="#功能开发流程" class="headerlink" title="功能开发流程"></a>功能开发流程</h4><p>团队在使用 <em>gitflow</em> 分支管理规范下，当我们需要有新的功能进行开发的时候，我们需要从最新的 <em>develop</em> 分支上检出(<em>checkout</em>) 一个功能分支分支，命名形式如 _feature-xxx-version_，然后就可以在该功能分支上进行开发，当你开发完成后，可以将分支 <em>push</em> 到远程仓库中，并在对应的远程仓库管理软件(<em>gitlab</em> 等)中提交 _merge request_，经过相关人员的代码审查后，会将功能分支合并到 <em>develop</em> 分支上并删除这个功能分支。</p><h4 id="提测流程"><a href="#提测流程" class="headerlink" title="提测流程"></a>提测流程</h4><p>当开发人员完成了该版本的所有功能后，会向测试人员发起测试功能的请求，此时会将最新的 <em>develop</em> 分支(此时的 <em>develop</em> 分支已有所有该版本的新功能的代码)检出 <em>release</em> 分支，命名格式如 _release-version_，测试人员 QA 会基于 <em>release-version</em> 为主线对代码进行测试与测试环境部署。<br>当测试人员在 <em>release</em> 分支上发布代码 <em>bug</em> 的时候，开发人员需要从 <em>release-version</em> 分支上检出 <em>bugfix</em> 分支，命名格式如 <em>bugfix-xxx</em> ，然后类似功能开发流程，将 <em>bugfix-xxx</em> 分支合并到 <em>release-version</em> 分支上。</p><h4 id="部署发布流程"><a href="#部署发布流程" class="headerlink" title="部署发布流程"></a>部署发布流程</h4><p>当测试人员测试通过后，会将 <em>release-version</em> 分支合并到 <em>master</em> 分支，并将 <em>release-version</em> 分支合并到 <em>develop</em> 分支，将 <em>master</em> 分支的代码进行部署，并测试线上，测试通过后对 <em>master</em> 分支打上 _tag_，并将 <em>master</em> 分支合并会 <em>develop</em> 分支。这里解释一下打 tag 的作用，tag 相当于是一个当前 commit 的一个快照，作用与 commit-sha1 类似，但是 tag 更具有可读性，可以供快速回退到想要的版本记录。</p><h4 id="线上问题紧急修复流程"><a href="#线上问题紧急修复流程" class="headerlink" title="线上问题紧急修复流程"></a>线上问题紧急修复流程</h4><p>当线上即生产环境发现 <em>bug</em> 的时候，需要在 master 分支上检出(<em>checkout</em>)一个 <em>hotfix-x.x.x</em> (x.x.x 是指语义化版本号)分支，然后相关的开发人员的修复代码都合并到 <em>hotfix-x.x.x</em> 分支上，在测试通过后，将 <em>hotfix-x.x.x</em> 分支合并到 <em>master</em> 与 <em>develop</em> 分支上，并为 <em>master</em> 分支打上 tag。</p><h3 id="便于-code-review-的合作流程"><a href="#便于-code-review-的合作流程" class="headerlink" title="便于 code review 的合作流程"></a>便于 code review 的合作流程</h3><p>在编写代码的时候，为了代码的高质量与开发人员的知识共享，通常会加上代码审查也就是 code review 环节。这个环节是借助 merge request 或者 pull request 来做到的，所以我们提交的 commit 记录应该尽量保持为<strong>一个</strong>，这样的好处有很多：</p><ol><li> 方便代码审核者进行 code review，只需要看这一个 commit 记录的逻辑即可</li><li> 万一该 commit 的代码导致出现问题，我们可以只针对这个 commit 进行快速回退。</li><li> 一个功能保持一个 commit 记录如果遇到需要对这个功能提前提交到某些环境比如生产环境上，我们可以快速用过 cherry-pick 命令，在对应的分支上”重现”该提交记录，达到提前提交的目的。</li></ol><p>也许你会有疑问，单个功能保持一个 commit 记录与 commit 提交记录尽量保持较细的粒度这一原则是否相悖，笔者觉得并没有冲突，因为这两个 git 协作要求是基于不同的角度来看待问题的，对于自己开发的分支上，我们需要保持每个提交的粒度在一个 commit 做一个修改，这样有利于我们记录工作内容与方便自己在本分支上做回滚，但是对于一个软件开发的主分支来说，它上面的提交应该是以功能为单位的，而无需关心这个功能内开发人员开发这个功能做了多少次修改。<br>面对这种情况，我们会使用 rebase 命令，也就是衍合(变基)操作。所谓衍合就是将你此分支上的 commit 提交，按顺序重新在某个分支上的某个基础点重新”演绎”一次，而这个重新”演绎”重新提交的 commit 记录与原来的 commit 提交会有些许不同，不同点在于 commit 的 HashId 会不同，但是提交内容是一样的。<br>rebase 命令提供了交互式的界面，并且提供多种的命令让你能够将多个 commit 记录合并为一个，从而达到我们单一功能保持一个 commit 记录的目的，保持提交历史的清爽。<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1547711725080-88afdbc1-2432-4ded-9dfb-2de403a8eddf.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=f9H9G&originHeight=946&originWidth=787&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>(便于 code review 的 git 合作流程图)</p><p>*<em>注：企业中一般会使用需求管理系统来管理需要开发的需求等</em></p><h2 id="Git-提交规范"><a href="#Git-提交规范" class="headerlink" title="Git 提交规范"></a>Git 提交规范</h2><p>制定一个 <em>git commit</em> 信息的提交规范是开发团队工作流必不可少的环节。试想一下，如果查看主分支上的历史库也就是你查看 <em>git log</em> 的时候，打印出来的信息杂乱无章的话，如果代码遇到问题，可能需要很大的精力与成本来查找到导致问题的代码提交，所以团队需要制定规范来引导成员编写规范的 <em>commit</em> 信息。<br>接下来的 <em>commit</em> 信息规范参考了 <em>angularjs</em> 团队的开发者指引与笔者的工作团队进行总结，读者如有需要可以以此为基础增加或修改成为自己团队的 <em>commit</em> 规范的一部分。</p><h3 id="提交信息基本模板"><a href="#提交信息基本模板" class="headerlink" title="提交信息基本模板"></a>提交信息基本模板</h3><p>如果 commit 信息都按照一定的模式进行提交，那么我们就会很容易找到自己想要的信息，模板参考如下：</p><p><type>(<scope>): <subject> [<ISSUE_ID>] <body> <footer></p><p>commit 信息包括三个字段: type (必需)， scope(可选) 和 subject(必需)。</p><ol><li>type。type 是用于说明该 commit 的类型的，一般我们会规定 type 的类型如下：</li></ol><ul><li>feat: 新功能(feature)</li><li>fix: 修复 bug</li><li>docs: 文档(documents)</li><li>style: 代码格式(不影响代码运行的格式变动，注意不是指 CSS 的修改)</li><li>refactor: 重构(既不是新增功能，也不是修改 bug 的代码变动)</li><li>test: 提交测试代码(单元测试，集成测试等)</li><li>chore: 构建或辅助工具的变动</li><li>misc: 一些未归类或不知道将它归类到什么方面的提交</li></ul><ol><li> scope。scope 说明 commit 影响的范围，比如数据层，控制层，视图层等等，这个需要视具体场景与项目的不同而灵活变动</li><li> subject。subject 是对于该 commit 目的的简短描述</li></ol><ul><li>使用第一人称现在时的动词开头，比如 modify 而不是 modified 或 modifies</li><li>首字母小写，并且结尾不加句号</li></ul><ol><li>ISSUEE<em>ID。这个与公司的需求管理与项目管理有关，假设你的项目放在 _github</em> 上，你的需求或者 <em>bug</em> 修复可能会有对应的 <em>issues</em> 记录，你可以加到你的 <em>commit</em> 信息中如 _issue-37938634_。</li></ol><p>body 其实就是 subject 的详细说明，而 footer 中你可以填写相关的需求管理 issues id。<br>在企业中一般会对团队中要做的事情与需求开发使用一个软件进行管理，好处是可以让代码与对应的用户故事(story)或者需求，bug 进行关联，便于管理，类似的方案有 github，gitlab，tracker，JIRA 等等，比如在网易某些团队中就会使用 JIRA 加上 gitlab 来进行团队管理。<br>commit message 的规范性是很重要的，对于自己养成良好的编程习惯很有帮助，但是没有必要强制完全遵循开源团队的规范，毕竟每个团队与个人的情况不同，博采众长即可，当然你也可以使用像 <em>commitlint</em> 这样的校验工具从工具层面上来强制执行某些规范，这里就不展开讲了，有兴趣的读者可以查阅相关资料并使用到自己团队的实践中。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章节介绍了 <em>git</em> 的一些常用命令的操作与基本概念，与基于此的 <em>git</em> 合作流程与 <em>commit</em> 规范。对于 <em>git</em> 的使用，笔者建议多加练习，不能只”纸上谈兵”, 实际操作才能加深对于 <em>git</em> 的理解，而 <em>git</em> 合作流程与 <em>commit</em> 规范提供了参考，大家结合上面章节的建议与实际团队的情况，相信会有更适合每个团队不同情况的实践。</p>]]></content>
      
      
      <categories>
          
          <category> 版本控制 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git提交规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git - 起步</title>
      <link href="/2020/04/15/kfekgn/"/>
      <url>/2020/04/15/kfekgn/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在现代化的软件开发中，尤其是在企业中的团队协同开发流程与代码管理方面，git 都充当着不可或缺的角色。本章中将会讲述如何使用 git 来进行一些基本的版本控制操作与团队协同中的 git 使用流程管理与提交规范。<br>在 Git 快速上手章节中你将会了解 git 的基本概念与一些常用命令，能让你快速上手或复习 git 的基本操作。<br>在 Git 多人合作基本模型中，你将会了解到 git 的团队基本工作模型。<br>Git 工作流与分支管理规范是对于在企业级中 git 的团队协同流程的介绍与规范的讲解，你会学到团队开发中 git 在软件开发生命周期中的角色。<br>Git 提交规范总结了在 git 使用过程中对于代码记录的提交信息的规范要求。</p><h2 id="Git-快速上手"><a href="#Git-快速上手" class="headerlink" title="Git 快速上手"></a>Git 快速上手</h2><p>Git 是一个用于控制管理代码历史版本的工具，区别于集中式的 SVN，Git 使用了分布式的管理方式。<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1547711500711-38a08fa8-4b79-4838-9ffe-fcb972e19037.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=eEoGG&originHeight=502&originWidth=417&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br><em>(Git 的分布式版本管理)</em><br>团队每人都拥有一个自己的本地仓库，不仅可以自己本地进行版本管理，也可以将代码版本在各个成员间共享。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>访问 <a href="https://git-scm.com/downloads">git 官方网站</a>下载最新版本的 git，选择你需要的版本</p><ul><li>macos</li><li>windows</li><li>linux</li></ul><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1630545281586-c3aecc31-6795-4b1a-8d15-7d8359708de9.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=KgD00&originHeight=890&originWidth=1015&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h2 id="安装选项"><a href="#安装选项" class="headerlink" title="安装选项"></a>安装选项</h2><p>可以参考本人安装 git 的选项配置，已经足够日常使用。<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1623899041736-c3aab332-83b9-465c-8722-658e2caac9e2.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=KPWLF&originHeight=389&originWidth=503&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>取消右键菜单中的 git 选项，因为已经配置了环境变量，而且本人使用 cmder 详细介绍请查看<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1623899084031-5fe4ed1b-d61b-42ac-9a9a-1ca07a25a5de.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=jyVMi&originHeight=389&originWidth=503&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1623899117854-49eeed6a-e30f-4276-a514-91921f2d8200.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=wmnGH&originHeight=389&originWidth=503&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1623899126721-1f7c69dd-2ca6-4073-a178-d6dffb562d5e.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=US3ED&originHeight=389&originWidth=503&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1623899134511-c3b31e78-71ca-4c9f-8c57-183e5ad05b8b.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=wR9CW&originHeight=389&originWidth=503&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1623899144263-0448e206-5464-4956-a653-5debb5d5f4b7.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=FgBve&originHeight=389&originWidth=503&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1623899151649-babf9cd0-feaf-49d1-94fe-394fe8d2ce66.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=iFyl8&originHeight=389&originWidth=503&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1623899157280-e72d5f13-1746-4cd6-b8f9-432fb0863a67.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=h6HcX&originHeight=389&originWidth=503&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1623899177413-1d7d2f2c-66db-4e28-b237-a76a3328a369.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=ksaRH&originHeight=389&originWidth=503&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>通过 git –version 测试 git 是否安装<br>git –version</p>]]></content>
      
      
      <categories>
          
          <category> 版本控制 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git起步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git - 回退版本</title>
      <link href="/2020/04/15/gt9l6w/"/>
      <url>/2020/04/15/gt9l6w/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>好了，很多同学经常会问到如何回退版本，下面列举几个实用命令和场景，方便大家学习</p><h2 id="撤销修改-未提交（nocommit）"><a href="#撤销修改-未提交（nocommit）" class="headerlink" title="撤销修改 - 未提交（nocommit）"></a>撤销修改 - 未提交（nocommit）</h2><p>有点类似 svn 当中的 revert，在 git 的一些图形化可视界面当中也是有很多类似的名字，比如 vscode 中的 source-control<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1630487351587-65b00202-f49b-4bad-89e0-57a0e40a8a93.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=TjVUu&originHeight=1023&originWidth=1389&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>直接点击对应的撤回图标就可以撤回，当然我们也可以使用以下命令来撤回：<br>git reset .<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1630487489532-c1f8dca9-3f6b-44cf-a561-ddc0b97dc75f.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=nbCbl&originHeight=583&originWidth=849&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h2 id="撤销修改-已提交"><a href="#撤销修改-已提交" class="headerlink" title="撤销修改 - 已提交"></a>撤销修改 - 已提交</h2><p>git reset –hard HEAD</p>]]></content>
      
      
      <categories>
          
          <category> 版本控制 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git回退版本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React - 组件</title>
      <link href="/2020/04/15/izozrg/"/>
      <url>/2020/04/15/izozrg/</url>
      
        <content type="html"><![CDATA[<p>组件可以将 UI 切分成一些独立的、可复用的部件，这样你就只需专注于构建每一个单独的部件。<br><strong>组件从概念上看就像是函数，它可以接收任意的输入值（称之为“props”），并返回一个需要在页面上展示的 React 元素</strong><br>react 组件的名称，首字母一律大写，并且使用驼峰写法</p><h2 id="类定义组件"><a href="#类定义组件" class="headerlink" title="类定义组件"></a>类定义组件</h2><ul><li>state</li><li>props</li><li>lifecircle</li></ul><p>如果没有组件私有状态(state)需要去定义，根据 es6 class 的原则，可以省略不写 constructor</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// state 写法一：</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// state 写法二：</span></span><br><span class="line">  state = &#123;&#125;;</span><br><span class="line">  <span class="comment">//通过render方法渲染组件的模板</span></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 只能返回一个根结点元素，否则报错</span></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 低版本react 解构了 Component,依然需要引入 React, 否则报错</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">// react v16.8以上不在需要引入 React</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">//通过render方法渲染组件的模板，并且render只能返回一个根节点元素</span></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 只能返回一个根结点元素，否则报错</span></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> template = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"><span class="keyword">const</span> element = <span class="built_in">document</span>.getElementById(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line">ReactDOM.render(template, element);</span><br></pre></td></tr></table></figure><h2 id="组件-amp-纯组件"><a href="#组件-amp-纯组件" class="headerlink" title="组件&amp;纯组件"></a>组件&amp;纯组件</h2><p>用户进行操作时数据时，通过生命周期钩子函数 **shouldComponentUpdate **判断新值与旧值是否一致来确定是否更新模版。<br>这样可以减少页面重绘和回流，提升用户体验、网站性能。</p><p>由于大量的判断也很繁琐，我们可以通过<strong>PureComponent</strong>定义组件，完成上述效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, PureComponent &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">// 类组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 纯组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h2><p>函数式组件又被称为<strong>无状态组件</strong>（下文一律称-无状态组件）<br>该函数是一个有效的 React 组件，它接收一个单一的“props”对象并返回了一个 React 元素<br>我们之所以称这种类型的组件为函数定义组件，是因为从字面上来看，它就是一个 JavaScript 函数。<br>定义组件时，render 返回的 jsx 模板如果有多个子节点，那么给组件的根节点元素最好用小括号包起来</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>没有生命周期钩子函数</li><li>没有 state</li><li>没有 this</li><li>必须返回一段 jsx 代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ProductList = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 只能返回一个根结点元素，否则报错</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      this is productList</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="es5-创建组件"><a href="#es5-创建组件" class="headerlink" title="es5 创建组件"></a>es5 创建组件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ProductList = React.createClass(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>this is productList<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ul><li>无状态组件 prop 不要通过 this.props 来调用</li><li>无状态组件没有生命周期</li><li>无状态组件不能定义定义状态（state）</li><li>无状态组件不能实例化,组件名不能被 new</li><li>无状态组件只能返回一个根节点元素</li><li>类组件 render 函数，只能返回一个根节点元素</li><li>类组件如果显式的声明了 constructor, 必须调用 super</li></ul><h2 id="组件属性"><a href="#组件属性" class="headerlink" title="组件属性"></a>组件属性</h2><ul><li>内部属性-state</li></ul><p>this.state.name=”123” ❌ 不可以直接修改如果修改了不会发生页面重绘<br>需要通过 this.setState() 对号</p><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><ul><li>动态 props</li><li>静态 props</li></ul><h2 id="PropTypes-类型检查"><a href="#PropTypes-类型检查" class="headerlink" title="PropTypes 类型检查"></a>PropTypes 类型检查</h2><h3 id="为什么需要类型检查？"><a href="#为什么需要类型检查？" class="headerlink" title="为什么需要类型检查？"></a>为什么需要类型检查？</h3><p>JavaScript 是一门弱类型的语言，允许变量类型做隐式转换。也正是因为这个特性，JavaScript 中有很多错误都是类型错误导致的。为了减少这种错误，我们可以在 React 中引入类型检查模块。</p><h3 id="React-中的类型检查：prop-types-包"><a href="#React-中的类型检查：prop-types-包" class="headerlink" title="React 中的类型检查：prop-types 包"></a>React 中的类型检查：prop-types 包</h3><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><ul><li>导入包</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>编写组件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>新增类型检查</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Greeting.propTypes = &#123;</span><br><span class="line">  <span class="attr">name</span>: PropTypes.string,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>检验类型检查<ul><li>把 Greeting 组件的属性 name 设置成 String 类型，也就是说父组件通过该属性传递数据的时候，需要传递 String 类型的数据，否则会显示类型错误的警告。</li></ul></li></ul><p>我们可以尝试传递一个数字类型的属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Greeting</span> <span class="attr">name</span>=<span class="string">&#123;123&#125;</span> /&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>可以看到页面中会出现类型错误的警告：<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1623305995633-abc9065b-d9a4-492b-8386-785094d714cc.webp#id=xo2of&originHeight=110&originWidth=1549&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>PropTypes 包含一整套验证器，可用于确保接收的数据是有效的。在上面的示例中，我们使用了 PropTypes.string。<br>出于性能原因，propTypes 只在开发模式下进行检查。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"></span><br><span class="line">MyComponent.propTypes = &#123;</span><br><span class="line">  <span class="comment">// 属性可以声明为 JS 原生类型</span></span><br><span class="line">  <span class="attr">optionalArray</span>: PropTypes.array,</span><br><span class="line">  <span class="attr">optionalBool</span>: PropTypes.bool,</span><br><span class="line">  <span class="attr">optionalFunc</span>: PropTypes.func,</span><br><span class="line">  <span class="attr">optionalNumber</span>: PropTypes.number,</span><br><span class="line">  <span class="attr">optionalObject</span>: PropTypes.object,</span><br><span class="line">  <span class="attr">optionalString</span>: PropTypes.string,</span><br><span class="line">  <span class="attr">optionalSymbol</span>: PropTypes.symbol,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 任何东西都可以被渲染:numbers, strings, elements,或者是包含这些类型的数组(或者是片段)。*/</span></span><br><span class="line">  <span class="attr">optionalNode</span>: PropTypes.node,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一个 React 元素。</span></span><br><span class="line">  <span class="attr">optionalElement</span>: PropTypes.element,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 属性也可以声明为类的一个实例。</span></span><br><span class="line">  <span class="comment">// 使用 JS 的 instanceof 运算符。</span></span><br><span class="line">  <span class="attr">optionalMessage</span>: PropTypes.instanceOf(Message),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 属性声明为特定的值，类似于枚举</span></span><br><span class="line">  <span class="attr">optionalEnum</span>: PropTypes.oneOf([<span class="string">&quot;News&quot;</span>, <span class="string">&quot;Photos&quot;</span>]),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一个对象可以是多种类型其中之一</span></span><br><span class="line">  <span class="attr">optionalUnion</span>: PropTypes.oneOfType([</span><br><span class="line">    PropTypes.string,</span><br><span class="line">    PropTypes.number,</span><br><span class="line">    PropTypes.instanceOf(Message),</span><br><span class="line">  ]),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一个某种类型的数组</span></span><br><span class="line">  <span class="attr">optionalArrayOf</span>: PropTypes.arrayOf(PropTypes.number),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 属性值为某种类型的对象</span></span><br><span class="line">  <span class="attr">optionalObjectOf</span>: PropTypes.objectOf(PropTypes.number),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一个特定形式的对象</span></span><br><span class="line">  <span class="attr">optionalObjectWithShape</span>: PropTypes.shape(&#123;</span><br><span class="line">    <span class="attr">color</span>: PropTypes.string,</span><br><span class="line">    <span class="attr">fontSize</span>: PropTypes.number,</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 &#x27;isRequired&#x27; 链接上述的类型设定，可以确保在没有提供 Props 的情况下显示警告。</span></span><br><span class="line">  <span class="attr">requiredFunc</span>: PropTypes.func.isRequired,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 任何数据类型的值</span></span><br><span class="line">  <span class="attr">requiredAny</span>: PropTypes.any.isRequired,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 属性也可以声明为自定义的验证器。验证失败则返回 Error 对象。不要使用 `console.warn` 或者 throw ，*/</span></span><br><span class="line">  <span class="comment">// 因为这不会在 `oneOfType` 类型的验证器中起作用。</span></span><br><span class="line">  <span class="attr">customProp</span>: <span class="function"><span class="keyword">function</span> (<span class="params">props, propName, componentName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/matchme/</span>.test(props[propName])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">&quot;Invalid prop `&quot;</span> +</span><br><span class="line">          propName +</span><br><span class="line">          <span class="string">&quot;` supplied to&quot;</span> +</span><br><span class="line">          <span class="string">&quot; `&quot;</span> +</span><br><span class="line">          componentName +</span><br><span class="line">          <span class="string">&quot;`. Validation failed.&quot;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 属性可以声明`arrayOf`和`objectOf`类型的验证器，如果验证失败，则需要返回Error对象。</span></span><br><span class="line">  <span class="comment">// 可以在数组或者对象的每一个元素上调用验证器。验证器的前两个参数分别是数组或者对象本身和当前元素的键值。</span></span><br><span class="line">  <span class="attr">customArrayProp</span>: PropTypes.arrayOf(<span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    propValue,</span></span></span><br><span class="line"><span class="params"><span class="function">    key,</span></span></span><br><span class="line"><span class="params"><span class="function">    componentName,</span></span></span><br><span class="line"><span class="params"><span class="function">    location,</span></span></span><br><span class="line"><span class="params"><span class="function">    propFullName</span></span></span><br><span class="line"><span class="params"><span class="function">  </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/matchme/</span>.test(propValue[key])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">&quot;Invalid prop `&quot;</span> +</span><br><span class="line">          propFullName +</span><br><span class="line">          <span class="string">&quot;` supplied to&quot;</span> +</span><br><span class="line">          <span class="string">&quot; `&quot;</span> +</span><br><span class="line">          componentName +</span><br><span class="line">          <span class="string">&quot;`. Validation failed.&quot;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="使用-PropTypes-element-限制单个元素"><a href="#使用-PropTypes-element-限制单个元素" class="headerlink" title="使用 PropTypes.element 限制单个元素"></a>使用 PropTypes.element 限制单个元素</h3><ul><li>可以通过 PropTypes.element 来确保传递给组件的 children 中只包含一个元素。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 这必须只有一个元素，否则控制台会打印警告。</span></span><br><span class="line">    <span class="keyword">const</span> children = <span class="built_in">this</span>.props.children;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyComponent.propTypes = &#123;</span><br><span class="line">  <span class="attr">children</span>: PropTypes.element.isRequired,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>this.props.children 是父组件在 MyComponent 中添加的子节点，当 children 包含多个兄弟节点，而不是只有一个节点时，会打印错误警告。</p><h3 id="属性默认值"><a href="#属性默认值" class="headerlink" title="属性默认值"></a>属性默认值</h3><ul><li>可以通过配置 defaultProps 为 Props 定义默认值：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定 props 的默认值：</span></span><br><span class="line">Greeting.defaultProps = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Stranger&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染出 &quot;Hello, Stranger&quot;：</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Greeting</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;example&quot;</span>));</span><br></pre></td></tr></table></figure><p>如果正在使用像 <a href="https://babeljs.io/docs/plugins/transform-class-properties/">transform-class-properties</a> 的 Babel 转换工具，也可以在 React 组件类中声明 defaultProps 作为静态属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;stranger&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>defaultProps 用来确保 this.props.name 在父组件没有特别指定的情况下，有一个初始值。类型检查发生在 defaultProps 赋值之后，所以类型检查也会应用在 defaultProps 上面，我们也需要保证所设置的默认值符合类型检查设定的类型。</p><h3 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h3><p>如果在常规开发中使用函数组件，那可能需要做一些适当的改动，以保证 PropsTypes 应用正常。</p><p>假设你有如下组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">HelloWorldComponent</span>(<span class="params">&#123; name &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello, &#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要添加 PropTypes，你可能需要在导出之前以单独声明的一个函数的形式，声明该组件，具体代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HelloWorldComponent</span>(<span class="params">&#123; name &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello, &#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HelloWorldComponent;</span><br></pre></td></tr></table></figure><p>接着，可以直接在 HelloWorldComponent 上添加 PropTypes：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HelloWorldComponent</span>(<span class="params">&#123; name &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello, &#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HelloWorldComponent.propTypes = &#123;</span><br><span class="line">  <span class="attr">name</span>: PropTypes.string,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HelloWorldComponent;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React-组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - 指针指向</title>
      <link href="/2020/04/13/xhncpz/"/>
      <url>/2020/04/13/xhncpz/</url>
      
        <content type="html"><![CDATA[<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><ul><li>全局作用域 - window</li><li>局部作用域 - js 当中只有函数具备块级作用域</li></ul><h2 id="异同："><a href="#异同：" class="headerlink" title="异同："></a>异同：</h2><p>改变函数体内 this 的指向。<br><strong>不同之处：</strong></p><ul><li>call 严格模式</li><li>call 非严格模式</li><li>apply 和 call 基本上一致，唯一区别在于传参方式</li><li>bind 语法和 call 一模一样，区别在于立即执行还是等待执行，bind 不兼容 IE6~8。</li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>函数是在哪里被谁调用的。也就是说 this 指向谁，跟函数在哪里定义没有关系，而是取决于被谁调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.bar);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="string">&quot;bar1&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> o2 = &#123; <span class="attr">bar</span>: <span class="string">&quot;bar2&quot;</span>, <span class="attr">foo</span>: foo &#125;;</span><br><span class="line"><span class="keyword">var</span> o3 = &#123; <span class="attr">bar</span>: <span class="string">&quot;bar3&quot;</span>, <span class="attr">foo</span>: foo &#125;;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">/*  &quot;bar1&quot; – 默认绑定 */</span></span><br><span class="line">o2.foo(); <span class="comment">/*  &quot;bar2&quot; – 隐式绑定 */</span></span><br><span class="line">o3.foo(); <span class="comment">/*  &quot;bar3&quot; – 隐式绑定 */</span></span><br></pre></td></tr></table></figure><p>默认情况，在非严格模式下，this 指向全局对象，在浏览器中就是 window<br>严格模式，this 为 undefined<br>隐式绑定，foo 作为 o2 的方法来调用，就指向 o2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.bar);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = <span class="string">&quot;bar1&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">bar</span>: <span class="string">&quot;bar2&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// 默认绑定</span></span><br><span class="line">foo.call(obj); <span class="comment">// 显式绑定</span></span><br></pre></td></tr></table></figure><p>通过 call、apply 或者 bind 调用的，那么这种调用就是显式绑定这种绑定中,this 的指向就是这三个函数中传递的第 一个参数。</p><h2 id="call："><a href="#call：" class="headerlink" title="call："></a>call：</h2><p>当前实例（函数）通过原型链查找机制找到 function.prototpye 上 call 方法。<br>把找到的 call 方法执行 当 call 方法执行的时候，内部处理了一些事情 1.首先把要操作的函数中的 this 关键字变为 call 方法第一个传递的实参 2.把 call 方法第二个及之后的实参获取到 3.把要操作的函数执行，并且把第二个以后传递进来的实参传递给函数<br>call 中细节<br>在非严格模式下<br>如果不传参数，或者第一个参数是 null 或 nudefined，this 都指向 window</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>, a, b);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> val = &#123; <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">fn.call(val, <span class="number">1</span>, <span class="number">2</span>); <span class="comment">// this:val, a: 1, b: 2</span></span><br><span class="line">fn.call(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// this:1, a: 2, b: undefined</span></span><br><span class="line">fn.call(); <span class="comment">// this:window, a: undefined, b: undefined</span></span><br><span class="line">fn.call(<span class="literal">null</span>); <span class="comment">// this: window, a: undefined, b: undefined</span></span><br><span class="line">fn.call(<span class="literal">undefined</span>); <span class="comment">// this: window, a: undefined, b: undefined</span></span><br></pre></td></tr></table></figure><p>在严格模式下<br>第一个参数是谁，this 就指向谁，不传就为 undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>, a, b);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;obj&quot;</span> &#125;;</span><br><span class="line">fn.call(obj, <span class="number">1</span>, <span class="number">2</span>); <span class="comment">// this:obj        a:1          b:2</span></span><br><span class="line">fn.call(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// this:1          a:2          b=undefined</span></span><br><span class="line">fn.call(); <span class="comment">// this:undefined  a:undefined  b:undefined</span></span><br><span class="line">fn.call(<span class="literal">null</span>); <span class="comment">// this:null       a:undefined  b:undefined</span></span><br><span class="line">fn.call(<span class="literal">undefined</span>); <span class="comment">// this:undefined  a:undefined  b:undefined</span></span><br></pre></td></tr></table></figure><h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h2><p>apply 把需要传递给 fn 的参数放到一个数组（或者类数组）中传递进去，虽然写的是一个数组，但是也相当于给 fn 一个个的传递</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fn.call(obj, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">fn.apply(obj, [<span class="number">1</span>, <span class="number">2</span>]);</span><br></pre></td></tr></table></figure><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p>bind 与 call 的 区别在一个是立即执行函数，一个是等待执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.onclick = fn.call(obj);</span><br><span class="line"><span class="comment">// call把this改为obj,立即执行fn函数，点击时函数返回值为undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.onclick = fn.bind(obj);</span><br><span class="line"><span class="comment">// bind把this预处理为obj,但是函数没有执行，当点击时才会执行</span></span><br></pre></td></tr></table></figure><h2 id="实现-call"><a href="#实现-call" class="headerlink" title="实现 call"></a>实现 call</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span> (<span class="params">obj, ...args</span>) </span>&#123;</span><br><span class="line">  obj.fn = <span class="built_in">this</span>;</span><br><span class="line">  obj.fn(...args);</span><br><span class="line">  <span class="keyword">delete</span> obj.fn;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="实现-apply"><a href="#实现-apply" class="headerlink" title="实现 apply"></a>实现 apply</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span> (<span class="params">context = <span class="built_in">window</span>, args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span> === <span class="built_in">Function</span>.prototype) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> res;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="built_in">Symbol</span>();</span><br><span class="line">  context[fn] = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">if</span> (args.constructor !== <span class="built_in">Array</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;不是数组！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  res = context[fn](args);</span><br><span class="line">  <span class="keyword">delete</span> context[fn];</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="实现-bind"><a href="#实现-bind" class="headerlink" title="实现 bind"></a>实现 bind</h2><p>总的来说 bind 有如下三个功能点：</p><ol><li>改变原函数的 this 指向，即绑定上下文，返回原函数的拷贝。</li><li>当 绑定函数 被调用时，bind 的额外参数将置于实参之前传递给被绑定的方法。</li><li>注意，一个 绑定函数 也能使用 new 操作符创建对象,这种行为就像把原函数当成构造器，thisArg 参数无效。也就是 new 操作符修改 this 指向的优先级更高。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span> (<span class="params">thisArg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> _self = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> fnBound = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 检测 New</span></span><br><span class="line">    <span class="comment">// 如果当前函数的this指向的是构造函数中的this 则判定为new 操作</span></span><br><span class="line">    <span class="keyword">var</span> _this = <span class="built_in">this</span> <span class="keyword">instanceof</span> _self ? <span class="built_in">this</span> : thisArg;</span><br><span class="line">    <span class="keyword">return</span> _self.apply(</span><br><span class="line">      _this,</span><br><span class="line">      args.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>))</span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 为了完成 new操作</span></span><br><span class="line">  <span class="comment">// 还需要做一件事情 执行原型 链接 （思考题，为什么？</span></span><br><span class="line">  fnBound.prototype = <span class="built_in">this</span>.prototype;</span><br><span class="line">  <span class="keyword">return</span> fnBound;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="attr">constructor</span>: Person,</span><br><span class="line">  <span class="attr">showName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">person.showName();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animal = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;yyy&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我想让 person.showName()运行后 name 变成 yyy，该如何操作？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">person.showName.call(animal);</span><br><span class="line">person.showName.apply(animal);</span><br><span class="line">person.showName.bind(animal)(); <span class="comment">//不会立即执行，需要调用</span></span><br></pre></td></tr></table></figure><p>他们改变了 this 的指向。<br><strong>具体分析二（</strong>call、apply 的区别：接受参数的方式不一样。<strong>）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>];</span><br><span class="line"><span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, arr);</span><br><span class="line"><span class="built_in">Math</span>.max.call(<span class="built_in">Math</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>);</span><br></pre></td></tr></table></figure><p>apply 的第二个参数必须是一个包含多个参数的数组（或类数组对象）</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指针指向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React - 状态</title>
      <link href="/2020/04/12/lhzrie/"/>
      <url>/2020/04/12/lhzrie/</url>
      
        <content type="html"><![CDATA[<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>内部状态</li><li>外部状态</li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React-状态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React - 生命周期</title>
      <link href="/2020/04/12/hkukgb/"/>
      <url>/2020/04/12/hkukgb/</url>
      
        <content type="html"><![CDATA[<p>React 的生命周期从广义上分为三个阶段：挂载、渲染、卸载<br>因此可以把 React 的生命周期分为两类：挂载卸载过程和更新过程。</p><h1 id="1-挂载卸载过程"><a href="#1-挂载卸载过程" class="headerlink" title="1. 挂载卸载过程"></a>1. 挂载卸载过程</h1><h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor()"></a>constructor()</h2><p>constructor()中完成了 React 数据的初始化，它接受两个参数：props 和 context，当想在函数内部使用这两个参数时，需使用 super()传入这两个参数。<br>注意：只要使用了 constructor()就必须写 super(),否则会导致 this 指向错误。</p><h2 id="componentWillMount"><a href="#componentWillMount" class="headerlink" title="componentWillMount()"></a>componentWillMount()</h2><p>componentWillMount()一般用的比较少，它更多的是在服务端渲染时使用。它代表的过程是组件已经经历了 constructor()初始化数据后，但是还未渲染 DOM 时。</p><h2 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount()"></a>componentDidMount()</h2><p>组件第一次渲染完成，此时 dom 节点已经生成，可以在这里调用 ajax 请求，返回数据 setState 后组件会重新渲染</p><h2 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount ()"></a>componentWillUnmount ()</h2><p>在此处完成组件的卸载和数据的销毁。</p><ol><li>clear 你在组建中所有的 setTimeout,setInterval</li><li>移除所有组建中的监听 removeEventListener</li><li>有时候我们会碰到这个 warning:</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Can only update a mounted or mounting component. This usually      means you called setState() on an unmounted component. This is a   no-op. Please check the code <span class="keyword">for</span> the <span class="literal">undefined</span> component.</span><br></pre></td></tr></table></figure><p>原因：因为你在组件中的 ajax 请求返回 setState,而你组件销毁的时候，请求还未完成，因此会报 warning<br>解决方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.isMount === <span class="literal">true</span></span><br><span class="line">    axios.post().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.isMount &amp;&amp; <span class="built_in">this</span>.setState(&#123;   <span class="comment">// 增加条件ismount为true时</span></span><br><span class="line">      <span class="attr">aaa</span>:res</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.isMount === <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-更新过程"><a href="#2-更新过程" class="headerlink" title="2. 更新过程"></a>2. 更新过程</h1><h2 id="2-1-componentWillReceiveProps-nextProps"><a href="#2-1-componentWillReceiveProps-nextProps" class="headerlink" title="2.1. componentWillReceiveProps (nextProps)"></a>2.1. componentWillReceiveProps (nextProps)</h2><ol><li>在接受父组件改变后的 props 需要重新渲染组件时用到的比较多</li><li>接受一个参数 nextProps</li><li>通过对比 nextProps 和 this.props，将 nextProps 的 state 为当前组件的 state，从而重新渲染组件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">componentWillReceiveProps (nextProps) &#123;</span><br><span class="line">    nextProps.openNotice !== <span class="built_in">this</span>.props.openNotice&amp;&amp;<span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        <span class="attr">openNotice</span>:nextProps.openNotice</span><br><span class="line">    &#125;，() =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.state.openNotice:nextProps)</span><br><span class="line">      <span class="comment">//将state更新为nextProps,在setState的第二个参数（回调）可以打         印出新的state</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-shouldComponentUpdate-nextProps-nextState"><a href="#2-2-shouldComponentUpdate-nextProps-nextState" class="headerlink" title="2.2.shouldComponentUpdate(nextProps,nextState)"></a>2.2.shouldComponentUpdate(nextProps,nextState)</h2><ol><li>主要用于性能优化(部分更新)</li><li>唯一用于控制组件重新渲染的生命周期，由于在 react 中，setState 以后，state 发生变化，组件会进入重新渲染的流程，在这里 return false 可以阻止组件的更新</li><li>因为 react 父组件的重新渲染会导致其所有子组件的重新渲染，这个时候其实我们是不需要所有子组件都跟着重新渲染的，因此需要在子组件的该生命周期中做判断</li></ol><h2 id="2-3-componentWillUpdate-nextProps-nextState"><a href="#2-3-componentWillUpdate-nextProps-nextState" class="headerlink" title="2.3.componentWillUpdate (nextProps,nextState)"></a>2.3.componentWillUpdate (nextProps,nextState)</h2><p>shouldComponentUpdate 返回 true 以后，组件进入重新渲染的流程，进入 componentWillUpdate,这里同样可以拿到 nextProps 和 nextState。</p><h2 id="2-4-componentDidUpdate-prevProps-prevState"><a href="#2-4-componentDidUpdate-prevProps-prevState" class="headerlink" title="2.4.componentDidUpdate(prevProps,prevState)"></a>2.4.componentDidUpdate(prevProps,prevState)</h2><p>组件更新完毕后，react 只会在第一次初始化成功会进入 componentDidmount,之后每次重新渲染后都会进入这个生命周期，这里可以拿到 prevProps 和 prevState，即更新前的 props 和 state。</p><h2 id="2-5-render"><a href="#2-5-render" class="headerlink" title="2.5.render()"></a>2.5.render()</h2><p>render 函数会插入 jsx 生成的 dom 结构，react 会生成一份虚拟 dom 树，在每一次组件更新时，在此 react 会通过其 diff 算法比较更新前后的新旧 DOM 树，比较以后，找到最小的有差异的 DOM 节点，并重新渲染。。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React-生命周期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - 基础API</title>
      <link href="/2020/04/11/zhkkh6/"/>
      <url>/2020/04/11/zhkkh6/</url>
      
        <content type="html"><![CDATA[<p>vue 是一个用户构建用户界面的一个渐进式框架</p><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><ul><li>webpack 脚手架</li><li>单文件页面引入 vue.min.js</li></ul><h2 id="声明式渲染"><a href="#声明式渲染" class="headerlink" title="声明式渲染"></a>声明式渲染</h2><ul><li>文本插值</li><li>表达式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  &#123;&#123; message &#125;&#125;   <span class="comment">// 文本插值</span></span><br><span class="line">  &#123;&#123; message+<span class="string">&quot;123&quot;</span> &#125;&#125;  <span class="comment">// 表达式</span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">       <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">       <span class="attr">message</span>:<span class="string">&quot;123&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">       &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul><li>内置组件<ul><li>v-text 文本输出</li><li>v-html 解析变量中的 html 标签</li><li>v-model 绑定表单元素的值</li><li>v-for</li><li>v-if</li><li>v-else-if</li><li>v-else</li><li>v-bind 简写: 绑定属性值</li><li>v-show</li><li>v-on 简写 @</li></ul></li><li>自定义组件</li></ul><h2 id="v-show-amp-v-if"><a href="#v-show-amp-v-if" class="headerlink" title="v-show &amp; v-if"></a>v-show &amp; v-if</h2><p>v-show 通过 html 或者组件的 display 属性，css 控制显隐<br>v-if 通过 html 或者组件的插入节点、移除节点，插入或者移除 dom 来控制显隐<br>v-show 有更高的初始化消耗<br>v-if 有更多的切换消耗</p><h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><p>v-on 的事件修饰</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.stop</span><br><span class="line">.prevent</span><br><span class="line">.capture</span><br><span class="line">.self</span><br><span class="line">.once</span><br><span class="line">.passive  <span class="comment">// 滚动时间的默认行为立即触发，不会等待onScroll的完成，有助于提升vue在移动端的性能</span></span><br><span class="line">.keyup</span><br><span class="line">.keyCode</span><br><span class="line">.exact 按键修饰符精准触发</span><br></pre></td></tr></table></figure><h3 id="自定义按键修饰符"><a href="#自定义按键修饰符" class="headerlink" title="自定义按键修饰符"></a>自定义按键修饰符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以使用 `v-on:keyup.f1`</span></span><br><span class="line">Vue.config.keyCodes.f1 = <span class="number">112</span>;</span><br></pre></td></tr></table></figure><h2 id="v-for-key-的作用"><a href="#v-for-key-的作用" class="headerlink" title="v-for key 的作用"></a>v-for key 的作用</h2><p>vue 循环遍历数据渲染时，要求我们添加一个不重复的 key（警告）</p><p>由于 vue 的便携借鉴来 react，也使用来 jsx，jsx 是虚拟 dom 树替换真实 dom 树，为了更快的找到需要替换的模版节点，我们需要给元素添加 key，有助于提升 vue 组件的性能。</p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span><br><span class="line">  <span class="attr">render</span>: h &gt; h(App),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    App,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;App/&gt;&quot;</span>,</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="变异方法"><a href="#变异方法" class="headerlink" title="变异方法"></a>变异方法</h2><p>由于 vue 使用了发布订阅、观察者模式，同时 object.defineProperty 进行数据的监听，我们直接操作数据可能不会触发视图更新。</p><p>vue2.x 使用 object.defineProperty<br>vue3.0 使用 proxy</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vue.$set(target, key, val);</span><br><span class="line"><span class="built_in">this</span>.$set(target, key, val);</span><br></pre></td></tr></table></figure><p>vue 允许我们通过$set 来修改我们数据的值，但是用起来不是特别方便，vue 又给我们带了变异方法（说白了就是对数组的原生方法提供了数据监听）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">push;</span><br><span class="line">pop;</span><br><span class="line">shift;</span><br><span class="line">unshift;</span><br><span class="line">reverse;</span><br><span class="line">sort;</span><br></pre></td></tr></table></figure><h2 id="web-服务器"><a href="#web-服务器" class="headerlink" title="web 服务器"></a>web 服务器</h2><p>在 vue 脚手架项目当中，我们可以通过 webpack 的 devServer 来创建一个小型 web 服务器</p><p>在 vue-cli@3+的版本中，我们可以在项目根目录创建一个 vue.config.js，下面将列举常用配置:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// 域名</span></span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">    <span class="comment">// 端口</span></span><br><span class="line">    <span class="attr">port</span>: <span class="string">&quot;8080&quot;</span>,</span><br><span class="line">    <span class="comment">// 开启gzip压缩</span></span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// app是devserver使用expres框架创建的一个小型web服务器</span></span><br><span class="line">    <span class="function"><span class="title">before</span>(<span class="params">app</span>)</span> &#123;</span><br><span class="line">      app.get(<span class="string">&quot;/getJson&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        res.json(&#123;</span><br><span class="line">          <span class="attr">code</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">msg</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 开启项目代码的热更新、热替换</span></span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 显示进度条</span></span><br><span class="line">    <span class="comment">// progress: true,</span></span><br><span class="line">    <span class="attr">inline</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 不显示编译过程产生的信息</span></span><br><span class="line">    <span class="comment">// noInfo: &quot;&quot;,</span></span><br><span class="line">    <span class="comment">// 除了启动信息，其他都不显示</span></span><br><span class="line">    <span class="comment">// quiet: true,</span></span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="comment">// 静态资源服务器路径</span></span><br><span class="line">    <span class="attr">contentBase</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">    <span class="comment">// historyApiFallback: true,</span></span><br><span class="line">    <span class="comment">// proxy代理服务器来请求其他服务器的数据</span></span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="comment">// api是访问代理服务器的标记</span></span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">// 要代理的服务器资源路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://localhost:7002&quot;</span>,</span><br><span class="line">        <span class="comment">// 跨域访问</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 路径重写</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123; <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="组件-1"><a href="#组件-1" class="headerlink" title="组件"></a>组件</h2><h3 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h3><p>下面将创建一个 layout 布局容器组件 layout.vue:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wraper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Header</span>&gt;</span><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">section</span>&gt;</span>this is content<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Footer</span>&gt;</span><span class="tag">&lt;/<span class="name">Footer</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">&quot;./header&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Footer <span class="keyword">from</span> <span class="string">&quot;./header&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 局部注册组件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    Header,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    Footer</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="对象组件"><a href="#对象组件" class="headerlink" title="对象组件"></a>对象组件</h3><p>在一个组件内部，我们可以通过 components 来创建组件,除了 template 是一个 html 字符串外，其他与.vue 单文件组件没有什么区别。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Footer</span>&gt;</span><span class="tag">&lt;/<span class="name">Footer</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">Footer</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">template</span>: <span class="string">`&lt;div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="javascript"><span class="xml">      this is footer</span></span></span></span><br><span class="line"><span class="string"><span class="javascript"><span class="xml">      &lt;/div&gt;`</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> &#123;&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">methods</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">computed</span>:&#123;&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">watch</span>:&#123;&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span>&#123;&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      ...</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><h3 id="插槽的分类"><a href="#插槽的分类" class="headerlink" title="插槽的分类"></a>插槽的分类</h3><ul><li>匿名插槽</li><li>具名插槽</li></ul><h3 id="插槽的作用"><a href="#插槽的作用" class="headerlink" title="插槽的作用"></a>插槽的作用</h3><p>创建组件后，希望能够动态向组件传递模版内容，这个时候我们就需要使用插槽。</p><h3 id="插槽的使用"><a href="#插槽的使用" class="headerlink" title="插槽的使用"></a>插槽的使用</h3><p>父组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Layout</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">&quot;@/components/layout&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    Layout,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wraper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Header</span>&gt;</span><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="xml">      // 上面父组件传递的路由将会在这里展示到</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span>this is content<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Footer</span>&gt;</span><span class="tag">&lt;/<span class="name">Footer</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">&quot;./header&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Footer <span class="keyword">from</span> <span class="string">&quot;./footer&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 局部注册组件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    Header,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    Footer,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="组件通讯"><a href="#组件通讯" class="headerlink" title="组件通讯"></a>组件通讯</h2><h3 id="父子通讯："><a href="#父子通讯：" class="headerlink" title="父子通讯："></a>父子通讯：</h3><p>父组件向子组件 Child 传递参数：</p><ul><li>attr1 静态传参</li><li>arr2 动态传参</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">attr1</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">:attr2</span>=<span class="string">&quot;msg&quot;</span>&gt;</span>this is header<span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&quot;./child&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">name</span>: <span class="string">&#x27;Header&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">msg</span>:<span class="string">&quot;12323&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  Child</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>子组件：<br>子组件通过 props 来获得父组件传递的参数</p><ul><li>数组 简单</li><li>对象 完整</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这里是子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="attr">name</span>: <span class="string">&#x27;Child&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="comment">// props两种写法</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="comment">// props:[&quot;attr1&quot;,&quot;attr2&quot;],</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="attr">props</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="attr">attr1</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">type</span>:<span class="string">&quot;String|Number|Boolean|Null|Undefined|Array|Object|Function&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">default</span>:<span class="string">&quot;默认值&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">require</span>: <span class="literal">true</span>|<span class="literal">false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="子父通讯"><a href="#子父通讯" class="headerlink" title="子父通讯"></a>子父通讯</h3><h3 id="跨级通讯"><a href="#跨级通讯" class="headerlink" title="跨级通讯"></a>跨级通讯</h3><ul><li>Vue v2.2 新增 provide/inject</li></ul><p>父组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;DialogFooot&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">provide</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">key</span>:val,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ...</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;DialogFooot&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">inject</span>:[<span class="string">&quot;key1&quot;</span>,...],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>Vue v2.4 新增 $attrs</li></ul><p>祖先组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Parent</span> <span class="attr">:key1</span>=<span class="string">&quot;key1&quot;</span> <span class="attr">:key2</span>=<span class="string">&quot;key2&quot;</span> <span class="attr">...</span>&gt;</span><span class="tag">&lt;/<span class="name">Parent</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;Origine&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">key1</span>:val1,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">key2</span>:val2</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>父组件 - Parent：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    // 父组件可以通过$attrs获得祖先组件中的数据</span></span><br><span class="line"><span class="xml">    // 不需要通过props去接受</span></span><br><span class="line"><span class="xml">  &#123;&#123;$attrs&#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Child</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attr&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;Parent&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">inheritAttrs</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    // 子组件需要获得父组件的参数，父组件通过v-bind将$attr绑定</span></span><br><span class="line"><span class="xml">  &#123;&#123;$attrs&#125;&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;Child&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">inheritAttrs</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="EventHub-amp-EventBus"><a href="#EventHub-amp-EventBus" class="headerlink" title="EventHub&amp;EventBus"></a>EventHub&amp;EventBus</h3><p>由于 vue 原生支持发布、订阅模式，我们通过 new Vue() 创建新的实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue();</span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">import</span> EventHub form <span class="string">&quot;@/utils/events&quot;</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.$eventHub = EventHub;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">组件内部：</span><br><span class="line">子：<span class="built_in">this</span>.$eventhub.emit(<span class="string">&#x27;eventname&#x27;</span>,callback);</span><br><span class="line">父：<span class="built_in">this</span>.$on(<span class="string">&#x27;event&#x27;</span>,callback)</span><br></pre></td></tr></table></figure><h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - 事件冒泡、捕获</title>
      <link href="/2020/04/02/ykg9i9/"/>
      <url>/2020/04/02/ykg9i9/</url>
      
        <content type="html"><![CDATA[<h2 id="事件流-event-flow"><a href="#事件流-event-flow" class="headerlink" title="事件流 - event flow"></a>事件流 - <strong>event flow</strong></h2><p>事件捕获是<strong>netSapce</strong>(网景)提出的<br>事件冒泡是<strong>IE</strong>提出的</p><h3 id="事件流分类"><a href="#事件流分类" class="headerlink" title="事件流分类"></a>事件流分类</h3><ul><li>事件捕获</li><li>处于目标阶段</li><li>事件冒泡</li></ul><h2 id="事件冒泡、捕获的原型图"><a href="#事件冒泡、捕获的原型图" class="headerlink" title="事件冒泡、捕获的原型图"></a>事件冒泡、捕获的原型图</h2><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1622777710243-4fcff119-1e8b-473f-9148-3bc5610defe9.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"><br><strong>事件捕获（event capturing）：</strong> 当鼠标点击或者触发 dom 事件时（被触发 dom 事件的这个元素被叫作事件源），浏览器会从根节点 =&gt;事件源（由外到内）进行事件传播。<br><strong>事件冒泡（dubbed bubbling）：</strong> 事件源 =&gt;根节点（由内到外）进行事件传播。</p><h2 id="addEventListener-的第三个参数"><a href="#addEventListener-的第三个参数" class="headerlink" title="addEventListener 的第三个参数"></a>addEventListener 的第三个参数</h2><p><strong>addEventListener</strong>是 dom2 级事件,接收 3 个参数<br>元素.addEventListener(‘事件名称(string)’,’事件函数(Function)’,’<strong>冒泡或捕获(Boolean)</strong>‘)<br>第三个参数是一个布尔值;<br>默认为 false, 代表事件冒泡,<br>true,就变成了事件捕获</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div id=&quot;div&quot;&gt;12313&lt;/div&gt;</span><br><span class="line">        &lt;button id=&quot;btn&quot;&gt;移除监听事件&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        (function()&#123;</span><br><span class="line">            let odiv = document.getElementById(&#x27;div&#x27;);</span><br><span class="line">            let flag = 0;</span><br><span class="line">            odiv.addEventListener(&#x27;click&#x27;,function(e)&#123;</span><br><span class="line">                if(flag) return ;</span><br><span class="line">                // 处理函数</span><br><span class="line">                flag =1;</span><br><span class="line">                console.log(666)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)()</span><br><span class="line"></span><br><span class="line">        (function()&#123;</span><br><span class="line">            let odiv = document.getElementById(&#x27;div&#x27;);</span><br><span class="line">            let obtn = document.getElementById(&#x27;btn&#x27;);</span><br><span class="line">            let  handler = function()&#123;</span><br><span class="line">                console.log(1231)</span><br><span class="line">            &#125;</span><br><span class="line">            odiv.addEventListener(&#x27;click&#x27;,handler)</span><br><span class="line">            obtn.addEventListener(&#x27;click&#x27;,()=&gt;&#123;</span><br><span class="line">                odiv.removeEventListener(&#x27;click&#x27;,handler)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        &#125;)()</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="阻止冒泡"><a href="#阻止冒泡" class="headerlink" title="阻止冒泡"></a>阻止冒泡</h2><ul><li>在 IE 浏览器中需要通过 window.event.cancelBubble = true 阻止冒泡</li><li>在普通浏览器中需要通过 event(事件对象).stopPropagation()阻止冒泡行为</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">box.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//普通浏览器</span></span><br><span class="line">  event.stopPropagation();</span><br><span class="line">  <span class="comment">//ie浏览器</span></span><br><span class="line">  event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h2><ul><li>在 IE 浏览器中需要通过 window.event.returnValue = false 阻止默认行为</li><li>在普通浏览器中需要通过 event(事件对象).preventDefault()阻止默认行为</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">box.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//普通浏览器</span></span><br><span class="line">  event.preventDefault();</span><br><span class="line">  event.returnValue = <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事件冒泡 </tag>
            
            <tag> 事件捕获 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - 事件运行机制</title>
      <link href="/2020/03/14/fztr0k/"/>
      <url>/2020/03/14/fztr0k/</url>
      
        <content type="html"><![CDATA[<h2 id="一、为什么-JavaScript-是单线程？"><a href="#一、为什么-JavaScript-是单线程？" class="headerlink" title="一、为什么 JavaScript 是单线程？"></a>一、为什么 JavaScript 是单线程？</h2><p>JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。那么，为什么 JavaScript 不能有多个线程呢？这样能提高效率啊。<br>JavaScript 的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript 的主要用途是与用户互动，以及操作 DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定 JavaScript 同时有两个线程，一个线程在某个 DOM 节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？<br>所以，为了避免复杂性，从一诞生，JavaScript 就是单线程，这已经成了这门语言的核心特征，将来也不会改变。<br>为了利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程，但是子线程完全受主线程控制，且不得操作 DOM。所以，这个新标准并没有改变 JavaScript 单线程的本质。</p><h2 id="二、任务队列"><a href="#二、任务队列" class="headerlink" title="二、任务队列"></a>二、任务队列</h2><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。<br>如果排队是因为计算量大，CPU 忙不过来，倒也算了，但是很多时候 CPU 是闲着的，因为 IO 设备（输入输出设备）很慢（比如 Ajax 操作从网络读取数据），不得不等着结果出来，再往下执行。<br>JavaScript 语言的设计者意识到，这时 CPU 完全可以不管 IO 设备，挂起处于等待中的任务，先运行排在后面的任务。等到 IO 设备返回了结果，再回过头，把挂起的任务继续执行下去。<br>于是，JavaScript 就有了两种执行方式：一种是 CPU 按顺序执行，前一个任务结束，再执行下一个任务，这叫做同步执行；另一种是 CPU 跳过等待时间长的任务，先处理后面的任务，这叫做异步执行。程序员自主选择，采用哪种执行方式。<br>具体来说，异步执行的运行机制如下。（同步执行也是如此，因为它可以被视为没有异步任务的异步执行。）<br>（1）所有任务都在主线程上执行，形成一个执行栈（execution context stack）。<br>（2）主线程之外，还存在一个”任务队列”（task queue）。系统把异步任务放到”任务队列”之中，然后继续执行后续的任务。<br>（3）一旦”执行栈”中的所有任务执行完毕，系统就会读取”任务队列”。如果这个时候，异步任务已经结束了等待状态，就会从”任务队列”进入执行栈，恢复执行。<br>（4）主线程不断重复上面的第三步。<br>下图就是主线程和任务队列的示意图。<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1623107317644-4d491819-701d-428c-ad09-efa1e731c0fb.jpeg?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=zU7Pz&originHeight=420&originWidth=581&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>只要主线程空了，就会去读取”任务队列”，这就是 JavaScript 的运行机制。这个过程会不断重复。</p><h2 id="三、事件和回调函数"><a href="#三、事件和回调函数" class="headerlink" title="三、事件和回调函数"></a>三、事件和回调函数</h2><p>“任务队列”实质上是一个事件的队列（也可以理解成消息的队列），IO 设备完成一项任务，就在”任务队列”中添加一个事件，表示相关的异步任务可以进入”执行栈”了。主线程读取”任务队列”，就是读取里面有哪些事件。<br>“任务队列”中的事件，除了 IO 设备的事件以外，还包括一些用户产生的事件（比如鼠标点击、页面滚动等等）。只要指定过回调函数，这些事件发生时就会进入”任务队列”，等待主线程读取。<br>所谓”回调函数”（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当异步任务从”任务队列”回到执行栈，回调函数就会执行。<br>“任务队列”是一个先进先出的数据结构，排在前面的事件，优先返回主线程。主线程的读取过程基本上是自动的，只要执行栈一清空，”任务队列”上第一位的事件就自动返回主线程。但是，由于存在后文提到的”定时器”功能，主线程要检查一下执行时间，某些事件必须要在规定的时间返回主线程。</p><h2 id="四、Event-Loop"><a href="#四、Event-Loop" class="headerlink" title="四、Event Loop"></a>四、Event Loop</h2><p>主线程从”任务队列”中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为 Event Loop（事件循环）。<br>为了更好地理解 Event Loop，请看下图（转引自 Philip Roberts 的演讲《Help, I’m stuck in an event-loop》）。<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1623107318078-0c3ea677-9209-4534-9211-d08b57955ff8.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"><br>上图中，主线程运行的时候，产生堆（heap）和栈（stack），栈中的代码调用各种外部 API，它们在”任务队列”中加入各种事件（click，load，done）。只要栈中的代码执行完毕，主线程就会去读取”任务队列”，依次执行那些事件所对应的回调函数。<br>执行栈中的代码，总是在读取”任务队列”之前执行。请看下面这个例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="number">2.</span>     req.open(<span class="string">&#x27;GET&#x27;</span>, url);</span><br><span class="line"><span class="number">3.</span>     req.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="number">4.</span>     req.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="number">5.</span>     req.send();</span><br></pre></td></tr></table></figure><p>上面代码中的 req.send 方法是 Ajax 操作向服务器发送数据，它是一个异步任务，意味着只有当前脚本的所有代码执行完，系统才会去读取”任务队列”。所以，它与下面的写法等价。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="number">2.</span>     req.open(<span class="string">&#x27;GET&#x27;</span>, url);</span><br><span class="line"><span class="number">3.</span>     req.send();</span><br><span class="line"><span class="number">4.</span>     req.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="number">5.</span>     req.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br></pre></td></tr></table></figure><p>也就是说，指定回调函数的部分（onload 和 onerror），在 send()方法的前面或后面无关紧要，因为它们属于执行栈的一部分，系统总是执行完它们，才会去读取”任务队列”。</p><h1 id="五、定时器"><a href="#五、定时器" class="headerlink" title="五、定时器"></a>五、定时器</h1><p>除了放置异步任务，”任务队列”还有一个作用，就是可以放置定时事件，即指定某些代码在多少时间之后执行。这叫做”定时器”（timer）功能，也就是定时执行的代码。<br>定时器功能主要由 setTimeout()和 setInterval()这两个函数来完成，它们的内部运行机制完全一样，区别在于前者指定的代码是一次性执行，后者则为反复执行。以下主要讨论 setTimeout()。<br>setTimeout()接受两个参数，第一个是回调函数，第二个是推迟执行的毫秒数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"><span class="number">2.</span> <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">2</span>);&#125;,<span class="number">1000</span>);</span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>上面代码的执行结果是 1，3，2，因为 setTimeout()将第二行推迟到 1000 毫秒之后执行。<br>如果将 setTimeout()的第二个参数设为 0，就表示当前代码执行完（执行栈清空）以后，立即执行（0 毫秒间隔）指定的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">1</span>);&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>上面代码的执行结果总是 2，1，因为只有在执行完第二行以后，系统才会去执行”任务队列”中的回调函数。<br>HTML5 标准规定了 setTimeout()的第二个参数的最小值（最短间隔），不得低于 4 毫秒，如果低于这个值，就会自动增加。在此之前，老版本的浏览器都将最短间隔设为 10 毫秒。<br>另外，对于那些 DOM 的变动（尤其是涉及页面重新渲染的部分），通常不会立即执行，而是每 16 毫秒执行一次。这时使用 requestAnimationFrame()的效果要好于 setTimeout()。<br>需要注意的是，setTimeout()只是将事件插入了”任务队列”，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在 setTimeout()指定的时间执行。</p><h2 id="六、Node-js-的-Event-Loop"><a href="#六、Node-js-的-Event-Loop" class="headerlink" title="六、Node.js 的 Event Loop"></a>六、Node.js 的 Event Loop</h2><p>Node.js 也是单线程的 Event Loop，但是它的运行机制不同于浏览器环境。<br>请看下面的示意图（作者@BusyRich）。<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1623107318086-dbf37c93-580f-4a6f-9164-2072ded2dbf7.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"><br>根据上图，Node.js 的运行机制如下。<br>（1）V8 引擎解析 JavaScript 脚本。<br>（2）解析后的代码，调用 Node API。<br>（3）<a href="https://github.com/joyent/libuv">libuv</a>库负责 Node API 的执行。它将不同的任务分配给不同的线程，形成一个 Event Loop（事件循环），以异步的方式将任务的执行结果返回给 V8 引擎。<br>（4）V8 引擎再将结果返回给用户。<br>除了 setTimeout 和 setInterval 这两个方法，Node.js 还提供了另外两个与”任务队列”有关的方法：<a href="http://nodejs.org/docs/latest/api/process.html#process_process_nexttick_callback">process.nextTick</a>和<a href="http://nodejs.org/docs/latest/api/timers.html#timers_setimmediate_callback_arg">setImmediate</a>。它们可以帮助我们加深对”任务队列”的理解。<br>process.nextTick 方法可以在当前”执行栈”的尾部—-主线程下一次读取”任务队列”之前—-触发回调函数。也就是说，它指定的任务总是发生在所有异步任务之前。setImmediate 方法则是在当前”任务队列”的尾部触发回调函数，也就是说，它指定的任务总是在主线程下一次读取”任务队列”时执行，这与 setTimeout(fn, 0)很像。请看下面的例子（via <a href="http://stackoverflow.com/questions/17502948/nexttick-vs-setimmediate-visual-explanation">StackOverflow</a>）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> process.nextTick(<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"><span class="number">3.</span>   process.nextTick(<span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">2</span>);&#125;);</span><br><span class="line"><span class="number">4.</span> &#125;);</span><br><span class="line"><span class="number">5.</span> <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="number">6.</span> <span class="built_in">console</span>.log(<span class="string">&#x27;TIMEOUT FIRED&#x27;</span>);</span><br><span class="line"><span class="number">7.</span> &#125;, <span class="number">0</span>)</span><br><span class="line"><span class="number">8.</span> <span class="comment">// 1</span></span><br><span class="line"><span class="number">9.</span> <span class="comment">// 2</span></span><br><span class="line"><span class="number">10.</span> <span class="comment">// TIMEOUT FIRED</span></span><br></pre></td></tr></table></figure><p>上面代码中，由于 process.nextTick 方法指定的回调函数，总是在当前”执行栈”的尾部触发，所以不仅函数 A 比 setTimeout 指定的回调函数 timeout 先执行，而且函数 B 也比 timeout 先执行。这说明，如果有多个 process.nextTick 语句（不管它们是否嵌套），将全部在当前”执行栈”执行。<br>现在，再看 setImmediate。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> setImmediate(<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"><span class="number">3.</span>   setImmediate(<span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">2</span>);&#125;);</span><br><span class="line"><span class="number">4.</span> &#125;);</span><br><span class="line"><span class="number">5.</span> <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="number">6.</span> <span class="built_in">console</span>.log(<span class="string">&#x27;TIMEOUT FIRED&#x27;</span>);</span><br><span class="line"><span class="number">7.</span> &#125;, <span class="number">0</span>)</span><br><span class="line"><span class="number">8.</span> <span class="comment">// 1</span></span><br><span class="line"><span class="number">9.</span> <span class="comment">// TIMEOUT FIRED</span></span><br><span class="line"><span class="number">10.</span> <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>上面代码中，有两个 setImmediate。第一个 setImmediate，指定在当前”任务队列”尾部（下一次”事件循环”时）触发回调函数 A；然后，setTimeout 也是指定在当前”任务队列”尾部触发回调函数 timeout，所以输出结果中，TIMEOUT FIRED 排在 1 的后面。至于 2 排在 TIMEOUT FIRED 的后面，是因为 setImmediate 的另一个重要特点：一次”事件循环”只能触发一个由 setImmediate 指定的回调函数。<br>我们由此得到了一个重要区别：多个 process.nextTick 语句总是一次执行完，多个 setImmediate 则需要多次才能执行完。事实上，这正是 Node.js 10.0 版添加 setImmediate 方法的原因，否则像下面这样的递归调用 process.nextTick，将会没完没了，主线程根本不会去读取”事件队列”！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> process.nextTick(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="number">2.</span>   process.nextTick(foo);</span><br><span class="line"><span class="number">3.</span> &#125;);</span><br></pre></td></tr></table></figure><p>事实上，现在要是你写出递归的 process.nextTick，Node.js 会抛出一个警告，要求你改成 setImmediate。<br>另外，由于 process.nextTick 指定的回调函数是在本次”事件循环”触发，而 setImmediate 指定的是在下次”事件循环”触发，所以很显然，前者总是比后者发生得早，而且执行效率也高（因为不用检查”任务队列”）。</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事件运行机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - 面向过程&amp;面向对象</title>
      <link href="/2020/03/12/vu6efn/"/>
      <url>/2020/03/12/vu6efn/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是面向过程"><a href="#什么是面向过程" class="headerlink" title="什么是面向过程"></a>什么是面向过程</h2><ul><li><p>分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。</p></li><li><p>是一种以过程为中心的编程思想 代码没有任何封装，按照编码的逻辑 自上而下 平铺直叙。</p></li><li><p>面向过程是一种自顶而下的编程思想，将要实现的功能划分为小的模块，再将小的模块继续细分，当所有模块都写完，功能也就实现。</p></li><li><p><em><strong>优点</strong></em></p></li><li><p>1.运行效率高，因为与 CPU 的工作方式接近，CPU 就是按照顺序来一步一步执行的。</p></li><li><p>2.编程效率高，不需要对功能进行复杂的抽象，直接进行划分就好，只不过模块划分的粒度和划分原则需要把控好，这也是架构师的重要职责之一</p></li><li><p><em><strong>缺点</strong></em></p></li><li><p>1.程序扩展性和灵活性比较差，如果功能有改动，对程序会进行较大的改动，而且由于很多地方会改动，不能快速适应需求的变化</p></li><li><p>2.数据存在很多工程共享数据，安全性不好</p></li></ul><h2 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h2><ul><li>是把构成问题的事务分解成各个对象，每个对象都有自己独立的属性和行为, 对象可以将整个问题事务进行分工, 不同的对象做不同的事情。</li><li>是一类以对象作为基本程序结构单位的程序设计语言，指用于描述的设计是以对象为核心。</li></ul><p>面向对象的编程思想是先根据要实现的功能，抽象出对象，或者说类，然后赋予对象相应的数据和操作，功能的实现依靠对象的方法调用。</p><ul><li><em><strong>优点</strong></em></li><li>1.安全，面向对象的封装特性会将数据进行隐藏，保证数据的安全。</li><li>2.扩展性好，需求的更改会体现在某个对象的或某些对象的修改上，因此只需要做局部的修改就好，不会对全局造成影响。</li><li>3.复用，代码冗余小。由于继承的特性，代码量得到了很大的缩减，重写的特性又保证了多态，即灵活性</li><li><em><strong>缺点</strong></em></li><li>1.抽象相对复杂，不如直接写功能模块方便</li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>面向对象也即是 OOP，Object Oriented Programming，是计算机的一种编程架构，OOP 的基本原则是计算机是由子程序作用的单个或者多个对象组合而成，包含属性和方法的对象是类的实例，但是 JavaScript 中没有类 class 的概念（但是 es6 中新增的 class 的概念），而是直接使用对象来实现编程。</p><h2 id="特征："><a href="#特征：" class="headerlink" title="特征："></a>特征：</h2><ul><li>封装</li><li>继承</li><li>多态</li></ul><h3 id="封装："><a href="#封装：" class="headerlink" title="封装："></a>封装：</h3><p>封装的主要目的就是为了隐藏数据信息，包括属性和方法的私有化。封装可以使对象内部的变化对其他对象而言是透明的，对象只对自己的行为负责。对象之间通过暴露 API 接口来进行通信，其他对象和用户不需要关心 API 的实现细节，是对象之间的耦合变松散。(解耦)<br>公有属性，公有方法：属性在构造函数中声明，方法定义在原型上<br>私有属性，私有方法 ： js 中没有私有属性的概念我们一般使用_约定的形式表达私有概念<br>静态属性，静态方法：我们一般吧静态属性静态方法添加到类上直接通过类来调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name, age, id</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 定义用户信息</span></span><br><span class="line">    <span class="keyword">var</span> _id = id;  <span class="comment">// 私有属性</span></span><br><span class="line">    <span class="keyword">var</span> _sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;hi&#x27;</span>);&#125;  <span class="comment">// 私有方法</span></span><br><span class="line">    <span class="built_in">this</span>.name = name;  <span class="comment">// 公有属性</span></span><br><span class="line">    <span class="built_in">this</span>.age = age;  <span class="comment">// 公有属性</span></span><br><span class="line">    <span class="built_in">this</span>.getId = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> _id;&#125;  <span class="comment">// 特权方法</span></span><br><span class="line">    <span class="built_in">this</span>.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> _sayHi;&#125; <span class="comment">// 特权方法</span></span><br><span class="line">&#125;</span><br><span class="line">User.name = <span class="string">&#x27;User&#x27;</span>;  <span class="comment">// 静态属性</span></span><br><span class="line">User.sortByAge = <span class="function"><span class="keyword">function</span> (<span class="params">...<span class="built_in">arguments</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">arguments</span>.sort(<span class="function">(<span class="params">a, b</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.age - b.age;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;  <span class="comment">// 静态方法</span></span><br><span class="line">  <span class="comment">// 定义用户行为</span></span><br><span class="line">User.prototype.sayWords = <span class="function"><span class="keyword">function</span>(<span class="params">words</span>)</span>&#123;<span class="built_in">console</span>.log(words);&#125;  <span class="comment">// 公有方法</span></span><br></pre></td></tr></table></figure><h3 id="重载："><a href="#重载：" class="headerlink" title="重载："></a>重载：</h3><p>多态是同一个行为具有多个不同表现形式或形态的能力，简单点就是一个 api 方法有多种用途，类似 jquery 中，不同的方法传递参数个数，参数类型等，都可以实现不同的效果</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>既然要实现继承，那么首先我们得有一个父类，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个动物类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 属性</span></span><br><span class="line">  <span class="built_in">this</span>.name = name || <span class="string">&quot;Animal&quot;</span>;</span><br><span class="line">  <span class="comment">// 实例方法</span></span><br><span class="line">  <span class="built_in">this</span>.sleep = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot;正在睡觉！&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型方法</span></span><br><span class="line">Animal.prototype.eat = <span class="function"><span class="keyword">function</span> (<span class="params">food</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot;正在吃：&quot;</span> + food);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承 (**)"></a>原型链继承 (**)</h4><p>利用 js 原型链的特点将子类的原型等于父类的实例，那么子类在原型链访问过程中就可以访问到父类的属性和方法，问题，多个实例共享一个原型, 如果父类中有引用类型数据的话，多个子类其中一个改变其他的都会改变，因为 js 引用类型的问题会有属性共享的问题<br><strong>核心：</strong> 将父类的实例作为子类的原型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Cat.prototype = <span class="keyword">new</span> Animal();</span><br><span class="line">Cat.prototype.name = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//　Test Code</span></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);</span><br><span class="line"><span class="built_in">console</span>.log(cat.eat(<span class="string">&quot;fish&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep());</span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>特点：</p><ol><li>非常纯粹的继承关系，实例是子类的实例，也是父类的实例</li><li>父类新增原型方法/原型属性，子类都能访问到</li><li>简单，易于实现</li></ol><p>缺点：</p><ol><li>要想为子类新增属性和方法，必须要在 new Animal()这样的语句之后执行，不能放到构造器中</li><li>无法实现多继承</li><li>来自原型对象的所有属性被所有实例共享（<del>来自原型对象的引用属性是所有实例共享的</del>）（详细请看附录代码： 示例 1）</li><li>创建子类实例时，无法向父类构造函数传参</li></ol><h4 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h4><p>相当于吧父类当成一个函数在子类中运行，并且改变 this 为子类实例，这样就相当于拷贝了父类中构造函数中的属性和方法，实现构造函数继承，但是无法继承原型中的方法和属性</p><p><strong>核心：</strong>使用父类的构造函数来增强子类实例，等于是复制父类的实例属性给子类（没用到原型）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  Animal.call(<span class="built_in">this</span>);</span><br><span class="line">  <span class="built_in">this</span>.name = name || <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test Code</span></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);</span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep());</span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>特点：</p><ol><li>解决了 1 中，子类实例共享父类引用属性的问题</li><li>创建子类实例时，可以向父类传递参数</li><li>可以实现多继承（call 多个父类对象）</li></ol><p>缺点：</p><ol><li>实例并不是父类的实例，只是子类的实例</li><li>只能继承父类的实例属性和方法，不能继承原型属性/方法</li><li>无法实现函数复用，每个子类都有父类实例函数的副本，影响性能</li></ol><h4 id="实例继承"><a href="#实例继承" class="headerlink" title="实例继承"></a>实例继承</h4><p><strong>核心：</strong>为父类实例添加新特性，作为子类实例返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance = <span class="keyword">new</span> Animal();</span><br><span class="line">  instance.name = name || <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test Code</span></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);</span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep());</span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>特点：</p><ol><li>不限制调用方式，不管是 new 子类()还是子类(),返回的对象具有相同的效果</li></ol><p>缺点：</p><ol><li>实例是父类的实例，不是子类的实例</li><li>不支持多继承</li></ol><h4 id="拷贝继承"><a href="#拷贝继承" class="headerlink" title="拷贝继承"></a>拷贝继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> animal = <span class="keyword">new</span> Animal();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> animal) &#123;</span><br><span class="line">    Cat.prototype[p] = animal[p];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2020年10月10日21点36分：感谢 @baclt 的指出，如下实现修改了原型对象，会导致单个实例修改name，会影响所有实例的name值</span></span><br><span class="line">  <span class="comment">// Cat.prototype.name = name || &#x27;Tom&#x27;; 错误的语句，下一句为正确的实现</span></span><br><span class="line">  <span class="built_in">this</span>.name = name || <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test Code</span></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);</span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep());</span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>特点：</p><ol><li>支持多继承</li></ol><p>缺点：</p><ol><li>效率较低，内存占用高（因为要拷贝父类的属性、方法）</li><li>无法获取父类不可枚举的方法（不可枚举方法，不能使用 for in 访问到）</li><li>无法获取父类的静态属性、静态方法</li></ol><h4 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h4><p><strong>核心：</strong>通过调用父类构造，继承父类的属性并保留传参的优点，然后通过将父类实例作为子类原型，实现函数复用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  Animal.call(<span class="built_in">this</span>);</span><br><span class="line">  <span class="built_in">this</span>.name = name || <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Cat.prototype = <span class="keyword">new</span> Animal();</span><br><span class="line"></span><br><span class="line"><span class="comment">//组合继承也是需要修复构造函数指向的。</span></span><br><span class="line">Cat.prototype.constructor = Cat;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test Code</span></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);</span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep());</span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>特点：</p><ol><li>弥补了方式 2 的缺陷，可以继承实例属性/方法，也可以继承原型属性/方法</li><li>既是子类的实例，也是父类的实例</li><li>不存在引用属性共享问题</li><li>可传参</li><li>函数可复用</li></ol><p>缺点：</p><ol><li>调用了两次父类构造函数，生成了两份实例（子类实例将子类原型上的那份屏蔽了）</li></ol><h4 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h4><p><strong>核心：</strong>通过寄生方式，砍掉父类的实例属性，这样，在调用两次父类的构造的时候，就不会初始化两次实例方法/属性，避免的组合继承的缺点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  Animal.call(<span class="built_in">this</span>);</span><br><span class="line">  <span class="built_in">this</span>.name = name || <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">Cat</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建一个没有实例方法的类</span></span><br><span class="line">  <span class="keyword">var</span> Super = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  Super.prototype = Animal.prototype;</span><br><span class="line">  <span class="comment">//将实例作为子类的原型</span></span><br><span class="line">  Cat.prototype = <span class="keyword">new</span> Super();</span><br><span class="line">&#125;)(Cat);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test Code</span></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);</span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep());</span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>特点：</p><ol><li>堪称完美</li></ol><p>缺点：</p><ol><li>实现较为复杂</li></ol><h4 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 属性</span></span><br><span class="line">  <span class="built_in">this</span>.name = name || <span class="string">&#x27;Animal&#x27;</span>;</span><br><span class="line">  <span class="comment">// 实例方法</span></span><br><span class="line">  <span class="built_in">this</span>.sleep = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27;正在睡觉！&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//实例引用属性</span></span><br><span class="line">  <span class="built_in">this</span>.features = [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Cat.prototype = <span class="keyword">new</span> Animal();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tom = <span class="keyword">new</span> Cat(<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> kissy = <span class="keyword">new</span> Cat(<span class="string">&#x27;Kissy&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tom.name); <span class="comment">// &quot;Animal&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(kissy.name); <span class="comment">// &quot;Animal&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(tom.features); <span class="comment">// []</span></span><br><span class="line"><span class="built_in">console</span>.log(kissy.features); <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line">tom.name = <span class="string">&#x27;Tom-New Name&#x27;</span>;</span><br><span class="line">tom.features.push(<span class="string">&#x27;eat&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//针对父类实例值类型成员的更改，不影响</span></span><br><span class="line"><span class="built_in">console</span>.log(tom.name); <span class="comment">// &quot;Tom-New Name&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(kissy.name); <span class="comment">// &quot;Animal&quot;</span></span><br><span class="line"><span class="comment">//针对父类实例引用类型成员的更改，会通过影响其他子类实例</span></span><br><span class="line"><span class="built_in">console</span>.log(tom.features); <span class="comment">// [&#x27;eat&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log(kissy.features); <span class="comment">// [&#x27;eat&#x27;]</span></span><br><span class="line"></span><br><span class="line">原因分析：</span><br><span class="line"></span><br><span class="line">关键点：属性查找过程</span><br><span class="line"></span><br><span class="line">执行tom.features.push，首先找tom对象的实例属性（找不到），</span><br><span class="line">那么去原型对象中找，也就是Animal的实例。发现有，那么就直接在这个对象的</span><br><span class="line">features属性中插入值。</span><br><span class="line">在<span class="built_in">console</span>.log(kissy.features); 的时候。同上，kissy实例上没有，那么去原型上找。</span><br><span class="line">刚好原型上有，就直接返回，但是注意，这个原型对象中features属性值已经变化了。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向过程&amp;面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - 面向对象</title>
      <link href="/2020/03/12/mi580a/"/>
      <url>/2020/03/12/mi580a/</url>
      
        <content type="html"><![CDATA[<p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601293244051-184b0a0e-8499-46cf-9347-778acee763c5.jpeg?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=HTU3j&originHeight=439&originWidth=652&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>初步了解面向过程<br>面向过程是一种以过程为中心的编程思想。<br>面向过程也可以称之为‘面向记录’的编程思想，他们不支持丰富的面向对象特征（比如继承，多态），并且他们不允许混合持久化状态和域逻辑。就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。<br>面向过程其实是最为实际的一种思考方式，就算是面向对象的方法也是含有面向过程的思想。可以说面向过程是一种基础的方法。它考虑的是实际的实现。一般的面向过程是从上往下步步求精，所以面向过程最重要的是模块化的思想方法。对比面向过程，面向对象的方法主要是把事务给对象化，对象包括属性与行为。当程序规模不是很大时，面向过程的方法还会体验出一种优势。因为程序的流程很清楚，按着模块与函数的方法可以很好的组织。比如拿郝志枪喝茶这件事来说明面向过程，将过程拟为：<br>1：把昨天的茶叶倒掉<br>2：把杯子涮干净<br>3：倒进去茶叶<br>4：倒入开水<br>5：盖上杯盖等着喝<br>这几个步骤是一步一步去完成的，它的顺序很重要，只需要一个一个去实现就行了。而如果用面向对象放的的话，可能就只能抽象出一个郝志枪的类，它包括这四个方法，但是具体的顺序就不一定按照原来的顺序。<br><strong>总结来说，面向过程就是分析出实现需求所需要的步骤，然后通过函数一步一步实现这个步骤，然后依次调用即可</strong></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>父类、子类</li><li>基类、派生类</li></ul><h1 id="浅谈面向对象"><a href="#浅谈面向对象" class="headerlink" title="浅谈面向对象"></a>浅谈面向对象</h1><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>面向过程的编程方式由来已久。这种方式非常的直观，需要写一个功能，直接就写几行实现方法。比如你需要操作一个人移动到某个点，直接就写代码修改一个人的坐标属性，逐格的让他移动到目标点就行了<br>面向对象的编程方式，操作的是一个个的对象，比如你还是需要操作一个人的移动，你需要先实例化那个人的一个管理类对象，然后告诉这个“人”的对象，你需要移动到什么地方去。然后人就自己走过去了。至于具体是怎样走的，外部不关心，只有“人”对象本身知道</p><h3 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h3><h3 id="抽象性："><a href="#抽象性：" class="headerlink" title="抽象性："></a>抽象性：</h3><p>所谓的抽象性就是：如果需要一个对象描述数据，需要抽取这个对象的核心数据<br>提出需要的核心属性和方法<br>不在特定的环境下无法明确对象的具体意义</p><h3 id="继承性："><a href="#继承性：" class="headerlink" title="继承性："></a><strong>继承性：</strong></h3><p>所谓继承性就是自己没有但是别人有，拿过来成为自己的，就是继承，继承是实现复用的一种手段<br>在 Java 等语言中继承满足一个 class 的规则，类是一个 class，他规定了一个对象有什么属性和方法。<br>在这些语言中继承是 class 之间的继承，一个 class 继承另一个 class，那么该 class 就有了另一个 class 的成员，那么由该 class 创建出来的对象就同时具有两个 class 的成员。<br>在 JS 中没有明确的继承语法（ES6 提供了 class extend 语法），一般都是按照继承的理念实现对象的成员扩充实现继承，因此 JS 中实现继承的方法非常对多。<br>传统继承基于类，JS 继承基于对象</p><h3 id="关于面向对象的一些其他概念："><a href="#关于面向对象的一些其他概念：" class="headerlink" title="关于面向对象的一些其他概念："></a>关于面向对象的一些其他概念：</h3><h3 id="类-class：在-JS-中就是构造函数："><a href="#类-class：在-JS-中就是构造函数：" class="headerlink" title="类 class：在 JS 中就是构造函数："></a><strong>类 class：在 JS 中就是构造函数：</strong></h3><p>在传统的面向对象语言中，使用一个叫类的东西定义模板，然后使用模板创建对象。<br>在构造方法中也具有类似的功能，因此也称其为类</p><h3 id="实例（instance）与对象（object）："><a href="#实例（instance）与对象（object）：" class="headerlink" title="实例（instance）与对象（object）："></a><strong>实例（instance）与对象（object）：</strong></h3><p>实例一般是指某一个构造函数创建出来的对象，我们称为 XXXX 构造函数的实例<br>实例就是对象。对象是一个泛称<br>实例与对象是一个近义词</p><h3 id="键值对与属性和方法："><a href="#键值对与属性和方法：" class="headerlink" title="键值对与属性和方法："></a><strong>键值对与属性和方法：</strong></h3><p>在 JS 中键值对的集合称为对象<br>如果值为数据（非函数），就称该键值对为属性<br>如果值为函数（方法），就称该键值对为方法 method</p><h3 id="父类与子类（基类和派生类）："><a href="#父类与子类（基类和派生类）：" class="headerlink" title="父类与子类（基类和派生类）："></a><strong>父类与子类（基类和派生类）：</strong></h3><p>传统的面向对象语言中使用类来实现继承那么就有父类、子类的概念<br>父类又称为基类，子类又称为派生类<br>在 JS 中没有类的概念，在 JS 中常常称为父对象，子对象，基对象，派生对象。</p><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><h3 id="构造函数是干什么用的："><a href="#构造函数是干什么用的：" class="headerlink" title="构造函数是干什么用的："></a>构造函数是干什么用的：</h3><p>初始化数据的<br>在 js 中给对象添加属性用的，初始化属性用</p><h3 id="创建对象的过程"><a href="#创建对象的过程" class="headerlink" title="创建对象的过程:"></a>创建对象的过程:</h3><p>代码：var p = new Person();<br>首先运算符 new 创建了一个对象，类似于{}，是一个没有任何（自定义）成员的对象。<br>使用 new 创建对象，那么对象的类型就是创建他的构造函数名<br>使用{}无论如何都是 Object 类型，相当于 new Object<br>然后调用构造函数，为其初始化成员<br>构造函数在调用的一开始，有一个赋值操作，即 this = 刚刚创建出来的对象<br>因此在构造函数中 this 表示刚刚创建出来的对象。<br>在构造函数中 利用 对象的动态特性 为其对象添加成员</p><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><h3 id="什么是作用域："><a href="#什么是作用域：" class="headerlink" title="什么是作用域："></a>什么是作用域：</h3><p>域表示的就是范围，即作用域，就是一个名字在什么地方可以使用，什么时候不能使用。<br>简单的说，作用域是针对变量的，比如我们创建一个函数 a1，函数里面又包了一个子函数 a2。</p><p>| 1<br>2<br>3<br>4<br>5<br>6<br>7 | // 全局作用域<br>functiona a1() {<br>​// a1 作用域<br>​functiona2() {<br>​// a2 作用域<br>​}<br>} |<br>| — | — |</p><p>此时就存 在三个作用域:全局作用域，a1 作用域，a2 作用域；即全局作用域包含了 a1 的作用域，a2 的作用域包含了 a1 的作用域。<br>当 a2 在查找变量的时候会先从自身的作用域区查找，找不到再到上一级 a1 的作用域查找，如果还没找到就<br>到全局作用域区查找，这样就形成了一个作用域链。</p><h3 id="js-中词法作用域的规则"><a href="#js-中词法作用域的规则" class="headerlink" title="js 中词法作用域的规则"></a>js 中词法作用域的规则</h3><p>函数允许访问函数外部的数据<br>整个代码结构只有函数可以限定作用域<br>作用规则首先使用提升规则分析<br>如果当前作用域中有了名字了，就不考虑外面的名字</p><h3 id="属性搜索原则"><a href="#属性搜索原则" class="headerlink" title="属性搜索原则"></a>属性搜索原则</h3><p>所谓的属性搜索原则，就是对象在访问属性或方法的时候，首先在当前对象中查找<br>如果当前对象中存储着属性或方法，停止查找，直接使用该属性或方法<br>如果当前对象没有该成员，那么再在其原型对象中查找<br>如果原型对象中含有该成员，那么停止查找，直接使用<br>如果圆形中还没有，就到原型的原型中查找<br>如此往复，知道 Object.protitype 还没有，那么返回 undefined<br>如果是调用方法就报错，该 xxx 不是一个函数</p><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><h3 id="对闭包的浅度理解"><a href="#对闭包的浅度理解" class="headerlink" title="对闭包的浅度理解"></a>对闭包的浅度理解</h3><p>实用闭包主要是为了设计私有方法和变量。闭包的优点是可以避免全局变量的污染；缺点是闭包会常驻内存，增加内存使用量，使用不当很容易造成内存泄露。在 JavaScript 中，函数即闭包，只有函数才能产生作用域。<br>闭包的三个特性：<br>函数嵌套函数<br>在函数内部可以引用外部的参数和变量<br>参数和变量不会以垃圾回收机制回收</p><h3 id="闭包有什么用（特性）"><a href="#闭包有什么用（特性）" class="headerlink" title="闭包有什么用（特性）"></a>闭包有什么用（特性）</h3><p>闭包的作用，就是保存自己私有的变量，通过提供的接口(方法)给外部使用，但外部不能直接访问该变量。<br>通过使用闭包，我们可以做很多事情，比如模拟面向对象的代码风格；更优雅，更简洁的表达出代码；在某些方面提升代码的执行效率。利用闭包可以实现如下需求：<br>匿名自执行函数：：<br>一个匿名的函数，并立即执行它，由于外部无法引用它内部的变量，因此在执行完后很快就会被释放，关键是这种机制不会污染全局对象<br>缓存：：<br>闭包正事可以做到这一点，因为它不会释放外部的引用，从而函数内部的值可以得到保留<br>实现封装：：<br>模拟面向对象的代码风格：：</p><h3 id="闭包的基本模型"><a href="#闭包的基本模型" class="headerlink" title="闭包的基本模型"></a>闭包的基本模型</h3><p><strong>对象模式</strong><br>函数内部定义个一个对象，对象中绑定多个函数（方法），返回对象，利用对象的方法访问函数内的数据</p><p>| 1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21 | functioncreatePerson() {<br>​var<strong>name</strong> = “”;<br>​return{<br>​getName: function() {<br>​return<strong>name</strong>;<br>​},<br>​setName: function( value ) {<br>​// 如果不姓张就报错<br>​if( value.charAt(0) === ‘张’) {<br>​<strong>name</strong> = value;<br>​} else{<br>​thrownewError( ‘姓氏不对，不能取名’);<br>​}<br>​}<br>​}<br>}<br>varp = createPerson();<br>p.set_Name( ‘张三丰’);<br>console.log( p.get_Name() );<br>p.set_Name( ‘张王富贵’);<br>console.log( p.get_Name() ); |<br>| — | — |</p><p><strong>函数模式</strong><br>函数内部定义一个新函数，返回新函数，用新函数获得函数内的数据</p><p>| 1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11 | functionfoo() {<br>​varnum = Math.random();<br>​functionfunc() {<br>​returnmun;<br>​}<br>​returnfunc;<br>}<br>varf = foo();<br>// f 可以直接访问这个 num<br>varres1 = f();<br>varres2 = f(); |<br>| — | — |</p><p><strong>沙箱模式</strong><br>沙箱模式就是一个自调用函数，代码写到函数中一样会执行，但是不会与外界有任何的影响，比如 jQuery</p><p>| 1<br>2<br>3<br>4<br>5<br>6 | (function() {<br>​varjQuery = function() { // 所有的算法 }<br>​// …. // …. jQuery.each = function () {}<br>​window.jQuery = window.$ = jQuery;<br>})();<br>$.each( … ) |<br>| — | — |</p><h3 id="闭包的性能问题"><a href="#闭包的性能问题" class="headerlink" title="闭包的性能问题"></a>闭包的性能问题</h3><p>js 垃圾回收机制，也就是当一个函数被执行完后，其作用域会被收回，如果形成了闭包，执行完后其作用域不会被收回<br>函数执行需要内存，那么函数中定义的变量，会在函数执行结束后自动回收，凡是因为闭包结构的，被引出的数据，如果还有变量引用这些数据的话，那么这些数据就不会被回收。因此在使用闭包的时候如果不使用某些数据了，一定要赋值一个 null</p><p>| 1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9 | varf = (function() {<br>​varnum = 123;<br>​returnfunction() {<br>​returnnum;<br>​};<br>})();<br>// f 引用着函数，函数引用着变量 num<br>// 因此在不使用该数据的时候，最好写上<br>f = null; |<br>| — | — |</p><h1 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h1><h3 id="什么是原型"><a href="#什么是原型" class="headerlink" title="什么是原型"></a>什么是原型</h3><p>一句话说明什么是原型：原型能存储我们的方法，构造函数创建出来的实例对象能够引用原型中的方法。<br>JS 中一切皆对象，而每个对象都有一个原型（Object 除外），这个原型，大概就像 Java 中的父类，所以，基本上你可以认为原型就是这个对象的父对象，即每一个对象（Object 除外）内部都保存了它自己的父对象，这个父对象就是原型。一般创建的对象如果没有特别指定原型，那么它的原型就是 Object(这就很类似 Java 中所有的类默认继承自 Object 类)。<br>ES6 通过引入 class ,extends 等关键字，以一种语法糖的形式把构造函数包装成类的概念，更便于大家理解。是希望开发者不再花精力去关注原型以及原型链，也充分说明原型的设计意图和类是一样的。</p><h3 id="查看对象的原型"><a href="#查看对象的原型" class="headerlink" title="查看对象的原型"></a>查看对象的原型</h3><p>当对象被创建之后，查看它们的原型的方法不止一种，以前一般使用对象的<strong>proto</strong>属性，ES6 推出后，推荐用 Object.getPrototypeOf()方法来获取对象的原型</p><p>| 1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10 | functionA(){<br>​this.name=’lala’;<br>}<br>vara=newA();<br>console.log(a.<strong>proto</strong>)<br>//输出：Object {}<br>​</p><p>//推荐使用这种方式获取对象的原型<br>console.log(Object.getPrototypeOf(a))<br>//输出：Object {} |<br>| — | — |</p><p>无论对象是如何创建的，默认原型都是 Object，在这里需要提及的比较特殊的一点就是，通过构造函数来创建对象，函数 A 本身也是一个对象，而 A 有两个指向表示原型的属性，分别是<strong>proto</strong>和 prototype，而且两个属性并不相同</p><p>| 1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11 | functionA(){<br>​this.name=’lala’;<br>}<br>vara=newA();<br>console.log(A.prototype)<br>//输出：Object {}<br>​</p><p>console.log(A.<strong>proto</strong>)<br>//输出：function () {}<br>console.log(Object.getPrototypeOf(A))<br>//输出：function () {} |<br>| — | — |</p><p>函数的的 prototype 属性只有在当作构造函数创建的时候，把自身的 prototype 属性值赋给对象的原型。而实际上，作为函数本身，它的原型应该是 function 对象，然后 function 对象的原型才是 Object。<br><strong>总之，建议使用 ES6 推荐的查看原型和设置原型的方法。</strong></p><h3 id="原型的用法"><a href="#原型的用法" class="headerlink" title="原型的用法"></a>原型的用法</h3><p>其实原型和类的继承的用法是一致的：当你想用某个对象的属性时，将当前对象的原型指向该对象，你就拥有了该对象的使用权了。</p><p>| 1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13 | functionA(){<br>​this.name=’world ‘;<br>}<br>functionB(){<br>​this.bb=”hello”<br>}<br>vara=newA();<br>varb=newB();<br>​</p><p>//将 b 设置为 a 的原型,此处有一个问题，即 a 的 constructor 也指向了 B 构造函数，可能需要纠正<br>Object.setPrototypeOf(a,b);<br>a.constructor=A;<br>console.log(a.bb); //hello |<br>| — | — |</p><p>如果使用 ES6 来做的话则简单许多，甚至不涉及到 prototype 这个属性</p><p>| 1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15 | class B{<br>​constructor(){<br>​this.bb=’hello’<br>​}<br>}<br>class A extends B{<br>​constructor(){<br>​super();<br>​this.name=’world’;<br>​}<br>}<br>​</p><p>vara=newA();<br>console.log(a.bb+” “+a.name); //hello world<br>console.log(typeof(A)) //“function” |<br>| — | — |</p><p>怎么样？是不是已经完全看不到原型的影子了？活脱脱就是类继承，但是你也看得到实际上类 A 的类型是 function，所以说，本质上 class 在 JS 中是一种语法糖，JS 继承的本质依然是原型，不过，ES6 引入 class，extends 来掩盖原型的概念也是一个很友好的举动，对于长期学习那些类继承为基础的面对对象编程语言的程序员而言。<br>我的建议是，尽可能理解原型，尽可能用 class 这种语法糖。<br>好了，问自己两个问题：</p><ol><li>为什么要使用原型？——提高函数的复用性。</li><li>为什么属性不放在原型上而方法要放在原型上？</li></ol><p>利用对象的动态特性：构造函数.prototype.xxxx = vvv<br>利用直接替换</p><p>| 1<br>2<br>3<br>4 | Student.prototype = {<br>sayHello : function(){},<br>study : function(){}<br>}; |<br>| — | — |</p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>什么是原型链<br>凡是对象就有原型，那么原型又是对象，因此凡是给定一个对象，那么就可以找到他的原型，原型还有原型，那么如此下去，就构成一个对象的序列，称该结构为原型链。<br>每个实例对象都有一个<strong>proto_<br>属性，该属性指向它原型对象，这个实例对象 的构造函数有一个原型属性 prototype<br>，与实例的</strong>proto**<br>属性指向同一个对象。当一个对象在查找一个属性的时， 自身没有就会根据**proto__<br>向它的原型进行查找，如果都没有，则向它的原型的原型继续查找，直到查到 Object.prototype._proto_<br>为 null<br>，这样也就形成了原型链<br>。<br>这个概念其实也变得比较简单，可以类比类的继承链条，即每个对象的原型往上追溯，一直到 Object 为止，这组成了一个链条，将其中的对象串联起来，当查找当前对象的属性时，如果没找到，就会沿着这个链条去查找，一直到 Object，如果还没发现，就会报 undefined。<br><strong>原型链的结构</strong><br>凡是使用构造函数，创建出对象，并且没有利用赋值的方式修改原型，就说该对象保留默认的原型链。<br>默认原型链结构是什么样子呢？</p><p>| 1<br>2<br>3 | functionPerson(){}<br>varp = newPerson();<br>//p 具有默认的原型链 |<br>| — | — |</p><p>默认的原型链结构就是：当前对象 -&gt; 构造函数.prototype -&gt; Object.prototype -&gt; null<br>在实现继承的时候，有时候会利用替换原型链结构的方式实现原型继承，那么原型链结构就会发生改变</p><p>| 1<br>2<br>3 | functionDunizbCollection(){}<br>DunizbCollection.prototype = [];<br>vararr = newDunizbCollection(); |<br>| — | — |</p><p>此时 arr 对象的原型链结构被指向了数组对象的原型链结构了：arr -&gt; [] -&gt; Array.prototype -&gt; Object.prototype -&gt; null<br><strong>用图形表示对象的原型链结构</strong><br>以如下代码为例绘制原型链结构</p><p>| 1<br>2 | functionPerson(){}<br>varp = newPerson(); |<br>| — | — |</p><p>原型链结构图为：</p><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601293244051-184b0a0e-8499-46cf-9347-778acee763c5.jpeg?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=NNQT9&originHeight=439&originWidth=652&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>使用原型需要注意两点：</p><ol><li> 原型继承链条不要太长，否则会出现效率问题。</li><li> 指定原型时，注意 constructor 也会改变。</li></ol><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>实现继承有两种常见方式</p><h3 id="混合式继承"><a href="#混合式继承" class="headerlink" title="混合式继承"></a>混合式继承</h3><p>最简单的继承就是将别的对象的属性强加到我身上，那么我就有这个成员了<br>混合式继承的简单描述：</p><p>| 1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11 | functionPerson() {};<br>Person.prototype.extend = function( o ) {<br>​for( vark ino ) {<br>​this[ k ] = o[ k ];<br>​}<br>};<br>Person.prototype.extend({<br>​run: function() { console.log( ‘我能跑了’); },<br>​eat: function() { console.log( ‘我可以吃了’); },<br>​sayHello: function() { console.log( ‘我吃饱了’); }<br>}); |<br>| — | — |</p><h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><p>利用原型也可以实现继承，不需要在我身上添加任何成员，只要原型有了我就有了</p><h3 id="借用构造函数继承"><a href="#借用构造函数继承" class="headerlink" title="借用构造函数继承"></a>借用构造函数继承</h3><p>这种技术的基本思想相当简单，即在子类型构造函数的内部调用超类型的构造函数，而函数只不过是在特定环境中执行代码的对象，因此通过使用 apply（）和 call（）方法也可以在（将来）新创建的对象上执行构造函数</p><p>| 1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11 | functionPerson ( name, age, gender ) {<br>​this.name = name;<br>​this.age = age;<br>​this.gender = gender;<br>}<br>// 需要提供一个 Student 的构造函数创建学生对象<br>// 学生也应该有 name, age, gender, 同时还需要有 course 课程<br>functionStudent ( name, age, gender, course ) {<br>​Person.call( this, name, age, gender )；<br>​this.course = course;<br>} |<br>| — | — |</p><h1 id="函数的四种调用模式"><a href="#函数的四种调用模式" class="headerlink" title="函数的四种调用模式"></a>函数的四种调用模式</h1><h3 id="函数模式"><a href="#函数模式" class="headerlink" title="函数模式"></a>函数模式</h3><p>就是一个简单的函数调用。函数名的前面没有任何引导内容。</p><p>| 1<br>2<br>3<br>4<br>5<br>6 | functionfoo () {}<br>varfunc = function() {};<br>…<br>foo();<br>func();<br>(function() {} )(); |<br>| — | — |</p><p>this 的含义：在函数中 this 表示全局对象，在浏览器中式 window</p><h3 id="方法模式"><a href="#方法模式" class="headerlink" title="方法模式"></a>方法模式</h3><p>方法一定式依附与一个对象，将函数赋值给对象的一个属性，那么就成为了方法。</p><p>| 1<br>2<br>3<br>4<br>5<br>6 | functionf() {<br>​this.method = function() {};<br>}<br>varo = {<br>​method: function() {}<br>} |<br>| — | — |</p><p>this 的含义：这个依附的对象</p><h3 id="构造器调用模式"><a href="#构造器调用模式" class="headerlink" title="构造器调用模式"></a>构造器调用模式</h3><p>创建对象的时候构造函数做了什么？由于构造函数只是给 this 添加成员，没有做其他事情。而方法也可以完成这个操作，就是 this 而言，构造函数与方法没有本质的区别。</p><p>特征：</p><p>使用 new 关键字，来引导构造函数。<br>构造函数中的 this 与方法中的一样，表示对象，但是构造函数中的对象是刚刚创建出来的对象<br>构造函数中不需要 return ，就会默认的 return this。</p><p>如果手动添加 return ，就相当于 return this<br>如果手动的添加 return 基本类型，无效，还是保留原来 返回 this<br>如果手动添加的 return null，或 return undefined ，无效<br>如果手动添加 return 对象类型，那么原来创建的 this 就会被丢掉，返回的是 return 后面的对象</p><h3 id="上下文调用模式"><a href="#上下文调用模式" class="headerlink" title="上下文调用模式"></a>上下文调用模式</h3><p>上下文就是环境。就是自己定义设置 this 的含义。<br><strong>语法</strong><br>函数名.apply( 对象, [ 参数 ] );<br>函数名.call( 对象, 参数 );<br><strong>描述</strong><br>函数名就是表示函数本身，使用函数进行调用的时候默认 this 是全局变量<br>函数名也可以是方法提供，使用方法调用的时候，this 是指向当前对象<br>使用 apply 进行调用后，无论是函数还是方法都无效了，我们的 this ，由 apply 的第一个参数决定<br><strong>参数问题</strong><br>无论是 call 还是 apply 在没有后面的参数的情况下（函数无参数，方法五参数）是完全一致的</p><p>| 1<br>2<br>3<br>4<br>5 | functionfoo(){<br>​console.log( this);<br>}<br>foo.apply( obj );<br>foo.call( obj ); |<br>| — | — |</p><p>第一个参数的使用也是有规则的:<br>如果传入的是一个对象，那么就相当于设置该函数中的 this 为参数<br>如果不传入参数，或传入 null、undefined 等，那么相当于 this 默认为 window</p><p>| 1<br>2<br>3 | foo();<br>foo.apply();<br>foo.apply( null); |<br>| — | — |</p><p>如果传入的是基本类型，那么 this 就是基本类型对应的包装类型的引用<br>在使用上下文调用的时候，原函数（方法）可能会带有参数，那么这个参数再上下文调用中使用 第二个（第 n 个）参数来表示</p><p>| 1<br>2<br>3<br>4<br>5<br>6 | functionfoo( num ) {<br>​console.log( num );<br>}<br>foo.apply( null, [ 123 ] );<br>// 等价于<br>foo( 123 ); |<br>| — | — |</p><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><h3 id="构造模式"><a href="#构造模式" class="headerlink" title="构造模式"></a>构造模式</h3><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><h3 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h3><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 - proxy</title>
      <link href="/2020/03/12/vr3dmp/"/>
      <url>/2020/03/12/vr3dmp/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>es5 给提供了对象属性劫持的方法 Object.definedProperty，es6 同样通过 proxy 给我们带来了类似的功能，而且性能更好</p><h2 id="Object-defineProperty-（es5）"><a href="#Object-defineProperty-（es5）" class="headerlink" title="Object.defineProperty （es5）"></a>Object.defineProperty （es5）</h2><ul><li>configurable 可配置</li><li>enumerable 可枚举</li><li>writeable 可写入</li><li>value</li><li>get</li><li>set</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&quot;key&quot;</span>, &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">    tmp = val;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">obj.key; <span class="comment">// 将会调用get方法</span></span><br><span class="line">obj.key = <span class="number">123</span>; <span class="comment">//将会调用set方法</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&quot;key&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&quot;123&quot;</span>,</span><br><span class="line">  <span class="attr">writeable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defindProperties(obj, &#123;</span><br><span class="line">  <span class="attr">key1</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;123&quot;</span>,</span><br><span class="line">    <span class="attr">writeable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">key2</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;123&quot;</span>,</span><br><span class="line">    <span class="attr">writeable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Proxy-拦截器"><a href="#Proxy-拦截器" class="headerlink" title="Proxy 拦截器"></a>Proxy 拦截器</h2><ul><li>target 劫持对象</li><li>propkey 操作的属性</li><li>receiver proxy 的实例</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">13</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">target, propKey, receiver</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (propKey <span class="keyword">in</span> target) &#123;</span><br><span class="line">      <span class="keyword">return</span> target[propKey];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="通过-proxy-实现对象的私有属性"><a href="#通过-proxy-实现对象的私有属性" class="headerlink" title="通过 proxy 实现对象的私有属性"></a>通过 proxy 实现对象的私有属性</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">_attr</span>: <span class="string">&quot;我是私有属性&quot;</span>,</span><br><span class="line">  <span class="attr">attr</span>: <span class="string">&quot;我是一个属性&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> privateList = [<span class="string">&quot;_attr&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> object = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">target, key, reciver</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (privateList.indexOf(key) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span> 是一个私有属性！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target[key];</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">target, key, val</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (privateList.indexOf(key) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span> 是一个私有属性！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    target[key] = val;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(object._attr);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript - 获取文档对象位置</title>
      <link href="/2020/03/06/ddkga2/"/>
      <url>/2020/03/06/ddkga2/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><ul><li>clientHeight：表示的是可视区域的高度，不包含 border 和滚动条 offsetHeight：表示可视区域的高度，包含了 border 和滚动条</li><li>scrollHeight：表示了所有区域的高度，包含了因为滚动被隐藏的部分。</li><li>clientTop：表示边框 border 的厚度，在未指定的情况下一般为 0</li><li>scrollTop：滚动后被隐藏的高度，获取对象相对于由 offsetParent 属性指定的</li><li>父坐标(css 定位的元素或 body 元素)距离顶端的高度。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js获取文档对象位置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - 函数</title>
      <link href="/2020/03/06/ld7g7e/"/>
      <url>/2020/03/06/ld7g7e/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是函数？"><a href="#什么是函数？" class="headerlink" title="什么是函数？"></a>什么是函数？</h2><p>将实现某一个功能的代码片段放到一个 function 中就是一个函数，函数具备作用域</p><h2 id="问题-声明变量和声明函数的提升有什么区别"><a href="#问题-声明变量和声明函数的提升有什么区别" class="headerlink" title="问题- 声明变量和声明函数的提升有什么区别?"></a>问题- 声明变量和声明函数的提升有什么区别?</h2><p>(1) 变量声明提升：变量声明在进入执行上下文就完成了。<br>只要变量在代码中进行了声明，无论它在哪个位置上进行声明， js 引擎都会将它的声明放在范围作用域的顶部；</p><p>(2) 函数声明提升：执行代码之前会先读取函数声明，意味着可以把函数申明放在调用它的语句后面。<br>只要函数在代码中进行了声明，无论它在哪个位置上进行声明， js 引擎都会将它的声明放在范围作用域的顶部；</p><p>(3) 变量 or 函数声明：函数声明会覆盖变量声明，但不会覆盖变量赋值。<br>同一个名称标识 a，即有变量声明 var a，又有函数声明 function a() {}，不管二者声明的顺序，函数声明会覆盖变量声明，也就是说，此时 a 的值是声明的函数 function a() {}。注意：如果在变量声明的同时初始化 a，或是之后对 a 进行赋值，此时 a 的值变量的值。eg: var a; var c = 1; a = 1; function a() { return true; } console.log(a);</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - 汇总1</title>
      <link href="/2020/03/06/swikvk/"/>
      <url>/2020/03/06/swikvk/</url>
      
        <content type="html"><![CDATA[<h2 id="数字的方法"><a href="#数字的方法" class="headerlink" title="数字的方法"></a>数字的方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Number.parseFloat</td><td>将字符串换成浮点数，和全局方法 parseFloat 作用一致</td></tr><tr><td>Number.parseInt</td><td>将字符串换成整数,和全局的方法 parseInt 作用一致</td></tr><tr><td>Number.isFinite</td><td>判断参数是否为有限数字</td></tr><tr><td>Number.isInteger</td><td>判断传递的参数是否为整数</td></tr><tr><td>Number.isNaN</td><td>判断传递的参数是否为非数字</td></tr><tr><td>Number.ISsafeInteger</td><td>判断传递的参数是否为安全整数</td></tr></tbody></table><h2 id="数学的方法"><a href="#数学的方法" class="headerlink" title="数学的方法"></a>数学的方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>abs(x)</td><td>返回数的绝对值</td></tr><tr><td>acos(x)</td><td>返回数的反余弦值</td></tr><tr><td>ceil(x)</td><td>向上取整</td></tr><tr><td>floor(x)</td><td>向下取整</td></tr><tr><td>log(x)</td><td>返回数的自然对数</td></tr><tr><td>max(x,y)</td><td>返回 xy 的最高值</td></tr><tr><td>min(x,y)</td><td>返回 x 和 y 的最低值</td></tr><tr><td>pow(x,y)</td><td>返回 x 的 y 次幂</td></tr><tr><td>random</td><td>返回 0~1 的随机数</td></tr><tr><td>roud(x)</td><td>四舍五入</td></tr></tbody></table><h3 id="es6-数学增加的方法"><a href="#es6-数学增加的方法" class="headerlink" title="es6 数学增加的方法"></a>es6 数学增加的方法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>trunc(x)</td><td>去除小数部分，返回整数部分</td></tr><tr><td>sign</td><td>判断一个属到底是正数，复数，还是零</td></tr><tr><td>cbrt</td><td>计算一个数的立方根</td></tr><tr><td>clz32</td><td>将参数转为 32 位无符号整数，饭后返回这个 32 到位里面多少个 0</td></tr><tr><td>imul</td><td>返回两个数以 32 位带符号整数相乘形式相乘的结过，返回一个 32 为带符号整数</td></tr><tr><td>fround</td><td>返回一个数的 32 位单精度浮点数形式</td></tr><tr><td>hypot</td><td>返回所有参数的平方和的平方根</td></tr></tbody></table><h2 id="日期方法"><a href="#日期方法" class="headerlink" title="日期方法"></a>日期方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>getFullYear</td><td>获取年份</td></tr><tr><td>getTime</td><td>返回至今的毫秒数</td></tr><tr><td>Date</td><td>返回当日的日和时间</td></tr><tr><td>getDate</td><td>获取本月某一天</td></tr><tr><td>getDay</td><td>返回星期几 0~6</td></tr><tr><td>getMonth</td><td>返回月份 0~11</td></tr><tr><td>getHours</td><td>返回小时 0~23</td></tr><tr><td>getMinutes</td><td>返回分钟 0~59</td></tr><tr><td>getSeconds</td><td>返回秒数</td></tr><tr><td>getMilliseconds</td><td>返回毫秒</td></tr><tr><td>getTimezoneOffset</td><td>返回本地时间与格伦分钟差</td></tr><tr><td>setDate</td><td>设置对象某一天</td></tr><tr><td>setMonth</td><td>设置某一月份</td></tr><tr><td>setFullYear</td><td>设置年份(四位数)</td></tr><tr><td>setTime</td><td>以毫秒设置 Date 对象</td></tr><tr><td>toString</td><td>把 Date 对象转为字符串</td></tr><tr><td>toTimeString</td><td>把 Date 对象的时间部分转换为字符串</td></tr><tr><td>toDateString</td><td>把 Date 都西昂的日期部分转为字符串</td></tr><tr><td>toLocaleString</td><td>根据本地时间格式，转换为字符串</td></tr><tr><td>toLocaleTimeString</td><td>根据本地时间格式，把 Date 对象的时间部分转为字符串</td></tr><tr><td>toLocaleDateString</td><td>根据本地格式，把 Date 对象的日期部分转为字符串</td></tr></tbody></table><h2 id="正则的方法"><a href="#正则的方法" class="headerlink" title="正则的方法"></a>正则的方法</h2><h3 id="RegExp-对象方法"><a href="#RegExp-对象方法" class="headerlink" title="RegExp 对象方法"></a>RegExp 对象方法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>compile</td><td>编译正则表达式</td></tr><tr><td>exec</td><td>检索字符串中指定的值，返回找到的值，并确认其位置</td></tr><tr><td>test</td><td>检索字符串中指定的值。返回 true 或 false</td></tr></tbody></table><h3 id="支持正则表达式-String-的方法"><a href="#支持正则表达式-String-的方法" class="headerlink" title="支持正则表达式 String 的方法"></a>支持正则表达式 String 的方法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>search</td><td>检索与正则表达式相匹配的值</td></tr><tr><td>match</td><td>找到一个或者多个正则表达式的匹配</td></tr><tr><td>replace</td><td>替换与正则表达式匹配的字符串</td></tr></tbody></table><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>onabort</td><td>图像加载被中断</td></tr><tr><td>onblur</td><td>元素失去焦点</td></tr><tr><td>onchange</td><td>用户改变域的内容</td></tr><tr><td>onclick</td><td>鼠标点击某个对象</td></tr><tr><td>ondbclick</td><td>鼠标双击</td></tr><tr><td>onerror</td><td>加载文档或图像发生某个错误</td></tr><tr><td>onfocus</td><td>元素获得焦点</td></tr><tr><td>onkeydown</td><td>某个键盘的键被按下</td></tr><tr><td>onkeypress</td><td>某个键盘的键被按下或按住</td></tr><tr><td>onkeyup</td><td>某个键盘的键被松开</td></tr><tr><td>onload</td><td>某个页面或图像被完成加载</td></tr><tr><td>onmousedown</td><td>某个鼠标按键被按下</td></tr><tr><td>onmousemove</td><td>鼠标被移动</td></tr><tr><td>onmouseout</td><td>鼠标从某元素离开</td></tr><tr><td>onmouseover</td><td>鼠标被移动到某元素之上</td></tr><tr><td>onmouseup</td><td>鼠标案件被松开</td></tr><tr><td>onreset</td><td>重置按钮被点击</td></tr><tr><td>onresize</td><td>窗口或框架被调整尺寸</td></tr><tr><td>onselect</td><td>文本被选定</td></tr><tr><td>onsubmit</td><td>提交按钮被点击</td></tr><tr><td>onunload</td><td>用户退出页面</td></tr></tbody></table><h2 id="对象的所有方法"><a href="#对象的所有方法" class="headerlink" title="对象的所有方法"></a>对象的所有方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>.assign()</td><td>将所有可枚举的自身属性的值从一个或多个源对象复制到目标对象</td></tr><tr><td>.create()</td><td>用于指定的原型对象和属性创建一个新对象</td></tr><tr><td>.defineProperty()</td><td>将给定描述符描述的命名属性添加到对象</td></tr><tr><td>.defineProperties()</td><td>将给定描述符描述的命名属性添加到对象</td></tr><tr><td>.entries()</td><td>返回一个包含[key,value]给定对象自己的可枚举字符串属性的所有对的数组</td></tr><tr><td>.freeze()</td><td>冻结对象，其他代码无法删除或更改其属性</td></tr><tr><td>.formEntries()</td><td>从可迭代的[key,value]返回一个新的对象</td></tr><tr><td>.getOwnPropertyDescriptor()</td><td>返回对象的命名属性描述符</td></tr><tr><td>getOwnPropertyNames()</td><td>返回一个数组，其中包含给定对象自己的所有可枚举和不可枚举属性的名称</td></tr><tr><td>getOwnPropertySymbols()</td><td>返回直接在给定对象上找到所有符号属性的数组</td></tr><tr><td>.is()</td><td>比较两个值是否相同</td></tr><tr><td>.isExtensible()</td><td>确定是否允许扩展对象</td></tr><tr><td>.isFrozen()</td><td>确定对象是否被冻结</td></tr><tr><td>.isSealed()</td><td>确定对象是否密封</td></tr><tr><td>.keys()</td><td>返回一个数组，包含给定对象所有可枚举字符串类型的名称</td></tr><tr><td>.preventExtensions()</td><td>防止其他代码删除对象的属性</td></tr><tr><td>.seal()</td><td>防止其他代码删除对象的属性</td></tr><tr><td>.setPrototypeOf()</td><td>设置对象的原型</td></tr><tr><td>.values</td><td>返回一个数组，该数组包含给定对象自己所有可枚举字符串对应的值</td></tr></tbody></table><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><p>Symbol 值通过 Symbol 函数生成。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 Symbol 类型。凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突</p><h2 id="Set-和-Map"><a href="#Set-和-Map" class="headerlink" title="Set 和 Map"></a>Set 和 Map</h2><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>ES6 提供了新的数据结构 Set。他类似于数组，但是成员的值都是唯一的，没有重复的值</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制，而 Map 的 key 值可以是任意属性</p><h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><p>Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。 Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。</p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>用于将异步代码同步化</p><p>Promise 有三种状态，pending（进行中）、fulfilled（操作已成功）、rejected（操作已失败） 一旦状态改变，就不会再改变</p><ul><li>.then 调用成功状态的回调函数</li><li>.catch 调用错误状态的回调函数</li><li>.finally 无论状态如何都会执行的操作</li><li>.all()接受一个可迭代对象，等待多个同步或者异步任务执行完毕</li><li>.race()接收一个可迭代对象，返回最先返回结果的</li><li>.any()接收一个可迭代对象，只要有一个 promise 成功就返回成功的 promise</li></ul><h2 id="如何过去元素和视口的距离"><a href="#如何过去元素和视口的距离" class="headerlink" title="如何过去元素和视口的距离"></a>如何过去元素和视口的距离</h2><p>getBoundingClientRect 返回一个对象，是一组矩形的集合，返回的值主要是 left、top、bottom、right、width、height、x、y。<br>left 是元素左边框距离视图左侧的距离<br>right—————<br>top 是元素上边框距离视图顶部的距离<br>bottom————-<br>width 元素宽度<br>height 元素高度<br>x 元素的 x 轴<br>y 元素的 y 轴</p><h2 id="介绍一下-webpack"><a href="#介绍一下-webpack" class="headerlink" title="介绍一下 webpack"></a>介绍一下 webpack</h2><p>webpack 是一个前端模块化打包工具，主要由入口，出口，loader，pluguns 四个部分，前端的打包工具还有一个 gulp，不过 gulp 重于前端开发的过程，而 webpack 侧重于模块，例如他会将 css 文件看作一个模块，通过 css-loader 将 css 打包成符合 css 的静态资源</p><h2 id="es6-箭头函数和普通函数的区别"><a href="#es6-箭头函数和普通函数的区别" class="headerlink" title="es6 箭头函数和普通函数的区别"></a>es6 箭头函数和普通函数的区别</h2><p>普通 function 的声明在变量提升中是最高的，箭头函数没有函数提升<br>箭头函数没有 arguments<br>箭头函数不能作为构造函数，不能被 new，没有 property<br>call 和 apply 方法只有参数，没有作用域</p><h2 id="什么是闭包，闭包有什么危害，如何解决闭包带来的危害"><a href="#什么是闭包，闭包有什么危害，如何解决闭包带来的危害" class="headerlink" title="什么是闭包，闭包有什么危害，如何解决闭包带来的危害"></a>什么是闭包，闭包有什么危害，如何解决闭包带来的危害</h2><p>简单来说，闭包就是定义在函数内部的函数，因为 js 中存在作用域的问题，所以在函数内部定义的变量在函数外部是没有办法直接获取到，而闭包就是沟通函数内部和外部的桥梁，这样在函数外部直接可以得到函数内部的值，并且闭包可以实现函数属性和方法的私有化</p><h2 id="闭包的危害"><a href="#闭包的危害" class="headerlink" title="闭包的危害"></a>闭包的危害</h2><p>因为闭包会将内部变量存储在内存中，如果长时间不清除的话会造成内存泄漏的问题，影响程序的性能<br>解决方法：对于不使用的变量及时的清除</p><h2 id="不使用第三个变量交换值"><a href="#不使用第三个变量交换值" class="headerlink" title="不使用第三个变量交换值"></a>不使用第三个变量交换值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span> b=<span class="number">2</span></span><br><span class="line">a = a+b <span class="comment">//a=3</span></span><br><span class="line">b = a-b <span class="comment">//b=1</span></span><br><span class="line">a = a-b <span class="comment">//a=2</span></span><br></pre></td></tr></table></figure><h2 id="prototype-和proto和-constructor"><a href="#prototype-和proto和-constructor" class="headerlink" title="prototype 和proto和 constructor"></a>prototype 和<strong>proto</strong>和 constructor</h2><p>什么是构造函数？<br>答：通过关键字 new 创建的函数叫做构造函数，用来创建一个对象<br>什么是原型 prototype？<br>答：每一个函数都有一个 prototype 属性，这个属性指向一个对象，简称原型<br>原型有什么作用？<br>节约内存、扩展属性和方法、实现类的继承<br><strong>proto</strong>是什么？<br>每一个对象都有一个<strong>proto</strong>属性，指向创建自己的哪个构造函数的原型<br>对象可以直接访问自己<strong>proto</strong>里面的属性和方法<br>constructor 指向创建自己那个构造函数。<br>三者关系：<br>当我们创建一个构造函数的时候这个构造函数自带了一个 prototype 属性，而这个属性指向一个对象，也就是原型对象。这个原型对象里面有一个 constructor 构造器，它的作用是指向创建自己的构造函数。除此之外 prototype 还可以存放公共的属性和方法。当我们实例化一个对象的时候，这个对象自带了一个<strong>proto</strong>属性，这个<strong>proto</strong>指向创建自己的构造函数的原型对象</p><h2 id="eventLoop"><a href="#eventLoop" class="headerlink" title="eventLoop"></a>eventLoop</h2><p>event loop 是一个执行模型，在不同的地方有不同的实现.浏览器和 nodejs 基于不同的技术实现了各自的 event loop。<br>浏览器的 event loop 具体的 js 代码具体流程：</p><ol><li>执行全局 js 同步代码，这些同步代码有一些式同步语句，有一些是异步语句</li><li>先执行全局的同步代码，遇到异步语句会区分是微任务（microtask）还是宏任务（macrotask），并分别放入微队列和宏队列</li><li>待同步代码执行完毕，stack 调用栈会清空</li><li>从微队列取出队首的任务，放入调用栈 stack 执行，微队列长度减一</li><li>继续取出队首的位置，放入 stack 调用栈中执行，直到把所有微任务执行完毕，此时微任务队列被清空，调用栈也为空</li><li>取出宏队列中位于首位的任务，放入 stack 中执行</li><li>执行完毕后，调用栈为空</li><li>重复 3-7 个步骤直到加载完毕</li></ol><h2 id="window-requestAnimationFrame-是什么"><a href="#window-requestAnimationFrame-是什么" class="headerlink" title="window.requestAnimationFrame 是什么"></a>window.requestAnimationFrame 是什么</h2><p>告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行<br>语法：window.requestAnimationFrame(callback);<br>callback<br>下一次重绘之前更新动画帧所调用的函数(即上面所说的回调函数)。该回调函数会被传入 DOMHighResTimeStamp 参数，该参数与 performance.now()的返回值相同，它表示 requestAnimationFrame() 开始去执行回调函数的时刻。<br>返回值<br>一个 long 整数，请求 ID ，是回调列表中唯一的标识。是个非零值，没别的意义。你可以传这个值给 window.cancelAnimationFrame() 以取消回调函数。</p><h2 id="new-之后干了什么"><a href="#new-之后干了什么" class="headerlink" title="new 之后干了什么"></a>new 之后干了什么</h2><ol><li>创建一个空对象，空对象的<strong>proto</strong>去继承构造函数的 prototype</li><li>属性和方法被加入到 this 引用对象中</li><li>新创建的对象由 this 所引用，最后隐式返回 this</li></ol><h2 id="bind、call、apply-区别"><a href="#bind、call、apply-区别" class="headerlink" title="bind、call、apply 区别"></a>bind、call、apply 区别</h2><p>首先三者都是用来改变 this 指向的，他们的第一个参数都是 this 要指向的对象，如果有 null 或者<br>undefined 则指向 window，他们都可以传参，apply 接收一个数组，call 和 bind 接收参数列表，<br>而且 bind 咳哟分多次传入，bind 返回一个绑定 this 之后的函数，而 apply 和 call 时立即执行</p><h2 id="git-的使用"><a href="#git-的使用" class="headerlink" title="git 的使用"></a>git 的使用</h2><p>git 分布式管理工具下载完可以离线操作 svn 是集中式管理工具必须在线操作</p><h2 id="请求和响应报文"><a href="#请求和响应报文" class="headerlink" title="请求和响应报文"></a>请求和响应报文</h2><ul><li>请求报文：请求行、请求头部、空行、请求数据</li><li>响应报文：响应行、响应头、空行、响应体</li></ul><h2 id="用什么管理软件生命周期-spasvo-ALM-管理"><a href="#用什么管理软件生命周期-spasvo-ALM-管理" class="headerlink" title="用什么管理软件生命周期 spasvo ALM 管理"></a>用什么管理软件生命周期 spasvo ALM 管理</h2><ol><li>可行性研究阶段 （定义期）</li><li>需求分析阶段</li><li>概要设计阶段 （开发期）</li><li>详细设计阶段</li><li>开发实现阶段</li><li>测试阶段</li><li>部署阶段 （部署期）</li><li>维护阶段</li></ol><h2 id="作用域和作用域链"><a href="#作用域和作用域链" class="headerlink" title="作用域和作用域链"></a>作用域和作用域链</h2><p>全局作用域：在任何地方都能被访问，window 对象下的内置属性都是全局作用域</p><p>函数作用域：固定代码片段中<br>作用域链：作用域都有上下级关系，上下级关系确定函数在哪个作用域下创建，变量取值都会在当前作用域中查找，如果没有查到就会像上级作用域查找，直到查到全局作用域，这个查找的过程叫做作用域链</p><h2 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h2><p>先说实例、构造函数和原型对象之间的关系<br>实例在调用方法时，如果在本身没有找到，就会在原型对象上查找，如果也没有找到，就会再向上一级原型对象查找，一直找到 Object.prototype ；如果中间找到会停止查找返回该方法。如果一直没找到会返回未定义；</p><h2 id="浏览器输入-url-到页面加载发生了什么"><a href="#浏览器输入-url-到页面加载发生了什么" class="headerlink" title="浏览器输入 url 到页面加载发生了什么"></a>浏览器输入 url 到页面加载发生了什么</h2><p>浏览器的地址栏输入 URL 并按下回车。<br>浏览器查找当前 URL 是否存在缓存，并比较缓存是否过期。<br>DNS 解析 URL 对应的 IP。根据 IP 建立 TCP 连接（三次握手）。<br>HTTP 发起请求。服务器处理请求，浏览器接收 HTTP 响应。<br>渲染页面，构建 DOM 树。<br>关闭 TCP 连接（四次挥手）</p><h2 id="移动端适配"><a href="#移动端适配" class="headerlink" title="移动端适配"></a>移动端适配</h2><ol><li>百分比方案：使用百分比定义宽度高度，根据可视区域实时尺寸进行调整，尽可能适应各种分辨率，通常使用 max-width/min-width 控制尺寸范围过大或者过小；</li><li>rem ：rem 根据根元素 html 的 font-size 计算值的倍数，根据屏幕宽度动态设置 html 标签的 font-size，在布局的时候使用 rem 单位布局，达到自适应布局</li><li>vh/vw 方案 ： 1vw = 视口宽度的 1%，通过 css 预处理器把设计稿转换为 vw 单位，包括文本，布局，间距等。<br>出现的问题：在用到 1px 的 border 的时候直接使用 1px</li></ol>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js汇总1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - 发布&amp;订阅</title>
      <link href="/2020/03/05/vwc6v6/"/>
      <url>/2020/03/05/vwc6v6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Events = <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.clientList = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Events.prototype.$emit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> eventname = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.clientList[eventname].length) &#123;</span><br><span class="line">    <span class="built_in">this</span>.clientList[eventname].forEach(<span class="function">(<span class="params">listener</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//   listener(Array.prototype.slice.call(arguments, 1));</span></span><br><span class="line">      listener(<span class="built_in">Array</span>.prototype.slice.apply(<span class="built_in">arguments</span>, [<span class="number">1</span>]));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Events.prototype._getClientList = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.clientList;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 订阅者</span></span><br><span class="line">Events.prototype.$on = <span class="function"><span class="keyword">function</span> (<span class="params">eventName, callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断clientList是否存在派发的事件数组</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">this</span>.clientList[eventName]) &#123;</span><br><span class="line">    <span class="comment">// 创建下标为eventName的数组，保存每个eventName订阅者对应的监听事件</span></span><br><span class="line">    <span class="built_in">this</span>.clientList[eventName] = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果已经存在eventName监听数组</span></span><br><span class="line">  <span class="comment">// 将新的监听事件加入</span></span><br><span class="line">  <span class="built_in">this</span>.clientList[eventName] = [...this.clientList[eventName], callback];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> events = <span class="keyword">new</span> Events();</span><br><span class="line"><span class="comment">// 监听事件 - 订阅者</span></span><br><span class="line"><span class="keyword">const</span> zhangsan = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  events.$on(<span class="string">&quot;baweixinkong-5.28&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;zhangli&quot;</span>, data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> lisi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  events.$on(<span class="string">&quot;baweixinkong-5.28&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;lisi&quot;</span>, data);</span><br><span class="line">  &#125;);</span><br><span class="line">  events.$on(<span class="string">&quot;baweixinkong-5.27&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;lisi&quot;</span> + data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">zhangsan();</span><br><span class="line">lisi();</span><br><span class="line">events.$on(<span class="string">&quot;baweixinkong-5.28&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;mazi&quot;</span>, data);</span><br><span class="line">&#125;);</span><br><span class="line">events.$on(<span class="string">&quot;baweixinkong-5.21&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 派发事件 - 发布者</span></span><br><span class="line">events.$emit(<span class="string">&quot;baweixinkong-5.28&quot;</span>, <span class="string">&quot;5.28新闻，你好么么哒&quot;</span>);</span><br><span class="line"><span class="comment">// Events.$emit(&quot;baweixinkong-5.27&quot;, &quot;你好么么哒&quot;);</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 发布&amp;订阅 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - 查找方法</title>
      <link href="/2020/03/03/do7d2q/"/>
      <url>/2020/03/03/do7d2q/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h2><ul><li>str.indexOf(val)</li><li>str.includes(val)</li></ul><h2 id="数组查找"><a href="#数组查找" class="headerlink" title="数组查找"></a>数组查找</h2><ul><li>arr.indexOf(val)</li><li>arr.includes(val)</li><li>arr.find()</li><li>arr.findIndex</li><li>arr.filter</li></ul><h2 id="对象查找"><a href="#对象查找" class="headerlink" title="对象查找"></a>对象查找</h2><ul><li>Object.keys()</li><li>Object.values()</li><li>Object.entries();</li><li>object.portotype.hasOwnProperty(key)</li></ul><p>const obj = { name:”zhangsan”, age:14 }</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 查找方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - 对象</title>
      <link href="/2020/03/03/og04sv/"/>
      <url>/2020/03/03/og04sv/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要用对象"><a href="#为什么要用对象" class="headerlink" title="为什么要用对象"></a>为什么要用对象</h2><p>基本数据类型的数据结构比较单一，不能够满足我们的开发所需，而且我们需要以键值对的形式保存复杂类型数据。</p><h2 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h2><p>下面是对象创建的几种方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.create();</span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.definePropotype(&lt;object&gt;,&lt;object.propotype&gt;,&lt;option&gt;)</span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.definePropotypes()</span><br></pre></td></tr></table></figure><h2 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h2><p>想描述一个人物，通过“抽象”的思想来完成我们的代码开发。<br>将一个人物，通过 javascript 的数据类型完成人物 “画像”，这个过程我们称之为<strong>抽象</strong>。<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1611639824729-1a13bc9b-09aa-4e92-917a-cc08eda9acd8.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;zhangsanfeng&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="string">&quot;101&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> gender = <span class="string">&quot;male&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> hobby = [<span class="string">&quot;吃饭饭&quot;</span>, <span class="string">&quot;睡觉觉&quot;</span>, <span class="string">&quot;打太极&quot;</span>];</span><br></pre></td></tr></table></figure><p>由于我们使用基本数据类型进行抽象，写出来的数据属性比较分散，而且不利于传参，所以我们可以考虑使用数组、对象的形式来保存数据。<br>现在，我们分别通过数组、对象来“描述”一下张三丰：</p><p>数组形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> zhangsanfeng = [</span><br><span class="line">  <span class="string">&quot;zhangsanfeng&quot;</span>,</span><br><span class="line">  <span class="string">&quot;101&quot;</span>,</span><br><span class="line">  <span class="string">&quot;male&quot;</span>,</span><br><span class="line">  <span class="string">&quot;&quot;</span>,</span><br><span class="line">  [<span class="string">&quot;吃饭饭&quot;</span>, <span class="string">&quot;睡觉觉&quot;</span>, <span class="string">&quot;打太极&quot;</span>],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>对象形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> zhangsanfeng = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;zhangsanfeng&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&quot;101&quot;</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">  <span class="attr">hobby</span>: [<span class="string">&quot;吃饭饭&quot;</span>, <span class="string">&quot;睡觉觉&quot;</span>, <span class="string">&quot;打太极&quot;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>数组只能够描述一堆属性，不能够对每个属性是干什么的，给出确切的描述，反之即是<strong>对象</strong>。</p><h2 id="对象的属性"><a href="#对象的属性" class="headerlink" title="对象的属性"></a>对象的属性</h2><p>赋值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;&quot;</span> &#125;;</span><br><span class="line"><span class="comment">// 方式一：</span></span><br><span class="line">obj.name = <span class="string">&quot;zhangsanfeng&quot;</span>;</span><br><span class="line"><span class="comment">// 方式二：</span></span><br><span class="line">obj[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;zhangsanfeng&quot;</span>;</span><br></pre></td></tr></table></figure><p>取值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;zhangsanfeng&quot;</span> &#125;;</span><br><span class="line"><span class="comment">// 方式一：</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.name);</span><br><span class="line"><span class="comment">// 方式二：</span></span><br><span class="line"><span class="built_in">console</span>.log(obj[<span class="string">&quot;name&quot;</span>]);</span><br></pre></td></tr></table></figure><p>区别：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="comment">// 对象没有这个属性时，建议使用“数组”的形式来去赋值。</span></span><br><span class="line">obj[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;zhangsanfeng&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> key = <span class="string">&quot;name&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj[key]);</span><br></pre></td></tr></table></figure><h2 id="对象分类"><a href="#对象分类" class="headerlink" title="对象分类"></a>对象分类</h2><p>Object 是 JavaScript 中所有对象的父对象<br>数据封装类对象：Object、Array、Boolean、Number 和 String<br>其他对象：Function、Arguments、Math、Date、RegEx、Error</p><h2 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>.assign()</td><td>将所有可枚举的自身属性的值从一个或多个源对象复制到目标对象</td></tr><tr><td>.create()</td><td>用于指定的原型对象和属性创建一个新对象</td></tr><tr><td>.defineProperty()</td><td>将给定描述符描述的命名属性添加到对象</td></tr><tr><td>.defineProperties()</td><td>将给定描述符描述的命名属性添加到对象</td></tr><tr><td>.entries()</td><td>返回一个包含[key,value]给定对象自己的可枚举字符串属性的所有对的数组</td></tr><tr><td>.freeze()</td><td>冻结对象，其他代码无法删除或更改其属性</td></tr><tr><td>.formEntries()</td><td>从可迭代的[key,value]返回一个新的对象</td></tr><tr><td>.getOwnPropertyDescriptor()</td><td>返回对象的命名属性描述符</td></tr><tr><td>getOwnPropertyNames()</td><td>返回一个数组，其中包含给定对象自己的所有可枚举和不可枚举属性的名称</td></tr><tr><td>getOwnPropertySymbols()</td><td>返回直接在给定对象上找到所有符号属性的数组</td></tr><tr><td>.is()</td><td>比较两个值是否相同</td></tr><tr><td>.isExtensible()</td><td>确定是否允许扩展对象</td></tr><tr><td>.isFrozen()</td><td>确定对象是否被冻结</td></tr><tr><td>.isSealed()</td><td>确定对象是否密封</td></tr><tr><td>.keys()</td><td>返回一个数组，包含给定对象所有可枚举字符串类型的名称</td></tr><tr><td>.preventExtensions()</td><td>防止其他代码删除对象的属性</td></tr><tr><td>.seal()</td><td>防止其他代码删除对象的属性</td></tr><tr><td>.setPrototypeOf()</td><td>设置对象的原型</td></tr><tr><td>.values</td><td>返回一个数组，该数组包含给定对象自己所有可枚举字符串对应的值</td></tr></tbody></table><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><p>日常开发中，我们有很多冗余、重复的代码，维护起来项目及其不方便。</p><ul><li>封装、抽离公共代码</li><li>减少代码冗余</li><li>提升代码的可阅读性、可维护性</li><li>可以作递归调用</li><li>不必知道功能、接口的具体实现，就可以完成操作</li></ul><h3 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h3><p><strong>封装</strong><br>将一些完成某一个功能的代码片段放到一个函数当中就是封装。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript本身只是提供了一系列的api，我们做具体开发时候会根据自身的业务逻辑，完成开发任务，为了提升代码的复用性，我们就需要封装。javascript的优秀框架- jquery同样提出一个方法只做一件事的思想。</span><br></pre></td></tr></table></figure><p><strong>继承</strong><br>我们通过构造函数或者是 class 完成了某个功能的开发，其他功能需要在这个类的基础进行扩展，我们就需要使用继承。<br><strong>多态</strong><br>我们创建的子类继承父类完成代码的时候，如果希望我们的子类有很多不同表现的时候，就需要使用多态</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>由于 javascript 是弱类型语言，没有类的概念，es5 当中只有函数具备块级作用域，我们通过 Function 来模拟类。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es5使用function时，可以通过arguments对象来获得形参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例属性</p><p>通过 new 关键字创建的类的实例，可以访问到的<strong>属性</strong>就是 <strong>实例属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 实例属性 age</span></span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="comment">// 实例属性 age</span></span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> zhangsanfeng = <span class="keyword">new</span> Person(<span class="string">&quot;zhangsanfeng&quot;</span>, <span class="number">13</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zhangsanfeng.name); <span class="comment">// zhangsanfeng</span></span><br><span class="line"><span class="built_in">console</span>.log(zhangsanfeng.age); <span class="comment">// 13</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 实例属性 name</span></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="comment">// 实例属性 age</span></span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> zhangsanfeng = <span class="keyword">new</span> Person(<span class="string">&quot;zhangsanfeng&quot;</span>, <span class="number">13</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zhangsanfeng.name); <span class="comment">// zhangsanfeng</span></span><br><span class="line"><span class="built_in">console</span>.log(zhangsanfeng.age); <span class="comment">// 13</span></span><br></pre></td></tr></table></figure><p>实例方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 实例属性 age</span></span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="comment">// 实例属性 age</span></span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="comment">// 实例方法</span></span><br><span class="line">  <span class="built_in">this</span>.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例方法</span></span><br><span class="line">Person.prototype.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> zhangsanfeng = <span class="keyword">new</span> Person(<span class="string">&quot;zhangsanfeng&quot;</span>, <span class="number">13</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zhangsanfeng.name); <span class="comment">// zhangsanfeng</span></span><br><span class="line"><span class="built_in">console</span>.log(zhangsanfeng.age); <span class="comment">// 13</span></span><br></pre></td></tr></table></figure><p>通过 new 关键字创建的类的实例，可以访问到的<strong>方法</strong>就是 <strong>实例属性</strong><br>静态属性<br>只有在在类的内部可以访问到的属性，就是静态属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 实例属性 age</span></span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="comment">// 实例属性 age</span></span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.getTitle = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(Person.title);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 静态属性</span></span><br><span class="line">Person.title = <span class="string">&quot;zhangsanfeng❤️&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> zhangsanfeng = <span class="keyword">new</span> Person(<span class="string">&quot;zhangsanfeng&quot;</span>, <span class="number">13</span>);</span><br><span class="line">zhangsanfeng.getTitle();</span><br></pre></td></tr></table></figure><p>静态方法<br>只有在在类的内部可以访问到的方法，就是静态方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 实例属性 age</span></span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="comment">// 实例属性 age</span></span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.getTitle = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(Person.title);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 静态方法</span></span><br><span class="line">Person.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> zhangsanfeng = <span class="keyword">new</span> Person(<span class="string">&quot;zhangsanfeng&quot;</span>, <span class="number">13</span>);</span><br><span class="line">zhangsanfeng.getTitle();</span><br></pre></td></tr></table></figure><p>es6 草案，es7 新增的 static 修饰符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 静态属性</span></span><br><span class="line">  <span class="keyword">static</span> title = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">  <span class="comment">// 静态方法</span></span><br><span class="line">  <span class="keyword">static</span> fun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例</p><h2 id="this-指向"><a href="#this-指向" class="headerlink" title="this 指向"></a>this 指向</h2><p>在全局作用域中，this 指向 window<br>在局部作用域中，this 指向调用的函数</p><p><strong>call</strong><br>&lt;做什么&gt;.call(&lt;谁&gt;,&lt;做什么的参数&gt;)<br>谁要做什么，怎么做的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  [].map.call(<span class="built_in">arguments</span>, <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">Array</span>.prototype.map.call(<span class="built_in">arguments</span>, <span class="function"><span class="keyword">function</span> (<span class="params">itm, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(itm, index, arr);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>apply</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.map.apply(<span class="built_in">arguments</span>, [</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">itm, index, arr</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(itm, index, arr);</span><br><span class="line">    &#125;,</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>bind</p><h2 id="对象方法详解"><a href="#对象方法详解" class="headerlink" title="对象方法详解"></a>对象方法详解</h2><h3 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a>Object.keys()</h3><p>会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和使用 for…in 循环遍历该对象时返回的顺序一致 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// simple array</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(arr)); <span class="comment">// console: [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// array like object</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;c&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj)); <span class="comment">// console: [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// array like object with random key ordering</span></span><br><span class="line"><span class="keyword">var</span> anObj = &#123; <span class="number">100</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">7</span>: <span class="string">&#x27;c&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(anObj)); <span class="comment">// console: [&#x27;2&#x27;, &#x27;7&#x27;, &#x27;100&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// getFoo is a property which isn&#x27;t enumerable</span></span><br><span class="line"><span class="keyword">var</span> myObj = <span class="built_in">Object</span>.create(&#123;&#125;, &#123;</span><br><span class="line">  <span class="attr">getFoo</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">this</span>.foo; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">myObj.foo = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(myObj)); <span class="comment">// console: [&#x27;foo&#x27;]</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br><span class="line">• <span class="number">5</span></span><br><span class="line">• <span class="number">6</span></span><br><span class="line">• <span class="number">7</span></span><br><span class="line">• <span class="number">8</span></span><br><span class="line">• <span class="number">9</span></span><br><span class="line">• <span class="number">10</span></span><br><span class="line">• <span class="number">11</span></span><br><span class="line">• <span class="number">12</span></span><br><span class="line">• <span class="number">13</span></span><br><span class="line">• <span class="number">14</span></span><br><span class="line">• <span class="number">15</span></span><br><span class="line">• <span class="number">16</span></span><br><span class="line">• <span class="number">17</span></span><br><span class="line">• <span class="number">18</span></span><br><span class="line">• <span class="number">19</span></span><br><span class="line">• <span class="number">20</span></span><br></pre></td></tr></table></figure><h3 id="Object-values"><a href="#Object-values" class="headerlink" title="Object.values()"></a>Object.values()</h3><p>方法返回一个给定对象自身的所有可枚举属性值的数组，值的顺序与使用 for…in 循环的顺序相同 ( 区别在于 for-in 循环枚举原型链中的属性 )。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(obj)); <span class="comment">// [&#x27;bar&#x27;, 42]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// array like object</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;c&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(obj)); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// array like object with random key ordering</span></span><br><span class="line"><span class="comment">// when we use numeric keys, the value returned in a numerical order according to the keys</span></span><br><span class="line"><span class="keyword">var</span> an_obj = &#123; <span class="number">100</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">7</span>: <span class="string">&#x27;c&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(an_obj)); <span class="comment">// [&#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// getFoo is property which isn&#x27;t enumerable</span></span><br><span class="line"><span class="keyword">var</span> my_obj = <span class="built_in">Object</span>.create(&#123;&#125;, &#123; <span class="attr">getFoo</span>: &#123; <span class="attr">value</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">this</span>.foo; &#125; &#125; &#125;);</span><br><span class="line">my_obj.foo = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(my_obj)); <span class="comment">// [&#x27;bar&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// non-object argument will be coerced to an object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(<span class="string">&#x27;foo&#x27;</span>)); <span class="comment">// [&#x27;f&#x27;, &#x27;o&#x27;, &#x27;o&#x27;]</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br><span class="line">• <span class="number">5</span></span><br><span class="line">• <span class="number">6</span></span><br><span class="line">• <span class="number">7</span></span><br><span class="line">• <span class="number">8</span></span><br><span class="line">• <span class="number">9</span></span><br><span class="line">• <span class="number">10</span></span><br><span class="line">• <span class="number">11</span></span><br><span class="line">• <span class="number">12</span></span><br><span class="line">• <span class="number">13</span></span><br><span class="line">• <span class="number">14</span></span><br><span class="line">• <span class="number">15</span></span><br><span class="line">• <span class="number">16</span></span><br><span class="line">• <span class="number">17</span></span><br><span class="line">• <span class="number">18</span></span><br><span class="line">• <span class="number">19</span></span><br></pre></td></tr></table></figure><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h3><p>用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。返回目标对象。<br>Object.assign()方法的第一个参数是目标对象，后面的参数都是源对象。(如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source = &#123; <span class="attr">b</span>: <span class="number">4</span>, <span class="attr">c</span>: <span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> returnedTarget = <span class="built_in">Object</span>.assign(target, source);</span><br><span class="line"><span class="built_in">console</span>.log(target);</span><br><span class="line"><span class="comment">// expected output: Object &#123; a: 1, b: 4, c: 5 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(returnedTarget);</span><br><span class="line"><span class="comment">// expected output: Object &#123; a: 1, b: 4, c: 5 &#125;</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br><span class="line">• <span class="number">5</span></span><br><span class="line">• <span class="number">6</span></span><br><span class="line">• <span class="number">7</span></span><br></pre></td></tr></table></figure><h3 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h3><p>创建一个新对象，使用现有的对象来提供新创建的对象的<strong>proto</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line"><span class="attr">isHuman</span>: <span class="literal">false</span>,</span><br><span class="line">printIntroduction () &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>,Am I Human? <span class="subst">$&#123;<span class="built_in">this</span>.isHuman&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> me = <span class="built_in">Object</span>.create(person)</span><br><span class="line">me.name = <span class="string">&quot;Matthew&quot;</span>; <span class="comment">// &quot;name&quot; is a property set on &quot;me&quot;, but not on &quot;person&quot;</span></span><br><span class="line">me.isHuman = <span class="literal">true</span>; <span class="comment">// inherited properties can be overwritten</span></span><br><span class="line"></span><br><span class="line">me.printIntroduction();</span><br><span class="line"><span class="comment">// expected output: &quot;My name is Matthew. Am I human? true&quot;</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br><span class="line">• <span class="number">5</span></span><br><span class="line">• <span class="number">6</span></span><br><span class="line">• <span class="number">7</span></span><br><span class="line">• <span class="number">8</span></span><br><span class="line">• <span class="number">9</span></span><br><span class="line">• <span class="number">10</span></span><br><span class="line">• <span class="number">11</span></span><br><span class="line">• <span class="number">12</span></span><br></pre></td></tr></table></figure><h3 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h3><p>直接在一个对象上定义新的属性或修改现有属性，并返回该对象。<br>一般通过为对象的属性赋值的情况下，对象的属性可以修改也可以删除，但是通过 Object.defineProperty()定义属性，通过描述符的设置可以进行更精准的控制对象属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj, prop, desc)</span><br><span class="line">• <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>obj 需要定义属性的当前对象</li><li>prop 当前需要定义的属性名</li><li>desc 属性描述符,是一个对象</li></ul><p>描述符中的某些属性被省略，会使用以下默认规则<br>![](<a href="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1605050511860-dbdbd2a8-b759-4b18-a9d7-e6d5f7be9b66.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15">https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1605050511860-dbdbd2a8-b759-4b18-a9d7-e6d5f7be9b66.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15</a><br>存取描述符 –是由一对 getter、setter 函数功能来描述的属性<br>get：一个给属性提供 getter 的方法，如果没有 getter 则为 undefined。该方法返回值被用作属性值。默认为 undefined。<br>set：一个给属性提供 setter 的方法，如果没有 setter 则为 undefined。该方法将接受唯一参数，并将该参数的新值分配给该属性。默认值为 undefined。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Person = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> temp = <span class="literal">null</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Person, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    temp = val</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">Person.name <span class="comment">// null</span></span><br><span class="line">Person.name = <span class="string">&#x27;Web泓&#x27;</span> <span class="comment">// Web泓</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br><span class="line">• <span class="number">5</span></span><br><span class="line">• <span class="number">6</span></span><br><span class="line">• <span class="number">7</span></span><br><span class="line">• <span class="number">8</span></span><br><span class="line">• <span class="number">9</span></span><br><span class="line">• <span class="number">10</span></span><br><span class="line">• <span class="number">11</span></span><br><span class="line">• <span class="number">12</span></span><br></pre></td></tr></table></figure><p>最近看 Vue 元源码看到了上面的内容,Vue 之所以可以通过 this.message 来访问到 data 选项中定义的 message 变量,实现方法中用到了 Object.defineProperty()方法<br>部分源码如下,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">proxy</span> (<span class="params">target: <span class="built_in">Object</span>, sourceKey: string, key: string</span>) </span>&#123;</span><br><span class="line">  sharedPropertyDefinition.get = <span class="function"><span class="keyword">function</span> <span class="title">proxyGetter</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>[sourceKey][key]</span><br><span class="line">  &#125;</span><br><span class="line">  sharedPropertyDefinition.set = <span class="function"><span class="keyword">function</span> <span class="title">proxySetter</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>[sourceKey][key] = val</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(target, key, sharedPropertyDefinition)</span><br><span class="line">&#125;</span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br><span class="line">• <span class="number">5</span></span><br><span class="line">• <span class="number">6</span></span><br><span class="line">• <span class="number">7</span></span><br><span class="line">• <span class="number">8</span></span><br><span class="line">• <span class="number">9</span></span><br></pre></td></tr></table></figure><p>target 参数可以理解为 Vue 实例对象<br>sourceKey 参数可以理解为 data 选项<br>key 参数可以理解为 data 选项里定义的变量名<br>有兴趣可以看下面的博客<br><a href="https://blog.csdn.net/weixin_42752574/article/details/105526570">Vue 源码学习(持续更新中)</a></p><h3 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries()"></a>Object.entries()</h3><p>返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 for…in 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环也枚举原型链中的属性）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(obj)); <span class="comment">// [ [&#x27;foo&#x27;, &#x27;bar&#x27;], [&#x27;baz&#x27;, 42] ]</span></span><br><span class="line"><span class="comment">// array like object</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;c&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(obj)); <span class="comment">// [ [&#x27;0&#x27;, &#x27;a&#x27;], [&#x27;1&#x27;, &#x27;b&#x27;], [&#x27;2&#x27;, &#x27;c&#x27;] ]</span></span><br><span class="line"><span class="comment">// array like object with random key ordering</span></span><br><span class="line"><span class="keyword">const</span> anObj = &#123; <span class="number">100</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">7</span>: <span class="string">&#x27;c&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(anObj)); <span class="comment">// [ [&#x27;2&#x27;, &#x27;b&#x27;], [&#x27;7&#x27;, &#x27;c&#x27;], [&#x27;100&#x27;, &#x27;a&#x27;] ]</span></span><br><span class="line"><span class="comment">// getFoo is property which isn&#x27;t enumerable</span></span><br><span class="line"><span class="keyword">const</span> myObj = <span class="built_in">Object</span>.create(&#123;&#125;, &#123; <span class="attr">getFoo</span>: &#123; <span class="function"><span class="title">value</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> <span class="built_in">this</span>.foo; &#125; &#125; &#125;);</span><br><span class="line">myObj.foo = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(myObj)); <span class="comment">// [ [&#x27;foo&#x27;, &#x27;bar&#x27;] ]</span></span><br><span class="line"><span class="comment">// non-object argument will be coerced to an object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(<span class="string">&#x27;foo&#x27;</span>)); <span class="comment">// [ [&#x27;0&#x27;, &#x27;f&#x27;], [&#x27;1&#x27;, &#x27;o&#x27;], [&#x27;2&#x27;, &#x27;o&#x27;] ]</span></span><br><span class="line"><span class="comment">// iterate through key-value gracefully</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">7</span>, <span class="attr">c</span>: <span class="number">9</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(obj)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span> <span class="subst">$&#123;value&#125;</span>`</span>); <span class="comment">// &quot;a 5&quot;, &quot;b 7&quot;, &quot;c 9&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Or, using array extras</span></span><br><span class="line"><span class="built_in">Object</span>.entries(obj).forEach(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span> <span class="subst">$&#123;value&#125;</span>`</span>); <span class="comment">// &quot;a 5&quot;, &quot;b 7&quot;, &quot;c 9&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br><span class="line">• <span class="number">5</span></span><br><span class="line">• <span class="number">6</span></span><br><span class="line">• <span class="number">7</span></span><br><span class="line">• <span class="number">8</span></span><br><span class="line">• <span class="number">9</span></span><br><span class="line">• <span class="number">10</span></span><br><span class="line">• <span class="number">11</span></span><br><span class="line">• <span class="number">12</span></span><br><span class="line">• <span class="number">13</span></span><br><span class="line">• <span class="number">14</span></span><br><span class="line">• <span class="number">15</span></span><br><span class="line">• <span class="number">16</span></span><br><span class="line">• <span class="number">17</span></span><br><span class="line">• <span class="number">18</span></span><br><span class="line">• <span class="number">19</span></span><br><span class="line">• <span class="number">20</span></span><br><span class="line">• <span class="number">21</span></span><br><span class="line">• <span class="number">22</span></span><br><span class="line">• <span class="number">23</span></span><br><span class="line">• <span class="number">24</span></span><br><span class="line">• <span class="number">25</span></span><br><span class="line">• <span class="number">26</span></span><br><span class="line">• <span class="number">27</span></span><br><span class="line">• <span class="number">28</span></span><br><span class="line">• <span class="number">29</span></span><br></pre></td></tr></table></figure><h3 id="Object-freeze"><a href="#Object-freeze" class="headerlink" title="Object.freeze()"></a>Object.freeze()</h3><p>可以冻结一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。freeze() 返回和传入的参数相同的对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object1 = &#123;</span><br><span class="line">  <span class="attr">property1</span>: <span class="number">42</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> object2 = <span class="built_in">Object</span>.freeze(object1);</span><br><span class="line"></span><br><span class="line">object2.property1 = <span class="number">33</span>;</span><br><span class="line"><span class="comment">// Throws an error in strict mode</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(object2.property1);</span><br><span class="line"><span class="comment">// expected output: 42</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br><span class="line">• <span class="number">5</span></span><br><span class="line">• <span class="number">6</span></span><br><span class="line">• <span class="number">7</span></span><br><span class="line">• <span class="number">8</span></span><br><span class="line">• <span class="number">9</span></span><br><span class="line">• <span class="number">10</span></span><br><span class="line">• <span class="number">11</span></span><br></pre></td></tr></table></figure><h3 id="Object-fromEntries"><a href="#Object-fromEntries" class="headerlink" title="Object.fromEntries()"></a>Object.fromEntries()</h3><p>把键值对列表转换为一个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span> 转化为 <span class="built_in">Object</span></span><br><span class="line">通过 <span class="built_in">Object</span>.fromEntries， 可以将 <span class="built_in">Map</span> 转化为 <span class="built_in">Object</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([ [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>], [<span class="string">&#x27;baz&#x27;</span>, <span class="number">42</span>] ]);</span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.fromEntries(map);</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; foo: &quot;bar&quot;, baz: 42 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span> 转化为 <span class="built_in">Object</span></span><br><span class="line">通过 <span class="built_in">Object</span>.fromEntries， 可以将 <span class="built_in">Array</span> 转化为 <span class="built_in">Object</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [ [<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;a&#x27;</span>], [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;b&#x27;</span>], [<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;c&#x27;</span>] ];</span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.fromEntries(arr);</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; 0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot; &#125;</span></span><br><span class="line">对象转换为<span class="built_in">Object</span></span><br><span class="line"><span class="built_in">Object</span>.fromEntries 是 <span class="built_in">Object</span>.entries() 的反转函数， 借用 array manipulation methods 可以转换对象，如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> object1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> object2 = <span class="built_in">Object</span>.fromEntries(</span><br><span class="line">  <span class="built_in">Object</span>.entries(object1)</span><br><span class="line">  .map(<span class="function">(<span class="params">[ key, val ]</span>) =&gt;</span> [ key, val * <span class="number">2</span> ])</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(object2);</span><br><span class="line"><span class="comment">// &#123; a: 2, b: 4, c: 6 &#125;</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br><span class="line">• <span class="number">5</span></span><br><span class="line">• <span class="number">6</span></span><br><span class="line">• <span class="number">7</span></span><br><span class="line">• <span class="number">8</span></span><br><span class="line">• <span class="number">9</span></span><br><span class="line">• <span class="number">10</span></span><br><span class="line">• <span class="number">11</span></span><br><span class="line">• <span class="number">12</span></span><br><span class="line">• <span class="number">13</span></span><br><span class="line">• <span class="number">14</span></span><br><span class="line">• <span class="number">15</span></span><br><span class="line">• <span class="number">16</span></span><br><span class="line">• <span class="number">17</span></span><br><span class="line">• <span class="number">18</span></span><br><span class="line">• <span class="number">19</span></span><br><span class="line">• <span class="number">20</span></span><br><span class="line">• <span class="number">21</span></span><br><span class="line">• <span class="number">22</span></span><br><span class="line">• <span class="number">23</span></span><br><span class="line">• <span class="number">24</span></span><br><span class="line">• <span class="number">25</span></span><br></pre></td></tr></table></figure><h3 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h3><p>判断两个值是否是相同的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.is(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>);     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="built_in">window</span>, <span class="built_in">window</span>);   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>);     <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is([], []);           <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> bar = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.is(foo, foo);         <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(foo, bar);         <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">null</span>, <span class="literal">null</span>);       <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特例</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="number">0</span>, -<span class="number">0</span>);            <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is(-<span class="number">0</span>, -<span class="number">0</span>);           <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="number">0</span>/<span class="number">0</span>);         <span class="comment">// true</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br><span class="line">• <span class="number">5</span></span><br><span class="line">• <span class="number">6</span></span><br><span class="line">• <span class="number">7</span></span><br><span class="line">• <span class="number">8</span></span><br><span class="line">• <span class="number">9</span></span><br><span class="line">• <span class="number">10</span></span><br><span class="line">• <span class="number">11</span></span><br><span class="line">• <span class="number">12</span></span><br><span class="line">• <span class="number">13</span></span><br><span class="line">• <span class="number">14</span></span><br><span class="line">• <span class="number">15</span></span><br><span class="line">• <span class="number">16</span></span><br><span class="line">• <span class="number">17</span></span><br></pre></td></tr></table></figure><h3 id="Object-isFrozen"><a href="#Object-isFrozen" class="headerlink" title="Object.isFrozen()"></a>Object.isFrozen()</h3><p>判断一个对象是否被冻结</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Object.freeze是冻结一个对象最方便的方法.</span></span><br><span class="line"><span class="keyword">var</span> frozen = &#123; <span class="number">1</span>: <span class="number">81</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.isFrozen(frozen) <span class="comment">//=== false</span></span><br><span class="line"><span class="built_in">Object</span>.freeze(frozen);</span><br><span class="line"><span class="built_in">Object</span>.isFrozen(frozen) <span class="comment">//=== true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个冻结对象也是一个密封对象.</span></span><br><span class="line"><span class="built_in">Object</span>.isSealed(frozen) <span class="comment">//=== true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然,更是一个不可扩展的对象.</span></span><br><span class="line"><span class="built_in">Object</span>.isExtensible(frozen) <span class="comment">//=== false</span></span><br><span class="line">在 ES5 中，如果参数不是一个对象类型，将抛出一个<span class="built_in">TypeError</span>异常。在 ES2015 中，非对象参数将被视为一个冻结的普通对象，因此会返回<span class="literal">true</span>。</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.isFrozen(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// TypeError: 1 is not an object (ES5 code)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.isFrozen(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// true                          (ES2015 code)</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br><span class="line">• <span class="number">5</span></span><br><span class="line">• <span class="number">6</span></span><br><span class="line">• <span class="number">7</span></span><br><span class="line">• <span class="number">8</span></span><br><span class="line">• <span class="number">9</span></span><br><span class="line">• <span class="number">10</span></span><br><span class="line">• <span class="number">11</span></span><br><span class="line">• <span class="number">12</span></span><br><span class="line">• <span class="number">13</span></span><br><span class="line">• <span class="number">14</span></span><br><span class="line">• <span class="number">15</span></span><br><span class="line">• <span class="number">16</span></span><br><span class="line">• <span class="number">17</span></span><br><span class="line">• <span class="number">18</span></span><br></pre></td></tr></table></figure><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>javascript 创建对象简单的说,无非就是使用内置对象或各种自定义对象，当然还可以用 JSON；但写法有很多种，也能混合使用。</p><h3 id="对象字面量创建"><a href="#对象字面量创建" class="headerlink" title="对象字面量创建"></a>对象字面量创建</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">firstname</span>: <span class="string">&quot;Mark&quot;</span>,</span><br><span class="line">  <span class="attr">lastname</span>: <span class="string">&quot;Yun&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">eyecolor</span>: <span class="string">&quot;black&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="构造函数创建"><a href="#构造函数创建" class="headerlink" title="构造函数创建"></a>构造函数创建</h3><p>定义一个 function，如果使用 new”实例化”,function 可以看作是一个 Class</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> person= <span class="keyword">new</span> Person();</span><br><span class="line">person.name=“Mark<span class="string">&quot;;</span></span><br><span class="line"><span class="string">person.age=&quot;</span><span class="number">25</span><span class="string">&quot;;</span></span><br><span class="line"><span class="string">person.work=function()&#123;</span></span><br><span class="line"><span class="string">  alert(person.name+&quot;</span> hello...<span class="string">&quot;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">person.work();</span></span><br></pre></td></tr></table></figure><h3 id="模拟参构造函数创建"><a href="#模拟参构造函数创建" class="headerlink" title="模拟参构造函数创建"></a>模拟参构造函数创建</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pet</span>(<span class="params">name, age, hobby</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// this关键字定义构造的上下文属性</span></span><br><span class="line">  <span class="comment">// this作用域：当前对象</span></span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.hobby = hobby;</span><br><span class="line">  <span class="built_in">this</span>.eat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;我叫&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;,我喜欢&quot;</span> + <span class="built_in">this</span>.hobby + <span class="string">&quot;,是个程序员&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化、创建对象</span></span><br><span class="line"><span class="keyword">var</span> maidou = <span class="keyword">new</span> Pet(<span class="string">&quot;麦兜&quot;</span>, <span class="number">25</span>, <span class="string">&quot;coding&quot;</span>);</span><br><span class="line"><span class="comment">//调用eat方法</span></span><br><span class="line">maidou.eat();</span><br></pre></td></tr></table></figure><h3 id="工厂模式创建"><a href="#工厂模式创建" class="headerlink" title="工厂模式创建"></a>工厂模式创建</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wcDog = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">wcDog.name = <span class="string">&quot;旺财&quot;</span>;</span><br><span class="line">wcDog.age = <span class="number">3</span>;</span><br><span class="line">wcDog.work = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;我是&quot;</span> + wcDog.name + <span class="string">&quot;,汪汪汪......&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">wcDog.work();</span><br></pre></td></tr></table></figure><h3 id="原型方式创建"><a href="#原型方式创建" class="headerlink" title="原型方式创建"></a>原型方式创建</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Dog.prototype.name = <span class="string">&quot;旺财&quot;</span>;</span><br><span class="line">Dog.prototype.eat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="built_in">this</span>.name + <span class="string">&quot;是个吃货&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> wangcai = <span class="keyword">new</span> Dog();</span><br><span class="line">wangcai.eat();</span><br></pre></td></tr></table></figure><h3 id="new-的原理是什么？"><a href="#new-的原理是什么？" class="headerlink" title="new 的原理是什么？"></a>new 的原理是什么？</h3><p>在调用 new 的过程中会发生以上四件事情：</p><ul><li>新生成了一个对象</li><li>链接到原型</li><li>绑定 this</li><li>返回新对象</li></ul><p>根据以上几个过程，我们也可以试着来自己实现一个 new</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> Con = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">  obj.proto = Con.prototype;</span><br><span class="line">  <span class="keyword">let</span> result = Con.apply(obj, <span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> result <span class="keyword">instanceof</span> <span class="built_in">Object</span> ? result : obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过-new-的方式创建对象和通过字面量创建有什么区别？"><a href="#通过-new-的方式创建对象和通过字面量创建有什么区别？" class="headerlink" title="通过 new 的方式创建对象和通过字面量创建有什么区别？"></a>通过 new 的方式创建对象和通过字面量创建有什么区别？</h2><p>对于对象来说，其实都是通过 new 产生的，无论是 function Foo() 还是 let a = { b : 1 } 。<br>以下是对实现的分析：</p><ul><li>创建一个空对象</li><li>获取构造函数</li><li>设置空对象的原型</li><li>绑定 this 并执行构造函数</li><li>确保返回值为对象</li></ul><p>对于创建一个对象来说，更推荐使用字面量的方式创建对象（无论性能上还是可读性）<br>因为你使用 new Object() 的方式创建对象需要通过作用域链一层层找到 Object，但是你使用字面量的方式就没这个问题。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>function 就是个语法糖，内部等同于 new Function()</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - ==&amp;===</title>
      <link href="/2020/03/02/xky6dv/"/>
      <url>/2020/03/02/xky6dv/</url>
      
        <content type="html"><![CDATA[<p>在 js 中 “==” 是相等比较符，会隐式转换<br>“===” 是全等比较符<br>‘==’在比较的时候先比较类型，类型不一致的时候会进行 Number 转换，转换完成后再比较值是否想等，相等返回 ‘true’，不相等返回‘false’。<br>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span> == <span class="number">0</span>; <span class="comment">//  true</span></span><br><span class="line"><span class="number">0</span> == <span class="string">&quot;0&quot;</span>; <span class="comment">//  true</span></span><br><span class="line"><span class="number">1</span> == <span class="string">&quot;1&quot;</span>; <span class="comment">//  true</span></span><br><span class="line"><span class="number">1</span> == <span class="literal">true</span>; <span class="comment">//  true</span></span><br><span class="line"><span class="number">0</span> == <span class="literal">false</span>; <span class="comment">//  true</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>; <span class="comment">//  true</span></span><br></pre></td></tr></table></figure><p>‘===’在比较的时候先比较类型，类型不一样时直接返回 false，类型一致再比较值，值相等返回 true，不相等返回 false。<br>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span> === <span class="number">0</span>; <span class="comment">//  false</span></span><br><span class="line"><span class="number">0</span> === <span class="string">&quot;0&quot;</span>; <span class="comment">//  false</span></span><br><span class="line"><span class="number">1</span> === <span class="string">&quot;1&quot;</span>; <span class="comment">//  false</span></span><br><span class="line"><span class="number">1</span> === <span class="literal">true</span>; <span class="comment">//  false</span></span><br><span class="line"><span class="number">0</span> === <span class="literal">false</span>; <span class="comment">//  false</span></span><br><span class="line"><span class="literal">null</span> === <span class="literal">undefined</span>; <span class="comment">//  false</span></span><br></pre></td></tr></table></figure><p>在 js 中明显‘===’比‘==’要更严谨且不会产生副作用，所以在进行比较是要使用‘===’。<br>更多详细细节请点击链接</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ==&amp;=== </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - 变量&amp;常量</title>
      <link href="/2020/03/02/any3xm/"/>
      <url>/2020/03/02/any3xm/</url>
      
        <content type="html"><![CDATA[<h1 id="javacript-是弱类型语言，定义的变量可以随意更改值的类型。"><a href="#javacript-是弱类型语言，定义的变量可以随意更改值的类型。" class="headerlink" title="javacript 是弱类型语言，定义的变量可以随意更改值的类型。"></a>javacript 是弱类型语言，定义的变量可以随意更改值的类型。</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="名词汇总"><a href="#名词汇总" class="headerlink" title="名词汇总"></a>名词汇总</h3><ul><li>基本数据类型</li><li>值类型</li><li>原始数据类型</li><li>引用数据类型</li><li>复杂数据类型</li></ul><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1611622241160-2f70b582-55fd-40b4-80cd-eb8a84bfd8e8.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"></p><h2 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h2><p><strong>typeof</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> xxx得到的值有以下几种类型：<span class="literal">undefined</span> boolean number string object  <span class="function"><span class="keyword">function</span>、<span class="title">symbol</span> ，比较简单，不再一一演示了。这里需要注意的有三点：</span></span><br><span class="line"><span class="function"><span class="title">typeof</span> <span class="title">null</span>结果是<span class="title">object</span> ，实际这是<span class="title">typeof</span>的一个<span class="title">bug</span>，<span class="title">null</span>是原始值，非引用类型</span></span><br><span class="line"><span class="function"><span class="title">typeof</span> [1, 2]结果是<span class="title">object</span>，结果中没有<span class="title">array</span>这一项，引用类型除了<span class="function"><span class="keyword">function</span>其他的全部都是<span class="title">object</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="title">typeof</span> <span class="title">Symbol</span>(<span class="params"></span>) 用<span class="title">typeof</span>获取<span class="title">symbol</span>类型的值得到的是<span class="title">symbol</span>，这是 <span class="title">ES6</span> 新增的知识</span></span></span><br></pre></td></tr></table></figure><p><strong>instanceof</strong><br>用于实例和构造函数的对应。例如判断一个变量是否是数组，使用 typeof 无法判断，但可以使用[1, 2] instanceof Array 来判断。因为，[1, 2]是数组，它的构造函数就是 Array。同理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> Foo(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(foo <span class="keyword">instanceof</span> Foo); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="内存图"><a href="#内存图" class="headerlink" title="内存图"></a>内存图</h3><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601449633688-441cf2f8-cdcd-4037-847c-899fd8c3b798.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"><br>栈：原始数据类型（Undefined，Null，Boolean，Number、String）<br>堆：引用数据类型（对象、数组和函数）</p><p>两种类型的区别是：<br>存储位置不同；</p><ul><li>原始数据类型直接存储在栈(stack)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；</li><li>引用数据类型存储在堆(heap)中的对象,占据空间大、大小不固定,如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体</li></ul><p>参数传递方式</p><ul><li>原始类型是按值传递</li><li>引用类型是按共享传递</li></ul><p>JS 中这种设计的原因是：按值传递的类型，复制一份存入栈内存，这类类型一般不占用太多内存，而且按值传递保证了其访问速度。按共享传递的类型，是复制其引用，而不是整个复制其值（C 语言中的指针），保证过大的对象等不会因为不停复制内容而造成内存的浪费。</p><h2 id="值类型-amp-引用类型"><a href="#值类型-amp-引用类型" class="headerlink" title="值类型&amp;引用类型"></a>值类型&amp;引用类型</h2><p>除了原始类型，ES 还有引用类型，上文提到的 typeof 识别出来的类型中，只有 object 和 function 是引用类型，其他都是值类型。<br>根据 JavaScript 中的变量类型传递方式，又分为<strong>值类型</strong>和<strong>引用类型</strong>，值类型变量包括 Boolean、String、Number、Undefined、Null，引用类型包括了 Object 类的所有，如 Date、Array、Function 等。在参数传递方式上，值类型是按值传递，引用类型是按共享传递。<br>下面通过一个小题目，来看下两者的主要区别，以及实际开发中需要注意的地方。<br>自动检测<br>// 值类型<br>var a = 10<br>var b = a<br>b = 20<br>console.log(a) // 10<br>console.log(b) // 20<br>上述代码中，a b 都是值类型，两者分别修改赋值，相互之间没有任何影响。再看引用类型的例子：<br>自动检测<br>// 引用类型<br>var a = {x: 10, y: 20}<br>var b = a<br>b.x = 100<br>b.y = 200<br>console.log(a) // {x: 100, y: 200}<br>console.log(b) // {x: 100, y: 200}</p><p>上述代码中，a b 都是引用类型。在执行了 b = a 之后，修改 b 的属性值，a 的也跟着变化。因为 a 和 b 都是引用类型，指向了同一个内存地址，即两者引用的是同一个值，因此 b 修改属性时，a 的值随之改动。<br>再借助题目进一步讲解一下。</p><p>说出下面代码的执行结果，并分析其原因。<br>自动检测<br>function foo(a){<br>a = a * 10;<br>}<br>function bar(b){<br>b.value = ‘new’;<br>}<br>var a = 1;<br>var b = {value: ‘old’};<br>foo(a);<br>bar(b);<br>console.log(a); // 1<br>console.log(b); // value: new</p><p>通过代码执行，会发现：</p><ul><li>a 的值没有发生改变</li><li>而 b 的值发生了改变</li></ul><p>这就是因为 Number 类型的 a 是按值传递的，而 Object 类型的 b 是按共享传递的。<br>JS 中这种设计的原因是：按值传递的类型，复制一份存入栈内存，这类类型一般不占用太多内存，而且按值传递保证了其访问速度。按共享传递的类型，是复制其引用，而不是整个复制其值（C 语言中的指针），保证过大的对象等不会因为不停复制内容而造成内存的浪费。</p><p>引用类型经常会在代码中按照下面的写法使用，或者说<strong>容易不知不觉中造成错误</strong>！<br>自动检测<br>var obj = {<br>a: 1,<br>b: [1,2,3]<br>}<br>var a = obj.a<br>var b = obj.b<br>a = 2<br>b.push(4)<br>console.log(obj, a, b)</p><p>虽然 obj 本身是个引用类型的变量（对象），但是内部的 a 和 b 一个是值类型一个是引用类型，a 的赋值不会改变 obj.a，但是 b 的操作却会反映到 obj 对象上。</p><h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h2><p>es5 - 变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 var 关键字来定义变量，变量的值可以随意更改（基本、引用）</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure><p>es5 - 常量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有确切定义常量的方式</span></span><br><span class="line"><span class="comment">// 可以将变量名全部大写来区分（约定俗成的认知）</span></span><br><span class="line"><span class="keyword">var</span> PI = <span class="number">3.1415926</span>;</span><br></pre></td></tr></table></figure><p><strong>es6</strong></p><ul><li>通过关键字 let 定义变量<ul><li>没有变量提升</li><li>不得在声明之前调用 （暂时性死区）</li><li>通过 let 定义的变量，遇到有大括号的时候，会在这个大括号内，形成这个变量的封闭作用域</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以使用str来定义变量</span></span><br><span class="line"><span class="comment">// 也可以通过let来定义变量</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> sub = <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>通过关键字 const 定义常量<ul><li>没有变量提升</li><li>不得修改值的类型<ul><li>基本数据类型不得重新赋值</li><li>引用数据类型，不得重新赋值（不包括数组、对象的属性）</li></ul></li><li>不得在声明之前调用 （暂时性死区）</li><li>通过 const 定义的变量，遇到有大括号的时候，会在这个大括号内，形成这个变量的封闭作用域</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;gaocaipeng&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>| 栈 | 堆 |</p><p>|  |<br>| ——— | ——- |<br>| const obj | o1 ={ } |</p><p>|<br>| name gaocaipeng |</p><p>|</p><p>|</p><h2 id="null-amp-undefined-区别"><a href="#null-amp-undefined-区别" class="headerlink" title="null&amp;undefined 区别"></a>null&amp;undefined 区别</h2><p>null 表示一个对象被定义了，值为“空值”；<br>undefined 表示不存在这个值。<br>​</p><p>typeof undefined //“undefined”<br>undefined :是一个表示”无”的原始值或者说表示”缺少值”，就是此处应该有一个值，但是还没有定义。当尝试读取时会返回 undefined；<br>例如变量被声明了，但没有赋值时，就等于 undefined</p><p>typeof null //“object”<br>null : 是一个对象(空对象, 没有任何属性和方法)；<br>例如作为函数的参数，表示该函数的参数不是对象；</p><p>注意：<br>在验证 null 时，一定要使用 === ，因为 == 无法分别 null 和 undefined<br>undefined 表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：<br>1）变量被声明了，但没有赋值时，就等于 undefined。 2) 调用函数时，应该提供的参数没有提供，该参数等于 undefined。<br>3）对象没有赋值的属性，该属性的值为 undefined。<br>4）函数没有返回值时，默认返回 undefined。</p><p>null 表示”没有对象”，即该处不应该有值。典型用法是：<br>1） 作为函数的参数，表示该函数的参数不是对象。<br>2） 作为对象原型链的终点。</p><h2 id="变量交换"><a href="#变量交换" class="headerlink" title="变量交换"></a>变量交换</h2><p>实现变量交换你有几种方式？</p><h3 id="变量借用"><a href="#变量借用" class="headerlink" title="变量借用"></a>变量借用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> c = b;</span><br><span class="line">b = a;</span><br><span class="line">a = c;</span><br></pre></td></tr></table></figure><h3 id="解构交换"><a href="#解构交换" class="headerlink" title="解构交换"></a>解构交换</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> [b, a] = [a, b];</span><br></pre></td></tr></table></figure><h3 id="运算交换"><a href="#运算交换" class="headerlink" title="运算交换"></a>运算交换</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">a = a + b; <span class="comment">// a+b = 3</span></span><br><span class="line">b = a - b; <span class="comment">// a 1</span></span><br><span class="line">a = a - b; <span class="comment">// b 2</span></span><br><span class="line"><span class="built_in">console</span>.log(a, b);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 变量 </tag>
            
            <tag> 常量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - 闭包</title>
      <link href="/2020/03/02/hwizmv/"/>
      <url>/2020/03/02/hwizmv/</url>
      
        <content type="html"><![CDATA[<h2 id="一、闭包概念"><a href="#一、闭包概念" class="headerlink" title="一、闭包概念"></a>一、闭包概念</h2><p><strong>闭包</strong>：有权访问另一个函数作用域中的变量的函数；一般情况就是在一个函数中包含另一个函数。<br>从官方定义我们知道闭包是一个函数，只不过这个函数有[超能力]，可以访问到另一个函数的作用域。<br>为什么说这个叫做[超能力]呢？<br>因为我们知道函数作用域是独立的、封闭的，外部的执行环境是访问不了的，但是闭包具有这个能力和权限。<br>那闭包是怎样的一个表现形式呢？<br>第一，闭包是一个函数，而且存在于另一个函数当中<br>第二，闭包可以访问到父级函数的变量，且该变量不会销毁</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;有鱼&quot;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">cat</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> per = person(); <span class="comment">// per的值就是return后的结果，即cat函数</span></span><br><span class="line">per(); <span class="comment">//  per()就相当于cat()</span></span><br><span class="line">per(); <span class="comment">//  同上，而且变量name没有销毁，一直存在内存中，供函数cat调用</span></span><br><span class="line">per(); <span class="comment">//</span></span><br></pre></td></tr></table></figure><h2 id="二、闭包原理"><a href="#二、闭包原理" class="headerlink" title="二、闭包原理"></a>二、闭包原理</h2><p>闭包的实现原理，其实是利用了作用域链的特性，我们都知道作用域链就是在当前执行环境下访问某个变量时，如果不存在就一直向外层寻找，最终寻找到最外层也就是全局作用域，这样就形成了一个链条。<br>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cat</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  age++;</span><br><span class="line">  <span class="built_in">console</span>.log(age); <span class="comment">// cat函数内输出age，该作用域没有，则向外层寻找，结果找到了，输出[19];</span></span><br><span class="line">&#125;</span><br><span class="line">cat(); <span class="comment">//19</span></span><br></pre></td></tr></table></figure><p>看到这里，大家都会说这不就是最简单的函数和变量形式吗？闭包在哪里？别急，我们接着往下看：<br>如果我们再次调用时，结果会一直增加，也就变量 age 的值一直递增。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat(); <span class="comment">//20</span></span><br><span class="line">cat(); <span class="comment">//21</span></span><br><span class="line">cat(); <span class="comment">//22</span></span><br></pre></td></tr></table></figure><p>如果程序还有其他函数，也需要用到 age 的值，则会受到影响，而且全局变量还容易被人修改，比较不安全，这就是全局变量容易污染的原因，所以我们必须解决变量污染问题，那就是把变量封装到函数内，让它成为局部变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">cat</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    age++;</span><br><span class="line">    <span class="built_in">console</span>.log(age);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cat;</span><br><span class="line">&#125;</span><br><span class="line">person(); <span class="comment">// 19</span></span><br><span class="line">person(); <span class="comment">// 19</span></span><br></pre></td></tr></table></figure><p>这里又出现问题了，每次调用函数 person，进入该作用域，变量 age 就会重新赋值为 18，所以 cat 的值一直是 19；所以需要做一下调整：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> per = person(); <span class="comment">//per相当于函数cat</span></span><br><span class="line">per(); <span class="comment">// 19 即cat() 这样每次调用不在经过age的初始值，这样就可以一直增加了</span></span><br><span class="line">per(); <span class="comment">// 20</span></span><br><span class="line">per(); <span class="comment">// 21</span></span><br></pre></td></tr></table></figure><p>而且变量 age 在函数内部，不易修改和外泄，相对来说比较安全。</p><h2 id="三、闭包作用"><a href="#三、闭包作用" class="headerlink" title="三、闭包作用"></a>三、闭包作用</h2><p><strong>作用 1：</strong>隐藏变量，避免全局污染<br><strong>作用 2：</strong>可以读取函数内部的变量<br>同时闭包使用不当，优点就变成了缺点：<br><strong>缺点 1：</strong>导致变量不会被垃圾回收机制回收，造成内存消耗<br><strong>缺点 2：</strong>不恰当的使用闭包可能会造成内存泄漏的问题<br>这里简单说一下，为什么使用闭包时变量不会被垃圾回收机制收销毁呢，这里需要了解一下 JS 垃圾回收机制；<br>JS 规定在一个函数作用域内，程序执行完以后变量就会被销毁，这样可节省内存；<br>使用闭包时，按照作用域链的特点，闭包（函数）外面的变量不会被销毁，因为函数会一直被调用，所以一直存在，如果闭包使用过多会造成内存销毁。</p><h2 id="四、闭包应用"><a href="#四、闭包应用" class="headerlink" title="四、闭包应用"></a>四、闭包应用</h2><p>需求：实现变量 a 自增<br>1、通过全局变量，可以实现，但会污染其他程序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  a++;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">Add();</span><br><span class="line">Add();</span><br><span class="line">Add();</span><br></pre></td></tr></table></figure><p>2、定义一个局部变量，不污染全局，但是实现不了递增</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Add2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  a++;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">Add2();</span><br><span class="line">Add2();</span><br><span class="line">Add2();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>3、通过闭包，可以是函数内部局部变量递增，不会影响全部变量，完美！！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Add3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cc = Add3();</span><br><span class="line"><span class="built_in">console</span>.log(cc());</span><br><span class="line"><span class="built_in">console</span>.log(cc());</span><br><span class="line"><span class="built_in">console</span>.log(cc());</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - 入门</title>
      <link href="/2020/02/21/ivyp29/"/>
      <url>/2020/02/21/ivyp29/</url>
      
        <content type="html"><![CDATA[<h1 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h1><p>作为核心，它规定了语言的组成部分：语法、类型、语句、关键字、保留字、操作符、对象 JavaScript 一种动态类型、弱类型、基于原型的客户端脚本语言，用来给<a href="http://caibaojian.com/t/html">HTML</a>网页增加动态功能。（好吧，概念什么最讨厌了）<br>动态：在运行时确定数据类型。变量使用之前不需要类型声明，通常变量的类型是被赋值的那个值的类型。 弱类：计算时可以不同类型之间对使用者透明地隐式转换，即使类型不正确，也能通过隐式转换来得到正确的类型。 原型：新对象继承对象（作为模版），将自身的属性共享给新对象，模版对象称为原型。这样新对象实例化后不但可以享有自己创建时和运行时定义的属性，而且可以享有原型对象的属性。 PS：新对象指函数，模版对象是实例对象，实例对象是不能继承原型的，函数才可以的。</p><h2 id="组成："><a href="#组成：" class="headerlink" title="组成："></a>组成：</h2><ul><li>ECMAScript（核心）<br>作为核心，它规定了语言的组成部分：语法、类型、语句、关键字、保留字、操作符、对象</li><li>DOM（文档对象模型 document object model）<br>DOM 把整个页面映射为一个多层节点结果，开发人员可借助 DOM 提供的 API，轻松地删除、添加、替换或修改任何节点</li><li>BOM （浏览器对象模型 browser object model）<br>支持可以访问和操作浏览器窗口的浏览器对象模型，开发人员可以控制浏览器显示的页面以外的部分。</li></ul><h2 id="Javascript-strict-模式"><a href="#Javascript-strict-模式" class="headerlink" title="Javascript strict 模式"></a>Javascript strict 模式</h2><p>严格模式，限制一些用法<br>‘use strict’;</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>基本数据类型<ul><li>number</li><li>string</li><li>boolean</li><li>null</li><li>undefined</li></ul></li><li>引用数据类型<ul><li>array</li><li>object</li><li>function</li></ul></li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li>算数运算符</li><li>赋值运算符</li><li>字符串运算符</li><li>比较运算符<br>| 运算符 | 描述 |</li></ul><p>|  |<br>| — | —- |<br>| ==  | 等于 |</p><p>|<br>| === | 值与类型均相等（恒等于） |</p><p>|<br>| ！= | 不等于 |</p><p>|<br>| ！== | 值与类型均不等（不恒等于） |</p><p>|<br>| &gt; | 大于 |</p><p>|<br>| &lt; | 小于 |</p><p>|<br>| &gt;= | 大于等于 |</p><p>|<br>| &lt;= | 小于等于 |</p><p>|</p><h4 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h4><ul><li>三目运算符</li><li>三元表达式</li></ul><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>| 运算符 | 描述 |</p><p>|  |<br>| — | — |<br>| &amp;&amp;  | 和  |</p><p>|<br>| || | 或 |</p><p>|<br>| ! | 非 |</p><p>|</p><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1611660932510-77ae8dd2-fdb0-47a3-945a-5bd4ffc14fd5.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"></p><h2 id="节点分类"><a href="#节点分类" class="headerlink" title="节点分类"></a>节点分类</h2><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1625645386420-31358e67-f5a8-484a-85bc-2cb2be06c3ad.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"></p><ul><li>元素节点</li><li>文本节点</li><li>属性节点</li><li>注释节点</li></ul>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript - namespace</title>
      <link href="/2019/11/18/cilzrg/"/>
      <url>/2019/11/18/cilzrg/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li>声明命名空间</li><li>创建接口</li><li>创建类</li><li>实现接口</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> namespace PersonMoudle &#123;</span><br><span class="line">  interface Personface &#123;</span><br><span class="line">    <span class="attr">name</span>: string;</span><br><span class="line">    age: number;</span><br><span class="line">    gender: string;</span><br><span class="line">    weat: string;</span><br><span class="line">    think(val: string): <span class="keyword">void</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="title">implements</span> <span class="title">Personface</span> </span>&#123;</span><br><span class="line">    public name: string = <span class="literal">null</span>;</span><br><span class="line">    public age: number = <span class="literal">null</span>;</span><br><span class="line">    public gender: string = <span class="literal">null</span>;</span><br><span class="line">    public weat: string = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, age, gender, weat</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">      <span class="built_in">this</span>.gender = gender;</span><br><span class="line">      <span class="built_in">this</span>.weat = weat;</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="function"><span class="title">think</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`at just moment, i am think about:<span class="subst">$&#123;val&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import * as Person from &quot;./person&quot;;</span></span><br><span class="line"><span class="keyword">import</span> &#123; PersonMoudle &#125; <span class="keyword">from</span> <span class="string">&quot;./person&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; Person &#125; = PersonMoudle;</span><br><span class="line"><span class="keyword">const</span> people = <span class="keyword">new</span> Person(<span class="string">&quot;gaocaipeng&quot;</span>, <span class="number">25</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;140&quot;</span>);</span><br><span class="line">people.think(<span class="string">&quot;吃好吃的&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ts-namespace </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript - 入门</title>
      <link href="/2019/11/16/niid8u/"/>
      <url>/2019/11/16/niid8u/</url>
      
        <content type="html"><![CDATA[<h1 id="javascript-amp-ecmascript"><a href="#javascript-amp-ecmascript" class="headerlink" title="javascript&amp;ecmascript"></a>javascript&amp;ecmascript</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>TypeScript 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集.</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>基本数据类型<ul><li>string</li><li>number</li><li>boolean</li><li>undefined</li><li>null</li><li>symbol es6 新增的数据类型，代表唯一、不可变的</li></ul></li><li>引用数据类型<ul><li>object</li><li>array</li><li>function</li></ul></li><li>ts 新增数据类型<ul><li>泛型</li><li>枚举型</li><li>interator 遍历器</li><li>generator</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ts-入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript - 起步</title>
      <link href="/2019/11/01/gf73ts/"/>
      <url>/2019/11/01/gf73ts/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>1.什么是 typescript， js 的超集 2.为什么需要 typescript ，有类型约束 适合中大型项目，很方便</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ol><li> npm i typescript -g tsc –version 能看到版本号就是安装好了</li><li> tsc –init 会产生一个 tsconfig.json 文件</li><li> “outDir” : “./dist”</li><li> “rootDir”: “./src”</li><li> 在 src .ts 下写代码</li><li> dist/运行.ts 文件</li></ol><h4 id="类型的约束"><a href="#类型的约束" class="headerlink" title="类型的约束"></a>类型的约束</h4><ul><li>string \ number \ boolean \ null :object 类型，代表空，代表一个空对象指针 \ undefined : undefined 类型 未定义 \ any 任何类型，一维，放弃了类型的约束</li></ul><h4 id="自动类型推断"><a href="#自动类型推断" class="headerlink" title="自动类型推断"></a>自动类型推断</h4><ul><li>a=’abc’</li></ul><h4 id="数组的约束"><a href="#数组的约束" class="headerlink" title="数组的约束"></a>数组的约束</h4><ul><li>let arr:number[] =[1,2,3,4];</li><li>let arr2:Array<number>=[5,6,7];</li></ul><h4 id="元组-Tuple-约束数组中的每一个元素-number-string-类似如此"><a href="#元组-Tuple-约束数组中的每一个元素-number-string-类似如此" class="headerlink" title="元组 Tuple 约束数组中的每一个元素[number,string] 类似如此"></a>元组 Tuple 约束数组中的每一个元素[number,string] 类似如此</h4><ul><li>let arr3:[boolean,string]=[false,’www’];</li></ul><h4 id="any-任何类型，意味放弃了类型的约束"><a href="#any-任何类型，意味放弃了类型的约束" class="headerlink" title="any 任何类型，意味放弃了类型的约束"></a>any 任何类型，意味放弃了类型的约束</h4><h4 id="void-表示没有任何返回值"><a href="#void-表示没有任何返回值" class="headerlink" title="void 表示没有任何返回值"></a>void 表示没有任何返回值</h4><h4 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h4><ul><li>| let id= string|number;</li></ul><h4 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h4><ul><li>1、interface IPerson {</li></ul><p>id:number,<br>name:string<br>}</p><ul><li>2、interface ICoder{</li></ul><p>lang:string<br>}</p><ul><li>3、type IDev = IPerson &amp; ICoder;</li><li>4、let zst:IDev ={id:111,name:’zst’,lang:’js’};</li></ul><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum route &#123;</span><br><span class="line">       add=<span class="number">1</span>,</span><br><span class="line">       code=<span class="number">404</span>,</span><br><span class="line">       every=<span class="number">500</span></span><br><span class="line">   &#125;</span><br><span class="line">   可以通过route.add拿到<span class="number">1</span>；</span><br></pre></td></tr></table></figure><h4 id="断言-assert-变量-as-类型-lt-类型-gt-变量"><a href="#断言-assert-变量-as-类型-lt-类型-gt-变量" class="headerlink" title="断言 assert 变量 as 类型 &lt;类型&gt;变量"></a>断言 assert 变量 as 类型 &lt;类型&gt;变量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">getLength</span>(<span class="params">a:string|number</span>)</span>&#123;</span><br><span class="line">                <span class="comment">// if(typeof a===&quot;string&quot;)&#123;</span></span><br><span class="line">                <span class="comment">//     return a.length;</span></span><br><span class="line">                <span class="comment">// &#125;</span></span><br><span class="line">                <span class="comment">// else&#123;</span></span><br><span class="line">                <span class="comment">//     return a.toString().length</span></span><br><span class="line">                <span class="comment">// &#125;</span></span><br><span class="line">                <span class="comment">//return (a as string).length</span></span><br><span class="line">                <span class="comment">//return (&lt;string&gt;a).length</span></span><br><span class="line">        <span class="keyword">if</span>((&lt;string&gt;a).length)&#123;</span><br><span class="line">            <span class="keyword">return</span> (a <span class="keyword">as</span> string).length</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a.toString().length</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(getLength(<span class="number">123</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> el:HTMLDivElement|<span class="literal">null</span>=<span class="literal">null</span>;</span><br><span class="line">    el=<span class="built_in">document</span>.getElementById(<span class="string">&quot;box&quot;</span>) <span class="keyword">as</span> HTMLDivElement;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(el.innerHTML)</span><br></pre></td></tr></table></figure><h4 id="泛型-接口泛型-函数泛型"><a href="#泛型-接口泛型-函数泛型" class="headerlink" title="泛型 接口泛型 函数泛型"></a>泛型 接口泛型 函数泛型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>&lt;<span class="title">T</span>&gt;(<span class="params">x: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> d = fun &lt; string &gt; <span class="string">&quot;555&quot;</span>;</span><br><span class="line"><span class="comment">//泛型类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pereson</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">//泛型类</span></span><br><span class="line">  <span class="attr">id</span>: T;</span><br><span class="line">  name: string;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">id: T, name: string</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.id = id;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Pereson() &lt; number &gt; (<span class="number">11</span>, <span class="string">&quot;sss&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="class"><a href="#class" class="headerlink" title="class"></a>class</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>类的构造函数的重载</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">       <span class="attr">name</span>:string,</span><br><span class="line">       <span class="attr">age</span>:number,</span><br><span class="line">       <span class="title">constructor</span>(<span class="params">name:string,age:number</span>)</span><br><span class="line">       <span class="title">constructor</span>(<span class="params">name:string</span>)</span><br><span class="line">       <span class="title">constructor</span>(<span class="params">name:any=<span class="string">&#x27;&#x27;</span>,age:any=<span class="number">18</span></span>)&#123;</span><br><span class="line">           <span class="comment">//构造函数</span></span><br><span class="line">           <span class="built_in">this</span>.name=name;</span><br><span class="line">           <span class="built_in">this</span>.age=age;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="number">2.</span>setter</span><br><span class="line">     (public) <span class="function"><span class="title">setName</span>(<span class="params">参数：类型</span>)</span>&#123;</span><br><span class="line">         <span class="attr">this</span>:类的私有属性=参数</span><br><span class="line">     &#125;</span><br><span class="line">     getter</span><br><span class="line">     <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">     &#125;</span><br><span class="line">   <span class="number">3.</span>权限修饰符</span><br><span class="line">      private 类的内部才能访问</span><br><span class="line">      public （默认的） 类的内部外部子类都可以访问</span><br><span class="line">      protected 受保护的 类和子类可以访问，外部不可以访问；</span><br><span class="line">   <span class="number">4.</span>类的静态成员</span><br><span class="line">   <span class="number">5.</span>抽象类</span><br><span class="line">      关键字 abstract</span><br><span class="line"></span><br><span class="line">      abstract <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">          <span class="comment">//抽象类不能实例化，继承抽象类实现抽象方法</span></span><br><span class="line">          abstract say():<span class="keyword">void</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">          say():<span class="keyword">void</span>&#123;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface IProgramer <span class="keyword">extends</span> IPerson &#123;</span><br><span class="line">      当前定义属性</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="函数的类型约束"><a href="#函数的类型约束" class="headerlink" title="函数的类型约束"></a>函数的类型约束</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数的名字（参数，类型.....）:返回值的类型</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> 返回值的类型</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">let</span> mySum :<span class="function">(<span class="params">x:number,y:number</span>)=&gt;</span>number=<span class="function"><span class="keyword">function</span>(<span class="params">x:number,y:number</span>):<span class="title">number</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> x+y;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//也可以简写为</span></span><br><span class="line">   <span class="keyword">let</span> mySum = <span class="function"><span class="keyword">function</span> (<span class="params">x:number,y:number</span>):<span class="title">number</span></span>&#123;</span><br><span class="line">       <span class="comment">//自动推断</span></span><br><span class="line">       <span class="keyword">return</span> x+y;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//函数接口</span></span><br><span class="line">   interface IFun&#123;</span><br><span class="line">       (x:number,<span class="attr">y</span>:number):number;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">let</span> sum3:IFun=(x:number,<span class="attr">y</span>:number):<span class="function"><span class="params">number</span>=&gt;</span>x+y;</span><br><span class="line">   <span class="comment">//可以简写为</span></span><br><span class="line">   <span class="keyword">let</span> sum2 = (x:number,<span class="attr">y</span>:number):<span class="function"><span class="params">number</span> =&gt;</span>x+y ;<span class="comment">//自行判断</span></span><br><span class="line">   <span class="comment">//函数参数的默认值</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">name:string,age:number=<span class="number">20</span></span>):<span class="title">string</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;name&quot;</span>+name+<span class="string">&quot;age&quot;</span>+age</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//函数的可选参数</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">showinfo</span>(<span class="params">name:string,age?:number</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(age)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">`nume<span class="subst">$&#123;name&#125;</span>age<span class="subst">$&#123;age&#125;</span>`</span></span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">`name<span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//函数的默认参数</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">show</span> (<span class="params">name:string ,age:number=<span class="number">20</span></span>):<span class="title">string</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&#x27;name&#x27;</span>:name+<span class="string">&quot;,&quot;</span>+age+<span class="string">&#x27;age&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//函数的剩余参数</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...arr:number[]</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a+b)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//函数重载</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum9</span>(<span class="params">x:number,y:number</span>):<span class="title">number</span></span></span><br><span class="line"><span class="function">    <span class="function"><span class="keyword">function</span> <span class="title">sum9</span>(<span class="params">x:string,y:string</span>):<span class="title">string</span></span></span></span><br><span class="line"><span class="function"><span class="function">    <span class="function"><span class="keyword">function</span> <span class="title">sum9</span>(<span class="params">x:any,y:any</span>):<span class="title">any</span></span>&#123;</span></span></span><br><span class="line"><span class="function"><span class="function">        <span class="title">if</span>(<span class="params"><span class="keyword">typeof</span> x===<span class="string">&quot;string&quot;</span></span>)</span>&#123;</span></span><br><span class="line"><span class="function">            <span class="title">return</span> <span class="title">x</span>+&quot;---&quot;+<span class="title">y</span></span></span><br><span class="line"><span class="function">        &#125;</span></span><br><span class="line"><span class="function">        <span class="title">else</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x+y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//接口对函数的约束</span></span><br><span class="line">   interface Ifun &#123;</span><br><span class="line">       (x:number,<span class="attr">y</span>:number):number</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">let</span> sum3:Ifun =(x:number,<span class="attr">y</span>:number):<span class="function"><span class="params">number</span>=&gt;</span>x+y;</span><br><span class="line">   可简写为</span><br><span class="line">   <span class="keyword">let</span> sum3=(x:number,<span class="attr">y</span>:number):<span class="function"><span class="params">number</span>=&gt;</span>x+y;</span><br><span class="line">   函数参数的默认值</span><br></pre></td></tr></table></figure><h4 id="修饰器模式：设计模式-。-给代码打扮"><a href="#修饰器模式：设计模式-。-给代码打扮" class="headerlink" title="修饰器模式：设计模式 。 给代码打扮"></a>修饰器模式：设计模式 。 给代码打扮</h4><ul><li>函数和 class 类 ：属性 方法（功能）</li><li>添加功能 (函数形式去添加功能)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.装饰器本身就是一个函数</span></span><br><span class="line">   <span class="comment">//2.它的参数是构造函数</span></span><br><span class="line">   <span class="comment">//3.可以通过这个构造器去添加修饰的方法</span></span><br><span class="line">   <span class="comment">//4.通过@符号调用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//修饰器虽然是函数，但是不能以函数的方式调用</span></span><br><span class="line">   <span class="comment">//通过包装修饰器，把他包装在一个函数中</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">testDecorator</span> (<span class="params">flag</span>)</span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">decorFn</span>(<span class="params">constructor:any</span>)</span>&#123;</span><br><span class="line">         <span class="title">constructor</span>.<span class="title">prototype</span>.<span class="title">getName</span>=(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="string">&#x27;我是修饰的方法&#x27;</span></span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @testDecorator(<span class="literal">true</span>)</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Preson</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="title">myFn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">const</span> person =<span class="keyword">new</span> Person();</span><br><span class="line">    (preson  <span class="keyword">as</span>  any).getName();</span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">decorateClass</span>(<span class="params">t:<span class="built_in">Function</span></span>)</span>&#123;  <span class="comment">//类装饰器 本质是一个函数 不修改类的代码的前提下，可以给类增加成员</span></span><br><span class="line">                                                <span class="comment">//target 装饰的类</span></span><br><span class="line">              t.prototype.school=<span class="string">&quot;bw&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        @decorateClass</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Pereson</span>&lt;<span class="title">T</span>&gt;</span>&#123;  <span class="comment">//泛型类</span></span><br><span class="line">            <span class="attr">id</span>:T</span><br><span class="line">            <span class="attr">name</span>:string</span><br><span class="line">            <span class="function"><span class="title">constructor</span>(<span class="params">id:T,name:string</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.name=name;</span><br><span class="line">                <span class="built_in">this</span>.id=id</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> p=<span class="keyword">new</span> Pereson&lt;number&gt;(<span class="number">11</span>,<span class="string">&quot;sss&quot;</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(p.school)</span><br></pre></td></tr></table></figure><ul><li>vue ts 修饰器模式实现</li></ul><h4 id="如果-ts-中使用-es6-的东西，tsconfig-中的“target”改成-es6"><a href="#如果-ts-中使用-es6-的东西，tsconfig-中的“target”改成-es6" class="headerlink" title="如果 ts 中使用 es6 的东西，tsconfig 中的“target”改成 es6"></a>如果 ts 中使用 es6 的东西，tsconfig 中的“target”改成 es6</h4><h4 id="建立能使用类型的地方，不要用-any，any-在你不知道类型的时候选择，放弃了约束"><a href="#建立能使用类型的地方，不要用-any，any-在你不知道类型的时候选择，放弃了约束" class="headerlink" title="建立能使用类型的地方，不要用 any，any 在你不知道类型的时候选择，放弃了约束"></a>建立能使用类型的地方，不要用 any，any 在你不知道类型的时候选择，放弃了约束</h4><h4 id="对象的约束要用-interface-而不是-object"><a href="#对象的约束要用-interface-而不是-object" class="headerlink" title="对象的约束要用 interface 而不是 object"></a>对象的约束要用 interface 而不是 object</h4><h3 id="接口和类的结合使用"><a href="#接口和类的结合使用" class="headerlink" title="接口和类的结合使用"></a>接口和类的结合使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">interface IGo&#123;</span><br><span class="line">      go(type:string):<span class="keyword">void</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">     //属性(<span class="title">private</span>类的内部可以拿到)<span class="title">name</span> :&#x27;<span class="title">zs</span>&#x27;和方法（<span class="title">public</span>  默认权限，都可以拿到）</span></span><br><span class="line"><span class="class">     //<span class="title">protected</span> 类和子类可以拿到  类的外部拿不到</span></span><br><span class="line"><span class="class">   <span class="title">getter</span></span></span><br><span class="line"><span class="class">     <span class="title">getName</span>():<span class="title">string</span></span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">this</span>.name</span><br><span class="line">     &#125;</span><br><span class="line">    setter</span><br><span class="line">      <span class="function"><span class="title">setName</span>(<span class="params">name:string</span>)</span>&#123;</span><br><span class="line">          <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接口定义的是规范，方法定义的是实现</span></span><br><span class="line">    interface |xxx&#123;</span><br><span class="line">        <span class="attr">exam</span> :(type:string):<span class="keyword">void</span>  <span class="comment">//void可以没有返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Xxx</span> <span class="title">implements</span> |<span class="title">Xxx</span></span>&#123;</span><br><span class="line">        <span class="attr">exam</span>:(type:string):<span class="keyword">void</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ts-起步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3 - 入门指南</title>
      <link href="/2019/10/02/ug0hio/"/>
      <url>/2019/10/02/ug0hio/</url>
      
        <content type="html"><![CDATA[<h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><p>全局安装 vue-cli（3.0+）脚手架</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line">vue -V  <span class="comment">// 4.5.9</span></span><br></pre></td></tr></table></figure><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/image.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" alt="image" loading="lazy"><br>初始化项目</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">vue create &lt;projectname&gt;</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">❯ .babelrc ([Vue <span class="number">3</span>] node-sass, babel, pwa, router, vuex, eslint)</span><br><span class="line">  Default ([Vue <span class="number">2</span>] babel, eslint)</span><br><span class="line">  Default (Vue <span class="number">3</span> Preview) ([Vue <span class="number">3</span>] babel, eslint)</span><br><span class="line">* Manually select features</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line"> Check the features needed <span class="keyword">for</span> your project:</span><br><span class="line"> ◉ Choose Vue version</span><br><span class="line"> ◉ Babel</span><br><span class="line"> ◉ TypeScript</span><br><span class="line"> ◉ Progressive Web App (PWA) Support</span><br><span class="line"> ◉ Router</span><br><span class="line"> ◉ Vuex</span><br><span class="line"> ◉ CSS Pre-processors</span><br><span class="line">❯◉ Linter / Formatter</span><br><span class="line"> ◯ Unit Testing</span><br><span class="line"> ◯ E2E Testing</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">? Choose a version <span class="keyword">of</span> Vue.js that you want to start the project <span class="keyword">with</span></span><br><span class="line">  <span class="number">2.</span>x</span><br><span class="line">❯ <span class="number">3.</span>x (Preview)</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">? Use <span class="class"><span class="keyword">class</span>-<span class="title">style</span> <span class="title">component</span> <span class="title">syntax</span>? (<span class="title">y</span>/<span class="title">N</span>) <span class="title">y</span></span></span><br><span class="line"><span class="class">--------------------------------------------------------------</span></span><br><span class="line"><span class="class">? <span class="title">Use</span> <span class="title">Babel</span> <span class="title">alongside</span> <span class="title">TypeScript</span> (<span class="title">required</span> <span class="title">for</span> <span class="title">modern</span> <span class="title">mode</span>, <span class="title">auto</span>-<span class="title">detected</span> <span class="title">polyfi</span></span></span><br><span class="line"><span class="class"><span class="title">lls</span>, <span class="title">transpiling</span> <span class="title">JSX</span>)? (<span class="title">Y</span>/<span class="title">n</span>)</span></span><br><span class="line"><span class="class">--------------------------------------------------------------</span></span><br><span class="line"><span class="class">? <span class="title">Pick</span> <span class="title">a</span> <span class="title">CSS</span> <span class="title">pre</span>-<span class="title">processor</span> (<span class="title">PostCSS</span>, <span class="title">Autoprefixer</span> <span class="title">and</span> <span class="title">CSS</span> <span class="title">Modules</span> <span class="title">are</span> <span class="title">supported</span></span></span><br><span class="line"><span class="class"><span class="title">by</span> <span class="title">default</span>):</span></span><br><span class="line"><span class="class">  <span class="title">Sass</span>/<span class="title">SCSS</span> (<span class="title">with</span> <span class="title">dart</span>-<span class="title">sass</span>)</span></span><br><span class="line"><span class="class">❯ <span class="title">Sass</span>/<span class="title">SCSS</span> (<span class="title">with</span> <span class="title">node</span>-<span class="title">sass</span>)</span></span><br><span class="line"><span class="class">  <span class="title">Less</span></span></span><br><span class="line"><span class="class">  <span class="title">Stylus</span></span></span><br><span class="line"><span class="class"> --------------------------------------------------------------</span></span><br><span class="line"><span class="class">? <span class="title">Pick</span> <span class="title">a</span> <span class="title">linter</span> / <span class="title">formatter</span> <span class="title">config</span>:</span></span><br><span class="line"><span class="class">  <span class="title">ESLint</span> <span class="title">with</span> <span class="title">error</span> <span class="title">prevention</span> <span class="title">only</span></span></span><br><span class="line"><span class="class">  <span class="title">ESLint</span> + <span class="title">Airbnb</span> <span class="title">config</span></span></span><br><span class="line"><span class="class">  <span class="title">ESLint</span> + <span class="title">Standard</span> <span class="title">config</span></span></span><br><span class="line"><span class="class">❯ <span class="title">ESLint</span> + <span class="title">Prettier</span></span></span><br><span class="line"><span class="class">  <span class="title">TSLint</span> (<span class="title">deprecated</span>)</span></span><br><span class="line"><span class="class"> --------------------------------------------------------------</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">cd</span> &lt;<span class="title">projectname</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">yarn</span> <span class="title">install</span></span></span><br><span class="line"><span class="class"><span class="title">yarn</span> <span class="title">start</span></span></span><br><span class="line"><span class="class"><span class="title">open</span> <span class="title">http</span>://<span class="title">localhost</span>:8080</span></span><br></pre></td></tr></table></figure><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;@/App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;@/router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;@/store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> plugin <span class="keyword">from</span> <span class="string">&quot;@/config/plugin&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue2.x版本与现版本的区别</span></span><br><span class="line">createApp(App).use(plugin).use(store).use(router).mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="响应式系统工具集"><a href="#响应式系统工具集" class="headerlink" title="响应式系统工具集"></a>响应式系统工具集</h2><table><thead><tr><th>unref</th><th>unref 是 val = isRef(val) ? val.value : val 的语法糖</th><th>unref(ref(0))===unref(0)===0 返回 number</th></tr></thead><tbody><tr><td>toRef</td><td>toRef 可以用来为一个 reactive 对象的属性【某个属性区别 toRefs 每一个属性】创建一个 ref。这个 ref 可以被传递并且能够保持响应性</td><td>​const state = reactive({ foo: 1 })</td></tr></tbody></table><p>//reactive 获取单个属性转为 ref【fooRef 只是一个代理】<br>const fooRef = toRef(state, ‘foo’)<br>fooRef.value++<br>console.log(state.foo) //2 |<br>| toRefs | 把一个响应式对象转换成普通对象，该普通对象的每个 property 都是一个 ref ，和响应式对象 property 一一对应 | const state = reactive({ foo: 1})<br>const stateAsRefs = toRefs(state)<br>_stateAsRefs 的类型如下: _<br><em>foo: Ref<number></em> |<br>| isRef | 检查一个值是否为一个 ref 对象 |</p><p>|<br>| ref | 用于封装普通类型 | const a=ref(10);<br>return {a}; |</p><h2 id="数据监听"><a href="#数据监听" class="headerlink" title="数据监听"></a>数据监听</h2><p><strong>ref 只可以监听简单数据，reactive 可以监听所有数据、</strong><br>写法一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = ref(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> b = ref(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>写法二：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reactive = (&#123;</span><br><span class="line">  a：<span class="number">1</span></span><br><span class="line">  b：<span class="number">2</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在这里不评价哪种合适，也没有什么准确的答案，两者的主要区别在于：一，我们使用了 2 个变量来存储值；而风格二则当作对象的属性存储。这两种风格的代码工作的都没问题，关键在于个人或团队的偏好：使用单独的变量还是使用对象封装，我觉得 ref 更偏向于第一类人，而 reactive 更偏向于第二类吧</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>ref 只可以监听简单数据</li><li>reactive 可以监听所有数据</li></ul><p>ref 这种写法简单，但也有弊端，经过尝试，我发现他只能监听一些如数字、字符串、布尔之类的简单数据而如果需要监听如上面代码一样的 jsonArray 我们在 vue2 种都会使用$set 来进行变更，到了 vue3 我们终于可以愉快的使用 reactive 来实现了。</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ul><li>ref 修改数据需要使用这样 count.value=xxx 的形式，而 reactive 只需要 state.reactiveField=值这样来使用</li><li>第二点体现在 template 中引用时候为 reactiveField，不需要 state，也就是说我 reactive 对象里面字段是应该直接使用的</li><li>体现在 reactive 在 return 时候需要 toRefs 来转换成响应式对象</li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>2.x 生命周期列表如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">beforeCreate -&gt; setup()</span><br><span class="line">created -&gt; setup()</span><br><span class="line">beforeMount -&gt; onBeforeMount</span><br><span class="line">mounted -&gt; onMounted</span><br><span class="line">beforeUpdate -&gt; onBeforeUpdate</span><br><span class="line">updated -&gt; onUpdated</span><br><span class="line">beforeDestroy -&gt; onBeforeUnmount 组件卸载之前执行</span><br><span class="line">destroyed -&gt; onUnmounted</span><br><span class="line">activated -&gt; onActivated 中切换组件(组件激活)</span><br><span class="line">deactivated -&gt; onDeactivated 中切换组件(组件不激活)</span><br></pre></td></tr></table></figure><p>3.x 生命周期变化<br>errorCaptured -&gt; onErrorCaptured<br>onRenderTracked<br>onRenderTriggered</p><ol><li>beforeDestroy\destroyed 被替换为了 onBeforeUnmount、onUnmounted</li><li>去掉了 beforeCreate、created 直接使用 setup</li><li>新增了 onRenderTracked、onRenderTriggered（两个钩子都是到 DebuggerEvent 类似于 onTrack 和 onTrigger 观察者的选项）</li></ol><table><thead><tr><th>vue2.0</th><th>vue3.0</th></tr></thead><tbody><tr><td>beforeCreate</td><td>setup</td></tr><tr><td>created</td><td>setup</td></tr><tr><td>beforeMount</td><td>onBeforeMount</td></tr><tr><td>mounted</td><td>onMounted</td></tr><tr><td>beforeUpdate</td><td>onBeforeUpdate</td></tr><tr><td>updated</td><td>onUpdated</td></tr><tr><td>beforeDestroy</td><td>onBeforeUnmount</td></tr><tr><td>destroyed</td><td>onUnmounted</td></tr><tr><td>errorCaptured</td><td>onErrorCaptured</td></tr></tbody></table><h2 id="新增方法"><a href="#新增方法" class="headerlink" title="新增方法"></a>新增方法</h2><p>| v-is | 本节只影响在页面的 HTML 中直接编写 Vue 模板的情况<br>警告 v-is 功能 像一个动态 2.x :is<br>绑定 所以要根据注册的名称渲染组件，它的值应该是一个 JavaScript 字符串 | <!-- 不正确的, 不会出现任何渲染 --><br>&lt;trv-is=”blog-post-row”&gt;</tr></p><!-- 正确 --><table><thead><tr><th>&lt;trv-is=”‘blog-post-row’”&gt;</tr></th></tr></thead></table><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  &#123;&#123;cop&#125;&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; ref, computed,watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;Test&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> arr= ref([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 计算属性</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> cop = computed(<span class="function">() =&gt;</span> arr.reverse());</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      cop,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      arr</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="监听数据"><a href="#监听数据" class="headerlink" title="监听数据"></a>监听数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;count&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- gaocaipeng  haonan --&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 定义响应式数据 count</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> count = ref(<span class="string">&quot;&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 定义 watch 监听</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    watch(</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      count,<span class="comment">//新值  旧值</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="function">(<span class="params">newProps, usedProps</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 执行异步任务</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(newProps, usedProps);<span class="comment">//gaocaipeng  haonan</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// watch 刚被创建的时候不执行</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#123; <span class="attr">lazy</span>: <span class="literal">true</span> &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    );</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      count,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="事件对象："><a href="#事件对象：" class="headerlink" title="事件对象："></a>事件对象：</h2><ul><li>key 那边变量发生了变化</li><li>newValue 更新后变量的值</li><li>oldValue 更新前变量的值</li><li>target 目前页面中的响应变量和函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  onRenderTracked(<span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;vue3   状态跟踪组件-----------&gt;onRenderTracked&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(event);</span><br><span class="line">  &#125;);</span><br><span class="line">  onRenderTriggered(<span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;vue3   状态触发组件---------------&gt;onRenderTriggered&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(event);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="获取路由"><a href="#获取路由" class="headerlink" title="获取路由"></a>获取路由</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> ;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// getCurrentInstance方法，用来获取当前组件实例，然后通过ctx获取当前上下文</span></span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = getCurrentInstance()</span><br><span class="line">    <span class="built_in">console</span>.log(ctx);<span class="comment">// ctx代表vue2中的this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="404-配置"><a href="#404-配置" class="headerlink" title="404 配置"></a>404 配置</h3><p>按照 vue2.x 配置 404 页面会有下面报错，我们可以：<br>caught Error: Catch all routes (“*“) must now be defined using a param with a custom regexp.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/:catchAll(.*)&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;404&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/containers/notFound&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h2><p>依然可以使用 vuex 官方状态管理容器管理共享状态，下面是使用方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> store = useStore(); <span class="comment">// 相当于 vue2中的 this.$store</span></span><br><span class="line">    store.dispatch(); <span class="comment">// 通过store对象来dispatch 派发异步任务</span></span><br><span class="line">    store.commit(); <span class="comment">// commit 修改store数据</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">category</span>:computed(<span class="function">() =&gt;</span> store.state.home.currentCagegory</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3入门指南 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3 - 高阶组件</title>
      <link href="/2019/10/01/qubleh/"/>
      <url>/2019/10/01/qubleh/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><a href="https://www.vue3js.cn/docs/zh/guide/installation.html">https://www.vue3js.cn/docs/zh/guide/installation.html</a></p><h2 id="组合式-API？"><a href="#组合式-API？" class="headerlink" title="组合式 API？"></a>组合式 API？</h2><ul><li>vue2 创建组件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span>, <span class="comment">// 1</span></span><br><span class="line">      <span class="attr">searchText</span>: <span class="string">&quot;&quot;</span>, <span class="comment">// 2</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">components</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//......  1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">searchText</span>: <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//......  2</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">countAdd</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.count + <span class="number">1</span>;</span><br><span class="line">    &#125;, <span class="comment">// 1</span></span><br><span class="line">    <span class="function"><span class="title">searchAdd</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.searchAdd + <span class="string">&quot;add&quot;</span>;</span><br><span class="line">    &#125;, <span class="comment">// 2</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">countClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 1</span></span><br><span class="line">      <span class="built_in">this</span>.count + <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">searchFilter</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 2</span></span><br><span class="line">      <span class="comment">//.........</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hi Vue2&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>用组件的选项 (data、computed、methods、watch) 组织逻辑在大多数情况下都有效。然而，当我们的组件变得更大时，逻辑关注点的列表也会增长。这可能会导致组件难以阅读和理解，尤其是对于那些一开始就没有编写这些组件的人来说。看上面的 demo 中 1 的逻辑与 2 交叉编写，很难一次找到一套功能的所有逻辑。在看下面这个组件事例：<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/20210920190941.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=QgFDE&originHeight=1016&originWidth=262&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><p>一个大型组件的事例，逻辑关注的是所对应各个颜色，将每一个组件所对应的每一套逻辑梳理出来并且能够记住，这本就是我们不应该费很大精力去关注的，但是现在你必须得一个组件几百行，穿插找到属于你想要的那几行，如果我们能够将同一个逻辑的关注点放在一个地方会更好，而这个正是组合 api 使我们能够做到的。</p><ul><li>组合式 api 基础 setup</li></ul><p>setup 选项应该是一个接受 props 和 context 的函数，我们将在稍后讨论。此外，我们从 setup 返回的所有内容都将暴露给组件的其余部分 (计算属性、方法、生命周期钩子等等) 以及组件的模板。</p><p>先了解一下两个参数</p><ol><li>props<br>setup 函数中的第一个参数是 props。正如在一个标准组件中所期望的那样，setup 函数中的 props 是响应式的，当传入新的 prop 时，它将被更新。<br>如果需要解构 prop，可以通过使用 setup 函数中的 toRefs 来安全地完成此操作。直接使用 es6 进行解构，可能会造成消除 props 的响应性。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; toRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line"><span class="keyword">const</span> &#123; title &#125; = toRefs(props)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(title.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>context<br>传递给 setup 函数的第二个参数是 context。context 是一个普通的 JavaScript 对象，它暴露三个组件的 property：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// Attribute (非响应式对象)</span></span><br><span class="line">    <span class="built_in">console</span>.log(context.attrs);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插槽 (非响应式对象)</span></span><br><span class="line">    <span class="built_in">console</span>.log(context.slots);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触发事件 (方法)</span></span><br><span class="line">    <span class="built_in">console</span>.log(context.emit);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>attrs 和 slots 是有状态的对象，它们总是会随组件本身的更新而更新。这意味着你应该避免对它们进行解构，并始终以 attrs.x 或 slots.x 的方式引用 property。请注意，与 props 不同，attrs 和 slots 是非响应式的。如果你打算根据 attrs 或 slots 更改应用副作用，那么应该在 onUpdated 生命周期钩子中执行此操作。</p><p>在 setup() 内部，this 不会是该活跃实例的引用，因为 setup() 是在解析其它组件选项之前被调用的，所以 setup() 内部的 this 的行为与其它选项中的 this 完全不同。这在和其它选项式 API 一起使用 setup() 时可能会导致混淆。<br>现在用 setup 将上面的 demo 给重构一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, watch, computed, onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">const</span> count = ref(<span class="number">0</span>);</span><br><span class="line">    watch(count, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line">    <span class="keyword">const</span> countAdd = computed(<span class="function">() =&gt;</span> count.value++);</span><br><span class="line">    <span class="keyword">const</span> countClick = <span class="function">() =&gt;</span> count.value++;</span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">const</span> searchText = ref(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    watch(searchText, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line">    <span class="keyword">const</span> searchAdd = computed(<span class="function">() =&gt;</span> searchText.value + <span class="string">&quot;add&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> searchFilter = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;Hi Vue3&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count,</span><br><span class="line">      countAdd,</span><br><span class="line">      countClick,</span><br><span class="line">      searchText,</span><br><span class="line">      searchAdd,</span><br><span class="line">      searchFilter,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可是我觉得这样写还是不太满意，setup 中好多代码，看着就比较乱，虽然逻辑在一块，但是逻辑堆的太多了可读性就不够了，所以我们可以使用 hooks 来设计组件，提高代码的复用性。可读性也比较好。那么既然要用 hooks 自然也是要遵守 hooks 协议，我们以 use 开头：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./hooks.js</span></span><br><span class="line"><span class="keyword">const</span> useCount = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> count = ref(val);</span><br><span class="line">  watch(count, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line">  <span class="keyword">const</span> countAdd = computed(<span class="function">() =&gt;</span> count.value++);</span><br><span class="line">  <span class="keyword">const</span> countClick = <span class="function">() =&gt;</span> count.value++;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    count,</span><br><span class="line">    countAdd,</span><br><span class="line">    countClick,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useSearch = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> searchText = ref(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  watch(searchText, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line">  <span class="keyword">const</span> searchAdd = computed(<span class="function">() =&gt;</span> searchText.value + <span class="string">&quot;add&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> searchFilter = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    searchText,</span><br><span class="line">    searchAdd,</span><br><span class="line">    searchFilter,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// App.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">const</span> &#123; count, countAdd, countClick &#125; = useCount(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">const</span> &#123; searchText, searchAdd, searchFilter &#125; = useSearch(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;Hi Vue3&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count,</span><br><span class="line">      countAdd,</span><br><span class="line">      countClick,</span><br><span class="line">      searchText,</span><br><span class="line">      searchAdd,</span><br><span class="line">      searchFilter,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样一看，组件代码简洁，代码复用性比较高，我哪里用到这个功能，我引入 hooks，调用一波，节省了 cv 代码时间，而且耦合度比较低，那个功能出错了，我们只需要修改对应的 hooks，不用从上排查到下了。</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><table><thead><tr><th>选项式 API</th><th>Hooks APi</th></tr></thead><tbody><tr><td>beforeCreate</td><td>Not needed*</td></tr><tr><td>created</td><td>Not needed*</td></tr><tr><td>beforeMount</td><td>onBeforeMount</td></tr><tr><td>mounted</td><td>onMounted</td></tr><tr><td>beforeUpdate</td><td>onBeforeUpdate</td></tr><tr><td>updated</td><td>onUpdated</td></tr><tr><td>beforeUnmount</td><td>onBeforeUnmount</td></tr><tr><td>unmounted</td><td>onUnmounted</td></tr><tr><td>errorCaptured</td><td>onErrorCaptured</td></tr><tr><td>renderTracked</td><td>onRenderTracked</td></tr><tr><td>renderTriggered</td><td>onRenderTriggered</td></tr></tbody></table><p>因为 setup 是围绕 beforeCreate 和 created 生命周期钩子运行的，所以不需要显式地定义它们。换句话说，在这些钩子中编写的任何代码都应该直接在 setup 函数中编写。如同我们上面例子的 onMounted 一样，钩子函数被组件调用会立即执行。</p><h2 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide/inject"></a>provide/inject</h2><p>在 setup() 中使用 provide 时，我们首先从 vue 显式导入 provide 方法。这使我们能够调用 provide 时来定义每个 property。</p><p>provide 函数允许你通过两个参数定义 property：</p><p>property 的 name (<String> 类型)<br>property 的 value</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&quot;./About&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; provide, ref, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    About,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> location = ref(<span class="string">&quot;North Pole&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> geolocation = reactive(&#123;</span><br><span class="line">      <span class="attr">longitude</span>: <span class="number">90</span>,</span><br><span class="line">      <span class="attr">latitude</span>: <span class="number">135</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    provide(<span class="string">&quot;location&quot;</span>, location);</span><br><span class="line">    provide(<span class="string">&quot;geolocation&quot;</span>, geolocation);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>添加响应 inject</p><p>在 setup() 中使用 inject 时，还需要从 vue 显式导入它。一旦我们这样做了，我们就可以调用它来定义如何将它暴露给我们的组件。</p><p>inject 函数有两个参数：</p><p>要注入的 property 的名称<br>一个默认的值 (可选)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> userLocation = inject(<span class="string">&quot;location&quot;</span>, <span class="string">&quot;The Universe&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> userGeolocation = inject(<span class="string">&quot;geolocation&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(userLocation, userGeolocation);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      userLocation,</span><br><span class="line">      userGeolocation,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>修改响应式 property<br>当使用响应式提供/注入值时，建议尽可能，在提供者内保持响应式 property 的任何更改。</p><p>例如，在需要更改用户位置的情况下，我们最好在 使用 provide 祖先 组件中执行此操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 祖先组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    About</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> location = ref(<span class="string">&#x27;North Pole&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> geolocation = reactive(&#123;</span><br><span class="line">      <span class="attr">longitude</span>: <span class="number">90</span>,</span><br><span class="line">      <span class="attr">latitude</span>: <span class="number">135</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 提供更新位置方法</span></span><br><span class="line">    <span class="keyword">const</span> updateLocation = <span class="function">() =&gt;</span> location.value = <span class="string">&#x27;UpdateLocation&#x27;</span></span><br><span class="line"></span><br><span class="line">    provide(<span class="string">&#x27;location&#x27;</span>, location);</span><br><span class="line">    provide(<span class="string">&#x27;geolocation&#x27;</span>, geolocation);</span><br><span class="line">    provide(<span class="string">&#x27;updateLocation&#x27;</span>, updateLocation)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后代组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> userLocation = inject(<span class="string">&#x27;location&#x27;</span>, <span class="string">&#x27;The Universe&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> userGeolocation = inject(<span class="string">&#x27;geolocation&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> useUpdateLocation = inject(<span class="string">&#x27;updateLocation&#x27;</span>) <span class="comment">// 注入更改位置方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(userLocation, userGeolocation)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      userLocation,</span><br><span class="line">      userGeolocation,</span><br><span class="line">      useUpdateLocation</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>那么如何确保我们提供的属性不被后代组件所更改呢？建议对提供者的 property 使用 readonly。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; provide, ref, reactive, readonly &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    About,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> location = ref(<span class="string">&quot;North Pole&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> geolocation = reactive(&#123;</span><br><span class="line">      <span class="attr">longitude</span>: <span class="number">90</span>,</span><br><span class="line">      <span class="attr">latitude</span>: <span class="number">135</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> updateLocation = <span class="function">() =&gt;</span> (location.value = <span class="string">&quot;UpdateLocation&quot;</span>);</span><br><span class="line"></span><br><span class="line">    provide(<span class="string">&quot;location&quot;</span>, readonly(location));</span><br><span class="line">    provide(<span class="string">&quot;geolocation&quot;</span>, readonly(geolocation));</span><br><span class="line">    provide(<span class="string">&quot;updateLocation&quot;</span>, updateLocation);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>强行赋值会报错 <strong>TypeError: “userLocation” is read-only</strong></p><h2 id="Fragments-在-Vue-3-中，组件现在正式支持多根节点组件，即片段！"><a href="#Fragments-在-Vue-3-中，组件现在正式支持多根节点组件，即片段！" class="headerlink" title="Fragments! 在 Vue 3 中，组件现在正式支持多根节点组件，即片段！"></a>Fragments! 在 Vue 3 中，组件现在正式支持多根节点组件，即片段！</h2><ul><li>2.x 语法<br>在 2.x 中，不支持多根组件，当用户意外创建多根组件时会发出警告，因此，为了修复此错误，许多组件被包装在一个</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Layout.vue --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">header</span>&gt;</span>...<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">main</span>&gt;</span>...<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span>...<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>3.x 语法<br>在 3.x 中，组件现在可以有多个根节点！但是，这确实要求开发者明确定义属性应该分布在哪里。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Layout.vue --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>...<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">main</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>...<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="过渡的-class-名更改"><a href="#过渡的-class-名更改" class="headerlink" title="过渡的 class 名更改"></a>过渡的 class 名更改</h2><p>非兼容 #概览<br>过渡类名 v-enter 修改为 v-enter-from、过渡类名 v-leave 修改为 v-leave-from。</p><p>#2.x 语法<br>在 v2.1.8 版本之前, 为过渡指令提供了两个过渡类名对应初始和激活状态。</p><p>在 v2.1.8 版本中, 引入 v-enter-to 来定义 enter 或 leave 变换之间的过渡动画插帧, 为了向下兼容, 并没有变动 v-enter 类名：</p><p>.v-enter,<br>.v-leave-to {<br>opacity: 0;<br>}</p><p>.v-leave,<br>.v-enter-to {<br>opacity: 1;<br>}<br>这样做会带来很多困惑, 类似 enter 和 leave 含义过于宽泛并且没有遵循类名钩子的命名约定。</p><p>#3.x 语法<br>为了更加明确易读，我们现在将这些初始状态重命名为：</p><p>.v-enter-from,<br>.v-leave-to {<br>opacity: 0;<br>}</p><p>.v-leave-from,<br>.v-enter-to {<br>opacity: 1;<br>}<br>现在，这些状态之间的区别就清晰多了。</p><p><transition> 组件相关属性名也发生了变化：</p><p>leave-class 已经被重命名为 leave-from-class (在渲染函数或 JSX 中可以写为：leaveFromClass)<br>enter-class 已经被重命名为 enter-from-class (在渲染函数或 JSX 中可以写为：enterFromClass</p><h2 id="Teleport"><a href="#Teleport" class="headerlink" title="Teleport"></a>Teleport</h2><p>Vue 鼓励我们将 UI 和 UI 的行为封装到组件中，通过嵌套组件来构建我们的 App。但是存在这样的一种情景，有多个子组件从逻辑上看是属于同一个父组件的，但是从技术实现的角度来看，多个子组件可能应挂载在 DOM 的不同位置，比较常见的情景是 Modal。在 Vue3 之前，我们可以参考下 Element UI 中 Poper 的实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!popper || !reference) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.visibleArrow) <span class="built_in">this</span>.appendArrow(popper);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.appendToBody) <span class="built_in">document</span>.body.appendChild(<span class="built_in">this</span>.popperElm);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.popperJS &amp;&amp; <span class="built_in">this</span>.popperJS.destroy) &#123;</span><br><span class="line">  <span class="built_in">this</span>.popperJS.destroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以发现，是通过 document.body.appendChild 方法将元素挂载到 body 上的。而在 Vue3 中我们可以通过 Teleport 来实现这一操作。img 将会挂载至 body 下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">msg</span>=<span class="string">&quot;Welcome to Your Vue.js App&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>Teleport 传送的元素依旧还会受 Vue 控制，这能很好的利用 Vue 的特性，可以说 Teleport 出现的大大增强了组件的可复用性和封装性。<br>最后多嘴一句，这里的名称或许叫 Portal 会让人更好理解，毕竟 V 社的传送门大家应该都玩过吧。好像是为了避免与可能出现的<portal></portal>标签冲突才换了个动词。</p><h2 id="Emits-Component-Option"><a href="#Emits-Component-Option" class="headerlink" title="Emits Component Option"></a>Emits Component Option</h2><p>验证自定义事件</p><p>如果自定义事件是通过对象语法声明(Object syntax)而不是数组语法声明(Array Syntax)的，那么这个自定义事件可以像 prop 校验一样完成校验。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">app.component(<span class="string">&quot;custom-form&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">emits</span>: &#123;</span><br><span class="line">    <span class="comment">// No validation</span></span><br><span class="line">    <span class="attr">click</span>: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Validate submit event</span></span><br><span class="line">    <span class="attr">submit</span>: <span class="function">(<span class="params">&#123; email, password &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (email &amp;&amp; password) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(<span class="string">&quot;Invalid submit event payload!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">submitForm</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$emit(<span class="string">&quot;submit&quot;</span>, &#123; email, password &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="v-modal"><a href="#v-modal" class="headerlink" title="v-modal"></a>v-modal</h1><p>当我们在自定义组件上使用 v-modal 时，默认的 prop 和事件发生变化,</p><p>prop：value-&gt;modalValue<br>event: input-&gt;update:modalValue</p><p><del>v-bind.sync</del>以及<del>modal</del>参数被移除，并以 v-modal arguments 的形式替换。vue3 中 v-modal 语法糖的形式变更，在 vue3 中的 v-modal 等价形式变更为如下形式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ChildComponent v-model=<span class="string">&quot;pageTitle&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- would be shorthand <span class="keyword">for</span>: --&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ChildComponent</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">:modelValue</span>=<span class="string">&quot;pageTitle&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  @<span class="attr">update:modelValue</span>=<span class="string">&quot;pageTitle = $event&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">/&gt;</span></span></span><br></pre></td></tr></table></figure><p>可以通过 v-modal arguments 改变 modal 的名字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ChildComponent v-model:title=<span class="string">&quot;pageTitle&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- would be shorthand <span class="keyword">for</span>: --&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">:title</span>=<span class="string">&quot;pageTitle&quot;</span> @<span class="attr">update:title</span>=<span class="string">&quot;pageTitle = $event&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><p>支持多个 v-modal 绑定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;user-name</span><br><span class="line">  v-model:first-name=<span class="string">&quot;firstName&quot;</span></span><br><span class="line">  v-model:last-name=<span class="string">&quot;lastName&quot;</span></span><br><span class="line">&gt;&lt;/user-name&gt;</span><br></pre></td></tr></table></figure><p>支持创建自定义 v-modal 修饰符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component v-model.capitalize=<span class="string">&quot;bar&quot;</span>&gt;&lt;/my-component&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">app.component(<span class="string">&quot;my-component&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">modelValue</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">modelModifiers</span>: &#123;</span><br><span class="line">      <span class="attr">default</span>: <span class="function">() =&gt;</span> (&#123;&#125;),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;text&quot; </span></span><br><span class="line"><span class="string">      :value=&quot;modelValue&quot;</span></span><br><span class="line"><span class="string">      @input=&quot;$emit(&#x27;update:modelValue&#x27;, $event.target.value)&quot;&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.modelModifiers); <span class="comment">// &#123; capitalize: true &#125;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="数据响应式变化的原理"><a href="#数据响应式变化的原理" class="headerlink" title="数据响应式变化的原理"></a>数据响应式变化的原理</h2><p>vue2 使用 Object.defineProperty 把这些 property 全部转为 getter/setter。而 Vue2 在处理数组时，也会通过原型链劫持会改变数组内元素的方法，并在原型链观察新增的元素，以及派发更新通知</p><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/image.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" alt="image" loading="lazy"></p><p>在 Vue3 中响应式系统最大的区别就是，数据模型是被代理的 JavaScript 对象了。不论是我们在组件的 data 选项中返回一个普通的 JavaScript 对象，还是使用 composition api 创建一个 reactive 对象，Vue3 都会将该对象包裹在一个带有 get 和 set 处理程序的 Proxy 中。<br>Proxy 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值等）。</p><p>具体原理慢慢研究。。。。。。。本次只是一些新 api 如何使用，具体怎么去使用达到最好的效果，还得看自己怎么去用吧</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3高阶组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Egg - 请求方式</title>
      <link href="/2019/09/18/ynr54p/"/>
      <url>/2019/09/18/ynr54p/</url>
      
        <content type="html"><![CDATA[<h3 id="常见的-http-状态码"><a href="#常见的-http-状态码" class="headerlink" title="常见的 http 状态码"></a>常见的 http 状态码</h3><ul><li>100</li><li>200</li><li>300</li><li>400</li><li>500</li></ul>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Egg </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Egg-请求方式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Egg - 中间件</title>
      <link href="/2019/09/14/pbb53o/"/>
      <url>/2019/09/14/pbb53o/</url>
      
        <content type="html"><![CDATA[<h2 id="中间件分类"><a href="#中间件分类" class="headerlink" title="中间件分类"></a>中间件分类</h2><ul><li>应用级别中间件</li><li>路由级中间件</li><li>错误处理中间件</li></ul><h2 id="创建中间件"><a href="#创建中间件" class="headerlink" title="创建中间件"></a>创建中间件</h2><p>app/middleware/&lt;中间件名字&gt;.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;this is authority middleware&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="应用中间件"><a href="#应用中间件" class="headerlink" title="应用中间件"></a>应用中间件</h2><p>config/config.default.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">应用级</span><br><span class="line"><span class="built_in">exports</span>.middleware = [<span class="string">&quot;middlware 1&quot;</span>, <span class="string">&quot;middlware n&quot;</span>, ...];</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Egg </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Egg-中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Egg - mysql插件</title>
      <link href="/2019/09/11/adtrvy/"/>
      <url>/2019/09/11/adtrvy/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>框架提供了 <a href="https://github.com/eggjs/egg-mysql">egg-mysql</a> 插件来访问 MySQL 数据库。这个插件既可以访问普通的 MySQL 数据库，也可以访问基于 MySQL 协议的在线数据库服务。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i --save egg-mysql</span><br></pre></td></tr></table></figure><h2 id="插件配置："><a href="#插件配置：" class="headerlink" title="插件配置："></a>插件配置：</h2><p>config/plugin.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.mysql = &#123;</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">package</span>: <span class="string">&quot;egg-mysql&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="数据配置"><a href="#数据配置" class="headerlink" title="数据配置"></a>数据配置</h2><p>config/config.default.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.mysql = &#123;</span><br><span class="line">  <span class="comment">// 单数据库信息配置</span></span><br><span class="line">  <span class="attr">client</span>: &#123;</span><br><span class="line">    <span class="comment">// 域名/ip地址</span></span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">    <span class="comment">// 端口号</span></span><br><span class="line">    <span class="attr">port</span>: <span class="string">&quot;3306&quot;</span>,</span><br><span class="line">    <span class="comment">// 用户名</span></span><br><span class="line">    <span class="attr">user</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="comment">// 密码</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">&quot;12344321&quot;</span>,</span><br><span class="line">    <span class="comment">// 数据库名</span></span><br><span class="line">    <span class="attr">database</span>: <span class="string">&quot;db_1811a&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 是否加载到 app 上，默认开启</span></span><br><span class="line">  <span class="attr">app</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 是否加载到 agent 上，默认关闭</span></span><br><span class="line">  <span class="attr">agent</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>从 MVC 的编程思想来看，我们应该在 service 服务中操作数据库<br>通过 this.ctx.app.mysql 来访问我们配置好的 egg-mysql<br>service/user.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; idCreator &#125; = <span class="built_in">require</span>(<span class="string">&quot;../utils&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; Service &#125; = <span class="built_in">require</span>(<span class="string">&quot;egg&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">registry</span>(<span class="params">&#123; username, password &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> uid = idCreator(username);</span><br><span class="line">    <span class="keyword">const</span> sql = <span class="string">`insert into login (uid,username,password) values (?,?,?)`</span>;</span><br><span class="line">    <span class="keyword">const</span> params = [uid, username, password];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">this</span>.ctx.app.mysql.query(sql, params);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = UserService;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Egg </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Egg-mysql插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Egg - CSRF</title>
      <link href="/2019/09/06/kopfbp/"/>
      <url>/2019/09/06/kopfbp/</url>
      
        <content type="html"><![CDATA[<p><strong>跨站请求伪造</strong>（英语：Cross-site request forgery），也被称为 <strong>one-click attack</strong> 或者 <strong>session riding</strong>，通常缩写为 <strong>CSRF <strong>或者 <strong>XSRF</strong>， 是一种挟制用户在当前已登录的 Web<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/5985445">应用程序</a>上执行非本意的操作的攻击方法。跟<a href="https://baike.baidu.com/item/%E8%B7%A8%E7%BD%91%E7%AB%99%E8%84%9A%E6%9C%AC/23316003">跨网站脚本</a>（XSS）相比，</strong>XSS</strong> 利用的是用户对指定网站的信任，CSRF 利用的是<a href="https://baike.baidu.com/item/%E7%BD%91%E7%AB%99/155722">网站</a>对用户<a href="https://baike.baidu.com/item/%E7%BD%91%E9%A1%B5%E6%B5%8F%E8%A7%88%E5%99%A8/8309940">网页浏览器</a>的信任。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>egg 默认在 post 请求时要求配置 CSRF，提升网站安全性。<br>config/config.default.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.security = &#123;</span><br><span class="line">  <span class="attr">csrf</span>: &#123;</span><br><span class="line">    <span class="comment">// 配置关闭</span></span><br><span class="line">    <span class="attr">enable</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Egg </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Egg-CSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Egg - 鉴权</title>
      <link href="/2019/09/02/hphwrr/"/>
      <url>/2019/09/02/hphwrr/</url>
      
        <content type="html"><![CDATA[<h2 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h2><p>app/config.default.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.super_white_list = [<span class="string">&quot;/user/login&quot;</span>, <span class="string">&quot;/user/registry&quot;</span>];</span><br></pre></td></tr></table></figure><h2 id="应用及中间件"><a href="#应用及中间件" class="headerlink" title="应用及中间件"></a>应用及中间件</h2><p>通过 middleware 拦截请求，判断是否传递 token，校验 token 与服务器是否一致，实现用户权限的控制。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&quot;jsonwebtoken&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> inWhiteList = ctx.app.config.super_white_list.filter(</span><br><span class="line">      <span class="function">(<span class="params">router</span>) =&gt;</span> router === ctx.request.url</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (inWhiteList.length) &#123;</span><br><span class="line">      <span class="comment">// 如果当前路由在超级白名单. 跳过鉴权（鉴定权限）</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">await</span> next();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// // 没有传递token返回401</span></span><br><span class="line">    <span class="keyword">const</span> authorization = ctx.request.header[<span class="string">&quot;authorization&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!authorization) &#123;</span><br><span class="line">      ctx.status = <span class="number">401</span>;</span><br><span class="line">      ctx.body = &#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&quot;没有权限访问&quot;</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 传递token</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断前端token与服务器端session保存的token是否一致</span></span><br><span class="line">    <span class="keyword">const</span> token = ctx.session[ctx.request.header[<span class="string">&quot;uid&quot;</span>] + <span class="string">&quot;token&quot;</span>];</span><br><span class="line">    <span class="comment">// 不一致</span></span><br><span class="line">    <span class="keyword">if</span> (authorization !== token) &#123;</span><br><span class="line">      ctx.status = <span class="number">401</span>;</span><br><span class="line">      ctx.body = &#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&quot;token被篡改&quot;</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 一致</span></span><br><span class="line">    <span class="keyword">const</span> tokenObj = jwt.verify(authorization, <span class="string">&quot;123&quot;</span>, <span class="function">(<span class="params">err, obj</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> currentTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    <span class="keyword">const</span> createTime = tokenObj.tim;</span><br><span class="line">    <span class="comment">// 一分钟后过期</span></span><br><span class="line">    <span class="keyword">if</span> ((currentTime - createTime) / <span class="number">1000</span> / <span class="number">60</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      ctx.status = <span class="number">401</span>;</span><br><span class="line">      ctx.body = &#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&quot;token过期&quot;</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Egg </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Egg-鉴权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Egg - 配置</title>
      <link href="/2019/08/29/vnkcu7/"/>
      <url>/2019/08/29/vnkcu7/</url>
      
        <content type="html"><![CDATA[<h1 id="配置服务端口"><a href="#配置服务端口" class="headerlink" title="配置服务端口"></a>配置服务端口</h1><p>config/config.dafault.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.cluster = &#123;</span><br><span class="line">  <span class="attr">listen</span>: &#123;</span><br><span class="line">    <span class="comment">// 域名</span></span><br><span class="line">    <span class="attr">hostname</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="comment">// 端口号</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="配置静态资源"><a href="#配置静态资源" class="headerlink" title="配置静态资源"></a>配置静态资源</h2>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Egg </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Egg-配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Egg - 初始化</title>
      <link href="/2019/08/25/teg4xb/"/>
      <url>/2019/08/25/teg4xb/</url>
      
        <content type="html"><![CDATA[<h2 id="快速初始化"><a href="#快速初始化" class="headerlink" title="快速初始化"></a>快速初始化</h2><h2 id="手动初始化"><a href="#手动初始化" class="headerlink" title="手动初始化"></a>手动初始化</h2><ul><li>mkdir <project name></li><li>cd <project name></li><li>npm init -y</li><li>cnpm i –save egg egg-bin</li><li>搭建目录结构<ul><li>app<ul><li>controller</li><li>service</li><li>router.js</li></ul></li><li>config 项目配置<ul><li>config.default.js 默认配置</li><li>plugin.js 插件配置</li></ul></li><li>logs 日志文件 （项目生成）</li><li>run 运行配置文件 （项目生成）</li></ul></li><li>配置脚本快捷启动命令</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>:&#123;</span><br><span class="line">  <span class="string">&quot;dev&quot;</span>:<span class="string">&quot;egg-bin dev&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>npm run dev</li></ul><h3 id="egg-路由表"><a href="#egg-路由表" class="headerlink" title="egg - 路由表"></a>egg - 路由表</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; router, controller &#125; = app;</span><br><span class="line">  router.get(<span class="string">&quot;/路由名称&quot;</span>, controller.文件名.方法名);</span><br><span class="line">  router.post(<span class="string">&quot;/路由名称&quot;</span>, controller.文件名.方法名);</span><br><span class="line">  router.put(<span class="string">&quot;/路由名称&quot;</span>, controller.文件名.方法名);</span><br><span class="line">  router.delete(<span class="string">&quot;/路由名称&quot;</span>, controller.文件名.方法名);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="egg-控制器"><a href="#egg-控制器" class="headerlink" title="egg - 控制器"></a>egg - 控制器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Controller &#125; = <span class="built_in">require</span>(<span class="string">&quot;egg&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">home</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.ctx.service.&lt;文件名&gt;.&lt;方法名&gt;</span><br><span class="line">    <span class="built_in">this</span>.ctx.body = &#123;</span><br><span class="line">      <span class="attr">code</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = AppController;</span><br></pre></td></tr></table></figure><h3 id="egg-服务"><a href="#egg-服务" class="headerlink" title="egg - 服务"></a>egg - 服务</h3><p>在 app/service 目录下创建文件<br>this.ctx.service.&lt;文件名&gt;.&lt;方法名&gt;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Service &#125; = <span class="built_in">require</span>(<span class="string">&quot;egg&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">home</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.ctx.body = &#123;</span><br><span class="line">      <span class="attr">code</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = AppService;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Egg </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Egg-初始化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 环境搭建</title>
      <link href="/2019/08/10/bpe6uf/"/>
      <url>/2019/08/10/bpe6uf/</url>
      
        <content type="html"><![CDATA[<h2 id="mysql-环境分类"><a href="#mysql-环境分类" class="headerlink" title="mysql 环境分类"></a>mysql 环境分类</h2><ul><li>独立环境</li><li>集成环境（不建议使用集成环境由于都是第三方制作的会留有”后门”）<ul><li>php</li><li>apache</li><li>mysql</li></ul></li></ul><p>mysql 是后端开发的数据库软件，对于系统”纯净”性有一定要求<br>纯净是指</p><ul><li>原装系统</li><li>没有中过木马、病毒</li><li>系统文件没有被篡改、丢失</li></ul><h4 id="系统问题"><a href="#系统问题" class="headerlink" title="系统问题"></a>系统问题</h4><ul><li>通过重新安装操作系统解决</li><li>通过 windows 恢复格式化所有磁盘解决</li><li>通过下载 360 superkiller 杀毒、杀木马、修复丢失系统文件</li><li>卸载多余的杀毒软件（有同学装了 N+1 个，包括但不限于 360、电脑管家、鲁大师、诺顿、金山毒霸、卡巴斯基、迈克菲）</li><li>关闭防火墙</li></ul><h4 id="卸载-mysql"><a href="#卸载-mysql" class="headerlink" title="卸载 mysql"></a>卸载 mysql</h4><p>windows+R,输入 control 打开控制面板</p><ul><li>卸载 mysql</li><li>卸载 phpstudy</li><li>卸载 wamp</li><li>卸载小皮</li></ul><h4 id="删除残留文件"><a href="#删除残留文件" class="headerlink" title="删除残留文件"></a>删除残留文件</h4><ul><li>MySQL Datafiles</li><li>本地磁盘逐项查找 mysql 文件，包括 Program Files&amp; Program Files x86</li><li>c:/user/&lt;用户名&gt;/AppData/Roaming 删除 mysql 相关文件夹</li><li>删除注册表（软媒模仿清理垃圾即可）</li><li>重启</li></ul><h4 id="删除-mysql-服务"><a href="#删除-mysql-服务" class="headerlink" title="删除 mysql 服务"></a>删除 mysql 服务</h4><p>windows+R,输入 service.msc 打开服务查看<br>管理员权限打开 cmd 运行下面命令：<br>sc delete mysql</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1597668296460-7d826da0-0ad3-4bc9-bf09-4a3671bc58ca.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=RL458&originHeight=9281&originWidth=1550&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>​</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 分页</title>
      <link href="/2019/08/02/dcta84/"/>
      <url>/2019/08/02/dcta84/</url>
      
        <content type="html"><![CDATA[<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>真分页 服务器可以实现真分页效果</li><li>假分页 客户端只能实现假分页效果</li></ul><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>真分页：通过查询数据库，根据字段 pagesize 页数、pagecount 个数实时返回所需要的数据<br>假分页：根据字段 pagesize 页数、pagecount 个数，过滤、截取数组中的项，获取每页数据<br>真分页需要客户端向服务端发起请求，传递参数，从性能上来讲优化了客户端渲染同时减少了服务器的响应压力<br>假分页不需要请求接口，仅仅是数据的处理，从性能上来讲仅优化了渲染方面的开销</p><h3 id="优化客户端渲染"><a href="#优化客户端渲染" class="headerlink" title="优化客户端渲染"></a>优化客户端渲染</h3><p>相当于本来需要渲染 10000 条数据，现在通过分页渲染了 100 条</p><h3 id="减少服务器压力"><a href="#减少服务器压力" class="headerlink" title="减少服务器压力"></a>减少服务器压力</h3><p>本来服务器需要响应 10000 条数据，现在响应了 100 条，有的同学说，那么不是需要多次请求服务器增加了 http 的请求数量？<br>举个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你问你爹要<span class="number">100</span>万娶媳妇，你爹肯定很难受，如果每周要一万元，你爹就没有那么难受了，大概是这个道理。</span><br></pre></td></tr></table></figure><h2 id="sql-语句"><a href="#sql-语句" class="headerlink" title="sql 语句"></a>sql 语句</h2><p>公式：（pagesize-1）*pagecount</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">limit 起始下标,个数</span><br><span class="line">select * <span class="keyword">from</span> &lt;表&gt; limit &lt;pagesize-<span class="number">1</span>*pagecount&gt;,&lt;pagecount&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL分页 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目中依赖包报错：node.getIterator is not a function</title>
      <link href="/2019/08/02/vdflby/"/>
      <url>/2019/08/02/vdflby/</url>
      
        <content type="html"><![CDATA[<p>一大早就有一个小 bug 要解决，刚吃的早饭瞬间又不香了，giao~~~<br>三分钟解决 bug，信心满满带着我的新分支就要往测试环境冲击，然而突如其来的报错让我直接闪了老腰<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1624459395199-e75ebd69-5690-425b-96a4-d216e6263210.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=AtDUD&originHeight=716&originWidth=1774&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><p>这不就是简单的一个报错吗，我们可以了解到 postcss 这个依赖包报错了，肯定是小版本升级又不遵守 npm 的规定，那不就简单了吗，冲！<br>查看了一下 package.json，好像没有依赖这个包，那这个包肯定是其他包的依赖了，那我总不能一个一个翻吧，那么多包，一个一个来不得累死了。<br>找出我们项目中可能与 postcss 相关的包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="string">&quot;less&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;less-loder&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;css-loder&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;mini-css-extract-plugin&quot;</span>: <span class="string">&quot;0.9.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;optimize-css-assets-webpack-plugin&quot;</span>: <span class="string">&quot;^5.0.3&quot;</span>,</span><br><span class="line">  <span class="string">&quot;postcss-flexbugs-fixes&quot;</span>: <span class="string">&quot;4.1.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;postcss-loader&quot;</span>: <span class="string">&quot;3.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;postcss-normalize&quot;</span>: <span class="string">&quot;8.0.1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;postcss-preset-env&quot;</span>: <span class="string">&quot;^6.7.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;postcss-safe-parser&quot;</span>: <span class="string">&quot;4.0.1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;reactcss&quot;</span>: <span class="string">&quot;^5.6.2&quot;</span>,</span><br></pre></td></tr></table></figure><p>大概就是这几个,还有一些忘记了，首先我将这些包分为两大类：<br>带有 postcss 和不带的，然后先删除带有 postcss 的”^”，删除 package.lock.json 和 node_modules，重新下载打包一次，发现还是报错，那么退到上一步。<br>我们删除不带 postcss 的”^”，然后在删除依赖包，重新打包，成功了，那说明就定位在这几个包里面了，接下来的分为 less 和 css，我选择先对 less 进行操作，失败了。<br>那就定位在几个 css 的包里面了，css-loder 肯定不太可能，那就将“optimize-css-assets-webpack-plugin”和“reactcss”操作一番，打包成功了，距离成功就只剩下最后一步了，我喜欢长的，自然先对“optimize-css-assets-webpack-plugin”进行了操作，嘿嘿，打包成功了，十几分钟解决问题，最后取消了这个依赖包的向上兼容，固定到一个版本，部署成功，欧耶！<br>然后我去 github 看了一番，好家伙，这刚 5.0.7 版本刚发布了十个小时，下面已经有些人发现不对了，开始跟作者进行互动，大家都觉得小版本更新使用了 postcss 的最新版本，导致项目打包失败，认为这是一个很不理智的做法，应该在大版本迭代进行更新。</p><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1624460804441-fea49a2c-7883-4d7e-982c-7bd9488814f7.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=MQz1q&originHeight=322&originWidth=750&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1624460813913-67996338-6e23-4eb5-aa18-2cb7b2535996.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=XzkOG&originHeight=342&originWidth=750&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>说这么多呢，主要讲一个解决问题的思路，每个问题是一个新的挑战，如果这个问题随便百度就有答案，还好说，但是很多问题明显都是一个新的问题，需要自己去研究，去想办法解决问题，我们也是在这种解决问题的途中逐渐成长，有什么更有效的方法，还要请教大佬们偷偷教一手，让我头发在头上多呆几天~</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs - 发送邮件nodemailer</title>
      <link href="/2019/07/22/mb36z7/"/>
      <url>/2019/07/22/mb36z7/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要在-node-发送邮件？"><a href="#为什么要在-node-发送邮件？" class="headerlink" title="为什么要在 node 发送邮件？"></a>为什么要在 node 发送邮件？</h2><p>电子邮件是—种用电子手段提供信息交换的通信方式，是互联网应用最广的服务。通过网络的电子邮件系统，用户可以以非常低廉的价格（不管发送到哪里，都只需负担网费）、非常快速的方式（几秒钟之内可以发送到世界上任何指定的目的地），与世界上任何一个角落的网络用户联系。</p><h2 id="怎么在-node-发送邮件？"><a href="#怎么在-node-发送邮件？" class="headerlink" title="怎么在 node 发送邮件？"></a>怎么在 node 发送邮件？</h2><p>在很多项目中，我们都会遇到邮件注册，邮件反馈等需求。在 node 中收发电子邮件也非常简单，因为强大的社区有各种各样的包可以供我么直接使用。<a href="https://nodemailer.com/">Nodemailer</a> 包就可以帮助我们快速实现发送邮件的功能。</p><h2 id="准备工作—-邮箱开启相关功能（授权码）"><a href="#准备工作—-邮箱开启相关功能（授权码）" class="headerlink" title="准备工作—-邮箱开启相关功能（授权码）"></a>准备工作—-邮箱开启相关功能（授权码）</h2><p>为了实现这个功能，你首先要有一个邮箱；由于需要使用 SMTP 方式发送，你还需要开启相关功能。你可以登录你的邮箱，然后开启这个设置。</p><ul><li>以 QQ 邮箱为例：设置-&gt;账户-&gt;开启服务 (选择 POP3/SMTP 服务)-&gt;点击开启 (需要发送短信开启)-&gt;授权码生成。</li></ul><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1622853718405-41fc9d27-5ae7-4c74-a344-a6ad6ef24dd2.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=YwoDw&originHeight=376&originWidth=1538&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1622853718502-2f340899-30c6-46bf-90e2-498bfa9c02ff.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=z6pMu&originHeight=368&originWidth=1416&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h2 id="使用-nodemailer"><a href="#使用-nodemailer" class="headerlink" title="使用 nodemailer"></a>使用 nodemailer</h2><ol><li>安装</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install nodemailer</span><br></pre></td></tr></table></figure><ol><li>引入</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nodemailer = <span class="built_in">require</span>(<span class="string">&quot;nodemailer&quot;</span>);</span><br></pre></td></tr></table></figure><ol><li>创建一个传输对象，配置参数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//--------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// 如果没有真实账户可以使用createTestAccount（异步方法）生成虚拟账户</span></span><br><span class="line"><span class="keyword">let</span> testAccount = <span class="keyword">await</span> nodemailer.createTestAccount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// create reusable transporter object using the default SMTP transport</span></span><br><span class="line"><span class="keyword">let</span> transporter = nodemailer.createTransport(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&quot;smtp.ethereal.email&quot;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">587</span>,</span><br><span class="line">  <span class="attr">secure</span>: <span class="literal">false</span>, <span class="comment">// true for 465, false for other ports</span></span><br><span class="line">  <span class="attr">auth</span>: &#123;</span><br><span class="line">    <span class="attr">user</span>: testAccount.user, <span class="comment">// generated ethereal user</span></span><br><span class="line">    <span class="attr">pass</span>: testAccount.pass, <span class="comment">// generated ethereal password</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//--------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// 如果取得QQ邮箱授权可以配置成</span></span><br><span class="line"><span class="keyword">let</span> transporter = nodemailer.createTransport(&#123;</span><br><span class="line">  <span class="attr">service</span>: <span class="string">&quot;QQ&quot;</span>, <span class="comment">// 发给QQ邮箱</span></span><br><span class="line">  <span class="attr">port</span>: <span class="number">465</span>, <span class="comment">// 发邮箱的端口号</span></span><br><span class="line">  <span class="attr">secureConnection</span>: <span class="literal">true</span>, <span class="comment">// 使用SSL加密传输</span></span><br><span class="line">  <span class="attr">auth</span>: &#123;</span><br><span class="line">    <span class="comment">// 权限认证</span></span><br><span class="line">    <span class="attr">user</span>: <span class="string">&quot;2631640352@qq.com&quot;</span>,</span><br><span class="line">    <span class="attr">pass</span>: <span class="string">&quot;邮箱的授权码&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//--------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><ol><li>配置发送信息参数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mailOptions = &#123;</span><br><span class="line">  <span class="attr">from</span>: <span class="string">&quot;来自2631640352@qq.com&quot;</span>, <span class="comment">// 发邮件的账号</span></span><br><span class="line">  <span class="attr">to</span>: <span class="string">&quot;2631640352@qq.com&quot;</span>, <span class="comment">// 收邮件的账号</span></span><br><span class="line">  <span class="attr">subject</span>: <span class="string">&quot;hello&quot;</span>, <span class="comment">// 标题</span></span><br><span class="line">  <span class="attr">html</span>: <span class="string">&quot;&lt;html&gt;&lt;h1&gt;world&lt;/h1&gt;&lt;/html&gt;&quot;</span>, <span class="comment">// 邮寄的内容</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>发送邮件—-sendMail 方法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">transporter.sendMail(mailOptions, <span class="function">(<span class="params">err, info</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;邮件已经发生完成&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 发送邮件nodemailer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>express - 起步</title>
      <link href="/2019/07/18/gn2teu/"/>
      <url>/2019/07/18/gn2teu/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>通过 npm 全局安装 express 应用生成器 <a href="https://www.npmjs.com/package/express-generator">express-generator</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g express-generator</span><br></pre></td></tr></table></figure><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd desktop</span><br><span class="line">express &lt;projectname&gt;</span><br><span class="line">cd &lt;projectname&gt;</span><br><span class="line">npm install</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node - 命令行</title>
      <link href="/2019/07/16/ekz0n5/"/>
      <url>/2019/07/16/ekz0n5/</url>
      
        <content type="html"><![CDATA[<p>常用插件：</p><ul><li><a href="https://github.com/sindresorhus/ora">ora</a></li><li><a href="https://www.npmjs.com/package/commander">commander</a></li><li><a href="https://www.npmjs.com/package/chalk">chalk</a></li><li><a href="https://www.npmjs.com/package/inquirer">inquirer</a></li><li><a href="https://www.npmjs.com/package/cli-table">cli-table</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node命令行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs - FS</title>
      <link href="/2019/07/05/td1emo/"/>
      <url>/2019/07/05/td1emo/</url>
      
        <content type="html"><![CDATA[<p><strong>读取文件</strong><br><strong>1.同步方式</strong><br>let result = fs.readyFileSync(‘文件名’,’utf-8’);<br>**2.异步方式=**<br>**写入文件**</p><ul><li>两种方式,覆盖式和追加式</li><li>写入内容只能是字符串</li><li>若写入其它类型数据,如对象,可通过 JSON.stringify() 转字符串</li><li>若文件不存在,则自动新建该文件</li></ul><p><strong>1.覆盖式写入</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.writeFileSync(<span class="string">&quot;文件名&quot;</span>, <span class="string">&quot;内容&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>2.追加式写入</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.appendFileSync(<span class="string">&quot;文件名&quot;</span>, <span class="string">&quot;内容&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>3.删除文件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.unlinkSync(<span class="string">&quot;文件名&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>4.复制文件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.copyFileSync(<span class="string">&#x27;源文件名&#x27;</span>,<span class="string">&#x27;fs.copyFileSync(&#x27;</span><span class="string">&#x27;);</span></span><br></pre></td></tr></table></figure><p><strong>5.重命名文件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.renameSync(<span class="string">&quot;源文件名&quot;</span>, <span class="string">&quot;新文件名&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>目录相关</strong><br><strong>1.读取目录</strong><br>将读取目录中的文件名存入数组,忽略尾缀</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = fs.readdirSync(<span class="string">&quot;目录名&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>2.创建目录</strong><br>不可嵌套创建，可创建子目录</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = fs.mkdirSync(<span class="string">&quot;目录名&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>3.删除空目录</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = fs.rmdirSync(<span class="string">&quot;目录名&quot;</span>);</span><br></pre></td></tr></table></figure><p>判断文件/目录是否存在 1.存在返回 true,不存在返回 false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isFile = fs.existsSync(<span class="string">&quot;文件名&quot;</span>);</span><br></pre></td></tr></table></figure><p>​</p><p>2.存在什么都不发生,不存在报错 =&gt; 尽量通过 try{}catch{}捕获错误</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isFile = fs.accessSync(<span class="string">&quot;文件名&quot;</span>);</span><br></pre></td></tr></table></figure><p>检查是文件还是目录</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> file = fs.statSync(<span class="string">&quot;test.txt&quot;</span>); <span class="comment">//查看文件信息</span></span><br><span class="line">file.isDirectory(); <span class="comment">//判断目录</span></span><br><span class="line">file.isFile(); <span class="comment">//判断文件</span></span><br></pre></td></tr></table></figure><p><strong>流式拷贝</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">小文件直接copy, 大文件尽量用流式读写;</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">//1.创建可读流</span></span><br><span class="line"><span class="keyword">let</span> read = fs.createReadStream(<span class="string">&quot;要拷贝的文件名&quot;</span>);</span><br><span class="line"><span class="comment">//2.创建可写流</span></span><br><span class="line"><span class="keyword">let</span> write = fs.createWriteStream(<span class="string">&quot;拷贝后的文件名&quot;</span>);</span><br><span class="line"><span class="comment">//3.管道输出</span></span><br><span class="line">read.pipe(write);</span><br><span class="line">可读流监听事件;</span><br><span class="line">rs.on(<span class="string">&quot;data&quot;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line">rs.on(<span class="string">&quot;end&quot;</span>, <span class="function">() =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs - npm入门</title>
      <link href="/2019/07/04/doa9ld/"/>
      <url>/2019/07/04/doa9ld/</url>
      
        <content type="html"><![CDATA[<p>npm 是 nodejs 的包管理工具，可以用来下载第三方插件、包、模块。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>由于目前市场的 npm 包管理器种类繁多，这块推荐三款包管理工具，可以帮助我们能够游刃有余的完成下包工作</p><ul><li><a href="https://www.npmjs.com/">npm</a></li><li>cnpm</li><li><a href="https://yarn.bootcss.com/">yarn</a></li></ul><h3 id="npm-的官方地址"><a href="#npm-的官方地址" class="headerlink" title="npm 的官方地址"></a>npm 的官方地址</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//npmjs.org</span></span><br></pre></td></tr></table></figure><h3 id="npm-常用命令"><a href="#npm-常用命令" class="headerlink" title="npm 常用命令"></a>npm 常用命令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">获取配置</span><br><span class="line">- npm config get &lt;settings&gt;</span><br><span class="line">设置配置</span><br><span class="line">- npm config set &lt;settings&gt;</span><br><span class="line">获取全局包node_modules路径</span><br><span class="line">- npm root -g</span><br><span class="line">获取当前路径的node_modules路径</span><br><span class="line">- npm root</span><br><span class="line">通过用户名、密码登录到 https:<span class="comment">//www.npmjs.com/</span></span><br><span class="line">- npm adduser</span><br><span class="line">- npm login</span><br><span class="line">清除缓存</span><br><span class="line">- npm clear cache</span><br><span class="line">- npm clean cache</span><br><span class="line">查看帮助</span><br><span class="line">- npm --help</span><br><span class="line">发布包</span><br><span class="line">- npm publish</span><br><span class="line">取消发布包</span><br><span class="line">- npm unpublish</span><br><span class="line">获取一个包的作者</span><br><span class="line">- npm owner</span><br><span class="line">获取用户名</span><br><span class="line">- npm whoami</span><br><span class="line">生成一个包管理文件</span><br><span class="line">- npm init -y</span><br><span class="line">执行包管理文件的某条命令</span><br><span class="line">- npm run &lt;&gt;</span><br><span class="line">npm start 启动默认命令的简写  npm run start</span><br><span class="line">下载包</span><br><span class="line">- npm install &lt;packagename&gt;</span><br><span class="line">- npm install &lt;packagename&gt; --save-dev</span><br><span class="line">- npm install &lt;packagename&gt; --save</span><br><span class="line">- npm install &lt;packagename&gt; -D</span><br><span class="line">- npm install &lt;packagename&gt; -S</span><br><span class="line">- npm install &lt;packagename&gt; -g</span><br><span class="line">- npm install &lt;packagename&gt;@x.x.x</span><br></pre></td></tr></table></figure><h3 id="npm-配置全局包的存放路径"><a href="#npm-配置全局包的存放路径" class="headerlink" title="npm 配置全局包的存放路径"></a>npm 配置全局包的存放路径</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &lt;路径&gt;</span><br></pre></td></tr></table></figure><h3 id="npm-配置全局缓存文件的存放路径"><a href="#npm-配置全局缓存文件的存放路径" class="headerlink" title="npm 配置全局缓存文件的存放路径"></a>npm 配置全局缓存文件的存放路径</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set cache &lt;路径&gt;</span><br></pre></td></tr></table></figure><h3 id="npm-手动配置淘宝镜像"><a href="#npm-手动配置淘宝镜像" class="headerlink" title="npm 手动配置淘宝镜像"></a>npm 手动配置淘宝镜像</h3><p>注意：淘宝镜像错一个字母，不好意思就不可以下载包了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure><h3 id="npm-获得全局包的存放路径"><a href="#npm-获得全局包的存放路径" class="headerlink" title="npm 获得全局包的存放路径"></a>npm 获得全局包的存放路径</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不带node_modules</span></span><br><span class="line">npm config get prefix</span><br><span class="line"><span class="comment">// 带node_modules</span></span><br><span class="line">npm root -g</span><br></pre></td></tr></table></figure><h3 id="包管理文件"><a href="#包管理文件" class="headerlink" title="包管理文件"></a>包管理文件</h3><p>package.josn 是 node 的包管理文件，用来记录一个包或者一个项目的重要信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;day-01&quot;</span>,    <span class="comment">//项目名称，由字母数字下划线组成，不能与npmjs.org官网的包重名</span></span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,  <span class="comment">//项目版本号</span></span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,   <span class="comment">// 项目描述</span></span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,  <span class="comment">//入口文件</span></span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;         <span class="comment">//快捷命令</span></span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;keywords&quot;</span>: [],      <span class="comment">//项目关键字</span></span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,        <span class="comment">//作者</span></span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,    <span class="comment">//版本信息</span></span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>:&#123;&#125;,   <span class="comment">//生产环境依赖模块</span></span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;&#125;<span class="comment">//开发环境依赖模块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NPM-下载包过程"><a href="#NPM-下载包过程" class="headerlink" title="NPM 下载包过程"></a>NPM 下载包过程</h2><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1597234273712-d48db339-c4e6-4170-8125-b35325a9a4aa.jpeg?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=PMcBf&originHeight=768&originWidth=683&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm使用</title>
      <link href="/2019/07/01/fds3hc/"/>
      <url>/2019/07/01/fds3hc/</url>
      
        <content type="html"><![CDATA[<p><strong>一、基于之前学的 node 的基础对比现在的 node 高级来说，只是让我们大概了解下基础。现在我带领大家来安装一下 node 的安装和环境变量的配置的环境，带大家重新整理我们的 node.js 吧</strong><br>1、首先我们先安装一下我们的 node.js 可以去官网查看最新的 node.js msi 的安装包进行安装，安装过程中，只需要改变一下我们安装目录，一般我们会在 D 盘的盘符中来新建一个 Node 的文件夹，一直 next 安装到里面就可以，<br>2、现在我们进行验证一下。按住我们键盘上的<strong>window+R,<strong>会出现一个输入框在里面输入</strong>cmd</strong>命令符，然后出现的命令符小黑板，在里面输入 <strong>node -v</strong> 和 <strong>npm -v ,<strong>看到<br>我们的版本号之后就代表我们的 node 就已经安装完毕了，由于我们所使用</strong>npm</strong>是国外的东西，所以我们要使用阿里<br>淘宝镜像。<br>1、首先安装 <strong>npm i cnpm -g;</strong><br>2、**npm config set registry <strong><a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a><br>3、安装淘宝镜像 <strong>cnpm config set registry <strong><a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a><br><strong>4、切换 npm config set registryregistry=<a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a></strong><br>3、</strong>环境变量</strong><br>1、添加环境变量 Path<br>2、node.js 的安装路径<br>3、npm 包的下载路径<br>4、配置环境变量打开环境变量，里面有系统变量和用户变量，这里我们的变量改变我们的系统变量，这里点击我们的新建系统变量会出现二个输入框，第一个输入框是要输入你的</strong>NODE_PATH <strong>第二个输入框是要输入我们</strong>D:Node\npm\node_modules **进行配置就可以了<br>5、配置完成后我们需要更改我们的全局包的默认路径 <strong>npm config prefix ** 全局安装的存放路径<br>6、</strong>npm config set cache **指定下包的缓存<br><strong>二、常用命令</strong><br><strong>一、包管理器</strong><br><strong>1、npm adduser 登录</strong><br><strong>2、npm clear cache 清除缓存</strong><br><strong>3、npm config set <key><value>设置配置命令</strong><br><strong>4、npm config get <key> 读取</strong><br>**5、npm –helo 查看帮助 **<br><strong>6、package 代表包的名称</strong><br><strong>7、-g 全局安装</strong><br><strong>8、-d 当前路径安装</strong><br><strong>9、–save 向包管理文件添加 生产环境依赖</strong><br><strong>10、–save-dev 向包管理文件添加 开发环境依赖</strong><br><strong>11、npm install <package> -g 全局安装</strong><br><strong>12、npm uninstall <package> -g 全局卸载</strong><br><strong>13、npm publish 发布</strong><br><strong>14、npm unpublish 取消发布</strong><br><strong>15、npm owner 包的作者</strong><br><strong>16、npm whoami 用户名</strong><br><strong>17、npm -v 查看版本号</strong><br><strong>18、npm run &lt;&gt;执行包管理文件的某条命令</strong><br><strong>19、npm start 启动默认命令 简写 ,npm run start</strong><br><strong>20、npm init 生产一个包管理文件</strong><br><strong>21、npm i 等同于 npm install</strong><br><strong>二、包管理文件</strong><br>[package.json 是一个项目的包管理文件](<a href="https://www.yuque.com/docs/share/87a824d9-9574-48a2-9b43-349f86e59520#">https://www.yuque.com/docs/share/87a824d9-9574-48a2-9b43-349f86e59520?#</a> 《包管理文件》)</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs - 起步</title>
      <link href="/2019/06/28/ggvp7n/"/>
      <url>/2019/06/28/ggvp7n/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><strong>nodejs 是基于 chrome V8 引擎的 javascript 运行环境( runtime )</strong></li><li><strong>npm nodejs 的包管理工具</strong></li></ul><h2 id="与传统后端的关系"><a href="#与传统后端的关系" class="headerlink" title="与传统后端的关系"></a>与传统后端的关系</h2><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601447656262-8258e03b-8a45-4da8-9dbb-fece7c2fa0fc.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=BQypq&originHeight=611&originWidth=590&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h2 id="为什么选择-node"><a href="#为什么选择-node" class="headerlink" title="为什么选择 node"></a>为什么选择 node</h2><p>nodejs 是服务器端语言与传统后端语言 PHP、 JAVA、ASP.NET 有什么差异<br>多加了一层通讯，肯定会有一定的性能损耗。但分层带来的损失，一定能在其他方面的收益弥补回来，而且合理的分层能让职责清晰、方便协作，大大提升开发效率。也可以通过优化通讯方式和协议，尽可能把损耗降到最低。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li><p><strong>nodejs 运行速度快，性能非常好</strong></p><p>v8 是用 c++实现，编译速度媲美二进制语言，能够让计算机快速编译识别</p></li><li><p><strong>异步 I/O</strong></p><ul><li>I 指代 input 输入</li><li>O 指代 output 输出</li></ul></li><li><p>同步代码执行，会按照文档流的执行顺序，自上而下去执行代码<br>异步代码执行，可以同时去执行某些操作</div> warning 举例： 如何提升工作效率？ 比如清洁工同时扫地与拖地</div></p></li><li><p><strong>单线程</strong></p></li></ul><p>默认是单线程，代码按照文档流自上而下执行，以通过 process 来开启多进程</p><ul><li><strong>非阻塞</strong></li></ul><p>nodejs 提供了一套同步、一套异步的 API, 建议我们使用异步编程，事件与回调<br><strong>单线程容易阻塞服务器，通过异步操作（process）开启多线程,充分利用服务器的性能</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同步  1,2,3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//异步 1,3,2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>通过 cmd 命令窗口中输入下面命令，来检查是否安装成功：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Nan&gt; node -v</span><br><span class="line"><span class="attr">C</span>:\Users\Nan&gt; npm -v</span><br></pre></td></tr></table></figure><h2 id="为什么要配置环境变量？"><a href="#为什么要配置环境变量？" class="headerlink" title="为什么要配置环境变量？"></a>为什么要配置环境变量？</h2><ul><li>因为我们想访问一个包或者一个文件，只能在它的存放路径去访问</li><li>如果想在其他路径访问，会报错，提示找不到文件或者命令</li></ul><p>ps: 修改好环境变量，需要重开 cmd.exe 命令提示符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> C:\Users\Nan&gt; gulp -v</span><br><span class="line">&gt; <span class="string">&#x27;gulp&#x27;</span> 不是内部或外部命令，也不是可运行的程序或批处理文件。</span><br></pre></td></tr></table></figure><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>添加环境变量 path:</p><ul><li>nodejs 的安装路径</li><li>npm 包的下载路径</li></ul><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601447694884-77c74d62-46d3-4b36-bd42-87fa9af5886c.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=aBjNt&originHeight=678&originWidth=1358&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h2 id="全局包的引用"><a href="#全局包的引用" class="headerlink" title="全局包的引用"></a>全局包的引用</h2><p>添加系统变量 NODE_PATH，来获取全局包的存放路径<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601447734856-74291f38-d972-4c3b-be35-bd02d2222d1f.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=m45hv&originHeight=687&originWidth=1103&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h2 id="淘宝镜像"><a href="#淘宝镜像" class="headerlink" title="淘宝镜像"></a>淘宝镜像</h2><p>由于 npm 服务器在美国，国内由于“墙”的原因,国内访问缓慢<br>这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10 分钟 一次以保证尽量与官方服务同步。<br><strong>cnpm 具备除了 publish 及 unpublish npm 的所有功能</strong><br>安装:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install cnpm -g</span><br><span class="line">&gt; npm config set registry https:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure><h2 id="yarn-包管理器"><a href="#yarn-包管理器" class="headerlink" title="yarn 包管理器"></a>yarn 包管理器</h2><p>快速、可靠、安全的依赖管理工具。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install -g yarn</span><br></pre></td></tr></table></figure><h2 id="nrm-镜像管理"><a href="#nrm-镜像管理" class="headerlink" title="nrm 镜像管理"></a>nrm 镜像管理</h2><p>nrm 是用来管来镜像源切换得依赖工具</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm i -g nrm</span><br><span class="line"><span class="comment">// 常用命令</span></span><br><span class="line"><span class="comment">// 查看镜像列表</span></span><br><span class="line">nrm ls</span><br><span class="line"><span class="comment">// 使用镜像源</span></span><br><span class="line">nrm use &lt;taobao&gt;</span><br><span class="line"><span class="comment">// 当前镜像源</span></span><br><span class="line">nrm current</span><br></pre></td></tr></table></figure><h2 id="nvm-版本控制"><a href="#nvm-版本控制" class="headerlink" title="nvm 版本控制"></a>nvm 版本控制</h2><p>nvm 是 nodejs 版本管理得依赖工具</p><h1 id="middleware-中间件"><a href="#middleware-中间件" class="headerlink" title="middleware 中间件"></a>middleware 中间件</h1><p>进入一个路由页面或者一个接口之前，执行某一些特殊的操作，通过中间件来完成。<br><strong>中间件特点</strong> 形参具备三个参数 request response next<br><strong>错误处理中间件特点</strong> 形参具备四个参数 request response error next</p><h2 id="内置中间件"><a href="#内置中间件" class="headerlink" title="内置中间件"></a>内置中间件</h2><p>fs path url http scoket</p><h2 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// axios jquery body-parser redux react</span></span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">const</span> jquery = <span class="built_in">require</span>(<span class="string">&quot;jquery&quot;</span>);</span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">import</span> jquery <span class="keyword">from</span> <span class="string">&quot;jquery&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="全局挂载的中间件"><a href="#全局挂载的中间件" class="headerlink" title="全局挂载的中间件"></a>全局挂载的中间件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结合 express</span></span><br><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>)();</span><br><span class="line">app.use(<span class="function"><span class="title">funciton</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line"> <span class="comment">//do something</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="错误处理中间件"><a href="#错误处理中间件" class="headerlink" title="错误处理中间件"></a>错误处理中间件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&quot;/login&quot;</span>,<span class="function">(<span class="params">req,res,error,next</span>)=&gt;</span>&#123;</span><br><span class="line"> <span class="keyword">do</span> something...</span><br><span class="line">&#125;,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="路由中间件"><a href="#路由中间件" class="headerlink" title="路由中间件"></a>路由中间件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&quot;/login&quot;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line"> <span class="keyword">do</span> something...</span><br><span class="line">&#125;,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="包管理器"><a href="#包管理器" class="headerlink" title="包管理器"></a>包管理器</h1><p>npm 是 nodejs 的包管理器，可以用来下载第三方包（模块）</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">npm adduser 登陆</span><br><span class="line">npm clear cache  清除缓存</span><br><span class="line">npm clean cache 清除缓存</span><br><span class="line">npm config set &lt;key&gt; &lt;value&gt;</span><br><span class="line">npm config get &lt;key&gt;</span><br><span class="line">npm -h</span><br><span class="line">npm --help 查看帮助</span><br><span class="line">package代表包的名称</span><br><span class="line">-g 全局安装</span><br><span class="line">-d 当前路径安装</span><br><span class="line">--save 向包管理文件添加 生产环境依赖</span><br><span class="line">--save-dev 向包管理文件添加 开发环境依赖</span><br><span class="line">npm install &lt;package&gt; -g  安装</span><br><span class="line">npm uninstall &lt;package&gt; -g 卸载</span><br><span class="line">npm publish 发布</span><br><span class="line">npm unpublish 取消发布</span><br><span class="line"></span><br><span class="line">npm owner 一个包的作者</span><br><span class="line">npm whoami 用户名</span><br><span class="line">npm -v 查看版本号</span><br><span class="line">npm run &lt;&gt; 执行包管理文件的某条命令</span><br><span class="line">npm start 启动默认命令 简写， npm run start</span><br><span class="line">npm init 生成一个包管理文件</span><br><span class="line">npm i 等同于 npm install</span><br></pre></td></tr></table></figure><p>​</p><h1 id="包管理文件"><a href="#包管理文件" class="headerlink" title="包管理文件"></a>包管理文件</h1><p>package.json 是一个项目的包管理文件（非常重要）<br>完整的包管理文件 package.json</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">//项目名称</span></span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;nodejs&quot;</span>,</span><br><span class="line"><span class="comment">//项目版本号</span></span><br><span class="line"><span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line"><span class="comment">//项目描述</span></span><br><span class="line"><span class="string">&quot;description&quot;</span>: <span class="string">&quot;my first nodejs project&quot;</span>,</span><br><span class="line"><span class="comment">//入口文件</span></span><br><span class="line"><span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line"><span class="comment">//快捷启动命令</span></span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//项目的关键字，用于seo优化</span></span><br><span class="line"><span class="string">&quot;keywords&quot;</span>: [</span><br><span class="line"><span class="string">&quot;nodejs&quot;</span>,</span><br><span class="line"><span class="string">&quot;express&quot;</span>,</span><br><span class="line"><span class="string">&quot;mysql&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">//作者</span></span><br><span class="line"><span class="string">&quot;author&quot;</span>: <span class="string">&quot;jingjianhai&quot;</span>,</span><br><span class="line"><span class="comment">//版权信息</span></span><br><span class="line"><span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line"><span class="string">&quot;dependencies&quot;</span>:&#123;&#125;</span><br><span class="line"><span class="string">&quot;devDependencies&quot;</span>:&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dependencies-生产环境依赖模块"><a href="#dependencies-生产环境依赖模块" class="headerlink" title="dependencies 生产环境依赖模块"></a>dependencies 生产环境依赖模块</h2><p>npminstall–save<package></p><h2 id="devDependencies-开发环境依赖模块"><a href="#devDependencies-开发环境依赖模块" class="headerlink" title="devDependencies 开发环境依赖模块"></a>devDependencies 开发环境依赖模块</h2><p>npminstall–save-dev<package></p><h1 id="整理-CMDER-的使用和安装"><a href="#整理-CMDER-的使用和安装" class="headerlink" title="整理 CMDER 的使用和安装"></a>整理 CMDER 的使用和安装</h1><h2 id="安装我们的-CMDER-一些要点"><a href="#安装我们的-CMDER-一些要点" class="headerlink" title="安装我们的 CMDER 一些要点"></a>安装我们的 CMDER 一些要点</h2><p>1、安装我们的 CMDER 可以去官网查询一些安装<br>2、安装成功后我们要放到我们的指定位置盘符 D://<br>3、随后需要在我们的环境变量中的 PATH 位置的系统环境变量 放入我们盘符的路径<br>4、需要我们 CMDER 右键显示出需要以管理员身份运行我们的 CMD 放入<strong>Cmder.exe /REGISTER ALL</strong><br>5、就可以右击运行我们 COMER</p><h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h2><p>npm 是一个 node 的包管理工具</p><h3 id="NPM-的官方地址"><a href="#NPM-的官方地址" class="headerlink" title="NPM 的官方地址"></a>NPM 的官方地址</h3><p><a href="http://npmjs.org/">npmjs.org</a><br><a href="https://www.npmjs.com/">https://www.npmjs.com/</a></p><h3 id="NPM-默认地址"><a href="#NPM-默认地址" class="headerlink" title="NPM 默认地址"></a>NPM 默认地址</h3><p><a href="https://registry.npmjs.org/">https://registry.npmjs.org</a><br>如果需要在 npm 里进行发包的话，如果是淘宝镜像源，需要切换官方的镜像源</p><h5 id="npm-config-set-registry-https-registry-npmjs-org"><a href="#npm-config-set-registry-https-registry-npmjs-org" class="headerlink" title="npm config set registry https://registry.npmjs.org"></a>npm config set registry <a href="https://registry.npmjs.org/">https://registry.npmjs.org</a></h5><p>在控制命令版中 输入 npm login —-出现你的 npm 账号和密码 如果没有去官网注册一个 随后出现一个你的邮箱 <a href="mailto:488937163@qq.com">488937163@qq.com</a> 随后即可 可以使—–npm whoami 查看您的作者名</p><h2 id="NPM-常用命令"><a href="#NPM-常用命令" class="headerlink" title="NPM 常用命令"></a>NPM 常用命令</h2><p>获取配置<br>npm config get<br>设置配置<br>npm config set<br>获取全局包的安装路径<br>npm root -g<br>获取当前路径的 node_modules 目录<br>npm root<br>通过用户密码登录 <a href="https://www.npmjs.org/">https://www.npmjs.org</a>;<br>adduser</p><h1 id="process-进程及-npm-映射"><a href="#process-进程及-npm-映射" class="headerlink" title="process 进程及 npm 映射"></a>process 进程及 npm 映射</h1><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p><strong>​- process.stdout.write(val.trim()) —- 封装一个 console.log 的方法</strong></p><p><strong>​- process.stderr.write(val.trim()) —- 封装一个打印 Error 的方法</strong></p><p><strong>​- process.stderr.write(val.trim() + “\n”) —- Nodejs 输出换行符</strong></p><p><strong>​- process.stdin 标准输入</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">process.stdin.on(<span class="string">&quot;data&quot;</span>, <span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(input.toString().trim(), <span class="string">&quot;这里时输入的代码&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>​- process.stdout 标准输出</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">process.stdout.write(<span class="string">&quot;输入你的内容&quot;</span>);</span><br><span class="line">process.stdin.on(<span class="string">&quot;data&quot;</span>, <span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(input.toString().trim(), <span class="string">&quot;接受stdout输入的内容&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>​- process.stderr 标准输出错误</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">process.stderr.write(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;输出标准的错误方法&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>​- process.version 版本号</strong><br><strong>​- process.versions</strong><br><strong>​- v8</strong><br><strong>​- node</strong><br><strong>​- zlib</strong><br><strong>​- process.arch 获取系统类型 (x64 | x86|32 位)</strong><br><strong>​- platfrom 获取系统平台 (win32-windows|os - 苹果系统)</strong><br><strong>​- process.cwd() 获取命令行执行所在的路径</strong><br><strong>​- process.CpuUsage Cpu 使用情况</strong><br><strong>​- process.memoryUsage 内存使用情况</strong><br><strong>​- process.exit 退出进程</strong><br><strong>​- env 获取环境变量</strong><br><strong>​- title 管理员</strong><br><strong>​- argv 获取命令行参数</strong><br><strong>​- execPath node.js 程序的路径</strong><br><strong>inquirer | commander 发布脚手架</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 添加bin字段 并给脚手架的起名字 --vue-cli|</span><br><span class="line">- 添加脚本解释程序  #:<span class="regexp">/usv/</span>bin/env/node</span><br><span class="line">- npm link 进行映射</span><br><span class="line">- npm login</span><br><span class="line">- 检查管理文件及包名</span><br></pre></td></tr></table></figure><p>1、创建 包管理文件 Init<br>2、程序解释器 bin 文件<br>3、在 json 文件 创建 bin 目录 “copy-cli”:’./bin.index.js”<br>4、#!/usr/bin/env node 需要 node 环境进行使用<br>5、映射 npm link</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node起步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - Math</title>
      <link href="/2019/06/19/hpfm7k/"/>
      <url>/2019/06/19/hpfm7k/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">53</span>) <span class="comment">//2的53次幂</span></span><br><span class="line"><span class="built_in">Math</span>.round(<span class="number">.6</span>) <span class="comment">//1  四舍五入</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">.5</span>) <span class="comment">//1 向上取整</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">.6</span>) <span class="comment">//0 向下取整</span></span><br><span class="line"><span class="built_in">Math</span>.abs(-<span class="number">5</span>) <span class="comment">//5 绝对值</span></span><br><span class="line"><span class="built_in">Math</span>.max(x,y,z) <span class="comment">// 最大值</span></span><br><span class="line"><span class="built_in">Math</span>.min(x,y,z) <span class="comment">//最小值</span></span><br><span class="line"><span class="built_in">Math</span>.random() <span class="comment">// 生成一个0-1的随机数</span></span><br><span class="line"><span class="built_in">Math</span>.PI <span class="comment">// 圆周率</span></span><br><span class="line"><span class="built_in">Math</span>.E <span class="comment">//自然对数的底数</span></span><br><span class="line"><span class="built_in">Math</span>.sqrt(<span class="number">3</span>)<span class="comment">//三的平方根</span></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">3</span>)<span class="comment">//3的立方根</span></span><br><span class="line"><span class="built_in">Math</span>.sin(o)三角函数，还有<span class="built_in">Math</span>.cos,<span class="built_in">Math</span>.atan等</span><br><span class="line"><span class="built_in">Math</span>.log(<span class="number">10</span>)<span class="comment">//10的自然对数</span></span><br><span class="line"><span class="built_in">Math</span>.log(<span class="number">100</span>)/<span class="built_in">Math</span>.LN10 <span class="comment">//以10为底的100的对数</span></span><br><span class="line"><span class="built_in">Math</span>.log(<span class="number">512</span>)/<span class="built_in">Math</span>.LN2 <span class="comment">//以2为底的512对数</span></span><br><span class="line"><span class="built_in">Math</span>.exp(<span class="number">3</span>) <span class="comment">// e的三次幂</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>creatPortal</title>
      <link href="/2019/06/14/iiv0bu/"/>
      <url>/2019/06/14/iiv0bu/</url>
      
        <content type="html"><![CDATA[<h2 id="createPortal"><a href="#createPortal" class="headerlink" title="createPortal"></a>createPortal</h2><p>ReactDOM.createPortal 并不直接渲染 DOM 元素，而是渲染一个 React 元素，一个绑定好了挂载点的 React 元素，并且并不随组件引用位置而改变（一般的 React 元素引用位置在哪就在哪里渲染</p><ul><li>child 是任何可渲染的 Rax 子元素，例如一个元素，字符串或 Fragment</li><li>container 是一个 Dom 元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createPortal(child, container);</span><br></pre></td></tr></table></figure><h2 id="createPortal-和-render-渲染的区别"><a href="#createPortal-和-render-渲染的区别" class="headerlink" title="createPortal 和 render 渲染的区别"></a>createPortal 和 render 渲染的区别</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ReactDom.createPortal 渲染</span></span><br><span class="line"><span class="keyword">const</span> A = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div)</span><br><span class="line">  <span class="keyword">return</span> ReactDOM.createPortal(<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>gjw<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>, div)</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line"><span class="comment">//React.render 渲染</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ex</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">A</span>&gt;</span><span class="tag">&lt;/<span class="name">A</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Ex</span>/&gt;</span></span>, <span class="built_in">document</span>.body)</span><br></pre></td></tr></table></figure><p><strong>6、</strong>ReactDOM.createPortal 并不直接渲染 DOM 元素，而是渲染一个 React 元素，一个绑定好了挂载点的 React 元素，并且并不随组件引用位置而改变（一般的 React 元素引用位置在哪就在哪里渲染）<br>ReactDOM.render 直接渲染 DOM 元素，会直接影响页面</p><p><strong>7、使用 createPortal</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">//引入 createPortal</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPortal &#125; <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="comment">//  记录参数 利用window.document</span></span><br><span class="line">    <span class="keyword">const</span> doc = <span class="built_in">window</span>.document;</span><br><span class="line">    <span class="built_in">console</span>.log(doc, <span class="string">&quot;---获取整个的document&quot;</span>);</span><br><span class="line">    <span class="comment">// 定义this.node 创建一个div节点</span></span><br><span class="line">    <span class="built_in">this</span>.node = doc.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    <span class="comment">// console.log(this.node,&#x27;--- 在document里面创建div&#x27;);</span></span><br><span class="line">    <span class="comment">// 当前的body下挂载一个div节点</span></span><br><span class="line">    doc.body.appendChild(<span class="built_in">this</span>.node);</span><br><span class="line">    <span class="comment">// console.log(doc.body.appendChild(this.node),&#x27;在document.body下面追加一个div&#x27;);</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 实现createPortal</span></span><br><span class="line">    <span class="keyword">return</span> createPortal(</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;dialog&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Modal<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">      <span class="built_in">this</span>.node</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 在willUnmount中实现订阅和取消订阅</span></span><br><span class="line">  <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.document.body.removeChild(<span class="built_in">this</span>.node);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> test;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> ReactDom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> creatPortal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - web存储</title>
      <link href="/2019/05/22/vyahos/"/>
      <url>/2019/05/22/vyahos/</url>
      
        <content type="html"><![CDATA[<h2 id="存储方式："><a href="#存储方式：" class="headerlink" title="存储方式："></a>存储方式：</h2><ul><li>长时存储<ul><li>cookie</li><li>localStorage</li></ul></li><li>临时存储<ul><li>sessionStorage</li><li>session</li></ul></li></ul><h2 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h2><ul><li>存储大小：<ul><li>cookie 数据大小不能超过 4k。</li><li>localStorage 可达到 5M</li></ul></li><li>有期时间：</li></ul><p>localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；<br>sessionStorage 数据在当前浏览器窗口关闭后自动删除。<br>cookie 设置的 cookie 过期时间之前一直有效，即使窗口或浏览器关闭</p><h2 id="简述-cookies，sessionStorage-和-localStorage-的区别？"><a href="#简述-cookies，sessionStorage-和-localStorage-的区别？" class="headerlink" title="简述 cookies，sessionStorage 和 localStorage 的区别？"></a>简述 cookies，sessionStorage 和 localStorage 的区别？</h2><p>cookie 是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密），cookie 还可以设置有效时间<br>cookie 数据始终在同源的 http 请求中携带（即使不需要），记会在浏览器和服务器间来回传递，<br>没次 ajax 请求都会吧 cookie 传送到后台，cookie 一半用做用户登陆，后台可以根据 cookie 信息判断用户是否登陆状态<br>sessionStorage 和 localStorage 不会自动把数据发给服务器，仅在本地保存。</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 - async&amp;await</title>
      <link href="/2019/05/14/zb0k7o/"/>
      <url>/2019/05/14/zb0k7o/</url>
      
        <content type="html"><![CDATA[<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><ul><li>它是使用了 Generator 函数基于 Promise 的封装，是 Promise 的一个语法糖；</li><li>它是一种异步编程的解决方案，可以以同步的代码方式来写异步；</li><li>await 关键字可以“暂停”async function 的执行；</li><li>可以用 try-catch 捕获到 async function 所得到的错误；</li></ul><h2 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2.基本使用"></a>2.基本使用</h2><p>声明两个 promise 对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    reject(<span class="number">2</span>);</span><br><span class="line">  &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;);</span><br><span class="line">复制代码;</span><br></pre></td></tr></table></figure><p>传统的方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">promise1.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res); <span class="comment">// 1</span></span><br><span class="line">&#125;);</span><br><span class="line">promise2.catch(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res); <span class="comment">// 2</span></span><br><span class="line">&#125;);</span><br><span class="line">复制代码;</span><br></pre></td></tr></table></figure><p>async await 方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> promise1;</span><br><span class="line">  <span class="built_in">console</span>.log(res); <span class="comment">// 1</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> promise2;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err); <span class="comment">// 2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">asyncFunc();</span><br><span class="line">复制代码;</span><br></pre></td></tr></table></figure><h2 id="3-进阶使用"><a href="#3-进阶使用" class="headerlink" title="3.进阶使用"></a>3.进阶使用</h2><p>场景：要做三件事，下一件事依赖上一件事返回的结果；<br>假设：dosomething 返回的是 Promise；<br>处理顺序：dosomething1 =&gt; dosomething2 =&gt; dosomething3；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统的方式 （可以看到存在多重嵌套，错误处理也需要单独写）</span></span><br><span class="line">dosomething1().then(<span class="function">(<span class="params">res1</span>) =&gt;</span> &#123;</span><br><span class="line">  dosomething2(res1).then(<span class="function">(<span class="params">res2</span>) =&gt;</span> &#123;</span><br><span class="line">    dosomething3(res2).then(<span class="function">(<span class="params">res3</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res3);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// async await方式 （没了嵌套，简洁了）</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> res1 = <span class="keyword">await</span> dosomething1();</span><br><span class="line">  <span class="keyword">const</span> res2 = <span class="keyword">await</span> dosomething1(res1);</span><br><span class="line">  <span class="keyword">const</span> res3 = <span class="keyword">await</span> dosomething1(res2);</span><br><span class="line">  <span class="built_in">console</span>.log(res3);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error); <span class="comment">// 统一捕获错误</span></span><br><span class="line">&#125;</span><br><span class="line">复制代码;</span><br></pre></td></tr></table></figure><p>注意，如果每件事没有相互之间的依赖，使用了上面的那种方式后，会增加得到结果的时间（明明可以并行处理的，但是变成了串行）；可以考虑使用 Promise.all 来执行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [res1, res2, res3] = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([</span><br><span class="line">  dosomething1(),</span><br><span class="line">  dosomething2(),</span><br><span class="line">  dosomething3(),</span><br><span class="line">]);</span><br><span class="line">复制代码;</span><br></pre></td></tr></table></figure><h2 id="4-原理解读"><a href="#4-原理解读" class="headerlink" title="4.原理解读"></a>4.原理解读</h2><h3 id="Generator-函数"><a href="#Generator-函数" class="headerlink" title="Generator 函数"></a>Generator 函数</h3><p>Generator 函数，可以通过 yield 关键字，把函数的执行流挂起，通过 next()方法可以切换到下一个状态，可以控制代码执行流程（暂停和继续），从而为异步编程提供解决方案。<br>基本使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">myGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;3&quot;</span>; <span class="comment">// 到return这步，done为true;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> gen = myGenerator(); <span class="comment">// 获取迭代器</span></span><br><span class="line">gen.next(); <span class="comment">//&#123;value: &quot;1&quot;, done: false&#125;</span></span><br><span class="line">gen.next(); <span class="comment">//&#123;value: &quot;2&quot;, done: false&#125;</span></span><br><span class="line">gen.next(); <span class="comment">//&#123;value: &quot;3&quot;, done: true&#125;</span></span><br><span class="line">复制代码;</span><br></pre></td></tr></table></figure><p>可以通过给 next()传参, 让 yield 具有返回值:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">myGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">yield</span> <span class="string">&quot;1&quot;</span>); <span class="comment">//res1</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">yield</span> <span class="string">&quot;2&quot;</span>); <span class="comment">//res2</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">yield</span> <span class="string">&quot;3&quot;</span>); <span class="comment">//res3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取迭代器</span></span><br><span class="line"><span class="keyword">const</span> gen = myGenerator();</span><br><span class="line">gen.next();</span><br><span class="line">gen.next(<span class="string">&quot;res1&quot;</span>);</span><br><span class="line">gen.next(<span class="string">&quot;res2&quot;</span>);</span><br><span class="line">gen.next(<span class="string">&quot;res3&quot;</span>);</span><br><span class="line">复制代码;</span><br></pre></td></tr></table></figure><h3 id="await-async-的规范"><a href="#await-async-的规范" class="headerlink" title="await async 的规范"></a>await async 的规范</h3><ul><li>async 函数会自动返回一个 Promise 对象；</li><li>await 关键字能够返回 Promise 的 resolve 的值；</li><li>await 关键字必须用作 async 函数内；</li></ul><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><ul><li>相同：可以看到 */yield 和 async/await 这两个关键词有点类似的；</li><li>不同：await 每一步可以自动执行，不需要手动调用 next()就能自动执行下一步；</li><li>不同：asnyc 返回的是一个 Promise， Generator 函数返回的是一个迭代器对象；</li></ul><p><strong>所以我们需要封装一个返回 Promise 对象的并且可以自动执行的 Generator 函数的函数：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过包一层runAsync函数 模拟await async</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">asyncFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="keyword">yield</span> <span class="number">1</span>; <span class="comment">// next()返回 &#123; value: 1, done: false &#125;</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="keyword">yield</span> <span class="built_in">Promise</span>.resolve(++a); <span class="comment">// next()返回 &#123; value: Promise.resolve(++a), done: false &#125;</span></span><br><span class="line">    <span class="comment">//throw Error();</span></span><br><span class="line">    <span class="keyword">var</span> c = <span class="keyword">yield</span> <span class="built_in">Promise</span>.resolve(++b); <span class="comment">// next()返回 &#123; value: Promise.resolve(++b), done: false &#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(c); <span class="comment">// 3</span></span><br><span class="line">    <span class="keyword">return</span> c; <span class="comment">// next()返回 &#123; value: 3, done: false &#125;</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error,<span class="string">&quot;error&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runAsync</span>(<span class="params">asyncFn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> g = <span class="keyword">new</span> asyncFn();</span><br><span class="line">  <span class="comment">// async返回的是一个Promise</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 实现自动执行的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_next</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">var</span> res = g.next(val); <span class="comment">//得到Generator对象： &#123;value: xxx, done: xxx&#125;</span></span><br><span class="line">       &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">         <span class="comment">// 防止yield执行过程成抛出错误</span></span><br><span class="line">         reject(error);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">      <span class="comment">// 执行到最后；退出自动执行</span></span><br><span class="line">      <span class="keyword">if</span> (res.done) <span class="keyword">return</span> resolve(res.value);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 自动执行下一个yield</span></span><br><span class="line">      <span class="comment">// 包一层Promise是为了兼容yield后面不是跟Promise对象的情况；</span></span><br><span class="line">      <span class="built_in">Promise</span>.resolve(res.value).then(</span><br><span class="line">        <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">          _next(data);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          g.throw(err); <span class="comment">// 给外面的try catch捕获</span></span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    _next();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行asyncFn，模拟的async await函数执行流程；</span></span><br><span class="line"><span class="keyword">let</span> p = runAsync(asyncFn)；</span><br><span class="line">p.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res) <span class="comment">// 3</span></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> async </tag>
            
            <tag> await </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - 原型&amp;原型链</title>
      <link href="/2019/04/27/nwhi1a/"/>
      <url>/2019/04/27/nwhi1a/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-原型-amp-原型链"><a href="#Javascript-原型-amp-原型链" class="headerlink" title="Javascript - 原型&amp;原型链"></a>Javascript - 原型&amp;原型链</h1><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><p><strong>概念</strong>:一个函数可以看成一个类，原型是所有类都有的一个属性，原型的作用就是给这个类的每一个对象都添加一个统一的方法</p><ul><li><strong>所有引用类型都有一个 <strong>proto</strong></strong> <strong>属性,属性值是一个普通的对象</strong></li><li><strong>所有函数都有一个 prototype 属性，属性值是一个普通对象</strong></li><li><strong>所有引用类型的</strong>proto**** <strong>属性都指向它的构造函数的 prototype</strong></li><li>使用 hasOwnProperty() 可以判断这个属性是不是对象本身的属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">a.__proto__ === <span class="built_in">Array</span>.prototype; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p><strong>概念：</strong>每个对象都有一个<strong>proto</strong>，它指向它的 prototype 原型对象，而 prototype 原型对象又具有一个自己的原型对象，就这样层层向下上直到一个对象的原型 prototype 为 null 这个查询的路径就是原型链</p><ul><li><strong>当访问一个对象的某个属性时，会先在这个对象本身属性上查找，如果没有找到，则会去它的</strong>proto<strong>隐式原型上查找，即它的构造函数的 prototype，如果还没有找到就会再在构造函数的 prototype 的</strong>proto<strong>中查找，这样一层一层向上查找就会形成一个链式结构，我们称为原型链。</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">month</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.month = month;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Parent(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(child.month); <span class="comment">// &quot;zhangsan&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(child.father); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>在 child 中查找某个属性时，会执行以下操作<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1611659546404-897023c2-1e8b-4e26-a8f5-d5b0982c01ea.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"><br>访问路径：<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1611659888624-f8749819-594d-4d71-acaa-e5916571a653.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"></p><ul><li><strong>一直往上层查找，直到到 null 还没有找到，则返回 undefined</strong></li><li><strong>Object.prototype.<strong>proto</strong> === null</strong></li><li><strong>所有从原型或更高级原型中的得到、执行的方法，其中的 this 在执行时，指向当前这个触发事件执行的对象</strong></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>原型和原型链是 JS 实现继承的一种模型。</strong></li><li><strong>原型链的形成是真正是靠</strong>proto** 而非 prototype**</li><li><strong>所有的引用类型（数组、对象、函数），都具有对象特性，即可自由扩展属性（null 除外）</strong></li><li><strong>所有的引用类型（数组、对象、函数），都有一个</strong>proto<strong>属性，属性值是一个普通的对象</strong></li><li><strong>所有的函数，都有一个 prototype 属性，属性值也是一个普通的对象</strong></li><li><strong>所有的引用类型（数组、对象、函数），</strong>proto<strong>属性值指向它的构造函数的 prototype 属性值</strong></li></ul><p>​</p><p>执行 printName 时很好理解，但是执行 alertName 时发生了什么？这里再记住一个重点 <strong>当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的</strong>proto<strong>（即它的构造函数的 prototype）中寻找</strong>，因此 f.alertName 就会找到 Foo.prototype.alertName。<br>那么如何判断这个属性是不是对象本身的属性呢？使用 hasOwnProperty，常用的地方是遍历一个对象的时候。<br>自动检测<br>var item<br>for (item in f) {<br>// 高级浏览器已经在 for in 中屏蔽了来自原型的属性，但是这里建议大家还是加上这个判断，保证程序的健壮性<br>if (f.hasOwnProperty(item)) {<br>console.log(item)<br>}<br>}</p><h3 id="2，谈谈-This-对象的理解"><a href="#2，谈谈-This-对象的理解" class="headerlink" title="2，谈谈 This 对象的理解"></a>2，<strong>谈谈 This 对象的理解</strong></h3><p>先搞明白一个很重要的概念 —— <strong>this 的值是在执行的时候才能确认，定义的时候不能确认！</strong><br>因为 this 是执行上下文环境的一部分，而执行上下文需要在代码执行之前确定，而不是定义的时候。看如下例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">a.fn(); <span class="comment">// this === a</span></span><br><span class="line">a.fn.call(&#123; <span class="attr">name</span>: <span class="string">&quot;B&quot;</span> &#125;); <span class="comment">// this === &#123;name: &#x27;B&#x27;&#125;</span></span><br><span class="line"><span class="keyword">var</span> fn1 = a.fn;</span><br><span class="line">fn1(); <span class="comment">// this === window</span></span><br></pre></td></tr></table></figure><p>​</p><p>this 执行会有不同，主要集中在这几个场景中</p><ul><li>作为构造函数执行，构造函数中</li><li>作为对象属性执行，上述代码中 a.fn()</li><li>作为普通函数执行，上述代码中 fn1()</li><li>用于 call apply bind，上述代码中 a.fn.call({name: ‘B’})</li></ul><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601449633771-aedbd10e-8e32-403f-8f9c-5ed4fb53d8eb.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"><br>this 分为几个不同的使用场景，在 function 中 this 指的的是 window，如果是实用 new 调用的话 this 指的是当前的实例化对象，在事件调用函数中 this 指的调用事件的 dom,特殊的是在 IE 中的 attachEvent 中的 this 总是指向全局对象 Window；，在定时器中 this 指的是 window，在 es6 中有一个箭头函数，在箭头函数中 this 永远指向的是父级对象，this 也是可以改变的，在 js 中 call, apply, bind 都可以改变 this 的指向， call, apply 都是执行一个函数并且改变 this，区别就是参数传递不一样，而 bind 是返回一个绑定 this 之后的</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原型&amp;原型链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web存储</title>
      <link href="/2019/04/18/hy8cer/"/>
      <url>/2019/04/18/hy8cer/</url>
      
        <content type="html"><![CDATA[<h2 id="localStorage-amp-amp-sessionStorage-amp-amp-cookie-amp-amp-indexDB"><a href="#localStorage-amp-amp-sessionStorage-amp-amp-cookie-amp-amp-indexDB" class="headerlink" title="localStorage &amp;&amp; sessionStorage &amp;&amp; cookie &amp;&amp; indexDB"></a>localStorage &amp;&amp; sessionStorage &amp;&amp; cookie &amp;&amp; indexDB</h2><p>本地存储用户的浏览数据。早些时候,本地存储使用的是 cookie。但是 Web 存储需要更加的安全与快速. 这些数据不会被保存在服务器上，但是这些数据只用于用户请求网站数据上.它也可以存储大量的数据，而不影响网站的性能数据以 键/值 对存在, web 网页的数据只允许该网页访问使用。</p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>Cookie，有时也用其复数形式 <a href="https://baike.baidu.com/item/Cookies/187064">Cookies</a>。类型为“<strong>小型文本文件</strong>”，是某些网站为了辨别用户身份，进行<a href="https://baike.baidu.com/item/Session/479100">Session</a>跟踪而储存在用户本地终端上的数据（通常经过加密），由用户<a href="https://baike.baidu.com/item/%E5%AE%A2%E6%88%B7%E7%AB%AF/101081">客户端</a>计算机暂时或永久保存的信息。<br>JavaScript 可以使用 <strong>document.cookie</strong> 属性来创建 、读取、及删除 cookie。<br>Cookie 可以存储 4kb。<br>JavaScript 中，创建 cookie 如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&quot;username=John Doe&quot;</span>;</span><br></pre></td></tr></table></figure><p>您还可以为 cookie 添加一个过期时间（以 UTC 或 GMT 时间）。默认情况下，cookie 在浏览器关闭时删除：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&quot;username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT&quot;</span>;</span><br></pre></td></tr></table></figure><p>您可以使用 path 参数告诉浏览器 cookie 的路径。默认情况下，cookie 属于当前页面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie =</span><br><span class="line">  <span class="string">&quot;username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="web-存储"><a href="#web-存储" class="headerlink" title="web 存储"></a>web 存储</h2><p>客户端存储数据的两个对象为：</p><ul><li>localStorage - 用于长久保存整个网站的数据，保存的数据没有过期时间，直到手动去除。</li><li>sessionStorage - 用于临时保存同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据。</li></ul><h2 id="localStorage-对象"><a href="#localStorage-对象" class="headerlink" title="localStorage 对象"></a>localStorage 对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">localStorage</span>.getItem(key); <span class="comment">//获取</span></span><br><span class="line"><span class="built_in">localStorage</span>.setItem(key, value); <span class="comment">//添加</span></span><br><span class="line"><span class="built_in">localStorage</span>.removeItem(key); <span class="comment">//删除</span></span><br><span class="line"><span class="built_in">localStorage</span>.clear(); <span class="comment">//删除全部</span></span><br></pre></td></tr></table></figure><h2 id="sessionStorage-对象"><a href="#sessionStorage-对象" class="headerlink" title="sessionStorage 对象"></a>sessionStorage 对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.getItem(key); <span class="comment">//获取</span></span><br><span class="line">sessionStorage.setItem(key, value); <span class="comment">//添加</span></span><br><span class="line">sessionStorage.removeItem(key); <span class="comment">//删除</span></span><br><span class="line">sessionStorage.clear(); <span class="comment">//删除全部</span></span><br></pre></td></tr></table></figure><h2 id="indexDB"><a href="#indexDB" class="headerlink" title="indexDB"></a>indexDB</h2><p>随着浏览器的功能不断增强，越来越多的网站开始考虑，将大量数据储存在客户端，这样可以减少从服务器获取数据，直接从本地获取数据。<br>通俗地讲，IndexedDB 就是浏览器提供的本地数据库，它可以被网页脚本创建和操作。IndexedDB 允许储存大量数据，提供查找接口，还能建立索引。这些都是 LocalStorage 所不具备的。就数据库类型而言，IndexedDB 不属于关系型数据库（不支持 SQL 查询语句），更接近 NoSQL 数据库。</p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ul><li>创建/打开数据库。</li><li>在数据库中创建一个对象仓库（object store）。</li><li>启动一个事务，并发送一个请求来执行一些数据库操作，像增加或提取数据等。</li><li>通过监听正确类型的 DOM 事件以等待操作完成。</li><li>在操作结果上进行一些操作（可以在 request 对象中找到）</li></ul><h3 id="打开数据库"><a href="#打开数据库" class="headerlink" title="打开数据库"></a>打开数据库</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">window</span>.indexedDB.open(<span class="string">&quot;MyTestDatabase&quot;</span>);</span><br><span class="line">request.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 错误处理</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot; 打开数据库报错&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 成功处理</span></span><br><span class="line">  db = event.target.result;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;打开数据库成功&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="创建和更新数据库版本号"><a href="#创建和更新数据库版本号" class="headerlink" title="创建和更新数据库版本号"></a>创建和更新数据库版本号</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = <span class="literal">null</span>;</span><br><span class="line">request.onupgradeneeded = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  db = event.target.result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h3><p>新建数据库与打开数据库是同一个操作。如果指定的数据库不存在，就会新建。不同之处在于，后续的操作主要在 upgradeneeded 事件的监听函数里面完成，因为这时版本从无到有，所以会触发这个事件。<br>通常，新建数据库以后，第一件事是新建对象仓库（即新建表）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">request.onupgradeneeded = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  db = event.target.result;</span><br><span class="line">  <span class="keyword">var</span> objectStore = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (!db.objectStoreNames.contains(<span class="string">&quot;imgLists&quot;</span>)) &#123;</span><br><span class="line">    objectStore = db.createObjectStore(<span class="string">&quot;imgLists&quot;</span>, &#123; <span class="attr">keyPath</span>: <span class="string">&quot;id&quot;</span> &#125;);</span><br><span class="line">    <span class="comment">// unique name可能会重复</span></span><br><span class="line">    objectStore.createIndex(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;name&quot;</span>, &#123; <span class="attr">unique</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h3><p>新增数据指的是向对象仓库写入数据记录。这需要通过事务完成。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new 一个blob对象</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">hello</span>: <span class="string">&quot;world&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([<span class="built_in">JSON</span>.stringify(obj1, <span class="literal">null</span>, <span class="number">2</span>)], &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> request = db</span><br><span class="line">    .transaction([<span class="string">&quot;imgLists&quot;</span>], <span class="string">&quot;readwrite&quot;</span>)</span><br><span class="line">    .objectStore(<span class="string">&quot;imgLists&quot;</span>)</span><br><span class="line">    .add(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;图片1&quot;</span>, <span class="attr">path</span>: <span class="string">&quot;/static/image&quot;</span>, <span class="attr">blob</span>: blob &#125;);</span><br><span class="line"></span><br><span class="line">  request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;数据写入成功&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  request.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;数据写入失败&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p>查询数据也是通过事物完成。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> transaction = db.transaction([<span class="string">&quot;imgLists&quot;</span>]);</span><br><span class="line">  <span class="keyword">var</span> objectStore = transaction.objectStore(<span class="string">&quot;imgLists&quot;</span>);</span><br><span class="line">  <span class="comment">// 用户读取数据，参数是主键</span></span><br><span class="line">  <span class="keyword">var</span> request = objectStore.get(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  request.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;事务失败&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (request.result) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(request.result);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;未获得数据记录&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历数据"><a href="#遍历数据" class="headerlink" title="遍历数据"></a>遍历数据</h3><p>遍历数据表格的所有记录，要使用指针对象 IDBCursor。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> objectStore = db.transaction(<span class="string">&quot;imgLists&quot;</span>).objectStore(<span class="string">&quot;imgLists&quot;</span>);</span><br><span class="line"></span><br><span class="line">  objectStore.openCursor().onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cursor = event.target.result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cursor) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(cursor);</span><br><span class="line">      cursor.continue();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;没有更多数据了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> request = db</span><br><span class="line">    .transaction([<span class="string">&quot;imgLists&quot;</span>], <span class="string">&quot;readwrite&quot;</span>)</span><br><span class="line">    .objectStore(<span class="string">&quot;imgLists&quot;</span>)</span><br><span class="line">    <span class="comment">// 主动更新主键为1</span></span><br><span class="line">    .put(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;图片2&quot;</span>, <span class="attr">path</span>: <span class="string">&quot;/static/image2&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">  request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;数据更新成功&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  request.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;数据更新失败&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> request = db</span><br><span class="line">    .transaction([<span class="string">&quot;imgLists&quot;</span>], <span class="string">&quot;readwrite&quot;</span>)</span><br><span class="line">    .objectStore(<span class="string">&quot;imgLists&quot;</span>)</span><br><span class="line">    .delete(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;数据删除成功&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">remove();</span><br></pre></td></tr></table></figure><h3 id="创建-使用索引"><a href="#创建-使用索引" class="headerlink" title="创建/使用索引"></a>创建/使用索引</h3><p>索引的意义在于，可以让你搜索任意字段，也就是说从任意字段拿到数据记录。如果不建立索引，默认只能搜索主键（即从主键取值）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// objectStore.createIndex(&#x27;name&#x27;, &#x27;name&#x27;, &#123; unique: false &#125;);</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findIndex</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> transaction = db.transaction([<span class="string">&quot;imgLists&quot;</span>], <span class="string">&quot;readonly&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> store = transaction.objectStore(<span class="string">&quot;imgLists&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> index = store.index(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> request = index.get(<span class="string">&quot;图片1&quot;</span>);</span><br><span class="line"></span><br><span class="line">  request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = e.target.result;</span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>indexDB 是一个浏览器使用简易的数据库。随着前端功能复杂度提升，用户需要多元化，前端 indexDB 应用也就越来越多。桌面应用、Progressive Web App（PWA）、chrome 扩展组件的开发等。用户同时会获取/操作更多的信息，怎么留存这些大量的数据，那么我们的 indexDB 就上线了。案例：<a href="https://links.jianshu.com/go?to=https://devdocs.io/">DevDocs</a>，electron 开发的桌面应用（图片传输）。</p>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - XMLHttpRequest</title>
      <link href="/2019/04/08/gffa6l/"/>
      <url>/2019/04/08/gffa6l/</url>
      
        <content type="html"><![CDATA[<p>在 <a href="http://c.biancheng.net/js/">JavaScript</a> 中，XMLHttpRequest 是客户端的一个 API，它为浏览器与服务器通信提供了一个便捷通道。现代浏览器都支持 XMLHttpRequest API，如 IE 7+、Firefox、Chrome、Safari 和 Opera。</p><h2 id="创建-XMLHttpRequest-对象"><a href="#创建-XMLHttpRequest-对象" class="headerlink" title="创建 XMLHttpRequest 对象"></a>创建 XMLHttpRequest 对象</h2><p>XMLHttpRequest 用于在后台与服务器交换数据。创建 XMLHttpRequest 对象的方法如下：<br>var xhr = new XMLHttpRequest ();</p><p>IE 5.0 版本开始以 ActiveX 组件形式支持 XMLHttpRequest，IE 7.0 版本开始标准化 XMLHttpRequest。不过所有浏览器实现的 XMLHttpRequest 对象都提供相同的接口和用法。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>下面示例使用工厂模式把定义 XMLHttpRequest 对象进行封装，这样只需要调用 creatXHR() 方法就可以返回一个 XMLHttpRequest 对象。</p><ol><li>//创建 XMLHttpRequest 对象</li><li>//参数：无</li><li>//返回值：XMLHttpRequest 对象</li><li><strong>function</strong>createXHR(){</li><li><strong>var</strong> XHR =[//兼容不同浏览器和版本得创建函数数组</li><li><strong>function</strong>(){<strong>returnnew</strong>XMLHttpRequest()},</li><li><strong>function</strong>(){<strong>returnnew</strong>ActiveXObject(“Msxml2.XMLHTTP”)},</li><li><strong>function</strong>(){<strong>returnnew</strong>ActiveXObject(“Msxml3.XMLHTTP”)},</li><li><strong>function</strong>(){<strong>returnnew</strong>ActiveXObject(“Microsoft.XMLHTTP”)}</li><li>];</li><li><strong>var</strong> xhr =<strong>null</strong>;</li><li>//尝试调用函数，如果成功则返回 XMLHttpRequest 对象，否则继续尝试</li><li><strong>for</strong>(<strong>var</strong> i =0; i &lt; XHR.length; i ++){</li><li><strong>try</strong>{</li><li>xhr = XHR<a href="">i</a>;</li><li>}<strong>catch</strong>(e){</li><li><strong>continue</strong>//如果发生异常，则继续下一个函数调用</li><li>}</li><li><strong>break</strong>;//如果成功，则中止循环</li><li>}</li><li><strong>return</strong> xhr;//返回对象实例</li><li>}</li></ol><p>在上面代码中，首先定义一个数组，收集各种创建 XMLHttpRequest 对象的函数。第 1 个函数是标准用法，其他函数主要针对 IE 浏览器的不同版本尝试创建 ActiveX 对象。然后设置变量 xhr 为 null，表示为空对象。接着遍历工厂内所有函数并尝试执行它们，为了避免发生异常，把所有调用函数放在 try 中执行，如果发生错误，则在 catch 中捕获异常并执行 continue 命令，返回继续执行，避免抛出异常。如果创建成功，则中止循环，返回 XMLHttpRequest 对象。</p><h2 id="1-建立连接"><a href="#1-建立连接" class="headerlink" title="1. 建立连接"></a>1. 建立连接</h2><p>在 <a href="http://c.biancheng.net/java/">Java</a>Script 中，使用 XMLHttpRequest 对象的 open() 方法可以建立一个 HTTP 请求。用法如下：<br>xhr.open(method, url, async, username, password);<br>其中 xhr 表示 XMLHttpRequest 对象，open() 方法包含 5 个参数，说明如下：</p><ul><li>method：HTTP 请求方法，必须参数，值包括 POST、GET 和 HEAD，大小写不敏感。</li><li>url：请求的 URL 字符串，必须参数，大部分浏览器仅支持同源请求。</li><li>async：指定请求是否为异步方式，默认为 true。如果为 false，当状态改变时会立即调用 onreadystatechange 属性指定的回调函数。</li><li>username：可选参数，如果服务器需要验证，该参数指定用户名，如果未指定，当服务器需要验证时，会弹出验证窗口。</li><li>password：可选参数，验证信息中的密码部分，如果用户名为空，则该值将被忽略。</li></ul><p>建立连接后，可以使用 send() 方法发送请求。用法如下：<br>xhr.send(body);<br>参数 body 表示将通过该请求发送的数据，如果不传递信息，可以设置为 null 或者省略。</p><p>发送请求后，可以使用 XMLHttpRequest 对象的 responseBody、responseStream、responseText 或 responseXML 属等待接收响应数据。</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p>下面示例简单演示了如何实现异步通信的方法。</p><ol><li><strong>var</strong> xhr =creatXHR();//实例化 XMLHttpRequest 对象</li><li>xhr.open(“GET”,”server.txt”,<strong>false</strong>“); //建立连接</li><li>xhr.send(null); //发送请求</li><li>console.log(xhr.responseText); //接收数据</li></ol><p>在服务器端（server.txt）中输入下面的字符串。</p><ol><li>Hello World //服务器端脚本</li></ol><p>在浏览器控制台会显示“Hello World”的提示信息。该字符串是从服务器端响应的字符串。</p><h2 id="2-发送-GET-请求"><a href="#2-发送-GET-请求" class="headerlink" title="2. 发送 GET 请求"></a>2. 发送 GET 请求</h2><p>在 JavaScript 中，发送 GET 请求简单、方便，适用于简单字符串，不适用于大容量或加密数据。实现方法：将包含查询字符串的 URL 传入 open() 方法，设置第 1 个参数值为 GET 即可。服务器能够通过查询字符串接收用户信息。</p><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><p>下面示例以 GET 方式向服务器传递一条信息 callback=functionName。</p><ol><li><input name="submit" type="button" id="submit" value="向服务器发出请求"/></li><li><script></li><li>window.onload =<strong>function</strong>(){//页面初始化</li><li><strong>var</strong> b = document.getElementsByTagName(“input”)[0];</li><li>b.onclick =<strong>function</strong>(){</li><li><strong>var</strong> url =”server.php?callback=functionName”； //设置查询字符串</li><li><strong>var</strong> xhr =createXHR();//实例化 XMLHttpRequest 对象</li><li>xhr.open(“GET”, url,<strong>false</strong>);//建立连接，要求同步响应</li><li>xhr.send(<strong>null</strong>);//发送请求</li><li>console.log(xhr.responseText);//接收数据</li><li>}</li><li>}</li><li></script></li></ol><p>在服务器端文件（server.php）中输入下面的代码，获取查询字符串中 callback 的参数值，并把该值响应给客户端。</p><ol><li><?php</li><li>echo $_GET[“callback”];</li><li>?&gt;</li></ol><p>在浏览器中预览页面，当单击提交按钮时，在控制台显示传递的参数值。</p><p>查询字符串通过问号?作为前缀附加在 URL 的末尾，发送数据是以连字符&amp;连接的一个或多个名值对。</p><h2 id="3-发送-POST-请求"><a href="#3-发送-POST-请求" class="headerlink" title="3. 发送 POST 请求"></a>3. 发送 POST 请求</h2><p>在 JavaScript 中，POST 请求允许发送任意类型、长度的数据，多用于表单提交，以 send() 方法进行传递，而不以查询字符串的方式进行传递。POST 字符串与 GET 字符串的格式相同。格式如下：<br>send(“name1=value1&amp;name2=value2…”);</p><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><p>使用 POST 方法向服务器传递数据。</p><ol><li>window.onload =<strong>function</strong>(){//页面初始化</li><li><strong>var</strong> b = document.getElementsByTagName(“input”)[0];</li><li>b.onclick =<strong>function</strong>(){</li><li><strong>var</strong> url =”server.php”;//设置请求的地址</li><li><strong>var</strong> xhr =createXHR();//实例化 XMLHttpRequest 对象</li><li>xhr.open(“POST”, url,<strong>false</strong>);//建立连接，要求同步响应</li><li>xhr.setRequestHeader(‘Content-type’,’application/x-www-form-urlencoded’);//设置为表单方式提交</li><li>xhr.send(“callback=functionName”);//发送请求</li><li>console.log(xhr.responseText);//接收数据</li><li>}</li><li>}</li></ol><p>在 open() 方法中，设置第一个参数为 POST，然后使用 setRequestHeader() 方法设置请求消息的内容类型为“application/x-www-form-urlencoded”，它表示传递的是表单值，一般使用 POST 发送请求时都必须设置该选项，否则服务器无法识别传递过来的数据。</p><p>在服务器端设计接收 POST 方式传递的数据，并进行响应。</p><ol><li><?php</li><li>echo $_POST[“callback”];</li><li>?&gt;</li></ol><h2 id="4-串行格式化数据"><a href="#4-串行格式化数据" class="headerlink" title="4. 串行格式化数据"></a>4. 串行格式化数据</h2><p>GET 和 POST 方法都是以名值对的字符串格式发送数据的。</p><h4 id="对象信息"><a href="#对象信息" class="headerlink" title="对象信息"></a>对象信息</h4><p>下面是一个包含 3 个名值对的 JSON 类型数据。</p><ol><li>{ user :”css8”, pass :”123456”, email :”<a href="mailto:&#x63;&#115;&#x73;&#56;&#64;&#49;&#x32;&#51;&#46;&#99;&#110;">&#x63;&#115;&#x73;&#56;&#64;&#49;&#x32;&#51;&#46;&#99;&#110;</a>“}</li></ol><p>将 JSON 数据转换为串行格式化显示如下。</p><ol><li>‘user=”css8” &amp; pass=”123456” &amp; email=”<a href="mailto:&#x63;&#115;&#115;&#56;&#x40;&#49;&#x32;&#51;&#46;&#99;&#x6e;">&#x63;&#115;&#115;&#56;&#x40;&#49;&#x32;&#51;&#46;&#99;&#x6e;</a>“‘</li></ol><h4 id="数组信息"><a href="#数组信息" class="headerlink" title="数组信息"></a>数组信息</h4><p>下面是一组有序的 JSON 信息，包含多个值。</p><ol><li>[{name :”user”, value :”css8”},{name :”pass”, value :”123456”),{name :”email”, value :”<a href="mailto:&#x63;&#115;&#115;&#x38;&#64;&#x31;&#50;&#x33;&#46;&#99;&#x6e;">&#x63;&#115;&#115;&#x38;&#64;&#x31;&#50;&#x33;&#46;&#99;&#x6e;</a>“}]</li></ol><p>将上面数据转换为串行格式显示如下。</p><ol><li>‘user=”css8” &amp; pass=”123456” &amp; email=”<a href="mailto:&#99;&#115;&#115;&#x38;&#64;&#x31;&#x32;&#x33;&#46;&#99;&#110;">&#99;&#115;&#115;&#x38;&#64;&#x31;&#x32;&#x33;&#46;&#99;&#110;</a>“‘</li></ol><p>【示例】为了方便开发，下面定义一个工具函数，该函数能够把数据转换为串行格式化字符串并返回。</p><ol><li>//把 JSON 数据转换为串行字符串</li><li>//参数：data 表示数组或对象类型的数据</li><li>//返回值：串行字符串</li><li><strong>function</strong>JSONtoString(data){</li><li><strong>var</strong> a =[];//临时数组</li><li><strong>if</strong>(data.constructor ==Array){//处理数组</li><li><strong>for</strong>(<strong>var</strong> i =0; i &lt; data.length; i ++){</li><li>a.push(data[i].name +”=”+encodeURIComponent(data[i].value));</li><li>}</li><li>}<strong>else</strong>{//处理对象</li><li><strong>for</strong>(<strong>var</strong> i <strong>in</strong> data){</li><li>a.push(i +”=”+encodeURIComponent(data[i]));</li><li>}</li><li>}</li><li><strong>return</strong> a.join(“&amp;”);//把数组转换为串行字符串，并返回</li><li>}</li></ol><h2 id="5-异步响应状态"><a href="#5-异步响应状态" class="headerlink" title="5. 异步响应状态"></a>5. 异步响应状态</h2><p>在 JavaScript 中，使用 readyState 属性可以实时跟踪异步响应状态。当该属性值发生变化时，会触发 readystatechange 事件，调用绑定的回调函数。readyState 属性值说明如表所示。</p><p>readyState 属性值</p><table><thead><tr><th>返回值</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>未初始化。表示对象已经建立，但是尚未初始化，尚未调用 open() 方法</td></tr><tr><td>1</td><td>初始化。表示对象已经建立，尚未调用 send() 方法</td></tr><tr><td>2</td><td>发送数据。表示 send() 方法已经调用，但是当前的状态及 HTTP 头未知</td></tr><tr><td>3</td><td>数据传送中。已经接收部分数据，因为响应及 HTTP 头不安全，这时通过 responseBody 和 responseText 获取部分数据会出现错误</td></tr><tr><td>4</td><td>完成。数据接收完毕，此时可以通过 responseBody 和 responseText 获取完整的响应数据</td></tr></tbody></table><p>如果 readyState 属性值为 4，则说明响应完毕，那么就可以安全的读取响应的数据。</p><p>考虑到各种特殊情况，更安全的方法是同时监测 HTTP 状态码，只有当 HTTP 状态码为 200 时，才说明 HTTP 响应顺利完成。</p><h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><p>下面示例中，修改请求为异步响应请求，然后通过 status 属性获取当前的 HTTP 状态码。如果 readyState 属性值为 4，且 status（状态码）属性值为 200，则说明 HTTP 请求和响应过程顺利完成，这时可以安全、异步的读取数据。</p><ol><li>window.onload =<strong>function</strong>(){//页面初始化</li><li><strong>var</strong> b = document.getElementsByTagName(“input”)[0];</li><li>b.onclick =<strong>function</strong>(){</li><li><strong>var</strong> url =”server.php”;//设置请求的地址</li><li><strong>var</strong> xhr =createXHR();//实例化 XMLHttpRequest 对象</li><li>xhr.open(“POST”, url,<strong>true</strong>);//建立间接，要求异步响应</li><li>xhr.setRequestHeader(‘Content-type’,’application/x-www-form-urlencoded’);//设置为表单方式提交</li><li>xhr.onreadystatechange =<strong>function</strong>(){//绑定响应状态事件监听函数</li><li><strong>if</strong>(xhr.readyState ==4){//监听 readyState 状态</li><li><strong>if</strong>(xhr.status ==200|| xhr.status ==0){//监听 HTTP 状态码</li><li>console.log(xhr.responseText);//接收数据</li><li>}</li><li>}</li><li>}</li><li>xhr.send(“callback=functionName”);//发送请求</li><li>}</li><li>}</li></ol><h2 id="中止请求"><a href="#中止请求" class="headerlink" title="中止请求"></a>中止请求</h2><p>使用 abort() 方法可以中止正在进行的请求。用法如下：<br>xhr.onreadystatechange = function () {}; //清理事件响应函数<br>xhr.abort(); //中止请求</p><p>在调用 abort() 方法前，应先清除 onreadystatechange 事件处理函数，因为 IE 和 Mozilla 在请求中止后也会激活这个事件处理函数。如果给 onreadystatechange 属性设置为 null，则 IE 会发生异常，所以为它设置一个空函数。</p><h2 id="获取-XML-数据"><a href="#获取-XML-数据" class="headerlink" title="获取 XML 数据"></a>获取 XML 数据</h2><p>XMLHttpRequest 对象通过 responseText、responseBody、responseStream 或 responseXML 属性获取响应信息，说明如下表所示，它们都是只读属性。</p><p>XMLHttpRequest 对象响应信息属性</p><table><thead><tr><th>响应信息</th><th>说明</th></tr></thead><tbody><tr><td>responseBody</td><td>将响应信息正文以 Unsigned Byte 数组形式返回</td></tr><tr><td>responseStream</td><td>以 ADO Stream 对象的形式返回响应信息</td></tr><tr><td>responseText</td><td>将响应信息作为字符串返回</td></tr><tr><td>responseXML</td><td>将响应信息格式化为 XML 文档格式返回</td></tr></tbody></table><p>在实际应用中，一般将格式设置为 XML、HTML、JSON 或其他纯文本格式。具体使用哪种响应格式，可以参考下面几条原则。</p><ul><li>如果向页面中添加大块数据，选择 HTML 格式会比较方便。</li><li>如果需要协作开发，且项目庞杂，选择 XML 格式会更通用。</li><li>如果要检索复杂的数据，且结构复杂，那么选择 JSON 格式更加轻便。</li></ul><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><p>在服务器端创建一个简单的 XML 文档。</p><ol><li><?xml version="1.0" encoding="utf-8"?></li><li><the>XML 数据</the></li></ol><p>然后，在客户端进行如下请求。</p><ol><li><input name="submit" type="button" id="submit" value="向服务器发出请求"/></li><li><script></li><li>window.onload =<strong>function</strong>(){//页面初始化</li><li><strong>var</strong> b = document.getElementsByTagName(“input”)[0];</li><li>b.onclick =<strong>function</strong>(){</li><li><strong>var</strong> xhr =createXHR();//实例化 XMLHttpRequest 对象</li><li>xhr.open(“GET”,”server.xml”,<strong>true</strong>);//建立连接，要求异步响应</li><li>xhr.onreadystatechange =<strong>function</strong>(){//绑定响应状态事件监听函数</li><li><strong>if</strong>(xhr.readyState ==4){//监听 readyState 状态</li><li><strong>if</strong>(xhr.state ==200|| xhr.status ==0){//监听 HTTP 状态码</li><li><strong>var</strong> info = xhr.responseXML;</li><li>console.log(info.getElementsByTagName(“the”)[0].firstChild.data);//返回元信息字符串“XML 数据”</li><li>}</li><li>}</li><li>}</li><li>xhr.send();//发送请求</li><li>}</li><li>}</li><li></script></li></ol><p>在上面代码中，使用 XML DOM 的 getElementsByTagName() 方法获取 the 节点，然后再定位第一个 the 节点的子节点内容。此时如果继续使用 responseText 属性来读取数据，则会返回 XML 源代码字符串。</p><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><p>以示例 1 为例，使用服务器端脚本生成 XML 结构数据。</p><ol><li><?php</li><li>header(‘Content-Type: text/html;’);</li><li>echo ‘<?xml version="1.0" encoding="utf-8"?><the>XML 数据</the>‘;//输出 XML</li><li>?&gt;</li></ol><h2 id="获取-HTML-字符串"><a href="#获取-HTML-字符串" class="headerlink" title="获取 HTML 字符串"></a>获取 HTML 字符串</h2><p>设计响应信息为 HTML 字符串，然后使用 innerHTML 把获取的字符串插入到网页中。</p><h4 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h4><p>在服务器端设计响应信息为 HTML 结构代码。</p><ol><li><table border="1" width="100%"></li><li><tr><td>RegExp.exec()</td><td>通用的匹配模式</td></tr></li><li><tr><td>RegExp.test()</td><td>检测一个字符串是否匹配某个模式</td></tr></li><li></table></li></ol><p>然后在客户端可以这样接收响应信息。</p><ol><li><input name="submit" type="button" id="submit" value="向服务器发出请求"/></li><li><script></li><li>window.onload =<strong>function</strong>(){//页面初始化</li><li><strong>var</strong> b = document.getElementsByTagName(“input”)[0];</li><li>b.onclick =<strong>function</strong>(){</li><li><strong>var</strong> xhr =createXHR();//实例化 XMLHttpRequest 对象</li><li>xhr.open(“GET”,”server.xml”,<strong>true</strong>);//建立连接，要求异步响应</li><li>xhr.onreadystatechange =<strong>function</strong>(){//绑定响应状态事件监听函数</li><li><strong>if</strong>(xhr.readyState ==4){//监听 readyState 状态</li><li><strong>if</strong>(xhr.state ==200|| xhr.status ==0){//监听 HTTP 状态码</li><li><strong>var</strong> o = document.getElementById(“grid”);</li><li>o.innerHTML = xhr.responseText;//直接插入到页面中</li><li>}</li><li>}</li><li>}</li><li>xhr.send();//发送请求</li><li>}</li><li>}</li><li></script></li></ol><p>在某些情况下，HTML 字符串可能为客户端解析响应信息节省了一些 JavaScript 脚本，但是也带来了一些问题。</p><ul><li>响应信息中包含大量无用的字符，响应数据会变得很臃肿。因为 HTML 标记不含有信息，完全可以把它们放置在客户端，由 JavaScript 脚本负责生成。</li><li>响应信息中包含的 HTML 结构无法有效利用，对于 JavaScript 脚本来说，它们仅仅是一堆字符串。同时结构和信息混合在一起，也不符合标准化设计原则。</li></ul><h2 id="获取-JavaScript-脚本"><a href="#获取-JavaScript-脚本" class="headerlink" title="获取 JavaScript 脚本"></a>获取 JavaScript 脚本</h2><p>设计相应为 JavaScript 代码，与 JSON 数据不同，它是可执行的命令或脚本。</p><h4 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h4><p>在服务器端请求文件中包含下面一个函数。</p><ol><li><strong>function</strong>(){</li><li><strong>var</strong> d =<strong>new</strong>Date();</li><li><strong>return</strong> d.toString();</li><li>}</li></ol><p>然后在客户端执行下面的请求。</p><ol><li><input name="submit" type="button" id="submit" value="向服务器发出请求"/></li><li><script></li><li>window.onload =<strong>function</strong>(){//页面初始化</li><li><strong>var</strong> b = document.getElementsByTagName(“input”)[0];</li><li>b.onclick =<strong>function</strong>(){</li><li><strong>var</strong> xhr =createXHR();//实例化 XMLHttpRequest 对象</li><li>xhr.open(“GET”,”server.xml”,<strong>true</strong>);//建立连接，要求异步响应</li><li>xhr.onreadystatechange =<strong>function</strong>(){//绑定响应状态事件监听函数</li><li><strong>if</strong>(xhr.readyState ==4){//监听 readyState 状态</li><li><strong>if</strong>(xhr.state ==200|| xhr.status ==0){//监听 HTTP 状态码</li><li><strong>var</strong> info = xhr.responseText;</li><li><strong>var</strong> o =eval(“(“+ info +”)”+”()”);//用 eval()把字符串转换为脚本</li><li>console.log(o);//返回客户端当前信息</li><li>}</li><li>}</li><li>}</li><li>xhr.send();//发送请求</li><li>}</li><li>}</li><li></script></li></ol><p>使用 eval() 方法时，在字符串前后附加两个小括号：一个是包含函数结构体的，一个是表示调用函数的。不建议直接使用 JavaScript 代码作为响应格式，因为它不能传递更丰富的信息，同时 JavaScript 脚本极易引发安全隐患。</p><h2 id="获取-JSON-数据"><a href="#获取-JSON-数据" class="headerlink" title="获取 JSON 数据"></a>获取 JSON 数据</h2><p>使用 responseText 可以获取 JSON 格式的字符串，然后使用 eval() 方法将其解析为本地 JavaScript 脚本，再从该数据对象中读取信息。</p><h4 id="示例-7"><a href="#示例-7" class="headerlink" title="示例"></a>示例</h4><p>在服务器端请求文件中包含下面 JSON 数据。</p><ol><li>{ user :”css8”, pass :”123456”, email :”<a href="mailto:&#x63;&#115;&#115;&#56;&#x40;&#x31;&#50;&#x33;&#x2e;&#x63;&#110;">&#x63;&#115;&#115;&#56;&#x40;&#x31;&#50;&#x33;&#x2e;&#x63;&#110;</a>“}</li></ol><p>然后在客户端执行下面的请求。把返回 JSON 字符串转换为对象，然后读取属性值。</p><ol><li><input name="submit" type="button" id="submit" value="向服务器发出请求"/></li><li><script></li><li>window.onload =<strong>function</strong>(){//页面初始化</li><li><strong>var</strong> b = document.getElementsByTagName(“input”)[0];</li><li>b.onclick =<strong>function</strong>(){</li><li><strong>var</strong> xhr =createXHR();//实例化 XMLHttpRequest 对象</li><li>xhr.open(“GET”,”server.xml”,<strong>true</strong>);//建立连接，要求异步响应</li><li>xhr.onreadystatechange =<strong>function</strong>(){//绑定响应状态事件监听函数</li><li><strong>if</strong>(xhr.readyState ==4){//监听 readyState 状态</li><li><strong>if</strong>(xhr.state ==200|| xhr.status ==0){//监听 HTTP 状态码</li><li><strong>var</strong> info = xhr.responseText;</li><li><strong>var</strong> o =eval(“(“+ info +”)”);//调用 eval()把字符串转换为本地脚本</li><li>console.log(info);//显示 JSON 对象字符串</li><li>console.log(o.user);//读取对象属性值，返回字符串“css8”</li><li>}</li><li>}</li><li>}</li><li>xhr.send();//发送请求</li><li>}</li><li>}</li><li></script></li></ol><p>eval() 方法在解析 JSON 字符串时存在安全隐患。如果 JSON 字符串中包含恶意代码，在调用回调函数时可能会被执行。解决方法：先对 JSON 字符串进行过滤，屏蔽掉敏感或恶意代码。不过，确信所响应的 JSON 字符串是安全的，没有被人恶意攻击，那么可以使用 eval() 方法解析 JSON 字符串。</p><h2 id="获取纯文本"><a href="#获取纯文本" class="headerlink" title="获取纯文本"></a>获取纯文本</h2><p>对于简短的信息，可以使用纯文本格式进行响应。但是纯文本信息在传递过程中容易丢失，且没有办法检测信息的完整性。</p><h4 id="示例-8"><a href="#示例-8" class="headerlink" title="示例"></a>示例</h4><p>服务器端响应信息为字符串“true”，则可以在客户端这样设计。</p><ol><li><strong>var</strong> xhr =createXHR();//实例化 XMLHttpRequest 对象</li><li>xhr.open(“GET”,”server.txt”,<strong>true</strong>);//建立连接，要求异步响应</li><li>xhr.nreadystatechange =<strong>function</strong>(){//绑定响应状态事件监听函数</li><li><strong>if</strong>(xhr.readyState ==4){//监听 readyState 函数</li><li><strong>if</strong>(xhr.status ==200|| xhr.status ==0){//监听 HTTP 状态码</li><li><strong>var</strong> info = xhr.responseText;</li><li><strong>if</strong>(info ==”true”) console.log(“文本信息传输完整”);//检测信息是否完整</li><li><strong>else</strong> console.log(“文本信息可能存在丢失”);</li><li>}</li><li>}</li><li>}</li><li>xhr.send();//发送请求</li></ol><h2 id="获取和设置头部消息"><a href="#获取和设置头部消息" class="headerlink" title="获取和设置头部消息"></a>获取和设置头部消息</h2><p>HTTP 请求和响应都包含一组头部消息，获取和设置头部消息可以使用下面两个方法。</p><ul><li>getAllResponseHeaders()：获取响应的 HTTP 头部消息。</li><li>getResponseHeader(“Header-name”)：获取指定的 HTTP 头部消息。</li></ul><h4 id="示例-9"><a href="#示例-9" class="headerlink" title="示例"></a>示例</h4><p>下面示例将获取 HTTP 响应的所有头部消息。</p><ol><li><strong>var</strong> xhr =createXHR();</li><li><strong>var</strong> url =”server.txt”;</li><li>xhr.open(“GET”, url,<strong>true</strong>);</li><li>xhr.onreadystatechange =<strong>function</strong>(){</li><li><strong>if</strong>(xhr.readyState ==4&amp;&amp; xhr.status ==200){</li><li>console.log(xhr.getAllResponseHeaders());</li><li>}</li><li>}</li><li>xhr.send(<strong>null</strong>);</li></ol><p>如果要获取指定的某个头部消息，可以使用 getResponseHeader() 方法，参数为获取头部的名称。例如，获取 Content-Type 头部的值，可以这样设计。</p><ol><li>console.log(xhr.getResponseHeader(“Content-Type”));</li></ol><p>除了可以获取这些头部消息外，还可以使用 setResponseHeader() 方法在发送请求中设置各种头部消息。用法如下：</p><ol><li>xhr.setResponseHeader(“Header-name”,”value”);</li></ol><p>其中 Header-name 表示头部消息的名称，value 表示消息的具体值。例如，使用 POST 方法传递表单数据，可以设置如下头部消息。</p><ol><li>xhr.setResponseHeader(“Content-Type”,”application/x-www-form-urlencoded”);</li></ol>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XMLHttpRequest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>transition 过渡动画</title>
      <link href="/2019/04/08/tvwqfm/"/>
      <url>/2019/04/08/tvwqfm/</url>
      
        <content type="html"><![CDATA[<p>在 CSS3 出现之前，动画都是通过 JavaScript 动态的改变元素的样式属性来完成了，这种方式虽然能够实现动画，但是在性能上存在一些问题。CSS3 的出现，让动画变得更加容易，性能也更加好。<br>CSS3 中有三个关于动画的样式属性 transform、transition 和 animation；</p><h2 id="transform"><a href="#transform" class="headerlink" title="transform"></a><strong>transform</strong></h2><p>transform 可以用来设置元素的形状改变，主要有以下几种变形：rotate（旋转）、scale（缩放）、skew（扭曲）、translate（移动）和 matrix（矩阵变形），语法如下：<br>​</p><p>.transform-class { transform ： none | <transform-function> [ <transform-function> ]*}<br>none 表示不做变换；<transform-function>表示一个或多个变化函数，变化函数由函数名和参数组成，参数包含在()里面，用<strong>空格</strong>分开，例如：<br>​</p><p>.transform-class { transform ： rotate(30deg) scale(2,3);}</p><h3 id="transform-origin-基点"><a href="#transform-origin-基点" class="headerlink" title="transform-origin 基点"></a><strong>transform-origin 基点</strong></h3><p>所有的变形都是基于基点，基点默认为元素的中心点。用法：transform-origin: (x, y)，其中 x 和 y 的值可以是百分比、rem 或者是 px 等等，也可以用表示位置的单词来表示例如：x 可以用 left、center、right；y 可以用 top、center、bottom。<br>​</p><p>.transform-class { transform-origin: (left, bottom);}</p><h3 id="rotate-旋转"><a href="#rotate-旋转" class="headerlink" title="rotate 旋转"></a><strong>rotate 旋转</strong></h3><p>用法：rotate(<angle>)；表示通过指定的角度对元素进行旋转变形，如果是正数则顺时针旋转，如果是负数则逆时针旋转，例如：<br>​</p><p>.transform-rotate { transform: rotate(30deg);}<br>​</p><p>transform-rotate.png</p><h3 id="scale-缩放"><a href="#scale-缩放" class="headerlink" title="scale 缩放"></a><strong>scale 缩放</strong></h3><p>它有三种用法：scale(<number>[, <number>])、scaleX(<number>)和 scaleY(<number>)；分别代表水平和垂直方向同时缩放、水平方向的缩放以及垂直方向的缩放，入参代表水平或者垂直方向的缩放比例。缩放比例如果大于 1 则放大，反之则缩小，如果等于 1 代表原始大小。<br>​</p><p>.transform-scale { transform: scale(2,1.5);}.transform-scaleX { transform: scaleX(2);}.transform-scaleY { transform: scaleY(1.5);}<br>​</p><p>transform-scale.png</p><h3 id="translate-移动"><a href="#translate-移动" class="headerlink" title="translate 移动"></a><strong>translate 移动</strong></h3><p>移动也分三种情况：translate(<translation-value>[, <translation-value>])、translateX(<translation-value>)和 translateY(<translation-value>)；分别代表水平和垂直的移动、水平方向的移动以及垂直方向同时移动，移动单位是 CSS 中的长度单位：px、rem 等;<br>​</p><p>.transform-translate { transform: translate(400px, 20px);}.transform-translateX { transform: translateX(300px);}.transform-translateY { transform: translateY(20px);}<br>​</p><p>transform-translate.png</p><h3 id="skew-扭曲"><a href="#skew-扭曲" class="headerlink" title="skew 扭曲"></a><strong>skew 扭曲</strong></h3><p>扭曲同样也有三种情况，skew(<angle>[, <angle>])、skewX(<angle>)和 skewY(<angle>)；同样也是水平和垂直方向同时扭曲、水平方向的扭曲以及垂直方向的扭曲，单位为角度。<br>​</p><p>.transform-skew { transform: skew(30deg, 10deg);}.transform-skewX { transform: skewX(30deg);}.transform-skewY { transform: skewY(10deg);}<br>​</p><p>transform-skew.png</p><h3 id="matrix"><a href="#matrix" class="headerlink" title="matrix"></a><strong>matrix</strong></h3><p>矩阵变形相对来说非常复杂，涉及到数学中的矩阵计算，有兴趣的同学可以研究一下：<a href="http://www.tuicool.com/articles/na6jy2">CSS3 Transform Matrix</a></p><h2 id="transition"><a href="#transition" class="headerlink" title="transition"></a><strong>transition</strong></h2><p>transition 是用来设置样式的属性值是如何从从一种状态变平滑过渡到另外一种状态，它有四个属性：<br>· transition-property（变换的属性，即那种形式的变换：大小、位置、扭曲等）；<br>· transition-duration（变换延续的时间）；<br>· transition-timing-function（变换的速率）<br>· transition-delay（变换的延时）<br>​</p><p>.transition-class { transition ： [&lt;’transition-property’&gt; || &lt;’transition-duration’&gt; || &lt;’transition-timing-function’&gt; || &lt;’transition-delay’&gt; [, [&lt;’transition-property’&gt; || &lt;’transition-duration’&gt; || &lt;’transition-timing-function’&gt; || &lt;’transition-delay’&gt;]]*;}</p><h3 id="transition-property"><a href="#transition-property" class="headerlink" title="transition-property"></a><strong>transition-property</strong></h3><p>它是用来设置哪些属性的改变会有这种平滑过渡的效果，主要有以下值：<br>· none；<br>· all；<br>· 元素属性名：<br>o color；<br>o length；<br>o visibility；<br>o …<br>​</p><p>.transition-property { transition-property ： none | all | [ <IDENT> ] [ ‘,’ <IDENT> ]*;}</p><h3 id="transition-duration"><a href="#transition-duration" class="headerlink" title="transition-duration"></a><strong>transition-duration</strong></h3><p>它是用来设置转换过程的持续时间，单位是 s 或者 ms，默认值为 0；<br>​</p><p>.transition-duration { transition-duration ： <time> [, <time>]* ;}</p><h3 id="transition-timing-function"><a href="#transition-timing-function" class="headerlink" title="transition-timing-function"></a><strong>transition-timing-function</strong></h3><p>它是来设置过渡效果的速率，它有 6 种形式的速率：<br>· ease：逐渐变慢（默认），等同于贝塞尔曲线(0.25, 0.1, 0.25, 1.0)；<br>· linear：匀速，等同于贝塞尔曲线(0.0, 0.0, 1.0, 1.0)；<br>· ease-in：加速，等同于贝塞尔曲线(0.42, 0, 1.0, 1.0)；<br>· ease-out：减速，等同于贝塞尔曲线(0, 0, 0.58, 1.0)；<br>· ease-in-out：先加速后减速，等同于贝塞尔曲线(0.42, 0, 0.58, 1.0)；<br>· cubic-bezier：自定义贝塞尔曲线。<br>​</p><p>.transition-timing { transition-timing-function ： ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(<number>, <number>, <number>, <number>) [, ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(<number>, <number>, <number>, <number>)]*;}</p><h4 id="贝塞尔曲线"><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a><strong>贝塞尔曲线</strong></h4><h3 id="transition-delay"><a href="#transition-delay" class="headerlink" title="transition-delay"></a><strong>transition-delay</strong></h3><p>它是来设置过渡动画开始执行的时间，单位是 s 或者 ms，默认值为 0；<br>​</p><p>.transition-delay { transition-delay ： <time> [, <time>]*;}</p><h3 id="transition-1"><a href="#transition-1" class="headerlink" title="**transition **"></a>**transition **</h3><p>它是 transition-property、transition-duration、transition-timing-function、transition-delay 的简写：<br>​</p><p>.transition { transition ：<property> <duration> <timing function> <delay>;}</p><h2 id="animation"><a href="#animation" class="headerlink" title="animation"></a><strong>animation</strong></h2><p>animation 比较类似于 flash 中的<strong>逐帧动画</strong>，逐帧动画就像电影的播放一样，表现非常细腻并且有非常大的灵活性。然而 transition 只是指定了开始和结束态，整个动画的过程也是由特定的函数控制。学习过 flash 的同学知道，这种逐帧动画是由<strong>关键帧</strong>组成，很多个关键帧连续的播放就组成了动画，在 CSS3 中是由属性 keyframes 来完成逐帧动画的。</p><h3 id="keyframes"><a href="#keyframes" class="headerlink" title="@keyframes"></a><strong>@keyframes</strong></h3><p>​</p><p>@keyframes animationName { from { properties: value; } percentage { properties: value; } to { properties: value; }}//or@keyframes animationName { 0% { properties: value; } percentage { properties: value; } 100% { properties: value; }}<br>· animationName：动画名称，开发人员自己命名；<br>· percentage：为百分比值，可以添加多个百分比值；<br>· properties：样式属性名称，例如：color、left、width 等等。</p><h3 id="animation-name"><a href="#animation-name" class="headerlink" title="animation-name"></a><strong>animation-name</strong></h3><p>它是用来设置动画的名称，可以同时赋值多个动画名称，用,隔开：<br>​</p><p>.animation { animation-name: none | IDENT[,none | IDENT]*;}</p><h3 id="animation-duration"><a href="#animation-duration" class="headerlink" title="animation-duration"></a><strong>animation-duration</strong></h3><p>它是用来设置动画的持续时间，单位为 s，默认值为 0：<br>​</p><p>.animation { animation-duration: <time>[,<time>]*;}</p><h3 id="animation-timing-function"><a href="#animation-timing-function" class="headerlink" title="animation-timing-function"></a><strong>animation-timing-function</strong></h3><p>和 transition-timing-function 类似：<br>​</p><p>.animation { animation-timing-function:ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(<number>, <number>, <number>, <number>) [, ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(<number>, <number>, <number>, <number>)]*;}</p><h3 id="animation-delay"><a href="#animation-delay" class="headerlink" title="animation-delay"></a><strong>animation-delay</strong></h3><p>它是来设置动画的开始时间，单位是 s 或者 ms，默认值为 0：<br>​</p><p>.animation { animation-delay: <time>[,<time>]*;}</p><h3 id="animation-iteration-count"><a href="#animation-iteration-count" class="headerlink" title="animation-iteration-count"></a><strong>animation-iteration-count</strong></h3><p>它是来设置动画循环的次数，默认为 1，infinite 为无限次数的循环：<br>​</p><p>.animation { animation-iteration-count:infinite | <number> [, infinite | <number>]*;}</p><h3 id="animation-direction"><a href="#animation-direction" class="headerlink" title="animation-direction"></a><strong>animation-direction</strong></h3><p>它是来设置动画播放的方向，默认值为 normal 表示向前播放，alternate 代表动画播放在第偶数次向前播放，第奇数次向反方向播放：<br>​</p><p>.animation { animation-direction: normal | alternate [, normal | alternate]*;}</p><h3 id="animation-play-state"><a href="#animation-play-state" class="headerlink" title="animation-play-state"></a><strong>animation-play-state</strong></h3><p>它主要是来控制动画的播放状态：running 代表播放，而 paused 代表停止播放，running 为默认值：<br>​</p><p>.animation { animation-play-state:running | paused [, running | paused]*;}</p><h3 id="animation-1"><a href="#animation-1" class="headerlink" title="animation"></a><strong>animation</strong></h3><p>它是 animation-name、animation-duration、animation-timing-function、animation-delay、animation-iteration-count、animation-direction 的简写：<br>​</p><p>.animation { animation:[<animation-name> || <animation-duration> || <animation-timing-function> || <animation-delay> || <animation-iteration-count> || <animation-direction>] [, [<animation-name> || <animation-duration> || <animation-timing-function> || <animation-delay> || <animation-iteration-count> || <animation-direction>] ]*;}</p>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> transition </tag>
            
            <tag> 过渡动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>meta标签</title>
      <link href="/2019/04/05/yfd4qf/"/>
      <url>/2019/04/05/yfd4qf/</url>
      
        <content type="html"><![CDATA[<p>meta 标签是 html 标记语言 head 区一个非常有用的一个辅助性标签，在所有网页中都可以看到以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><p>这些代码可有可无，其实利用好了，大有用途！会带带意想不到的效果，比如加入关键词被搜索引擎自动搜集，增加网站的曝光度及提高网站的排名，可以设定页面的格式及刷新等。</p><h3 id="meta-标签的组成"><a href="#meta-标签的组成" class="headerlink" title="meta 标签的组成"></a>meta 标签的组成</h3><p>meta 标签共有两个属性：</p><ul><li><ol><li>http-equiv 属性</li></ol></li><li><ol start="2"><li> name 属性</li></ol></li></ul><p>不同的属性又有不同的参数值，这些不同的参数值就实现了不同的网页功能。</p><h3 id="http-equiv-属性"><a href="#http-equiv-属性" class="headerlink" title="http-equiv 属性"></a>http-equiv 属性</h3><p>http-equiv 顾名思义，相当于 http 的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确和精确地显示网页内容，与之对应的属性值为 content，content 中的内容其实就是各个参数的变量值。<br>meta 标签的 http-equiv 属性语法格式是： ＜ meta http-equiv=”参数” content=”参数变量值”＞</p><h3 id="其中-http-equiv-属性主要有以下几种参数："><a href="#其中-http-equiv-属性主要有以下几种参数：" class="headerlink" title="其中 http-equiv 属性主要有以下几种参数："></a>其中 http-equiv 属性主要有以下几种参数：</h3><ul><li>1.&lt;meta http-equiv=”Set-Cookie” content=”cookievalue=xxx; expires=Friday,12-Jan-2001 18:18:18 GMT; path=/”&gt;:如果网页过期，那么存盘的 cookie 将被删除。必须使用 GMT 的时间格式。</li><li>2.<meta http-equiv='expires' content='时间' >：用于设定网页的到期时间。一旦网页过期，必须到服务器上重新传输。</li><li>3.<meta http-equiv=”Refresh” content=”5;URL”>：告诉浏览器在【数字】秒后跳转到【一个网址】</li><li>4.<meta http-equiv=”content-Type” content=”textml; charset=utf-8″>：设定页面使用的字符集。</li><li><meta charset=”utf-8″>：在HTML5中设定字符集的简写写法。</li><li>5.<meta http-equiv=”Pragma” content=”no-cache”>：禁止浏览器从本地计算机的缓存中访问页面内容。访问者将无法脱机浏览。</li><li>6.<meta http-equiv=”Window-target” content=”_top”>：用来防止别人在 iframe(框架)里调用自己的页面，这也算是一个非常实用的属性。</li><li>7.<meta http-equiv='X-UA-Compatible' content='IE=edge,chrome=1'> :强制浏览器按照特定的版本标准进行渲染。但不支持 IE7 及以下版本。如果是 ie 浏览器就用最新的 ie 渲染，如果是双核浏览器就用 chrome 内核。</li></ul><p>name 属性<br>主要用于描述网页，与之对应的属性值为 content，content 中的内容主要是便于搜索引擎机器人查找信息和分类信息用的。<br>meat 标签的 name 属性语法格式是： ＜ meta name=”参数” content=”具体的参数值”＞</p><h3 id="其中-name-属性主要有以下几种参数："><a href="#其中-name-属性主要有以下几种参数：" class="headerlink" title="其中 name 属性主要有以下几种参数："></a>其中 name 属性主要有以下几种参数：</h3><p>name 属性主要用于描述网页，与之对应的属性值为 content，content 中的内容主要是便于搜索引擎机器人查找信息和分类信息用的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">meat标签的name属性语法格式是：</span><br><span class="line">＜meta name=”参数” content=”具体的参数值”＞</span><br></pre></td></tr></table></figure><p>其中 name 属性主要有以下几种参数：</p><ul><li>1.&lt;meta name=”viewport” content=”width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no”&gt;：在移动设备浏览器上，禁用缩放（zooming）功能，用户只能滚动屏幕。</li><li>2.<meta name=”description” content=””>：告诉搜索引擎，当前页面的主要内容是 xxx。</li><li>3.<meta name=”keywords” content=””>：告诉搜索引擎，当前页面的关键字。</li><li>4.<meta name=”author” content=””>：告诉搜索引擎，标注网站作者是谁。</li><li>5.<meta name=”copyright” content=””>：标注网站的版权信息。</li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> meta标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>link和@import的区别</title>
      <link href="/2019/04/03/otdnhf/"/>
      <url>/2019/04/03/otdnhf/</url>
      
        <content type="html"><![CDATA[<p><strong>外部引用 CSS 中 link 与@import 的区别</strong><br>这两天刚写完 XHTML 加载 CSS 的几种方式，其中外部引用 CSS 分为两种方式 link 和@import。<br>本质上，这两种方式都是为了加载 CSS 文件，但还是存在着细微的差别。<br><strong>差别 1</strong>：老祖宗的差别。link 属于 XHTML 标签，而@import 完全是 CSS 提供的一种方式。<br>link 标签除了可以加载 CSS 外，还可以做很多其它的事情，比如定义 RSS，定义 rel 连接属性等，@import 就只能加载 CSS 了。<br><strong>差别 2</strong>：加载顺序的差别。当一个页面被加载的时候（就是被浏览者浏览的时候），link 引用的 CSS 会同时被加载，而@import 引用的 CSS 会等到页面全部被下载完再被加载。所以有时候浏览@import 加载 CSS 的页面时开始会没有样式（就是闪烁），网速慢的时候还挺明显（梦之都加载 CSS 的方式就是使用@import，我一边下载一边浏览梦之都网页时，就会出现上述问题）。<br><strong>差别 3</strong>：兼容性的差别。由于@import 是 CSS2.1 提出的所以老的浏览器不支持，@import 只有在 IE5 以上的才能识别，而 link 标签无此问题。<br><strong>差别 4</strong>：使用 dom 控制样式时的差别。当使用 javascript 控制 dom 去改变样式的时候，只能使用 link 标签，因为@import 不是 dom 可以控制的。</p>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> link </tag>
            
            <tag> @import </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>geolocation</title>
      <link href="/2019/04/02/lkdzm3/"/>
      <url>/2019/04/02/lkdzm3/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><strong>Geolocation</strong> 接口是一个用来获取设备地理位置的可编程的对象，它可以让 Web 内容访问到设备的地理位置，这将允许 Web 应用基于用户的地理位置提供定制的信息。说实话：其实<strong>Geolocation</strong> 就是用来获取到当前设备的经纬度（位置）</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Geolocation/getCurrentPosition">navigator.geolocaiton.getCurrentPosition()</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Geolocation/watchPosition">navigator.geolocaiton.watchPostition()</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Geolocation/clearWatch">navigator.geolocaiton.clearWatch()</a></li></ul><h2 id="获取地址坐标"><a href="#获取地址坐标" class="headerlink" title="获取地址坐标"></a>获取地址坐标</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: gaocaipeng</span></span><br><span class="line"><span class="comment"> * @Date: 2021-09-18 09:37:31</span></span><br><span class="line"><span class="comment"> * @Last Modified by:   gaocaipeng</span></span><br><span class="line"><span class="comment"> * @Last Modified time: 2021-09-18 09:37:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">window</span>.geoLocation = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Location</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.geolocation = <span class="literal">null</span>;</span><br><span class="line">      <span class="built_in">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (navigator.geolocation) &#123;</span><br><span class="line">        <span class="built_in">this</span>.geolocation = <span class="built_in">window</span>.navigator.geolocation;</span><br><span class="line">        <span class="built_in">this</span>.getCurrentLocation();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">handlerSuccess</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(position.coords.latitude, position.coords.longitude);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">handlerFaild</span>(<span class="params">&#123; code &#125;</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> msg = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">          msg = <span class="string">&quot;用户拒绝了位置服务&quot;</span>;</span><br><span class="line">          alert(msg);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          msg = <span class="string">&quot;获取不到位置信息&quot;</span>;</span><br><span class="line">          alert(msg);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">          msg = <span class="string">&quot;获取信息超时&quot;</span>;</span><br><span class="line">          alert(msg);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getCurrentLocation</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.geolocation.getCurrentPosition(</span><br><span class="line">        <span class="built_in">this</span>.handlerSuccess,</span><br><span class="line">        <span class="built_in">this</span>.handlerSuccess</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Location();</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(geoLocation);</span><br></pre></td></tr></table></figure><h2 id="项目地址："><a href="#项目地址：" class="headerlink" title="项目地址："></a>项目地址：</h2><p>请访问：<a href="https://github.com/76351506/geolocaiton">https://github.com/76351506/geolocaiton</a></p>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> geolocation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>h5 - 1像素的处理</title>
      <link href="/2019/04/02/tdfvi7/"/>
      <url>/2019/04/02/tdfvi7/</url>
      
        <content type="html"><![CDATA[<h2 id="css-中的-1px-并不等于设备的-1px"><a href="#css-中的-1px-并不等于设备的-1px" class="headerlink" title="css 中的 1px 并不等于设备的 1px"></a>css 中的 1px 并不等于设备的 1px</h2><p>在 css 中我们一般使用 px 作为单位，在浏览器中 css 的 1 个像素往往对应着电脑屏幕的 1 个物理像素，这可能会造成我们的一个错觉，那就是 css 中的像素就是设备的物理像素。但实际情况并非如此，css 中的像素只是一个抽象的单位，在不同环境中，css 中的 1px 代表的设备物理像素是不同的。</p><h2 id="移动端-1px-变粗的原因"><a href="#移动端-1px-变粗的原因" class="headerlink" title="移动端 1px 变粗的原因"></a>移动端 1px 变粗的原因</h2><p>为什么移动端 css 里面写了 1px，实际看起来却比 1px 要粗？这里是因为 ‘px’ 的含义不一样<br>移动端 html 的 head 标签中总会有这样一段代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>这句话定义了本页面的<strong>viewport</strong>的宽度为设备宽度,初始缩放值和最大缩放值都为 1,并禁止了用户缩放. viewport 通俗的讲是浏览器上可用来显示页面的区域, 这个区域是可能比屏幕大的<br>有一个因素也会引起 css 中 px 的变化，那就是用户缩放。例如，当用户把页面放大一倍，那么 css 中 1px 所代表的物理像素也会增加一倍；反之把页面缩小一倍，css 中 1px 所代表的物理像素也会减少一倍。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li><strong>用小数点些 px 的值</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.border &#123; <span class="attr">border</span>: 1px solid #<span class="number">999</span> &#125;</span><br><span class="line">@media screen and (-webkit-min-device-pixel-ratio: <span class="number">2</span>) &#123;</span><br><span class="line">    .border &#123; <span class="attr">border</span>: <span class="number">0.</span>5px solid #<span class="number">999</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>background 渐变</strong></li></ol><p>背景渐变, 渐变在透明色和边框色中间分割, frozenUI 用的就是这种方法, 借用它的上边框写法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (-webkit-min-device-pixel-ratio: <span class="number">2</span>)&#123;</span><br><span class="line">    .ui-border-t &#123;</span><br><span class="line">        background-position: left top;</span><br><span class="line">        background-image: -webkit-gradient(linear,left bottom,left top,color-stop(<span class="number">0.5</span>,transparent),color-stop(<span class="number">0.5</span>,#e0e0e0),to(#e0e0e0));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>使用 transform 实现</strong></li></ol><p>在移动端中，我们对宽度 100%，1px 的线进行改造，将其宽度设为 200%，高度不变，之后使用 transform 对其缩放 50%。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.line&#123;</span><br><span class="line">    <span class="attr">width</span>:<span class="number">200</span>% ;</span><br><span class="line">    height:1px ;</span><br><span class="line">    transform:scale(<span class="number">.5</span>) ;</span><br><span class="line">    -ms-transform:scale(<span class="number">.5</span>) ;</span><br><span class="line">    -o-transform:scale(<span class="number">.5</span>) ;</span><br><span class="line">    -webkit-transform:scale(<span class="number">.5</span>) ;</span><br><span class="line">    -moz-transform:scale(<span class="number">.5</span>) ;</span><br><span class="line">    transform-origin:top left ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>利用 box-shadow</strong>也可模拟 1px 细线边框，但缺点是颜色不好控制</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    -webkit-box-shadow: <span class="number">0</span> 1px 1px -1px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> h5 - 1像素的处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - 数据劫持</title>
      <link href="/2019/04/01/ex1a3p/"/>
      <url>/2019/04/01/ex1a3p/</url>
      
        <content type="html"><![CDATA[<p>用于对象定义属性，修改和获取属性值。<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1609157527615-0b87c3d3-9887-4dbe-9c7a-46ecb6f35d10.webp#id=pbk2R&originHeight=1092&originWidth=1200&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h5 id="对象的定义与赋值"><a href="#对象的定义与赋值" class="headerlink" title="对象的定义与赋值"></a>对象的定义与赋值</h5><p>经常使用的定义与赋值方法 obj.prop =value 或者 obj[‘prop’]=value</p><h5 id="Object-defineProperty-语法说明"><a href="#Object-defineProperty-语法说明" class="headerlink" title="Object.defineProperty()语法说明"></a>Object.defineProperty()语法说明</h5><p>Object.defineProperty()的作用就是直接在一个对象上定义一个新属性，或者修改一个已经存在的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj, prop, desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj 需要定义属性的当前对象</span></span><br><span class="line"><span class="comment">// prop 当前需要定义的对象键</span></span><br><span class="line"><span class="comment">// desc 属性描述符</span></span><br></pre></td></tr></table></figure><p>一般通过为对象的属性赋值的情况下，对象的属性可以修改也可以删除，但是通过 Object.defineProperty()定义属性，通过描述符的设置可以进行更精准的控制对象属性。<br>desc 属性描述符：</p><ul><li>value<ul><li>定义属性的值，对象没有这个属性会添加。</li></ul></li><li>writable<ul><li>默认为 false，表示该属性不能被修改；true 表示可以修改。</li></ul></li><li>configuable<ul><li>默认为 false，不可删除</li><li>属性是否可以删除。</li><li>属性的特性在第一次定义完后可否被重新定义特性。</li></ul></li><li>get<ul><li>function 获取属性值时调用</li></ul></li><li>set<ul><li>function 设置属性值时调用</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">let</span> inter = obj[key];</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">      <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;obj get &quot;</span> + key + <span class="string">&quot; = &quot;</span> + inter);</span><br><span class="line">        <span class="keyword">return</span> inter;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">        inter = value;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`obj set <span class="subst">$&#123;key&#125;</span> = <span class="subst">$&#123;inter&#125;</span>`</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line">convert(obj);</span><br><span class="line">obj.a = <span class="number">456</span>; <span class="comment">// obj set a = 456</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.c); <span class="comment">// obj get c = 3，3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">sex</span>: <span class="string">&quot;nan&quot;</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj2); <span class="comment">// &#123; name: &#x27;zs&#x27;, age: 20, sex: &#x27;nan&#x27; &#125;</span></span><br><span class="line">convert(obj2);</span><br><span class="line">obj2.a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br><span class="line"><span class="comment">// &#123;name: [Getter/Setter],age: [Getter/Setter],sex: [Getter/Setter],a: 1&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.age); <span class="comment">// obj get age = 20  ，  20</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.a); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据劫持 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - 运算符</title>
      <link href="/2019/03/26/girdnz/"/>
      <url>/2019/03/26/girdnz/</url>
      
        <content type="html"><![CDATA[<p>javascript 运算符<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1611624620564-95c94b1f-3eb0-4972-bebe-c0ba4d8cf5a0.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"></p><ul><li>条件运算符<ul><li>三目运算符 （三元表达式）</li></ul></li><li>逻辑运算符<ul><li>&amp;</li><li>!!</li><li>!</li></ul></li><li>位运算符<ul><li>&amp;</li><li>｜</li><li>～</li><li>^</li><li>&lt;&lt;</li><li><blockquote><blockquote></blockquote></blockquote></li></ul></li><li>比较运算符<ul><li>== 带隐式转换</li><li>=== 不带隐式转换</li><li>!= 带隐式转换的不等于</li><li>!== 不带隐式转换的不等于</li><li><blockquote></blockquote></li><li>&lt;</li><li><blockquote><p>=</p></blockquote></li><li>&lt;=</li></ul></li><li>算术运算符<ul><li>-</li><li>-</li><li>-</li><li>/</li><li>%</li><li>++</li></ul><hr></li><li>赋值运算符<ul><li>=</li><li>+=</li><li>-=</li><li>*=</li><li>/=</li><li>%=</li></ul></li><li>字符串运算符 （任何数据类型与“”相加，类型都是字符串）<ul><li><ul><li>通过+连接两个字符串</li></ul></li><li>+=</li></ul></li><li>转义字符</li></ul><p>\o NUL 字符 \b 退格符 \t 水平制表符 \n 换行符 \v 垂直制表符 \f 换页符 \r 回车符 &quot; 双引号 &#39; 单引号 \ 反斜线。 \xXX 由连我给十六进制数 xx 指定的 Latin-1 字符 ]uxxXX 由 4 位十六进制 xxxx 指定的 Unicode 字符</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - 数据存储</title>
      <link href="/2019/03/19/xc4tuv/"/>
      <url>/2019/03/19/xc4tuv/</url>
      
        <content type="html"><![CDATA[<h2 id="localStorage-amp-amp-sessionStorage-amp-amp-cookie-amp-amp-indexDB"><a href="#localStorage-amp-amp-sessionStorage-amp-amp-cookie-amp-amp-indexDB" class="headerlink" title="localStorage &amp;&amp; sessionStorage &amp;&amp; cookie &amp;&amp; indexDB"></a>localStorage &amp;&amp; sessionStorage &amp;&amp; cookie &amp;&amp; indexDB</h2><p>本地存储用户的浏览数据。早些时候,本地存储使用的是 cookie。但是 Web 存储需要更加的安全与快速. 这些数据不会被保存在服务器上，但是这些数据只用于用户请求网站数据上.它也可以存储大量的数据，而不影响网站的性能数据以 键/值 对存在, web 网页的数据只允许该网页访问使用。</p><h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><p>Cookie，有时也用其复数形式 <a href="https://baike.baidu.com/item/Cookies/187064">Cookies</a>。类型为“<strong>小型文本文件</strong>”，是某些网站为了辨别用户身份，进行<a href="https://baike.baidu.com/item/Session/479100">Session</a>跟踪而储存在用户本地终端上的数据（通常经过加密），由用户<a href="https://baike.baidu.com/item/%E5%AE%A2%E6%88%B7%E7%AB%AF/101081">客户端</a>计算机暂时或永久保存的信息。<br>JavaScript 可以使用 <strong>document.cookie</strong> 属性来创建 、读取、及删除 cookie。<br>Cookie 可以存储 4kb。<br>JavaScript 中，创建 cookie 如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&quot;username=John Doe&quot;</span>;</span><br></pre></td></tr></table></figure><p>您还可以为 cookie 添加一个过期时间（以 UTC 或 GMT 时间）。默认情况下，cookie 在浏览器关闭时删除：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&quot;username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT&quot;</span>;</span><br></pre></td></tr></table></figure><p>您可以使用 path 参数告诉浏览器 cookie 的路径。默认情况下，cookie 属于当前页面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie =</span><br><span class="line">  <span class="string">&quot;username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/&quot;</span>;</span><br></pre></td></tr></table></figure><h1 id="web-存储"><a href="#web-存储" class="headerlink" title="web 存储"></a>web 存储</h1><p>客户端存储数据的两个对象为：</p><ul><li>localStorage - 用于长久保存整个网站的数据，保存的数据没有过期时间，直到手动去除。</li><li>sessionStorage - 用于临时保存同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据。</li></ul><h2 id="localStorage-对象"><a href="#localStorage-对象" class="headerlink" title="localStorage 对象"></a>localStorage 对象</h2><p>localStorage 对象存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">localStorage</span>.getItem(key); <span class="comment">//获取</span></span><br><span class="line"><span class="built_in">localStorage</span>.setItem(key, value); <span class="comment">//添加</span></span><br><span class="line"><span class="built_in">localStorage</span>.removeItem(key); <span class="comment">//删除</span></span><br><span class="line"><span class="built_in">localStorage</span>.clear(); <span class="comment">//删除全部</span></span><br></pre></td></tr></table></figure><h2 id="sessionStorage-对象"><a href="#sessionStorage-对象" class="headerlink" title="sessionStorage 对象"></a>sessionStorage 对象</h2><p>sessionStorage 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.getItem(key); <span class="comment">//获取</span></span><br><span class="line">sessionStorage.setItem(key, value); <span class="comment">//添加</span></span><br><span class="line">sessionStorage.removeItem(key); <span class="comment">//删除</span></span><br><span class="line">sessionStorage.clear(); <span class="comment">//删除全部</span></span><br></pre></td></tr></table></figure><h2 id="indexDB"><a href="#indexDB" class="headerlink" title="indexDB"></a>indexDB</h2><p>随着浏览器的功能不断增强，越来越多的网站开始考虑，将大量数据储存在客户端，这样可以减少从服务器获取数据，直接从本地获取数据。<br>通俗地讲，IndexedDB 就是浏览器提供的本地数据库，它可以被网页脚本创建和操作。IndexedDB 允许储存大量数据，提供查找接口，还能建立索引。这些都是 LocalStorage 所不具备的。就数据库类型而言，IndexedDB 不属于关系型数据库（不支持 SQL 查询语句），更接近 NoSQL 数据库。</p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ul><li>创建/打开数据库。</li><li>在数据库中创建一个对象仓库（object store）。</li><li>启动一个事务，并发送一个请求来执行一些数据库操作，像增加或提取数据等。</li><li>通过监听正确类型的 DOM 事件以等待操作完成。</li><li>在操作结果上进行一些操作（可以在 request 对象中找到）</li></ul><h3 id="打开数据库"><a href="#打开数据库" class="headerlink" title="打开数据库"></a>打开数据库</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">window</span>.indexedDB.open(<span class="string">&quot;MyTestDatabase&quot;</span>);</span><br><span class="line">request.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 错误处理</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot; 打开数据库报错&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 成功处理</span></span><br><span class="line">  db = event.target.result;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;打开数据库成功&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="创建和更新数据库版本号"><a href="#创建和更新数据库版本号" class="headerlink" title="创建和更新数据库版本号"></a>创建和更新数据库版本号</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = <span class="literal">null</span>;</span><br><span class="line">request.onupgradeneeded = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  db = event.target.result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h3><p>新建数据库与打开数据库是同一个操作。如果指定的数据库不存在，就会新建。不同之处在于，后续的操作主要在 upgradeneeded 事件的监听函数里面完成，因为这时版本从无到有，所以会触发这个事件。<br>通常，新建数据库以后，第一件事是新建对象仓库（即新建表）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">request.onupgradeneeded = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  db = event.target.result;</span><br><span class="line">  <span class="keyword">var</span> objectStore = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (!db.objectStoreNames.contains(<span class="string">&quot;imgLists&quot;</span>)) &#123;</span><br><span class="line">    objectStore = db.createObjectStore(<span class="string">&quot;imgLists&quot;</span>, &#123; <span class="attr">keyPath</span>: <span class="string">&quot;id&quot;</span> &#125;);</span><br><span class="line">    <span class="comment">// unique name可能会重复</span></span><br><span class="line">    objectStore.createIndex(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;name&quot;</span>, &#123; <span class="attr">unique</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h3><p>新增数据指的是向对象仓库写入数据记录。这需要通过事务完成。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new 一个blob对象</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">hello</span>: <span class="string">&quot;world&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([<span class="built_in">JSON</span>.stringify(obj1, <span class="literal">null</span>, <span class="number">2</span>)], &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> request = db</span><br><span class="line">    .transaction([<span class="string">&quot;imgLists&quot;</span>], <span class="string">&quot;readwrite&quot;</span>)</span><br><span class="line">    .objectStore(<span class="string">&quot;imgLists&quot;</span>)</span><br><span class="line">    .add(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;图片1&quot;</span>, <span class="attr">path</span>: <span class="string">&quot;/static/image&quot;</span>, <span class="attr">blob</span>: blob &#125;);</span><br><span class="line"></span><br><span class="line">  request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;数据写入成功&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  request.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;数据写入失败&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p>查询数据也是通过事物完成。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> transaction = db.transaction([<span class="string">&quot;imgLists&quot;</span>]);</span><br><span class="line">  <span class="keyword">var</span> objectStore = transaction.objectStore(<span class="string">&quot;imgLists&quot;</span>);</span><br><span class="line">  <span class="comment">// 用户读取数据，参数是主键</span></span><br><span class="line">  <span class="keyword">var</span> request = objectStore.get(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  request.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;事务失败&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (request.result) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(request.result);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;未获得数据记录&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历数据"><a href="#遍历数据" class="headerlink" title="遍历数据"></a>遍历数据</h3><p>遍历数据表格的所有记录，要使用指针对象 IDBCursor。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> objectStore = db.transaction(<span class="string">&quot;imgLists&quot;</span>).objectStore(<span class="string">&quot;imgLists&quot;</span>);</span><br><span class="line"></span><br><span class="line">  objectStore.openCursor().onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cursor = event.target.result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cursor) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(cursor);</span><br><span class="line">      cursor.continue();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;没有更多数据了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> request = db</span><br><span class="line">    .transaction([<span class="string">&quot;imgLists&quot;</span>], <span class="string">&quot;readwrite&quot;</span>)</span><br><span class="line">    .objectStore(<span class="string">&quot;imgLists&quot;</span>)</span><br><span class="line">    <span class="comment">// 主动更新主键为1</span></span><br><span class="line">    .put(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;图片2&quot;</span>, <span class="attr">path</span>: <span class="string">&quot;/static/image2&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">  request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;数据更新成功&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  request.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;数据更新失败&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> request = db</span><br><span class="line">    .transaction([<span class="string">&quot;imgLists&quot;</span>], <span class="string">&quot;readwrite&quot;</span>)</span><br><span class="line">    .objectStore(<span class="string">&quot;imgLists&quot;</span>)</span><br><span class="line">    .delete(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;数据删除成功&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">remove();</span><br></pre></td></tr></table></figure><h3 id="创建-使用索引"><a href="#创建-使用索引" class="headerlink" title="创建/使用索引"></a>创建/使用索引</h3><p>索引的意义在于，可以让你搜索任意字段，也就是说从任意字段拿到数据记录。如果不建立索引，默认只能搜索主键（即从主键取值）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// objectStore.createIndex(&#x27;name&#x27;, &#x27;name&#x27;, &#123; unique: false &#125;);</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findIndex</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> transaction = db.transaction([<span class="string">&quot;imgLists&quot;</span>], <span class="string">&quot;readonly&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> store = transaction.objectStore(<span class="string">&quot;imgLists&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> index = store.index(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> request = index.get(<span class="string">&quot;图片1&quot;</span>);</span><br><span class="line"></span><br><span class="line">  request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = e.target.result;</span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>indexDB 是一个浏览器使用简易的数据库。随着前端功能复杂度提升，用户需要多元化，前端 indexDB 应用也就越来越多。桌面应用、Progressive Web App（PWA）、chrome 扩展组件的开发等。用户同时会获取/操作更多的信息，怎么留存这些大量的数据，那么我们的 indexDB 就上线了。案例：<a href="https://links.jianshu.com/go?to=https://devdocs.io/">DevDocs</a>，electron 开发的桌面应用（图片传输）。</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - 冒泡与捕获</title>
      <link href="/2019/03/13/coho72/"/>
      <url>/2019/03/13/coho72/</url>
      
        <content type="html"><![CDATA[<p><strong>1、事件捕获</strong><br>捕获型事件(event capturing)：事件从最不精确的对象(document 对象)开始触发，然后到最精确(也可以在窗口级别捕获事件，不过必须由开发人员特别指定)</p><p><strong>2、事件冒泡</strong><br>冒泡型事件：事件按照从最特定的事件目标到最不特定的事件目标(document 对象)的顺序触发。</p><p><strong>3、捕获和冒泡过程图</strong><br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601448393879-1add5dc2-e458-4dc7-9bfd-aa87b213b8ca.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"></p><p>事件捕获和事件冒泡属于两个相反的过程，这里可以有一个我感觉十分恰当的比喻，当你把一个可以漂浮在水面上的物品，使劲向水里砸下去，它会首先有一个下降的过程，这个过程就可以理解为从最顶层向事件发生的最具体元素（目标点）的捕获过程；之后由于浮力大于物体自身的重力，物体会在到达最低点（ 最具体元素）之后漂浮到水面上，这个过程相对于事件捕获是一个回溯的过程，即事件冒泡。<br>好了，对于事件捕获和事件冒泡有了一个概念上的理解，那我们就可以开始考虑实际的编码过程中的实际应用了。先贴上本文所需要的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>event<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;obj1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        welcome</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h5</span> <span class="attr">id</span>=<span class="string">&quot;obj2&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h5</span> <span class="attr">id</span>=<span class="string">&quot;obj3&quot;</span>&gt;</span>world<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> obj1=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;obj1&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> obj2=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;obj2&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        obj1.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            alert(<span class="string">&#x27;hello&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,<span class="literal">false</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        obj2.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            alert(<span class="string">&#x27;world&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>如上所示，这是一个十分简单地文档结构：document &gt; html &gt; body &gt; div &gt; h5<br>并且分别在 obj1,obj2 上绑定了一个点击事件，由于 addEventListener 的第三个参数为 false,所以页面是在冒泡阶段处理绑定事件。此时整个页面可以有三种行为出现</p><ol><li>点击文字 welcome 时，弹出 hello。<br>此时就只触发了绑定在 obj1 上的点击事件。具体冒泡实现过程如下：welcome 属于文本节点，点击后，开始从文本节点查找，当前文本节点没有绑定点击事件，继续向上找，找到父级（id 为 obj1 的 div），有绑定的点击事件，执行，再向上找，body，没有绑定点击事件，再到 html,document,都没再有绑定的点击事件，好，整个冒泡过程结束。</li><li>点击文字 hello 时，先弹出 world，再弹出 hello。<br>具体冒泡的过程如下图所示</li></ol><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601448393908-6c24dc30-79c0-4b63-b0c0-48a9ede9c5e5.jpeg?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=d2RNT&originHeight=194&originWidth=1000&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"> 3. 点击 world 时，弹出 hello。<br>具体冒泡过程和第二种情况类似，如下图<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601448393857-36908c03-2781-4e7b-9846-58728d5216d2.jpeg?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=fwWIM&originHeight=194&originWidth=1000&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>理解了以上的内容，我们可以接着来讨论<strong>事件代理机制</strong>。<br>比如上面的代码，我们想要在点击每个 h5 标签时，弹出对应的 innerHTML 。常规做法是遍历每个 h5,然后在每个 h5 上绑定一个点击事件，这种做法在 h5 较少的时候可以使用，但如果有一万个 h5，那就会导致性能降低。这时就需要事件代理出场了。<br>先贴代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">obj1.addEventListener(</span><br><span class="line">  <span class="string">&quot;click&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">if</span> (e.target.nodeName.toLowerCase() == <span class="string">&quot;h5&quot;</span>) &#123;</span><br><span class="line">      alert(e.target.innerHTML);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>由于事件冒泡机制，点击了 h5 后会冒泡到 div,此时就会触发绑定在 div 上的点击事件，再利用 target 找到事件实际发生的元素，就可以达到预期的效果。<br><strong>两种方式来阻止事件冒泡。</strong><br>方式一：event.stopPropagation();</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#div1&quot;</span>).mousedown(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.stopPropagation();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>方式二：return false;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#div1&quot;</span>).mousedown(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>但是这两种方式是有区别的。return false 不仅阻止了事件往上冒泡，而且阻止了事件本身。event.stopPropagation() 则只阻止事件往上冒泡，不阻止事件本身。</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 冒泡 </tag>
            
            <tag> 捕获 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - 类</title>
      <link href="/2019/03/11/fq8p55/"/>
      <url>/2019/03/11/fq8p55/</url>
      
        <content type="html"><![CDATA[<h3 id="ES5-类的实现"><a href="#ES5-类的实现" class="headerlink" title="ES5 类的实现"></a>ES5 类的实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;,&quot;</span> + <span class="built_in">this</span>.age + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p); <span class="comment">// Person &#123; name: &#x27;张三&#x27;, age: 18 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="ES6-类的实现"><a href="#ES6-类的实现" class="headerlink" title="ES6 类的实现"></a>ES6 类的实现</h3><p>ECMAScript 6 实现了 class，class 是一个语法糖，使得 js 的编码<strong>更清晰</strong>、<strong>更人性化</strong>、风格更接近面向对象的感觉；也使 IDE 、编译期类型检查器、代码风格检查器等工具更方便地检测代码语法，做静态分析。同样的，这给没有类就缺点什么的软件开发工程师一个更低的门槛去接触 js。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">//ES6创建一个class会默认添加constructor方法，并在new调用时自动调用该方法。</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;,&quot;</span> + <span class="built_in">this</span>.age + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p); <span class="comment">// Person &#123; name: &#x27;张三&#x27;, age: 18 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="new-调用"><a href="#new-调用" class="headerlink" title="new 调用"></a>new 调用</h3><p>效果：class 类必须使用 new 调用，否则会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ES5;</span><br><span class="line">Person(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ES6;</span><br><span class="line">Person(); <span class="comment">// TypeError: Class constructor Person cannot be invoked without &#x27;new&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="es6-class-与-es5-的面向对象的区别："><a href="#es6-class-与-es5-的面向对象的区别：" class="headerlink" title="es6 class 与 es5 的面向对象的区别："></a>es6 class 与 es5 的面向对象的区别：</h3><ol><li>写法不同，使用关键字 class 2.当 new 一个实例，默认有一个 constructor 方法，且默认返回实例对象（this）,也可以返回另一对象 3.类的所有方法都在 prototype 属性上，但是不可枚举，且每方法结束不能使用分号 4.类的调用必须通过 new 一个实例,且类的内部默认使用严格模式 5.不存在变量提升，必须先声明，再调用<br>6.class 的 this 默认指向当前类<br>7.class 的静态方法，使用关键字 static,不需 new,直接通过类来调用</li><li>实例属性和静态属性的写法，实例属性在类的内部直接使用等式（=）写法，也可以写在 constructor 方法里，静态属性只需在实例属性前加一个关键字 static 即可 9.类的继承使用关键字 extends,继承机制与 es5 完全不同，<br>es5 的继承原理：先 new 子类的实例对象 this,再通过将父类的方法和属性添加到子类的 this 上(parents.call(this))。<br>Es6 的继承原理：先创造父类的实例对象 this,所以要构造函数 constructor（）访问父类的属性使用 this,必须先调用 super()方法；再通过子类的 constructor()来修改 this<br>10．类的继承可以继承原生的构造函数，es5 不可以</li></ol><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">x, y</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.x = x;</span><br><span class="line">    <span class="built_in">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">x, y, color</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(x, y);</span><br><span class="line">    <span class="built_in">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.color + <span class="string">&quot; &quot;</span> + <span class="built_in">super</span>.toString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> ins = <span class="keyword">new</span> ColorPoint(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ins.toString()); <span class="comment">/* red [object Object] */</span></span><br></pre></td></tr></table></figure><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul><li>同一个接口，在不同情况下做不一样的事情；相同的接口，不同的表现；</li><li>接口本身只是一组定义，实现都是子类里面；需要子类去实现的方法（子类只需重写与父类同名的方法，即可达到覆盖的效果），若子类有跟父类同名的方法，则会直接走子类的方法，不会走父类的；</li><li>非静态方法中，仍然子类可通过 super..方法名（ ）（举例：super.say（ ） ），来调用父类的方法（supe 指向的事父类的原型）</li></ul><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>根据函数的参数类型，参数个数<br>作用：为一个函数提供了更丰富的行为</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - 垃圾回收机制</title>
      <link href="/2019/03/08/uh5xg0/"/>
      <url>/2019/03/08/uh5xg0/</url>
      
        <content type="html"><![CDATA[<h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><p>JavaScript 中的内存管理是自动执行的，而且是不可见的。我们创建基本类型、对象、函数……所有这些都需要内存。<br>当不再需要某样东西时会发生什么? JavaScript 引擎是如何发现并清理它?</p><h2 id="可达性"><a href="#可达性" class="headerlink" title="可达性"></a>可达性</h2><p>JavaScript 中内存管理的主要概念是可达性。<br>简单地说，“可达性” 值就是那些以某种方式可访问或可用的值，它们被保证存储在内存中。<br><strong>1. 有一组基本的固有可达值，由于显而易见的原因无法删除。例如:</strong></p><ul><li>本地函数的局部变量和参数</li><li>当前嵌套调用链上的其他函数的变量和参数</li><li>全局变量</li><li>还有一些其他的，内部的</li></ul><p><strong>这些值称为根。</strong><br><strong>2. 如果引用或引用链可以从根访问任何其他值，则认为该值是可访问的。</strong><br>例如，如果局部变量中有对象，并且该对象具有引用另一个对象的属性，则该对象被视为<strong>可达性</strong>， 它引用的那些也是可以访问的，详细的例子如下。<br>JavaScript 引擎中有一个后台进程称为<a href="https://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29">垃圾回收器</a>，它监视所有对象，并删除那些不可访问的对象。<br>下面是最简单的例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user 具有对象的引用</span></span><br><span class="line">user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里箭头表示一个对象引用。全局变量“user”引用对象 {name:“John”} (为了简洁起见，我们将其命名为<strong>John</strong>)。John 的 “name” 属性存储一个基本类型，因此它被绘制在对象中。<br>如果 user 的值被覆盖，则引用丢失:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>现在 <strong>John</strong> 变成不可达的状态，没有办法访问它，没有对它的引用。垃圾回收器将丢弃 <strong>John</strong> 数据并释放内存。<br><strong>两个引用</strong><br>现在让我们假设我们将引用从 user 复制到 admin:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user具有对象的引用</span></span><br><span class="line"><span class="keyword">let</span> admin = user;</span><br><span class="line">user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在如果我们做同样的事情:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>该对象仍然可以通过 admin 全局变量访问，所以它在内存中。如果我们也覆盖 admin，那么它可以被释放。<br><strong>相互关联的对象</strong><br>现在来看一个更复杂的例子， family 对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">marry</span>(<span class="params">man, woman</span>) </span>&#123;</span><br><span class="line">  woman.husban = man;</span><br><span class="line">  man.wife = woman;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">father</span>: man,</span><br><span class="line">    <span class="attr">mother</span>: woman,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> family = marry(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Ann&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>函数 marry 通过给两个对象彼此提供引用来“联姻”它们，并返回一个包含两个对象的新对象。<br>产生的内存结构:</p><p>到目前为止，所有对象都是可访问的。<br>现在让我们删除两个引用:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> family.father;</span><br><span class="line"><span class="keyword">delete</span> family.mother.husband;</span><br></pre></td></tr></table></figure><p>仅仅删除这两个引用中的一个是不够的，因为所有对象仍然是可访问的。<br>但是如果我们把这两个都删除，那么 <strong>John</strong> 不再有传入的引用。<br>输出引用无关紧要。只有传入的对象才能使对象可访问，因此，<strong>John</strong> 现在是不可访问的，并将从内存中删除所有不可访问的数据。</p><h2 id="无法访问的数据块"><a href="#无法访问的数据块" class="headerlink" title="无法访问的数据块"></a>无法访问的数据块</h2><p>有可能整个相互连接的对象变得不可访问并从内存中删除。<br>源对象与上面的相同。然后:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">family = <span class="literal">null</span>；</span><br></pre></td></tr></table></figure><p>这个例子说明了可达性的概念是多么重要。<br>很明显，John 和 Ann 仍然链接在一起，都有传入的引用。但这还不够。<br>“family”对象已经从根上断开了链接，不再有对它的引用，因此下面的整个块变得不可到达，并将被删除。</p><h2 id="内部算法"><a href="#内部算法" class="headerlink" title="内部算法"></a>内部算法</h2><p>基本的垃圾回收算法称为<strong>“标记-清除”</strong>，定期执行以下“垃圾回收”步骤:</p><ul><li>垃圾回收器获取根并<strong>“标记”</strong>(记住)它们。</li><li>然后它访问并“标记”所有来自它们的引用。</li><li>然后它访问标记的对象并标记它们的引用。所有被访问的对象都被记住，以便以后不再访问同一个对象两次。</li><li>以此类推，直到有未访问的引用(可以从根访问)为止。</li><li>除标记的对象外，所有对象都被删除。</li></ul><p>例如，对象结构如下:</p><p>我们可以清楚地看到右边有一个“不可到达的块”。现在让我们看看<strong>“标记并清除”</strong>垃圾回收器如何处理它。<br><strong>第一步标记根</strong><br><strong>然后标记他们的引用</strong><br>以及子孙代的引用:<br>现在进程中不能访问的对象被认为是不可访问的，将被删除:</p><p>这就是垃圾收集的工作原理。JavaScript 引擎应用了许多优化，使其运行得更快，并且不影响执行。<br>一些优化:</p><ul><li><strong>分代回收</strong>——对象分为两组:“新对象”和“旧对象”。许多对象出现，完成它们的工作并迅速结 ，它们很快就会被清理干净。那些活得足够久的对象，会变“老”，并且很少接受检查。</li><li><strong>增量回收</strong>——如果有很多对象，并且我们试图一次遍历并标记整个对象集，那么可能会花费一些时间，并在执行中会有一定的延迟。因此，引擎试图将垃圾回收分解为多个部分。然后，各个部分分别执行。这需要额外的标记来跟踪变化，这样有很多微小的延迟，而不是很大的延迟。</li><li><strong>空闲时间收集</strong>——垃圾回收器只在 CPU 空闲时运行，以减少对执行的可能影响。</li></ul><h2 id="面试怎么回答"><a href="#面试怎么回答" class="headerlink" title="面试怎么回答"></a>面试怎么回答</h2><p><strong>1）问什么是垃圾</strong><br>一般来说没有被引用的对象就是垃圾，就是要被清除， 有个例外如果几个对象引用形成一个环，互相引用，但根访问不到它们，这几个对象也是垃圾，也要被清除。<br><strong>2）如何检测垃圾</strong><br>一种算法是标记 <strong>标记-清除</strong> 算法。</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js垃圾回收机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - 汇总2</title>
      <link href="/2019/03/06/igvdz9/"/>
      <url>/2019/03/06/igvdz9/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍-js-有哪些内置对象？"><a href="#介绍-js-有哪些内置对象？" class="headerlink" title="介绍 js 有哪些内置对象？"></a>介绍 js 有哪些内置对象？</h3><p>Object 是 JavaScript 中所有对象的父对象<br>数据封装类对象：Object、Array、Boolean、Number 和 String<br>其他对象：Function、Arguments、Math、Date、RegEx、Error</p><h3 id="如何区分数组和对象？"><a href="#如何区分数组和对象？" class="headerlink" title="如何区分数组和对象？"></a>如何区分数组和对象？</h3><p>1、从原型入手，Array.prototype.isPrototypeOf(obj); 利用 isPrototypeOf()方法，判定 Array 是不是在 obj 的原型链中，如果是，则返回 true,否则 false。Array.prototype.isPrototype([]) //true<br>2、也可以从构造函数入手，利用对向的 constructor 属性<br>3、根据对象的 class 属性(类属性)，跨原型链调用 toString()方法。Object.prototype.toString.call(Window);<br>4、Array.isArray()方法。</p><h3 id="声明变量和声明函数的提升有什么区别"><a href="#声明变量和声明函数的提升有什么区别" class="headerlink" title="声明变量和声明函数的提升有什么区别?"></a>声明变量和声明函数的提升有什么区别?</h3><p>(1) 变量声明提升：变量声明在进入执行上下文就完成了。<br>只要变量在代码中进行了声明，无论它在哪个位置上进行声明， js 引擎都会将它的声明放在范围作用域的顶部；</p><p>(2) 函数声明提升：执行代码之前会先读取函数声明，意味着可以把函数申明放在调用它的语句后面。<br>只要函数在代码中进行了声明，无论它在哪个位置上进行声明， js 引擎都会将它的声明放在范围作用域的顶部；</p><p>(3) 变量 or 函数声明：函数声明会覆盖变量声明，但不会覆盖变量赋值。<br>同一个名称标识 a，即有变量声明 var a，又有函数声明 function a() {}，不管二者声明的顺序，函数声明会覆盖变量声明，也就是说，此时 a 的值是声明的函数 function a() {}。注意：如果在变量声明的同时初始化 a，或是之后对 a 进行赋值，此时 a 的值变量的值。eg: var a; var c = 1; a = 1; function a() { return true; } console.log(a);</p><h3 id="和-的区别"><a href="#和-的区别" class="headerlink" title="== 和 === 的区别"></a>== 和 === 的区别</h3><p>对于 == 来说，如果对比双方的类型<strong>不一样</strong>的话，就会进行<strong>类型转换</strong></p><p>假如我们需要对比 x 和 y 是否相同，就会进行如下判断流程：</p><p>首先会判断两者类型是否相同。相同的话就是比大小了<br>类型不相同的话，那么就会进行类型转换<br>会先判断是否在对比 null 和 undefined，是的话就会返回 true<br>判断两者类型是否为 string 和 number，是的话就会将字符串转换为 number<br>1 == ‘1’<br>↓<br>1 == 1<br>判断其中一方是否为 boolean，是的话就会把 boolean 转为 number 再进行判断<br>‘1’ == true<br>↓<br>‘1’ == 1<br>↓<br>1 == 1<br>判断其中一方是否为 object 且另一方为 string、number 或者 symbol，是的话就会把 object 转为原始类型再进行判断<br>‘1’ == { name: ‘yck’ }<br>↓<br>‘1’ == ‘[object Object]’</p><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601449633708-254c22bf-d2f8-462a-8c5e-ba510386b42c.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"></p><h3 id="谈谈变量提升"><a href="#谈谈变量提升" class="headerlink" title="谈谈变量提升"></a>谈谈变量提升</h3><p>当执行 JS 代码时，会生成执行环境，只要代码不是写在函数中的，就是在全局执行环境中，函数中的代码会产生函数执行环境，只此两种执行环境。<br>接下来让我们看一个老生常谈的例子，var<br>自动检测<br>b() // call b<br>console.log(a) // undefined<br>var a = ‘Hello world’<br>function b() {<br>console.log(‘call b’)<br>}<br>想必以上的输出大家肯定都已经明白了，这是因为函数和变量提升的原因。通常提升的解释是说将声明的代码移动到了顶部，这其实没有什么错误，便于大家理解。但是更准确的解释应该是：在生成执行环境时，会有两个阶段。第一个阶段是创建的阶段，JS 解释器会找出需要提升的变量和函数，并且给他们提前在内存中开辟好空间，函数的话会将整个函数存入内存中，变量只声明并且赋值为 undefined，所以在第二个阶段，也就是代码执行阶段，我们可以直接提前使用。<br>在提升的过程中，相同的函数会覆盖上一个函数，并且函数优先于变量提升<br>自动检测<br>b() // call b second<br>function b() {<br>console.log(‘call b fist’)<br>}<br>function b() {<br>console.log(‘call b second’)<br>}<br>var b = ‘Hello world’<br>var 会产生很多错误，所以在 ES6 中引入了 let。let 不能在声明前使用，但是这并不是常说的 let 不会提升，let 提升了，在第一阶段内存也已经为他开辟好了空间，但是因为这个声明的特性导致了并不能在声明前使用。</p><h3 id="break-和-continue-的区别"><a href="#break-和-continue-的区别" class="headerlink" title="break 和 continue 的区别"></a>break 和 continue 的区别</h3><p>break 语句可以用于循环语句，也可以用于 switch（分子语句），而 continue 只能用在循环语句中<br>braek 用于终止循环，continue 用来跳出本次循环</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h2 id="JS-运行机制"><a href="#JS-运行机制" class="headerlink" title="JS 运行机制"></a><strong>JS 运行机制</strong></h2><p>JavaScript 引擎是单线程运行的,浏览器无论在什么时候都只且只有一个线程在运行 JavaScript 程序.浏览器的内核是多线程的，它们在内核制控下相互配合以保持同步，一个浏览器至少实现三个常驻线程：javascript 引擎线程，GUI 渲染线程，浏览器事件触发线程。这些异步线程都会产生不同的异步的事件.</p><ol><li><pre><code>  javascript引擎是基于事件驱动单线程执行的，JS引擎一直等待着任务队列中任务的到来，然后加以处理，浏览器无论什么时候都只有一个JS线程在运行JS程序。</code></pre></li><li><pre><code>  GUI渲染线程负责渲染浏览器界面，当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时,该线程就会执行。但需要注意 GUI渲染线程与JS引擎是互斥的，当JS引擎执行时GUI线程会被挂起，GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。</code></pre></li><li><pre><code>  事件触发线程，当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理。这些事件可来自JavaScript引擎当前执行的代码块如setTimeOut、也可来自浏览器内核的其他线程如鼠标点击、AJAX异步请求等，但由于JS的单线程关系所有这些事件都得排队等待JS引擎处理。（当线程中没有执行任何同步代码的前提下才会执行异步代码）</code></pre></li></ol><p>当程序启动时, 一个进程被创建，同时也运行一个线程, 即为主线程，js 的运行机制为单线程 <img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601449633800-aedf9926-72be-4026-ac93-5d8423b7ed69.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy">程序中跑两个线程，一个负责程序本身的运行，作为主线程； 另一个负责主线程与其他线程的的通信，被称为“Event Loop 线程” 。每当遇到异步任务，交给 EventLoop 线程，然后自己往后运行，等到主线程运行完后，再去 EventLoop 线程拿结果。</p><p>1）所有任务都在主线程上执行，形成一个执行栈（execution context stack）。</p><p>2）主线程之外，还存在一个”任务队列”（task queue）。系统把异步任务放到”任务队列”之中，然后继续执行后续的任务。</p><p>3）一旦”执行栈”中的所有任务执行完毕，系统就会读取”任务队列”。如果这个时候，异步任务已经结束了等待状态，就会从”任务队列”进入执行栈，恢复执行。</p><p>4）主线程不断重复上面的第三步。</p><p>“回调函数”（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当异步任务从”任务队列”回到执行栈，回调函数就会执行。”任务队列”是一个先进先出的数据结构，排在前面的事件，优先返回主线程。主线程的读取过程基本上是自动的，只要执行栈一清空，”任务队列”上第一位的事件就自动返回主线程。</p><p>主线程从”任务队列”中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为<strong>Event Loop。</strong></p><p><strong>从主线程的角度看，一个异步过程包括下面两个要素：</strong></p><p>发起函数(或叫注册函数)A<br>回调函数 callbackFn<br>它们都是在主线程上调用的，其中注册函数用来发起异步过程，回调函数用来处理结果。</p><p><strong>异步进程有:</strong></p><p>类似 onclick 等，由浏览器内核的 DOM binding 模块处理，事件触发时，回调函数添加到任务队列中；<br>setTimeout 等，由浏览器内核的 Timer 模块处理，时间到达时，回调函数添加到任务队列中；<br>Ajax，由浏览器内核的 Network 模块处理，网络请求返回后，添加到任务队列中。</p><p>例如 setTimeout(fn, 1000)，其中的 setTimeout 就是异步过程的发起函数，fn 是回调函数。用一句话概括：工作线程将消息放到消息队列，主线程通过事件循环过程去取消息。</p><p>消息队列：消息队列是一个先进先出的队列，它里面存放着各种消息。<br>事件循环：事件循环是指主线程重复从消息队列中取消息、执行的过程。<br>​</p><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601449633762-2fd23505-639f-4fb7-b295-797345e74ccf.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"></p><p><strong>流程如下:</strong></p><ol><li><pre><code>  主线程读取js代码, 形成相应的堆和执行栈, 执行同步任务</code></pre></li><li><pre><code>  当主线程遇到异步任务,，指定给异步进程处理, 同时继续执行同步任务</code></pre></li><li><pre><code>  当异步进程处理完毕后， 将相应的异步任务推入到任务队列首部</code></pre></li><li><pre><code>  主线程任务处理完毕后,，查询任务队列，则取出一个任务队列推入到主线程的执行栈</code></pre></li><li><pre><code>  重复执行第2、3、4步，这就称为事件循环</code></pre></li></ol><p>众所周知 JS 是门非阻塞单线程语言，因为在最初 JS 就是为了和浏览器交互而诞生的。如果 JS 是门多线程的语言话，我们在多个线程中处理 DOM 就可能会发生问题（一个线程中新加节点，另一个线程中删除节点），当然可以引入读写锁解决这个问题。</p><p>JS 在执行的过程中会产生执行环境，这些执行环境会被顺序的加入到执行栈中。如果遇到异步的代码，会被挂起并加入到 Task（有多种 task） 队列中。一旦执行栈为空，Event Loop 就会从 Task 队列中拿出需要执行的代码并放入执行栈中执行，所以本质上来说 JS 中的异步还是同步行为。<br>自动检测<br>console.log(‘script start’);<br>setTimeout(function() {<br>console.log(‘setTimeout’);<br>}, 0);<br>console.log(‘script end’);</p><p>以上代码虽然 setTimeout 延时为 0，其实还是异步。这是因为 HTML5 标准规定这个函数第二个参数不得小于 4 毫秒，不足会自动增加。所以 setTimeout 还是会在 script end 之后打印。<br>不同的任务源会被分配到不同的 Task 队列中，任务源可以分为 微任务（microtask） 和 宏任务（macrotask）。在 ES6 规范中，microtask 称为 jobs，macrotask 称为 task。<br>自动检测<br>console.log(‘script start’);<br>setTimeout(function() {<br>console.log(‘setTimeout’);<br>}, 0);<br>new Promise((resolve) =&gt; {<br>console.log(‘Promise’)<br>resolve()<br>}).then(function() {<br>console.log(‘promise1’);<br>}).then(function() {<br>console.log(‘promise2’);<br>});<br>console.log(‘script end’);<br>// script start =&gt; Promise =&gt; script end =&gt; promise1 =&gt; promise2 =&gt; setTimeout</p><p>以上代码虽然 setTimeout 写在 Promise 之前，但是因为 Promise 属于微任务而 setTimeout 属于宏任务，所以会有以上的打印。</p><p>微任务包括 process.nextTick，promise，Object.observe，MutationObserver<br>宏任务包括 script， setTimeout，setInterval，setImmediate，I/O，UI rendering</p><p>很多人有个误区，认为微任务快于宏任务，其实是错误的。因为宏任务中包括了 script，浏览器会先执行一个宏任务，接下来有异步代码的话就先执行微任务。</p><p>所以正确的一次 Event loop 顺序是这样的</p><ol><li>执行同步代码，这属于宏任务</li><li>执行栈为空，查询是否有微任务需要执行</li><li>执行所有微任务</li><li>必要的话渲染 UI</li><li>然后开始下一轮 Event loop，执行宏任务中的异步代码</li></ol><h2 id="JS-Web-API-知识点与高频考题解析"><a href="#JS-Web-API-知识点与高频考题解析" class="headerlink" title="JS-Web-API 知识点与高频考题解析"></a><strong>JS-Web-API 知识点与高频考题解析</strong></h2><p><strong>BOM</strong><br>BOM（浏览器对象模型）是浏览器本身的一些信息的设置和获取，例如获取浏览器的宽度、高度，设置让浏览器跳转到哪个地址。<br>navigator： 获取浏览器特性（即俗称的 UA）然后识别客户端<br>location： 获取网址、协议、path、参数、hash 等<br>history： 操作浏览器的历史纪录，（前进，后退等功能）</p><h3 id="1，什么是-window-对象-什么是-document-对象"><a href="#1，什么是-window-对象-什么是-document-对象" class="headerlink" title="1，什么是 window 对象? 什么是 document 对象?"></a><strong>1，什么是 window 对象? 什么是 document 对象?</strong></h3><p>window:它是一个顶层对象,而不是另一个对象的属性，即浏览器的窗口。<br>document:代表整个 HTML 文档,可用来访问页面中的所有元素<br>Window 对象表示当前浏览器的窗口，是 JavaScript 的顶级对象。我们创建的所有对象、函数、变量都是 Window 对象的成员。<br>Window 对象的方法和属性是在全局范围内有效的。<br>Document 对象是 HTML 文档的根节点与所有其他节点（元素节点，文本节点，属性节点, 注释节点）<br>Document 对象使我们可以通过脚本对 HTML 页面中的所有元素进行访问<br>Document 对象是 Window 对象的一部分，可通过 window.document 属性对其进行访问</p><h3 id="2，事件是？IE-与火狐的事件机制有什么区别？-如何阻止冒泡？"><a href="#2，事件是？IE-与火狐的事件机制有什么区别？-如何阻止冒泡？" class="headerlink" title="2，事件是？IE 与火狐的事件机制有什么区别？ 如何阻止冒泡？"></a><strong>2，事件是？IE 与火狐的事件机制有什么区别？ 如何阻止冒泡？</strong></h3><ol><li>我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为。</li><li>事件处理机制：IE 是事件冒泡、Firefox 同时支持两种事件模型，也就是：捕获型事件和冒泡型事件；</li><li>ev.stopPropagation();（旧 ie 的方法 ev.cancelBubble = true;）</li></ol><h3 id="3，解释一下事件代理"><a href="#3，解释一下事件代理" class="headerlink" title="3，解释一下事件代理"></a><strong>3，解释一下事件代理</strong></h3><p>事件代理的原理其实就和作用域链的原理差不多，但是事件代理是利用事件的冒泡原理来实现的，事件代理就是通过给祖先元素添加事件，通过事件目标对象开始向上查找找到匹配的子节点为止，如果找不到则到绑定事件的那个祖先元素为止，找到了就触发事件，并且可以通过 js 中 call 和 apply 来改变触发事件函数中的 this 为当前绑定节点，也是通过一层一层逐层向上的方式进行匹配查找而触发对应事件，好处就是可以使后添加的 dom 元素也同样有之前存在元素的事件，jquery 中可以使用 on，delegate，live 实现的，不过在 jquery1.7 版本以后吧 live 给废除了，原因就是 live 绑定事件的祖先元素是整个 html 页面的根节点，所以性能消耗比较大，在后边的版本中给删除了，使用 on，delegate 代替<br><strong>优点：</strong><br>使代码简洁<br>减少浏览器的内存占用<br>缺点： 使用不当会造成事件在不应该触发时触发</p><h3 id="4，offsetWidth-offsetHeight-clientWidth-clientHeight-与-scrollWidth-scrollHeight-的区别，"><a href="#4，offsetWidth-offsetHeight-clientWidth-clientHeight-与-scrollWidth-scrollHeight-的区别，" class="headerlink" title="4，offsetWidth/offsetHeight,clientWidth/clientHeight 与 scrollWidth/scrollHeight 的区别，"></a><strong>4，offsetWidth/offsetHeight,clientWidth/clientHeight 与 scrollWidth/scrollHeight 的区别，</strong></h3><p>offsetWidth/offsetHeight 返回值包含 content + padding + border，效果与 e.getBoundingClientRect()相同<br>clientWidth/clientHeight 返回值只包含 content + padding，如果有滚动条，也不包含滚动条<br>scrollWidth/scrollHeight 返回值包含 content + padding + 溢出内容的尺寸</p><h3 id="5，focus-blur-与-focusin-focusout-的区别与联系"><a href="#5，focus-blur-与-focusin-focusout-的区别与联系" class="headerlink" title="5，focus/blur 与 focusin/focusout 的区别与联系"></a><strong>5，focus/blur 与 focusin/focusout 的区别与联系</strong></h3><p>focus/blur 不冒泡，focusin/focusout 冒泡<br>focus/blur 兼容性好，focusin/focusout 在除 FireFox 外的浏览器下都保持良好兼容性，如需使用事件托管，可考虑在 FireFox 下使用事件捕获 elem.addEventListener(‘focus’, handler, true)<br>可获得焦点的元素：<br>window<br>链接被点击或键盘操作<br>表单空间被点击或键盘操作<br>设置 tabindex 属性的元素被点击或键盘操作</p><h3 id="6，mouseover-mouseout-与-mouseenter-mouseleave-的区别与联系"><a href="#6，mouseover-mouseout-与-mouseenter-mouseleave-的区别与联系" class="headerlink" title="6，mouseover/mouseout 与 mouseenter/mouseleave 的区别与联系"></a><strong>6，mouseover/mouseout 与 mouseenter/mouseleave 的区别与联系</strong></h3><p>mouseover/mouseout 是标准事件，所有浏览器都支持；mouseenter/mouseleave 是 IE5.5 引入的特有事件后来被 DOM3 标准采纳，现代标准浏览器也支持<br>mouseover/mouseout 是冒泡事件；mouseenter/mouseleave 不冒泡。需要为多个元素监听鼠标移入/出事件时，推荐 mouseover/mouseout 托管，提高性能<br>标准事件模型中 event.target 表示发生移入/出的元素,vent.relatedTarget 对应移出/如元素；在老 IE 中 event.srcElement 表示发生移入/出的元素，event.toElement 表示移出的目标元素，event.fromElement 表示移入时的来源元素</p><h3 id="7，介绍-DOM0，DOM2，DOM3-事件处理方式区别"><a href="#7，介绍-DOM0，DOM2，DOM3-事件处理方式区别" class="headerlink" title="7，介绍 DOM0，DOM2，DOM3 事件处理方式区别"></a><strong>7，介绍 DOM0，DOM2，DOM3 事件处理方式区别</strong></h3><p>DOM0 级事件处理方式：<br>btn.onclick = func;<br>btn.onclick = null;<br>DOM2 级事件处理方式：<br>btn.addEventListener(‘click’, func, false);<br>btn.removeEventListener(‘click’, func, false);<br>btn.attachEvent(“onclick”, func);<br>btn.detachEvent(“onclick”, func);<br>DOM3 级事件处理方式：<br>eventUtil.addListener(input, “textInput”, func);<br>eventUtil 是自定义对象，textInput 是 DOM3 级事件</p><h3 id="8，事件的三个阶段"><a href="#8，事件的三个阶段" class="headerlink" title="8，事件的三个阶段"></a><strong>8，事件的三个阶段</strong></h3><p>捕获、目标、冒泡</p><p>js 的冒泡(Bubbling Event)和捕获(Capture Event)的区别<br>冒泡型事件：事件按照从最特定的事件目标到最不特定的事件目标(document 对象)的顺序触发。<br>捕获型事件(event capturing)：事件从最不精确的对象(document 对象)开始触发，然后到最精确(也可以在窗口级别捕获事件，不过必须由开发人员特别指定)。<br>DOM 事件流：同时支持两种事件模型：捕获型事件和冒泡型事件，但是，捕获型事件先发生。两种事件流会触及 DOM 中的所有对象，从 document 对象开始，也在 document 对象结束。<br>事件捕获<br>当你使用事件捕获时，父级元素先触发，子级元素后触发，即 div 先触发，p 后触发。<br>事件冒泡<br>当你使用事件冒泡时，子级元素先触发，父级元素后触发，即 p 先触发，div 后触发。</p><p>阻止冒泡<br>• 在 W3c 中，使用 stopPropagation（）方法<br>• 在 IE 下设置 cancelBubble = true；<br>在捕获的过程中 stopPropagation（）；后，后面的冒泡过程也不会发生了。<br>阻止捕获</p><p>阻止事件的默认行为，例如 click <a>后的跳转<br>• 在 W3c 中，使用 preventDefault（）方法；<br>• 在 IE 下设置 window.event.returnValue = false;</p><h3 id="9，介绍事件“捕获”和“冒泡”执行顺序和事件的执行次数？"><a href="#9，介绍事件“捕获”和“冒泡”执行顺序和事件的执行次数？" class="headerlink" title="9，介绍事件“捕获”和“冒泡”执行顺序和事件的执行次数？"></a><strong>9，介绍事件“捕获”和“冒泡”执行顺序和事件的执行次数？</strong></h3><p>按照 W3C 标准的事件：首是进入捕获阶段，直到达到目标元素，再进入冒泡阶段<br>事件执行次数（DOM2-addEventListener）：元素上绑定事件的个数<br>注意 1：前提是事件被确实触发<br>注意 2：事件绑定几次就算几个事件，即使类型和功能完全一样也不会“覆盖”<br>事件执行顺序：判断的关键是否目标元素<br>非目标元素：根据 W3C 的标准执行：捕获-&gt;目标元素-&gt;冒泡（不依据事件绑定顺序）<br>目标元素：依据事件绑定顺序：先绑定的事件先执行（不依据捕获冒泡标准）<br>最终顺序：父元素捕获-&gt;目标元素事件 1-&gt;目标元素事件 2-&gt;子元素捕获-&gt;子元素冒泡-&gt;父元素冒泡<br>注意：子元素事件执行前提 事件确实“落”到子元素布局区域上，而不是简单的具有嵌套关系<br>在一个 DOM 上同时绑定两个点击事件：一个用捕获，一个用冒泡。事件会执行几次，先执行冒泡还是捕获？</p><p>该 DOM 上的事件如果被触发，会执行两次（执行次数等于绑定次数）<br>如果该 DOM 是目标元素，则按事件绑定顺序执行，不区分冒泡/捕获<br>如果该 DOM 是处于事件流中的非目标元素，则先执行捕获，后执行冒泡</p><h3 id="10，window-onload-和-document-DOMContentLoaded-注：-document-ready-的区别？"><a href="#10，window-onload-和-document-DOMContentLoaded-注：-document-ready-的区别？" class="headerlink" title="10，window.onload 和 document.DOMContentLoaded (注：$(document).ready()) 的区别？"></a><strong>10，window.onload 和 document.DOMContentLoaded (注：$(document).ready()) 的区别？</strong></h3><p>一般情况下，DOMContentLoaded 事件要在 window.onload 之前执行，当 DOM 树构建完成的时候就会执行 DOMContentLoaded 事件，而 window.onload 是在页面载入完成的时候，才执行，这其中包括图片等元素。大多数时候我们只是想在 DOM 树构建完成后，绑定事件到元素，我们并不需要图片元素，加上有时候加载外域图片的速度非常缓慢。</p><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a><strong>DOM</strong></h3><p>讲 DOM 先从 HTML 讲起，讲 HTML 先从 XML 讲起。XML 是一种可扩展的标记语言，所谓可扩展就是它可以描述任何结构化的数据，它是一棵树！</p><h3 id="1，documen-write-和-innerHTML-的区别"><a href="#1，documen-write-和-innerHTML-的区别" class="headerlink" title="1，documen.write 和 innerHTML 的区别"></a><strong>1，documen.write 和 innerHTML 的区别</strong></h3><p>document.write 只能重绘整个页面<br>innerHTML 可以重绘页面的一部分</p><h3 id="2，DOM-操作——怎样添加、移除、移动、复制、创建和查找节点"><a href="#2，DOM-操作——怎样添加、移除、移动、复制、创建和查找节点" class="headerlink" title="2，DOM 操作——怎样添加、移除、移动、复制、创建和查找节点?"></a><strong>2，DOM 操作——怎样添加、移除、移动、复制、创建和查找节点?</strong></h3><p>1）创建新节点<br>createDocumentFragment() //创建一个 DOM 片段<br>createElement() //创建一个具体的元素<br>createTextNode() //创建一个文本节点<br>2）添加、移除、替换、插入<br>appendChild()<br>removeChild()<br>replaceChild()<br>insertBefore() //在已有的子节点前插入一个新的子节点<br>3）查找<br>getElementsByTagName() //通过标签名称<br>getElementsByName() //通过元素的 Name 属性的值(IE 容错能力较强，会得到一个数组，其中包括 id 等于 name 值的)<br>getElementById() //通过元素 Id，唯一性</p><h3 id="3，attribute-和-property-的区别是什么？"><a href="#3，attribute-和-property-的区别是什么？" class="headerlink" title="3，attribute 和 property 的区别是什么？"></a><strong>3，attribute 和 property 的区别是什么？</strong></h3><p>attribute 是 dom 元素在文档中作为 html 标签拥有的属性；<br>property 就是 dom 元素在 js 中作为对象拥有的属性。<br>所以：<br>对于 html 的标准属性来说，attribute 和 property 是同步的，是会自动更新的，<br>但是对于自定义的属性来说，他们是不同步的，</p><h3 id="4，src-和-href-的区别"><a href="#4，src-和-href-的区别" class="headerlink" title="4，src 和 href 的区别"></a><strong>4，src 和 href 的区别</strong></h3><p>src 用于替换当前元素，href 用于在当前文档和引用资源之间确立联系。<br>src 是 source 的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求 src 资源时会将其指向的资源下载并应用到文档内，当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将 js 脚本放在底部而不是头部。<br>Src source,指向外部资源的位置,如果我们添加<script src ="js.js"></script>浏览器会暂停其他资源的下载和处理,直到该资源加载,编译,执行完毕(图片和框架也是如此),这也就是为什么 js 脚本要放在底部。<br>src 用于替换当前元素,href 用于在当前文档和引入资源之间建立联系。</p><h2 id="兼容与优化"><a href="#兼容与优化" class="headerlink" title="兼容与优化"></a><strong>兼容与优化</strong></h2><h3 id="1，页面重构怎么操作？"><a href="#1，页面重构怎么操作？" class="headerlink" title="1，页面重构怎么操作？"></a><strong>1，页面重构怎么操作？</strong></h3><p>网站重构：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。<br>也就是说是在不改变 UI 的情况下，对网站进行优化，在扩展的同时保持一致的 UI。<br>对于传统的网站来说重构通常是：<br>表格(table)布局改为 DIV+CSS<br>使网站前端兼容于现代浏览器(针对于不合规范的 CSS、如对 IE6 有效的)<br>对于移动平台的优化<br>针对于 SEO 进行优化<br>深层次的网站重构应该考虑的方面<br>减少代码间的耦合<br>让代码保持弹性<br>严格按规范编写代码<br>设计可扩展的 API<br>代替旧有的框架、语言(如 VB)<br>增强用户体验</p><p>通常来说对于速度的优化也包含在重构中<br>压缩 JS、CSS、image 等前端资源(通常是由服务器来解决)<br>程序的性能优化(如数据读写)<br>采用 CDN 来加速资源加载<br>对于 JS DOM 的优化<br>HTTP 服务器的文件缓存</p><h3 id="2，列举-IE-与其他浏览器不一样的特性？"><a href="#2，列举-IE-与其他浏览器不一样的特性？" class="headerlink" title="2，列举 IE 与其他浏览器不一样的特性？"></a><strong>2，列举 IE 与其他浏览器不一样的特性？</strong></h3><p>1、事件不同之处：<br>1-1，触发事件的元素被认为是目标（target）。而在 IE 中，目标包含在 event 对象的 srcElement 属性；<br>1-2，获取字符代码、如果按键代表一个字符（shift、ctrl、alt 除外），IE 的 keyCode 会返回字符代码（Unicode），DOM 中按键的代码和字符是分离的，要获取字符代码，需要使用 charCode 属性；<br>1-3，阻止某个事件的默认行为，IE 中阻止某个事件的默认行为，必须将 returnValue 属性设置为 false，Mozilla 中，需要调用 preventDefault() 方法；<br>1-4，停止事件冒泡，IE 中阻止事件进一步冒泡，需要设置 cancelBubble 为 true，Mozzilla 中，需要调用 stopPropagation()；</p><h3 id="3，什么叫优雅降级和渐进增强？"><a href="#3，什么叫优雅降级和渐进增强？" class="headerlink" title="3，什么叫优雅降级和渐进增强？"></a><strong>3，什么叫优雅降级和渐进增强？</strong></h3><p>优雅降级：Web 站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会针对旧版本的 IE 进行降级处理了,使之在旧式浏览器上以某种形式降级体验却不至于完全不能用。<br>如：border-shadow</p><p>渐进增强：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新版本浏览器才支持的功能,向页面增加不影响基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。<br>如：默认使用 flash 上传，但如果浏览器支持 HTML5 的文件上传功能，则使用 HTML5 实现更好的体验；</p><h3 id="4，说说严格模式的限制"><a href="#4，说说严格模式的限制" class="headerlink" title="4，说说严格模式的限制"></a><strong>4，说说严格模式的限制</strong></h3><p>严格模式主要有以下限制：<br>变量必须声明后再使用<br>函数的参数不能有同名属性，否则报错<br>不能使用 with 语句<br>不能对只读属性赋值，否则报错<br>不能使用前缀 0 表示八进制数，否则报错<br>不能删除不可删除的属性，否则报错<br>不能删除变量 delete prop，会报错，只能删除属性 delete global[prop]<br>eval 不会在它的外层作用域引入变量<br>eval 和 arguments 不能被重新赋值<br>arguments 不会自动反映函数参数的变化<br>不能使用 arguments.callee<br>不能使用 arguments.caller<br>禁止 this 指向全局对象<br>不能使用 fn.caller 和 fn.arguments 获取函数调用的堆栈<br>增加了保留字（比如 protected、static 和 interface）<br>设立”严格模式”的目的，主要有以下几个：<br>消除 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为;<br>消除代码运行的一些不安全之处，保证代码运行的安全；<br>提高编译器效率，增加运行速度；<br>为未来新版本的 Javascript 做好铺垫。<br>注：经过测试 IE6,7,8,9 均不支持严格模式。</p><h3 id="5，检测浏览器版本版本有哪些方式？"><a href="#5，检测浏览器版本版本有哪些方式？" class="headerlink" title="5，检测浏览器版本版本有哪些方式？"></a><strong>5，检测浏览器版本版本有哪些方式？</strong></h3><p>根据 navigator.userAgent // UA.toLowerCase().indexOf(‘chrome’)<br>根据 window 对象的成员 // ‘ActiveXObject’ in window</p><h3 id="6，总结前端性能优化的解决方案"><a href="#6，总结前端性能优化的解决方案" class="headerlink" title="6，总结前端性能优化的解决方案"></a><strong>6，总结前端性能优化的解决方案</strong></h3><p><strong>优化原则和方向</strong><br>性能优化的原则是以更好的用户体验为标准，具体就是实现下面的目标：<br>多使用内存、缓存或者其他方法<br>减少 CPU 和 GPU 计算，更快展现</p><p><strong>优化的方向有两个：</strong><br>减少页面体积，提升网络加载<br>优化页面渲染</p><p><strong>减少页面体积，提升网络加载</strong><br>静态资源的压缩合并（JS 代码压缩合并、CSS 代码压缩合并、雪碧图）<br>静态资源缓存（资源名称加 MD5 戳）<br>使用 CDN 让资源加载更快</p><p><strong>优化页面渲染</strong><br>CSS 放前面，JS 放后面<br>懒加载（图片懒加载、下拉加载更多）<br>减少 DOM 查询，对 DOM 查询做缓存<br>减少 DOM 操作，多个操作尽量合并在一起执行（DocumentFragment）<br>事件节流<br>尽早执行操作（DOMContentLoaded）<br>使用 SSR 后端渲染，数据直接输出到 HTML 中，减少浏览器使用 JS 模板渲染页面 HTML 的时间</p><h3 id="7，图片懒加载与预加载"><a href="#7，图片懒加载与预加载" class="headerlink" title="7，图片懒加载与预加载"></a><strong>7，图片懒加载与预加载</strong></h3><p>图片懒加载的原理就是暂时不设置图片的 src 属性，而是将图片的 url 隐藏起来，比如先写在 data-src 里面，等某些事件触发的时候(比如滚动到底部，点击加载图片)再将图片真实的 url 放进 src 属性里面，从而实现图片的延迟加载<br>图片预加载是指在一些需要展示大量图片的网站，实现图片的提前加载。从而提升用户体验。常用的方式有两种，一种是隐藏在 css 的 background 的 url 属性里面，一种是通过 javascript 的 Image 对象设置实例对象的 src 属性实现图片的预加载。相关代码如下：</p><p>CSS 预加载图片方式：<br>自动检测<br>#preload-01 { background: url(<a href="http://domain.tld/image-01.png">http://domain.tld/image-01.png</a>) no-repeat -9999px -9999px; }<br>#preload-02 { background: url(<a href="http://domain.tld/image-02.png">http://domain.tld/image-02.png</a>) no-repeat -9999px -9999px; }<br>#preload-03 { background: url(<a href="http://domain.tld/image-03.png">http://domain.tld/image-03.png</a>) no-repeat -9999px -9999px; }</p><p>Javascript 预加载图片的方式：<br>自动检测<br>function preloadImg(url) {<br>var img = new Image();<br>img.src = url;<br>if(img.complete) {<br>//接下来可以使用图片了<br>//do something here<br>} else {<br>img.onload = function() {<br>//接下来可以使用图片了<br>//do something here<br>};<br>}<br>}</p><h3 id="8，描述浏览器的渲染过程，DOM-树和渲染树的区别？"><a href="#8，描述浏览器的渲染过程，DOM-树和渲染树的区别？" class="headerlink" title="8，描述浏览器的渲染过程，DOM 树和渲染树的区别？"></a><strong>8，描述浏览器的渲染过程，DOM 树和渲染树的区别？</strong></h3><p>浏览器的渲染过程：<br>解析 HTML 构建 DOM(DOM 树)，并行请求 css/image/js<br>CSS 文件下载完成，开始构建 CSSOM(CSS 树)<br>CSSOM 构建结束后，和 DOM 一起生成 Render Tree(渲染树)<br>布局(Layout)：计算出每个节点在屏幕中的位置<br>显示(Painting)：通过显卡把页面画到屏幕上<br>DOM 树 和 渲染树 的区别：<br>DOM 树与 HTML 标签一一对应，包括 head 和隐藏元素<br>渲染树不包括 head 和隐藏元素，大段文本的每一个行都是独立节点，每一个节点都有对应的 css 属性</p><h3 id="9，重绘和回流（重排）的区别和关系？"><a href="#9，重绘和回流（重排）的区别和关系？" class="headerlink" title="9，重绘和回流（重排）的区别和关系？"></a><strong>9，重绘和回流（重排）的区别和关系？</strong></h3><p>重绘：当渲染树中的元素外观（如：颜色）发生改变，不影响布局时，产生重绘<br>回流：当渲染树中的元素的布局（如：尺寸、位置、隐藏/状态状态）发生改变时，产生重绘回流<br>注意：JS 获取 Layout 属性值（如：offsetLeft、scrollTop、getComputedStyle 等）也会引起回流。因为浏览器需要通过回流计算最新值<br>回流必将引起重绘，而重绘不一定会引起回流 。。。</p><h3 id="10，如何最小化重绘-repaint-和回流-reflow-？"><a href="#10，如何最小化重绘-repaint-和回流-reflow-？" class="headerlink" title="10，如何最小化重绘(repaint)和回流(reflow)？"></a><strong>10，如何最小化重绘(repaint)和回流(reflow)？</strong></h3><p>需要要对元素进行复杂的操作时，可以先隐藏(display:”none”)，操作完成后再显示<br>需要创建多个 DOM 节点时，使用 DocumentFragment 创建完后一次性的加入 document<br>缓存 Layout 属性值，如：var left = elem.offsetLeft; 这样，多次使用 left 只产生一次回流<br>尽量避免用 table 布局（table 元素一旦触发回流就会导致 table 里所有的其它元素回流）<br>避免使用 css 表达式(expression)，因为每次调用都会重新计算值（包括加载页面）<br>尽量使用 css 属性简写，如：用 border 代替 border-width, border-style, border-color<br>批量修改元素样式：elem.className 和 elem.style.cssText 代替 elem.style.xxx</p><h3 id="11，script-的位置是否会影响首屏显示时间？"><a href="#11，script-的位置是否会影响首屏显示时间？" class="headerlink" title="11，script 的位置是否会影响首屏显示时间？"></a><strong>11，script 的位置是否会影响首屏显示时间？</strong></h3><p>在解析 HTML 生成 DOM 过程中，js 文件的下载是并行的，不需要 DOM 处理到 script 节点。因此，script 的位置不影响首屏显示的开始时间。<br>浏览器解析 HTML 是自上而下的线性过程，script 作为 HTML 的一部分同样遵循这个原则<br>因此，script 会延迟 DomContentLoad，只显示其上部分首屏内容，从而影响首屏显示的完成时间</p><h2 id="常见-js-设计模式"><a href="#常见-js-设计模式" class="headerlink" title="常见 js 设计模式"></a>常见 js 设计模式</h2><h3 id="js-的设计模式推荐看一本书可以达到更好的理解"><a href="#js-的设计模式推荐看一本书可以达到更好的理解" class="headerlink" title="js 的设计模式推荐看一本书可以达到更好的理解"></a>js 的设计模式推荐看一本书可以达到更好的理解</h3><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601449633817-6ee67ec6-c7e5-490e-a260-31c4eda35094.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"></p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>工厂模式分为好几种，这里就不一一讲解了，以下是一个简单工厂模式的例子<br>自动检测<br>class Man {<br>constructor(name) {<br>this.name = name<br>}<br>alertName() {<br>alert(this.name)<br>}<br>}<br>class Factory {<br>static create(name) {<br>return new Man(name)<br>}<br>}<br>Factory.create(‘yck’).alertName()</p><p>当然工厂模式并不仅仅是用来 new 出<strong>实例</strong>。<br>可以想象一个场景。假设有一份很复杂的代码需要用户去调用，但是用户并不关心这些复杂的代码，只需要你提供给我一个接口去调用，用户只负责传递需要的参数，至于这些参数怎么使用，内部有什么逻辑是不关心的，只需要你最后返回我一个实例。这个构造过程就是工厂。<br>工厂起到的作用就是隐藏了创建实例的复杂度，只需要提供一个接口，简单清晰。<br>在 Vue 源码中，你也可以看到工厂模式的使用，比如创建异步组件<br>自动检测<br>export function createComponent (<br>Ctor: Class<Component> | Function | Object | void,<br>data: ?VNodeData,<br>context: Component,<br>children: ?Array<VNode>,<br>tag?: string<br>): VNode | Array<VNode> | void {<br>// 逻辑处理…<br>const vnode = new VNode(<br><code>vue-component-$&#123;Ctor.cid&#125;$&#123;name ? </code>-${name}<code> : &#39;&#39;&#125;</code>,<br>data, undefined, undefined, undefined, context,<br>{ Ctor, propsData, listeners, tag, children },<br>asyncFactory<br>)<br>return vnode<br>}</p><p>在上述代码中，我们可以看到我们只需要调用 createComponent 传入参数就能创建一个组件实例，但是创建这个实例是很复杂的一个过程，工厂帮助我们隐藏了这个复杂的过程，只需要一句代码调用就能实现功能。</p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例模式很常用，比如全局缓存、全局状态管理等等这些只需要一个对象，就可以使用单例模式。<br>单例模式的核心就是保证全局只有一个对象可以访问。因为 JS 是门无类的语言，所以别的语言实现单例的方式并不能套入 JS 中，我们只需要用一个变量确保实例只创建一次就行，以下是如何实现单例模式的例子<br>自动检测<br>class Singleton {<br>constructor() {}<br>}<br>Singleton.getInstance = (function() {<br>let instance<br>return function() {<br>if (!instance) {<br>instance = new Singleton()<br>}<br>return instance<br>}<br>})()<br>let s1 = Singleton.getInstance()<br>let s2 = Singleton.getInstance()<br>console.log(s1 === s2) // true</p><p>在 Vuex 源码中，你也可以看到单例模式的使用，虽然它的实现方式不大一样，通过一个外部变量来控制只安装一次 Vuex<br>自动检测<br>let Vue // bind on install<br>export function install (_Vue) {<br>if (Vue &amp;&amp; _Vue === Vue) {<br>// …<br>return<br>}<br>Vue = _Vue<br>applyMixin(Vue)<br>}</p><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>适配器用来解决两个接口不兼容的情况，不需要改变已有的接口，通过包装一层的方式实现两个接口的正常协作。<br>以下是如何实现适配器模式的例子<br>自动检测<br>class Plug {<br>getName() {<br>return ‘港版插头’<br>}<br>}<br>class Target {<br>constructor() {<br>this.plug = new Plug()<br>}<br>getName() {<br>return this.plug.getName() + ‘ 适配器转二脚插头’<br>}<br>}<br>let target = new Target()<br>target.getName() // 港版插头 适配器转二脚插头</p><p>在 Vue 中，我们其实经常使用到适配器模式。比如父组件传递给子组件一个时间戳属性，组件内部需要将时间戳转为正常的日期显示，一般会使用 computed 来做转换这件事情，这个过程就使用到了适配器模式。</p><h3 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h3><p>装饰模式不需要改变已有的接口，作用是给对象添加功能。就像我们经常需要给手机戴个保护套防摔一样，不改变手机自身，给手机添加了保护套提供防摔功能。<br>以下是如何实现装饰模式的例子，使用了 ES7 中的装饰器语法<br>自动检测<br>function readonly(target, key, descriptor) {<br>descriptor.writable = false<br>return descriptor<br>}<br>class Test {<br>@readonly<br>name = ‘yck’<br>}<br>let t = new Test()<br>t.yck = ‘111’ // 不可修改</p><p>在 React 中，装饰模式其实随处可见<br>自动检测<br>import { connect } from ‘react-redux’<br>class MyComponent extends React.Component {<br>// …<br>}<br>export default connect(mapStateToProps)(MyComponent)</p><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>代理是为了控制对对象的访问，不让外部直接访问到对象。在现实生活中，也有很多代理的场景。比如你需要买一件国外的产品，这时候你可以通过代购来购买产品。<br>在实际代码中其实代理的场景很多，也就不举框架中的例子了，比如事件代理就用到了代理模式。<br>自动检测</p><ul id="ul"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li></ul><script>let ul = document.querySelector('#ul')ul.addEventListener('click', (event) => {console.log(event.target);})</script><p>因为存在太多的 li，不可能每个都去绑定事件。这时候可以通过给父节点绑定一个事件，让父节点作为代理去拿到真实点击的节点。<br>发布-订阅模式<br>发布-订阅模式也叫做观察者模式。通过一对一或者一对多的依赖关系，当对象发生改变时，订阅方都会收到通知。在现实生活中，也有很多类似场景，比如我需要在购物网站上购买一个产品，但是发现该产品目前处于缺货状态，这时候我可以点击有货通知的按钮，让网站在产品有货的时候通过短信通知我。<br>在实际代码中其实发布-订阅模式也很常见，比如我们点击一个按钮触发了点击事件就是使用了该模式<br>自动检测</p><ul id="ul"></ul><script>let ul = document.querySelector('#ul')ul.addEventListener('click', (event) => {console.log(event.target);})</script>在 Vue 中，如何实现响应式也是使用了该模式。对于需要实现响应式的对象来说，在 get的时候会进行依赖收集，当改变了对象的属性时，就会触发派发更新。<h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><p>涉及面试题：<br>1，有几种方式可以实现存储功能，分别有什么优缺点？<br>2，如何实现跨标签页的 sessionStorage？<br>3，前端如何操作 cookie？</p><h3 id="cookie，localStorage，sessionStorage，indexDB"><a href="#cookie，localStorage，sessionStorage，indexDB" class="headerlink" title="cookie，localStorage，sessionStorage，indexDB"></a>cookie，localStorage，sessionStorage，indexDB</h3><p>我们先来通过表格学习下这几种存储方式的区别</p><table><thead><tr><th>特性</th><th>cookie</th><th>localStorage</th><th>sessionStorage</th><th>indexDB</th></tr></thead><tbody><tr><td>数据生命周期</td><td>一般由服务器生成，可以设置过期时间</td><td>除非被清理，否则一直存在</td><td>页面关闭就清理</td><td>除非被清理，否则一直存在</td></tr><tr><td>数据存储大小</td><td>4K</td><td>5M</td><td>5M</td><td>无限</td></tr><tr><td>与服务端通信</td><td>每次都会携带在 header 中，对于请求性能影响</td><td>不参与</td><td>不参与</td><td>不参与</td></tr></tbody></table><p>从上表可以看到，cookie 已经不建议用于存储。如果没有大量数据存储需求的话，可以使用 localStorage 和 sessionStorage 。对于不怎么改变的数据尽量使用 localStorage 存储，否则可以用 sessionStorage 存储。<br>对于 cookie 来说，我们还需要注意安全性。</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>value</td><td>如果用于保存用户登录态，应该将该值加密，不能使用明文的用户标识</td></tr><tr><td>http-only</td><td>不能通过 JS 访问 Cookie，减少 XSS 攻击</td></tr><tr><td>secure</td><td>只能在协议为 HTTPS 的请求中携带</td></tr><tr><td>same-site</td><td>规定浏览器不能在跨域请求中携带 Cookie，减少 CSRF 攻击</td></tr></tbody></table><p>cookie：服务端和客户端都可以进行操作，存储在客户端，每一次 ajax 发送都会携带，新增 fetchApi 可以控制 cookie 是否发送，cookie 不允许跨域访问，并且存储大小比较小，对于客户端来说 api 简单需要自己封装一个实现（客户端操作只提供一个 document.cookie）</p><p>session：服务端存储技术，客户端无法操作，session 会在客户的 cookie 中保存一个 sessionid 用来识别客户端</p><p>localStorage：客户端存储方案，长期存储没有过期时间，有比较详细的 api 操作，但是只能存储字符串类型数据，需要自己封装一个支持多种数据类型操作，并且可以设置过期时间的 api</p><p>sessionStorage：和 localStorage 的 api 一样，但是是零时存储，并且只起作用当前标签页，标签页关闭自动销毁，不能跨标签页使用，需要自己结合 localStorage 做进一步封装</p><h2 id="es6-es7-相关"><a href="#es6-es7-相关" class="headerlink" title="es6/es7 相关"></a>es6/es7 相关</h2><h3 id="1，说说对-es6-的理解（说一下-es6，知道-es6-吗）"><a href="#1，说说对-es6-的理解（说一下-es6，知道-es6-吗）" class="headerlink" title="1，说说对 es6 的理解（说一下 es6，知道 es6 吗）"></a><strong>1，说说对 es6 的理解（说一下 es6，知道 es6 吗）</strong></h3><p>语法糖(箭头函数，类的定义，继承)，以及一些新的扩展（数组，字符串，对象，方法等），对作用域的重新定义，以及异步编程的解决方案（promise，async，await）、解构赋值的出现 , 新增的数据类型（symbol），新增数据结构 set,map，以及对模块的支持，字符串模版``</p><h3 id="2，ES6-常用特性"><a href="#2，ES6-常用特性" class="headerlink" title="2，ES6 常用特性"></a><strong>2，ES6 常用特性</strong></h3><p>变量定义(let 和 const,可变与不可变，const 定义对象的特殊情况)<br>解构赋值<br>模板字符串<br>数组新 API(例：Array.from(),entries(),values(),keys())<br>箭头函数(rest 参数，扩展运算符，::绑定 this)<br>Set 和 Map 数据结构(set 实例成员值唯一存储 key 值，map 实例存储键值对(key-value))<br>Promise 对象(前端异步解决方案进化史，generator 函数，async 函数)<br>Class 语法糖(super 关键字)</p><h3 id="3，ES6-箭头函数中的-this-和普通函数中的有什么不同"><a href="#3，ES6-箭头函数中的-this-和普通函数中的有什么不同" class="headerlink" title="3，ES6 箭头函数中的 this 和普通函数中的有什么不同"></a>3，ES6 箭头函数中的 this 和普通函数中的有什么不同</h3><p>箭头函数是 ES6 中新的函数定义形式，function name(arg1, arg2) {…}可以使用(arg1, arg2) =&gt; {…}来定义。箭头函数没有 this，他的 this 永远指向的是上层距离当前函数最近的 this<br>自动检测<br>// JS 普通函数<br>var arr = [1, 2, 3]<br>arr.map(function (item) {<br>console.log(index)<br>return item + 1<br>})<br>// ES6 箭头函数<br>const arr = [1, 2, 3]<br>arr.map((item, index) =&gt; {<br>console.log(index)<br>return item + 1<br>})<br>arr.map(item =&gt; item + 1)<br>function fn() {<br>console.log(‘real’, this) // {a: 100} ，该作用域下的 this 的真实的值<br>var arr = [1, 2, 3]<br>// 普通 JS<br>arr.map(function (item) {<br>console.log(‘js’, this) // window 。普通函数，这里打印出来的是全局变量，令人费解<br>return item + 1<br>})<br>// 箭头函数<br>arr.map(item =&gt; {<br>console.log(‘es6’, this) // {a: 100} 。箭头函数，这里打印的就是父作用域的 this<br>return item + 1<br>})<br>}<br>fn.call({a: 100})</p><p>箭头函数存在的意义，第一写起来更加简洁，第二可以解决 ES6 之前函数执行中 this 是全局变量的问题，</p><h3 id="4，ES6-模块化如何使用？"><a href="#4，ES6-模块化如何使用？" class="headerlink" title="4，ES6 模块化如何使用？"></a>4，ES6 模块化如何使用？</h3><p>ES6 中模块化语法更加简洁，主要就是两个点抛出 export，引入 import<br>如果只是输出一个唯一的对象，使用 export default 即可，代码如下<br>自动检测<br>// 创建 util1.js 文件，内容如<br>export default {<br>a: 100<br>}<br>// 创建 index.js 文件，内容如<br>import obj from ‘./util1.js’<br>console.log(obj)</p><p>如果想要输出许多个对象，就不能用 default 了，且 import 时候要加{…}，代码如下<br>自动检测<br>// 创建 util2.js 文件，内容如<br>export function fn1() {<br>alert(‘fn1’)<br>}<br>export function fn2() {<br>alert(‘fn2’)<br>}<br>export const obj = {}<br>​</p><p>// 创建 index.js 文件，内容如<br>import { fn1, fn2, obj } from ‘./util2.js’<br>fn1()<br>fn2()</p><h3 id="5，Set-和-Map"><a href="#5，Set-和-Map" class="headerlink" title="5，Set 和 Map"></a>5，Set 和 Map</h3><p>Set 和 Map 都是 ES6 中新增的数据结构，是对当前 JS 数组和对象这两种重要数据结构的扩展。由于是新增的数据结构，目前尚未被大规模使用，但是作为前端程序员，提前了解是必须做到的。先总结一下两者最关键的地方：</p><ul><li>Set 类似于数组，但数组可以允许元素重复，Set 不允许元素重复</li><li>Map 类似于对象，但普通对象的 key 必须是字符串或者数字，而 Map 的 key 可以是任何数据类型</li></ul><p><strong>Set</strong><br>Set 实例不允许元素有重复，可以通过以下示例证明。可以通过一个数组初始化一个 Set 实例，或者通过 add 添加元素，元素不能重复，重复的会被忽略。<br>自动检测<br>// 例 1<br>const set = new Set([1, 2, 3, 4, 4]);<br>console.log(set) // Set(4) {1, 2, 3, 4}<br>// 例 2<br>const set = new Set();<br>[2, 3, 5, 4, 5, 8, 8].forEach(item =&gt; set.add(item));<br>for (let item of set) {<br>console.log(item);<br>}<br>// 2 3 5 4 8<br>Set 实例的属性和方法有</p><ul><li>size：获取元素数量。</li><li>add(value)：添加元素，返回 Set 实例本身。</li><li>delete(value)：删除元素，返回一个布尔值，表示删除是否成功。</li><li>has(value)：返回一个布尔值，表示该值是否是 Set 实例的元素。</li><li>clear()：清除所有元素，没有返回值。</li></ul><p>自动检测<br>const s = new Set();<br>s.add(1).add(2).add(2); // 添加元素<br>s.size // 2<br>​</p><p>s.has(1) // true<br>s.has(2) // true<br>s.has(3) // false<br>s.delete(2);<br>s.has(2) // false<br>s.clear();<br>console.log(s); // Set(0) {}</p><p>Set 实例的遍历，可使用如下方法</p><ul><li>keys()：返回键名的遍历器。</li><li>values()：返回键值的遍历器。不过由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以 keys()和 values()返回结果一致。</li><li>entries()：返回键值对的遍历器。</li><li>forEach()：使用回调函数遍历每个成员。</li></ul><p>自动检测<br>let set = new Set([‘aaa’, ‘bbb’, ‘ccc’]);<br>for (let item of set.keys()) {<br>console.log(item);<br>}<br>// aaa<br>// bbb<br>// ccc<br>for (let item of set.values()) {<br>console.log(item);<br>}<br>// aaa<br>// bbb<br>// ccc<br>for (let item of set.entries()) {<br>console.log(item);<br>}<br>// [“aaa”, “aaa”]<br>// [“bbb”, “bbb”]<br>// [“ccc”, “ccc”]<br>​</p><p>set.forEach((value, key) =&gt; console.log(key + ‘ : ‘ + value))<br>// aaa : aaa<br>// bbb : bbb<br>// ccc : ccc</p><p><strong>Map</strong><br>Map 的用法和普通对象基本一致，先看一下它能用非字符串或者数字作为 key 的特性。<br>自动检测<br>const map = new Map();<br>const obj = {p: ‘Hello World’};<br>map.set(obj, ‘OK’)<br>map.get(obj) // “OK”<br>map.has(obj) // true<br>map.delete(obj) // true<br>map.has(obj) // false</p><p>需要使用 new Map()初始化一个实例，下面代码中 set get has delete 顾名即可思义（下文也会演示）。其中，map.set(obj, ‘OK’)就是用对象作为的 key （不光可以是对象，任何数据类型都可以），并且后面通过 map.get(obj)正确获取了。</p><p>Map 实例的属性和方法如下：</p><p>size：获取成员的数量<br>set：设置成员 key 和 value<br>get：获取成员属性值<br>has：判断成员是否存在<br>delete：删除成员<br>clear：清空所有</p><p>自动检测<br>const map = new Map();<br>map.set(‘aaa’, 100);<br>map.set(‘bbb’, 200);<br>map.size // 2<br>map.get(‘aaa’) // 100<br>map.has(‘aaa’) // true<br>map.delete(‘aaa’)<br>map.has(‘aaa’) // false<br>map.clear()</p><p>Map 实例的遍历方法有：</p><ul><li>keys()：返回键名的遍历器。</li><li>values()：返回键值的遍历器。</li><li>entries()：返回所有成员的遍历器。</li><li>forEach()：遍历 Map 的所有成员。</li></ul><p>自动检测<br>const map = new Map();<br>map.set(‘aaa’, 100);<br>map.set(‘bbb’, 200);<br>for (let key of map.keys()) {<br>console.log(key);<br>}<br>// “aaa”<br>// “bbb”<br>for (let value of map.values()) {<br>console.log(value);<br>}<br>// 100<br>// 200<br>for (let item of map.entries()) {<br>console.log(item[0], item[1]);<br>}<br>// aaa 100<br>// bbb 200<br>// 或者<br>for (let [key, value] of map.entries()) {<br>console.log(key, value);<br>}<br>// aaa 100<br>// bbb 200</p><h3 id="6，map-filter-reduce"><a href="#6，map-filter-reduce" class="headerlink" title="6，map, filter, reduce"></a>6，map, filter, reduce</h3><p>涉及面试题：map, filter, reduce 各自有什么作用？<br>map 作用是生成一个新数组，遍历原数组，将每个元素拿出来做一些变换然后放入到新的数组中。<br>自动检测<br>[1, 2, 3].map(v =&gt; v + 1) // -&gt; [2, 3, 4]<br>另外 map 的回调函数接受三个参数，分别是当前索引元素，索引，原数组<br>自动检测<br>[‘1’,’2’,’3’].map(parseInt)</p><ul><li>第一轮遍历 parseInt(‘1’, 0) -&gt; 1</li><li>第二轮遍历 parseInt(‘2’, 1) -&gt; NaN</li><li>第三轮遍历 parseInt(‘3’, 2) -&gt; NaN</li></ul><p>filter 的作用也是生成一个新数组，在遍历数组的时候将返回值为 true 的元素放入新数组，我们可以利用这个函数删除一些不需要的元素，作用就是数组过滤<br>自动检测<br>let array = [1, 2, 4, 6]<br>let newArray = array.filter(item =&gt; item !== 6)<br>console.log(newArray) // [1, 2, 4]<br>和 map 一样，filter 的回调函数也接受三个参数，用处也相同。<br>最后我们来讲解 reduce 这块的内容，同时也是最难理解的一块内容。reduce 可以将数组中的元素通过回调函数最终转换为一个值。<br>如果我们想实现一个功能将函数里的元素全部相加得到一个值，可能会这样写代码<br>自动检测<br>const arr = [1, 2, 3]<br>let total = 0<br>for (let i = 0; i &lt; arr.length; i++) {<br>total += arr[i]<br>}<br>console.log(total) //6</p><p>但是如果我们使用 reduce 的话就可以将遍历部分的代码优化为一行代码<br>自动检测<br>const arr = [1, 2, 3]<br>const sum = arr.reduce((acc, current) =&gt; acc + current, 0)<br>console.log(sum)</p><p>对于 reduce 来说，它接受两个参数，分别是回调函数和初始值，接下来我们来分解上述代码中 reduce 的过程</p><ul><li>首先初始值为 0，该值会在执行第一次回调函数时作为第一个参数传入</li><li>回调函数接受四个参数，分别为累计值、当前元素、当前索引、原数组，后三者想必大家都可以明白作用，这里着重分析第一个参数</li><li>在一次执行回调函数时，当前值和初始值相加得出结果 1，该结果会在第二次执行回调函数时当做第一个参数传入</li><li>所以在第二次执行回调函数时，相加的值就分别是 1 和 2，以此类推，循环结束后得到结果 6</li></ul><p>想必通过以上的解析大家应该明白 reduce 是如何通过回调函数将所有元素最终转换为一个值的，当然 reduce 还可以实现很多功能，接下来我们就通过 reduce 来实现 map 函数<br>自动检测<br>const arr = [1, 2, 3]<br>const mapArray = arr.map(value =&gt; value _ 2)<br>const reduceArray = arr.reduce((acc, current) =&gt; {<br>acc.push(current _ 2)<br>return acc<br>}, [])<br>console.log(mapArray, reduceArray) // [2, 4, 6]</p><h3 id="7，ES6-class-和普通构造函数的区别"><a href="#7，ES6-class-和普通构造函数的区别" class="headerlink" title="7，ES6 class 和普通构造函数的区别"></a><strong>7，ES6 class 和普通构造函数的区别</strong></h3><p>class 其实一直是 JS 的关键字（保留字），但是一直没有正式使用，直到 ES6 。 ES6 的 class 就是取代之前构造函数初始化对象的形式，从语法上更加符合面向对象的写法</p><ol><li><pre><code>  class 是一种新的语法形式，是class Name &#123;...&#125;这种形式，和函数的写法完全不一样</code></pre></li><li><pre><code>  两者对比，构造函数函数体的内容要放在 class 中的constructor函数中，constructor即构造器，初始化实例时默认执行</code></pre></li><li>   class 中函数的写法是add() {…}这种形式，并没有function关键字<br> 自动检测<br> // JS 构造函数的写法<br> function MathHandle(x, y) {<br> this.x = x;<br> this.y = y;<br> }<br> MathHandle.aa = ‘111’<br> MathHandle.prototype.add = function () {<br> return this.x + this.y;<br> };<br> var m = new MathHandle(1, 2);<br> console.log(m.add())<br> // 用 ES6 class 的写法<br> class MathHandle {<br> stati aa = ‘111’<br> constructor(x, y) {<br> this.x = x;<br> this.y = y;<br> }<br> aa = ‘aaa’<br> add() {<br> return this.x + this.y;<br> }<br> }<br> const m = new MathHandle(1, 2);<br> console.log(m.add())</li></ol><p>而且使用 class 来实现继承就更加简单了<br>在 class 中直接 extends 关键字就可以实现继承，而不像之前的继承实现有多种不同的实现方式，在 es6 中就只有一种<br>自动检测<br>// JS 构造函数实现继承<br>// 动物<br>function Animal() {<br>this.eat = function () {<br>console.log(‘animal eat’)<br>}<br>}<br>// 狗<br>function Dog() {<br>this.bark = function () {<br>console.log(‘dog bark’)<br>}<br>}<br>Dog.prototype = new Animal()<br>// 哈士奇<br>var hashiqi = new Dog()<br>// ES6 class 实现继承<br>class Animal {<br>constructor(name) {<br>this.name = name<br>}<br>eat() {<br>console.log(<code>$&#123;this.name&#125; eat</code>)<br>}<br>}<br>class Dog extends Animal {<br>constructor(name) {<br>super(name)<br>this.name = name<br>}<br>say() {<br>console.log(<code>$&#123;this.name&#125; say</code>)<br>}<br>}<br>const dog = new Dog(‘哈士奇’)<br>dog.say()<br>dog.eat()</p><p>注意以下两点：<br>使用 extends 即可实现继承，更加符合经典面向对象语言的写法，如 Java<br>子类的 constructor 一定要执行 super()，以调用父类的 constructor</p><h3 id="8，箭头函数的作用域上下文和-普通函数作用域上下文-的区别"><a href="#8，箭头函数的作用域上下文和-普通函数作用域上下文-的区别" class="headerlink" title="8，箭头函数的作用域上下文和 普通函数作用域上下文 的区别"></a><strong>8，箭头函数的作用域上下文和 普通函数作用域上下文 的区别</strong></h3><p>箭头函数其实只是一个密名函数的语法糖，区别在于普通函数作用域中的 this 有特定的指向，一般指向 window，而箭头函数中的 this 只有一个指向那就是指当前函数所在的对象，其实现原理其实就是类似于之前编程的时候在函数外围定义 that 一样，用了箭头函数就不用定义 that 了直接使用 this</p><h3 id="9，Proxy"><a href="#9，Proxy" class="headerlink" title="9，Proxy"></a>9，Proxy</h3><p>涉及面试题：Proxy 可以实现什么功能？<br>如果你平时有关注 Vue 的进展的话，可能已经知道了在 Vue3.0 中将会通过 Proxy 来替换原本的 Object.defineProperty 来实现数据响应式。 Proxy 是 ES6 中新增的功能，它可以用来自定义对象中的操作。<br>let p = new Proxy(target, handler)<br>target 代表需要添加代理的对象，handler 用来自定义对象中的操作，比如可以用来自定义 set 或者 get 函数。<br>接下来我们通过 Proxy 来实现一个数据响应式<br>自动检测<br>let onWatch = (obj, setBind, getLogger) =&gt; {<br>let handler = {<br>get(target, property,receiver{ getLogger(target, property)<br>return Reflect.get(target, property, receiver)<br>},<br>set(target, property, value, receiver) {<br>setBind(value, property)<br>return Reflect.set(target, property, value)<br>}<br>}<br>return new Proxy(obj, handler)<br>}<br>let obj = { a: 1 }<br>let p = onWatch(<br>obj,<br>(v, property) =&gt; {<br>console.log(<code>监听到属性$&#123;property&#125;改变为$&#123;v&#125;</code>)<br>},<br>(target, property) =&gt; {<br>console.log(<code>&#39;$&#123;property&#125;&#39; = $&#123;target[property]&#125;</code>)<br>}<br>)<br>p.a = 2 // 监听到属性 a 改变<br>p.a // ‘a’ = 2<br>在上述代码中，我们通过自定义 set 和 get 函数的方式，在原本的逻辑中插入了我们的函数逻辑，实现了在对对象任何属性进行读写时发出通知。<br>当然这是简单版的响应式实现，如果需要实现一个 Vue 中的响应式，需要我们在 get 中收集依赖，在 set 派发更新，之所以 Vue3.0 要使用 Proxy 替换原本的 API 原因在于 Proxy 无需一层层递归为每个属性添加代理，一次即可完成以上操作，性能上更好，并且原本的实现有一些数据更新不能监听到，但是 Proxy 可以完美监听到任何方式的数据改变，唯一缺陷可能就是浏览器的兼容性不好了。<br>Proxy 无需一层层递归为每个属性添加代理有疑问，以下是实现代码。<br>自动检测<br>get(target, property, receiver) {<br>getLogger(target, property)<br>// 这句判断代码是新增的<br>if (typeof target[property] === ‘object’ &amp;&amp; target[property] !== null) {<br>return new Proxy(target[property], handler);<br>} else {<br>return Reflect.get(target, property);<br>}<br>}</p><h3 id="10，Proxy-与-Object-defineProperty-对比"><a href="#10，Proxy-与-Object-defineProperty-对比" class="headerlink" title="10，Proxy 与 Object.defineProperty 对比"></a>10，Proxy 与 Object.defineProperty 对比</h3><p>Object.defineProperty 虽然已经能够实现双向绑定了，但是他还是有缺陷的。</p><ol><li>只能对属性进行数据劫持，所以需要深度遍历整个对象</li><li>对于数组不能监听到数据的变化</li></ol><p>虽然 Vue 中确实能检测到数组数据的变化，但是其实是使用了 hack 的办法，并且也是有缺陷的。<br>自动检测<br>const arrayProto = Array.prototype<br>export const arrayMethods = Object.create(arrayProto)<br>// hack 以下几个函数<br>const methodsToPatch = [<br>‘push’,<br>‘pop’,<br>‘shift’,<br>‘unshift’,<br>‘splice’,<br>‘sort’,<br>‘reverse’<br>]<br>methodsToPatch.forEach(function (method) {<br>// 获得原生函数<br>const original = arrayProto[method]<br>def(arrayMethods, method, function mutator (…args) {<br>// 调用原生函数<br>const result = original.apply(this, args)<br>const ob = this.<strong>ob</strong><br>let inserted<br>switch (method) {<br>case ‘push’:<br>case ‘unshift’:<br>inserted = args<br>break<br>case ‘splice’:<br>inserted = args.slice(2)<br>break<br>}<br>if (inserted) ob.observeArray(inserted)<br>// 触发更新<br>ob.dep.notify()<br>return result<br>})<br>})</p><p>反观 Proxy 就没以上的问题，原生支持监听数组变化，并且可以直接对整个对象进行拦截，所以 Vue 也将在下个大版本中使用 Proxy 替换 Object.defineProperty<br>自动检测<br>let onWatch = (obj, setBind, getLogger) =&gt; {<br>let handler = {<br>get(target, property, receiver) {<br>getLogger(target, property)<br>return Reflect.get(target, property, receiver);<br>},<br>set(target, property, value, receiver) {<br>setBind(value);<br>return Reflect.set(target, property, value);<br>}<br>};<br>return new Proxy(obj, handler);<br>};<br>let obj = { a: 1 }<br>let value<br>let p = onWatch(obj, (v) =&gt; {<br>value = v<br>}, (target, property) =&gt; {<br>console.log(<code>Get &#39;$&#123;property&#125;&#39; = $&#123;target[property]&#125;</code>);<br>})<br>p.a = 2 // bind <code>value</code> to <code>2</code><br>p.a // -&gt; Get ‘a’ = 2</p><h3 id="11，es6-如何转为-es5？"><a href="#11，es6-如何转为-es5？" class="headerlink" title="11，es6 如何转为 es5？"></a><strong>11，es6 如何转为 es5？</strong></h3><p>使用 Babel 转码器，Babel 的配置文件是.babelrc，存放在项目的根目录下。使用 Babel 的第一步，就是配置这个文件。</p><h3 id="12，babel"><a href="#12，babel" class="headerlink" title="12，babel"></a>12，babel</h3><h3 id="13，常见面试题"><a href="#13，常见面试题" class="headerlink" title="13，常见面试题"></a>13，常见面试题</h3><ol><li>var、let 及 const 区别？</li><li>使用解构，实现两个变量的值的交换？</li><li>解构赋值？</li><li>函数默认参数？</li><li>JavaScript 中什么是变量提升？什么是暂时性死区？</li><li>箭头函数？</li><li>箭头函数与普通函数有什么区别？</li><li>反引号 ` 标识？</li><li>属性简写、方法简写？</li><li>for of 循环？</li><li>字符串新增方法？</li><li>如何改变函数内部的 this 指针的指向？</li><li>如何判断 this？箭头函数的 this 是什么？</li><li>call、apply 以及 bind 函数内部实现是怎么样的？</li><li>import 和 export？</li><li>ES6 中的 class 了解吗？ES6 中的 class 和 ES5 的类有什么区别？</li><li>知道 ECMAScript6 怎么写 class 么？为什么会出现 class 这种东西?</li><li>原型如何实现继承？Class 如何实现继承？Class 本质是什么？</li><li>Promise 有几种状态？Promise 的特点是什么，分别有什么优缺点？</li><li>Promise 构造函数是同步还是异步执行？then 呢？Promise 如何实现 then 处理？</li><li>Promise 和 setTimeout 的区别？</li><li>如何实现 Promise.all() ？</li><li>如何实现 Promise.prototype.finally() ？</li><li>all() 的用法？</li><li>es6 的展开运算符… 属于浅拷贝还是深拷贝。 答：浅拷贝，只拷贝了最外面的一层数据，如果数组是一个二维数组，拷贝的就是数组的引用</li><li>说说你对 Promise 的了解？</li></ol><h2 id="浏览器相关"><a href="#浏览器相关" class="headerlink" title="浏览器相关"></a>浏览器相关</h2><h3 id="1，跨域"><a href="#1，跨域" class="headerlink" title="1，跨域"></a>1，跨域</h3><h3 id="2，浏览器的渲染原理"><a href="#2，浏览器的渲染原理" class="headerlink" title="2，浏览器的渲染原理"></a>2，浏览器的渲染原理</h3><p>我们知道执行 JS 有一个 JS 引擎，那么执行渲染也有一个渲染引擎。同样，渲染引擎在不同的浏览器中也不是都相同的。比如在 Firefox 中叫做 <strong>Gecko</strong>，在 Chrome 和 Safari 中都是基于 <strong>WebKit</strong> 开发的。在这一章节中，我们也会主要学习关于 <strong>WebKit</strong> 的这部分渲染引擎内容。</p><p><strong>浏览器接收到 HTML 文件并转换为 DOM 树</strong></p><p>当我们打开一个网页时，浏览器都会去请求对应的 HTML 文件。虽然平时我们写代码时都会分为 JS、CSS、HTML 文件，也就是字符串，但是计算机硬件是不理解这些字符串的，所以在网络中传输的内容其实都是 0 和 1 这些字节数据。当浏览器接收到这些字节数据以后，它会将这些字节数据转换为字符串，也就是我们写的代码。</p><p>当数据转换为字符串以后，浏览器会先将这些字符串通过词法分析转换为标记（token），这一过程在词法分析中叫做标记化（tokenization）。</p><p>那么什么是标记呢？这其实属于编译原理这一块的内容了。简单来说，标记还是字符串，是构成代码的最小单位。这一过程会将代码分拆成一块块，并给这些内容打上标记，便于理解这些最小单位的代码是什么意思。<img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601449633779-f42e7d21-ef99-478b-add5-7114d412b141.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"><br>当结束标记化后，这些标记会紧接着转换为 Node，最后这些 Node 会根据不同 Node 之间的联系构建为一颗 DOM 树。<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601449633740-0714b838-5ca3-4da2-883b-a5e92042fe34.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"><br>以上就是浏览器从网络中接收到 HTML 文件然后一系列的转换过程。<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601449633903-815d6079-be61-4a7a-948f-2b0e43f6f8f0.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"><br>当然，在解析 HTML 文件的时候，浏览器还会遇到 CSS 和 JS 文件，这时候浏览器也会去下载并解析这些文件，接下来就让我们先来学习浏览器如何解析 CSS 文件。<br>将 CSS 文件转换为 CSSOM 树<br>其实转换 CSS 到 CSSOM 树的过程和上一小节的过程是极其类似的<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601449633796-bdd27ae5-8c36-4875-8d2c-a090d9625339.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"><br>在这一过程中，浏览器会确定下每一个节点的样式到底是什么，并且这一过程其实是很消耗资源的。因为样式你可以自行设置给某个节点，也可以通过继承获得。在这一过程中，浏览器得递归 CSSOM 树，然后确定具体的元素到底是什么样式。<br>如果你有点不理解为什么会消耗资源的话，我这里举个例子<br>自动检测</p><div><a> <span></span> </a></div><style>span {color: red;}div > a > span {color: red;}</style>对于第一种设置样式的方式来说，浏览器只需要找到页面中所有的 span 标签然后设置颜色，但是对于第二种设置样式的方式来说，浏览器首先需要找到所有的 span 标签，然后找到 span 标签上的 a 标签，最后再去找到 div 标签，然后给符合这种条件的 span 标签设置颜色，这样的递归过程就很复杂。所以我们应该尽可能的避免写过于具体的 CSS 选择器，然后对于 HTML 来说也尽量少的添加无意义标签，保证层级扁平。<p><strong>生成渲染树</strong><br>当我们生成 DOM 树和 CSSOM 树以后，就需要将这两棵树组合为渲染树。<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601449633761-aa910937-f3b5-4291-a8ee-0628c37d3bca.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"><br>在这一过程中，不是简单的将两者合并就行了。渲染树只会包括需要显示的节点和这些节点的样式信息，如果某个节点是 display: none 的，那么就不会在渲染树中显示。<br>当浏览器生成渲染树以后，就会根据渲染树来进行布局（也可以叫做回流），然后调用 GPU 绘制，合成图层，显示在屏幕上。对于这一部分的内容因为过于底层，还涉及到了硬件相关的知识，这里就不再继续展开内容了。<br>那么通过以上内容，我们已经详细了解到了浏览器从接收文件到将内容渲染在屏幕上的这一过程。接下来，我们将会来学习上半部分遗留下来的一些知识点。</p><p><strong>为什么操作 DOM 慢</strong><br>想必大家都听过操作 DOM 性能很差，但是这其中的原因是什么呢？<br>因为 DOM 是属于渲染引擎中的东西，而 JS 又是 JS 引擎中的东西。当我们通过 JS 操作 DOM 的时候，其实这个操作涉及到了两个线程之间的通信，那么势必会带来一些性能上的损耗。操作 DOM 次数一多，也就等同于一直在进行线程之间的通信，并且操作 DOM 可能还会带来重绘回流的情况，所以也就导致了性能上的问题。<br>经典面试题：插入几万个 DOM，如何实现页面不卡顿？<br>对于这道题目来说，首先我们肯定不能一次性把几万个 DOM 全部插入，这样肯定会造成卡顿，所以解决问题的重点应该是如何分批次部分渲染 DOM。大部分人应该可以想到通过 requestAnimationFrame 的方式去循环的插入 DOM，其实还有种方式去解决这个问题：虚拟滚动（virtualized scroller）。<br>这种技术的原理就是只渲染可视区域内的内容，非可见区域的那就完全不渲染了，当用户在滚动的时候就实时去替换渲染的内容。<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601449633857-a198ab6a-3d0f-49e3-bc71-cf6dad655133.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"><br>从上图中我们可以发现，即使列表很长，但是渲染的 DOM 元素永远只有那么几个，当我们滚动页面的时候就会实时去更新 DOM，这个技术就能顺利解决这道经典面试题。如果你想了解更多的内容可以了解下这个 <a href="https://link.juejin.im/?target=https://github.com/bvaughn/react-virtualized">react-virtualized</a>。</p><p><strong>什么情况阻塞渲染</strong><br>首先渲染的前提是生成渲染树，所以 HTML 和 CSS 肯定会阻塞渲染。如果你想渲染的越快，你越应该降低一开始需要渲染的文件大小，并且扁平层级，优化选择器。<br>然后当浏览器在解析到 script 标签时，会暂停构建 DOM，完成后才会从暂停的地方重新开始。也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都建议将 script 标签放在 body 标签底部的原因。<br>当然在当下，并不是说 script 标签必须放在底部，因为你可以给 script 标签添加 defer 或者 async 属性。<br>当 script 标签加上 defer 属性以后，表示该 JS 文件会并行下载，但是会放到 HTML 解析完成后顺序执行，所以对于这种情况你可以把 script 标签放在任意位置。<br>对于没有任何依赖的 JS 文件可以加上 async 属性，表示 JS 文件下载和解析不会阻塞渲染。</p><p><strong>重绘（Repaint）和回流（Reflow）</strong><br>重绘和回流会在我们设置节点样式时频繁出现，同时也会很大程度上影响性能。<br>重绘是当节点需要更改外观而不会影响布局的，比如改变 color 就叫称为重绘<br>回流是布局或者几何属性需要改变就称为回流。<br>回流必定会发生重绘，重绘不一定会引发回流。回流所需的成本比重绘高的多，改变父节点里的子节点很可能会导致父节点的一系列回流。<br>以下几个动作可能会导致性能问题：<br>改变 window 大小<br>改变字体<br>添加或删除样式<br>文字改变<br>定位或者浮动<br>盒模型<br>并且很多人不知道的是，重绘和回流其实也和 Eventloop 有关。<br>当 Eventloop 执行完 Microtasks 后，会判断 document 是否需要更新，因为浏览器是 60Hz 的刷新率，每 16.6ms 才会更新一次。<br>然后判断是否有 resize 或者 scroll 事件，有的话会去触发事件，所以 resize 和 scroll 事件也是至少 16ms 才会触发一次，并且自带节流功能。<br>判断是否触发了 media query<br>更新动画并且发送事件<br>判断是否有全屏操作事件<br>执行 requestAnimationFrame 回调<br>执行 IntersectionObserver 回调，该方法用于判断元素是否可见，可以用于懒加载上，但是兼容性不好<br>更新界面<br>以上就是一帧中可能会做的事情。如果在一帧中有空闲时间，就会去执行 requestIdleCallback 回调。<br>以上内容来自于 <a href="https://link.juejin.im/?target=https://html.spec.whatwg.org/multipage/webappapis.html%23event-loop-processing-model">HTML 文档</a>。<br>既然我们已经知道了重绘和回流会影响性能，那么接下来我们将会来学习如何减少重绘和回流的次数。</p><p><strong>减少重绘和回流</strong></p><p>使用 transform 替代 top<br>自动检测</p><div class="test"></div><style>.test {position: absolute;top: 10px;width: 100px;height: 100px;background: red;}</style><script>setTimeout(() => {// 引起回流document.querySelector('.test').style.top = '100px'}, 1000)</script>使用 visibility 替换 display: none ，因为前者只会引起重绘，后者会引发回流（改变了布局）<p>不要把节点的属性值放在一个循环里当成循环里的变量<br>自动检测<br>for(let i = 0; i &lt; 1000; i++) {<br>// 获取 offsetTop 会导致回流，因为需要去获取正确的值<br>console.log(document.querySelector(‘.test’).style.offsetTop)<br>}<br>不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局</p><p>动画实现的速度的选择，动画速度越快，回流次数越多，也可以选择使用 requestAnimationFrame</p><p>CSS 选择符从右往左匹配查找，避免节点层级过多</p><p>将频繁重绘或者回流的节点设置为图层，图层能够阻止该节点的渲染行为影响别的节点。比如对于 video 标签来说，浏览器会自动将该节点变为图层。<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601449633775-d6bf70e0-1bba-4fc0-8717-696b6d8eff3e.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"><br>设置节点为图层的方式有很多，我们可以通过以下几个常用属性可以生成新图层<br>will-change<br>video、iframe 标签</p><p><strong>思考题</strong><br>思考题：在不考虑缓存和优化网络协议的前提下，考虑可以通过哪些方式来最快的渲染页面，也就是常说的关键渲染路径，这部分也是性能优化中的一块内容。<br>首先你可能会疑问，那怎么测量到底有没有加快渲染速度呢<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601449633769-5ae71284-e687-4d4f-b57a-f0fa8193b3de.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"><br>当发生 DOMContentLoaded 事件后，就会生成渲染树，生成渲染树就可以进行渲染了，这一过程更大程度上和硬件有关系了。<br>提示如何加速：<br>从文件大小考虑<br>从 script 标签使用上来考虑<br>从 CSS、HTML 的代码书写上来考虑<br>从需要下载的内容是否需要在首屏使用上来考虑</p><h3 id="3，从输入-URL-到页面加载全过程"><a href="#3，从输入-URL-到页面加载全过程" class="headerlink" title="3，从输入 URL 到页面加载全过程"></a>3，从输入 URL 到页面加载全过程</h3><ol><li>首先做 DNS 查询，如果这一步做了智能 DNS 解析的话，会提供访问速度最快的 IP 地址回来</li><li>接下来是 TCP 握手，应用层会下发数据给传输层，这里 TCP 协议会指明两端的端口号，然后下发给网络层。网络层中的 IP 协议会确定 IP 地址，并且指示了数据传输中如何跳转路由器。然后包会再被封装到数据链路层的数据帧结构中，最后就是物理层面的传输了</li><li>TCP 握手结束后会进行 TLS 握手，然后就开始正式的传输数据</li><li>数据在进入服务端之前，可能还会先经过负责负载均衡的服务器，它的作用就是将请求合理的分发到多台服务器上，这时假设服务端会响应一个 HTML 文件</li><li>首先浏览器会判断状态码是什么，如果是 200 那就继续解析，如果 400 或 500 的话就会报错，如果 300 的话会进行重定向，这里会有个重定向计数器，避免过多次的重定向，超过次数也会报错</li><li>浏览器开始解析文件，如果是 gzip 格式的话会先解压一下，然后通过文件的编码格式知道该如何去解码文件</li><li>文件解码成功后会正式开始渲染流程，先会根据 HTML 构建 DOM 树，有 CSS 的话会去构建 CSSOM 树。如果遇到 script 标签的话，会判断是否存在 async 或者 defer，前者会并行进行下载并执行 JS，后者会先下载文件，然后等待 HTML 解析完成后顺序执行，如果以上都没有，就会阻塞住渲染流程直到 JS 执行完毕。遇到文件下载的会去下载文件，这里如果使用 HTTP 2.0 协议的话会极大的提高多图的下载效率。</li><li>初始的 HTML 被完全加载和解析后会触发 DOMContentLoaded 事件</li><li>CSSOM 树和 DOM 树构建完成后会开始生成 Render 树，这一步就是确定页面元素的布局、样式等等诸多方面的东西</li><li>在生成 Render 树的过程中，浏览器就开始调用 GPU 绘制，合成图层，将内容显示在屏幕上了</li></ol><h3 id="4，浏览器缓存机制"><a href="#4，浏览器缓存机制" class="headerlink" title="4，浏览器缓存机制"></a>4，浏览器缓存机制</h3><p>缓存对于前端性能优化来说是个很重要的点，良好的缓存策略可以降低资源的重复加载提高网页的整体加载速度。<br>通常浏览器缓存策略分为两种：强缓存和协商缓存。</p><p><strong>强缓存</strong><br>实现强缓存可以通过两种响应头实现：Expires 和 Cache-Control。强缓存表示在缓存期间不需要请求，state code 为 200<br>Expires: Wed, 22 Oct 2019 08:41:00 GMT<br>复制代码<br>Expires 是 HTTP / 1.0 的产物，表示资源会在 Wed, 22 Oct 2019 08:41:00 GMT 后过期，需要再次请求。并且 Expires 受限于本地时间，如果修改了本地时间，可能会造成缓存失效。<br>自动检测<br>Cache-control: max-age=30<br>Cache-Control 出现于 HTTP / 1.1，优先级高于 Expires。该属性表示资源会在 30 秒后过期，需要再次请求。</p><p><strong>协商缓存</strong><br>如果缓存过期了，我们就可以使用协商缓存来解决问题。协商缓存需要请求，如果缓存有效会返回 304。<br>协商缓存需要客户端和服务端共同实现，和强缓存一样，也有两种实现方式。</p><p><strong>Last-Modified 和 If-Modified-Since</strong><br>Last-Modified 表示本地文件最后修改日期，If-Modified-Since 会将 Last-Modified 的值发送给服务器，询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来。<br>但是如果在本地打开缓存文件，就会造成 Last-Modified 被修改，所以在 HTTP / 1.1 出现了 ETag。</p><p><strong>ETag 和 If-None-Match</strong><br>ETag 类似于文件指纹，If-None-Match 会将当前 ETag 发送给服务器，询问该资源 ETag 是否变动，有变动的话就将新的资源发送回来。并且 ETag 优先级比 Last-Modified 高。</p><p><strong>选择合适的缓存策略</strong><br>对于大部分的场景都可以使用强缓存配合协商缓存解决，但是在一些特殊的地方可能需要选择特殊的缓存策略</p><ul><li>对于某些不需要缓存的资源，可以使用 Cache-control: no-store，表示该资源不需要缓存</li><li>对于频繁变动的资源，可以使用 Cache-Control: no-cache 并配合 ETag 使用，表示该资源已被缓存，但是每次都会发送请求询问资源是否更新。</li><li>对于代码文件来说，通常使用 Cache-Control: max-age=31536000 并配合策略缓存使用，然后对文件进行指纹处理，一旦文件名变动就会立刻下载新的文件。</li></ul><p><strong>实际场景应用缓存策略</strong><br>单纯了解理论而不付诸于实践是没有意义的，接下来我们来通过几个场景学习下如何使用这些理论。</p><p>1，频繁变动的资源</p><p>对于频繁变动的资源，首先需要使用 Cache-Control: no-cache 使浏览器每次都请求服务器，然后配合 ETag 或者 Last-Modified 来验证资源是否有效。这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。</p><p>2，代码文件</p><p>这里特指除了 HTML 外的代码文件，因为 HTML 文件一般不缓存或者缓存时间很短。</p><p>一般来说，现在都会使用工具来打包代码，那么我们就可以对文件名进行哈希处理，只有当代码修改后才会生成新的文件名。基于此，我们就可以给代码文件设置缓存有效期一年 Cache-Control: max-age=31536000，这样只有当 HTML 文件中引入的文件名发生了改变才会去下载最新的代码文件，否则就一直使用缓存。</p><h3 id="5，调试"><a href="#5，调试" class="headerlink" title="5，调试"></a>5，调试</h3><h3 id="6，性能优化"><a href="#6，性能优化" class="headerlink" title="6，性能优化"></a>6，性能优化</h3><p><strong>静态资源的压缩合并</strong><br>如果不合并，每个都会走一遍之前介绍的请求过程<br>自动检测</p><script src="a.js"></script><script src="b.js"></script><script src="c.js"></script><p>如果合并了，就只走一遍请求过程<br>自动检测</p><script src="abc.js"></script><p><strong>静态资源缓存</strong><br>通过链接名称控制缓存,,,,.<br>自动检测</p><script src="abc_1.js"></script><p>只有内容改变的时候，链接名称才会改变<br>自动检测</p><script src="abc_2.js"></script><p>这个名称不用手动改，可通过前端构建工具根据文件内容，为文件名称添加 MD5 后缀。<br>使用 CDN 让资源加载更快<br>CDN 会提供专业的加载优化方案，静态资源要尽量放在 CDN 上。例如：<br>自动检测</p><script src="https://cdn.bootcss.com/zepto/1.0rc1/zepto.min.js"></script><p><strong>重绘（Repaint）和回流（Reflow）</strong><br>重绘和回流是渲染步骤中的一小节，但是这两个步骤对于性能影响很大。</p><ul><li>重绘是当节点需要更改外观而不会影响布局的，比如改变 color 就叫称为重绘</li><li>回流是布局或者几何属性需要改变就称为回流。</li></ul><p>回流必定会发生重绘，重绘不一定会引发回流。回流所需的成本比重绘高的多，改变深层次的节点很可能导致父节点的一系列回流。<br>所以以下几个动作可能会导致性能问题：</p><ul><li>改变 window 大小</li><li>改变字体</li><li>添加或删除样式</li><li>文字改变</li><li>定位或者浮动</li><li>盒模型</li></ul><p><strong>使用 SSR 后端渲染</strong><br>可一次性输出 HTML 内容，不用在页面渲染完成之后，再通过 Ajax 加载数据、再渲染。例如使用 smarty、Vue SSR 等。<br>CSS 放前面，JS 放后面</p><p><strong>懒加载</strong><br>一开始先给为 src 赋值成一个通用的预览图，下拉时候再动态赋值成正式的图片。如下，preview.png 是预览图片，比较小，加载很快，而且很多图片都共用这个 preview.png，加载一次即可。待页面下拉，图片显示出来时，再去替换 src 为 data-realsrc 的值。<br>自动检测<br><img src="preview.png" data-realsrc="abc.png"/ loading="lazy"><br>另外，这里为何要用 data-开头的属性值？—— 所有 HTML 中自定义的属性，都应该用 data-开头，因为 data-开头的属性浏览器渲染的时候会忽略掉，提高渲染性能。</p><p><strong>DOM 查询做缓存</strong><br>两段代码做一下对比：<br>自动检测<br>var pList = document.getElementsByTagName(‘p’) // 只查询一个 DOM ，缓存在 pList 中了<br>var i<br>for (i = 0; i &lt; pList.length; i++) {<br>}<br>var i<br>for (i = 0; i &lt; document.getElementsByTagName(‘p’).length; i++) { // 每次循环，都会查询 DOM ，耗费性能<br>}<br>总结：DOM 操作，无论查询还是修改，都是非常耗费性能的，应尽量减少。</p><p><strong>合并 DOM 插入</strong><br>DOM 操作是非常耗费性能的，因此插入多个标签时，先插入 Fragment 然后再统一插入 DOM。<br>自动检测<br>var listNode = document.getElementById(‘list’)<br>// 要插入 10 个 li 标签<br>var frag = document.createDocumentFragment();<br>var x, li;<br>for(x = 0; x &lt; 10; x++) {<br>li = document.createElement(“li”);<br>li.innerHTML = “List item “ + x;<br>frag.appendChild(li); // 先放在 frag 中，最后一次性插入到 DOM 结构中。<br>}<br>listNode.appendChild(frag);</p><p><strong>事件节流</strong><br>例如要在文字改变时触发一个 change 事件，通过 keyup 来监听。使用节流。<br>自动检测<br>var textarea = document.getElementById(‘text’)<br>var timeoutId<br>textarea.addEventListener(‘keyup’, function () {<br>if (timeoutId) {<br>clearTimeout(timeoutId)<br>}<br>timeoutId = setTimeout(function () {<br>// 触发 change 事件<br>}, 100)<br>})<br>// 尽早执行操作<br>window.addEventListener(‘load’, function () {<br>// 页面的全部资源加载完才会执行，包括图片、视频等<br>})<br>document.addEventListener(‘DOMContentLoaded’, function () {<br>// DOM 渲染完即可执行，此时图片、视频还可能没有加载完<br>})</p><p><strong>DNS 预解析</strong><br>DNS 解析也是需要时间的，可以通过预解析的方式来预先获得域名所对应的 IP。<br>自动检测</p><link rel="dns-prefetch" href="//yuchengkai.cn"><p><strong>节流</strong><br>考虑一个场景，滚动事件中会发起网络请求，但是我们并不希望用户在滚动过程中一直发起请求，而是隔一段时间发起一次，对于这种情况我们就可以使用节流。<br>理解了节流的用途，我们就来实现下这个函数<br>自动检测<br>// func 是用户传入需要防抖的函数<br>// wait 是等待时间<br>const throttle = (func, wait = 50) =&gt; {<br>// 上一次执行该函数的时间<br>let lastTime = 0<br>return function(…args) {<br>// 当前时间<br>let now = +new Date()<br>// 将当前时间和上一次执行函数时间对比<br>// 如果差值大于设置的等待时间就执行函数<br>if (now - lastTime &gt; wait) {<br>lastTime = now<br>func.apply(this, args)<br>}<br>}<br>}<br>setInterval(<br>throttle(() =&gt; {<br>console.log(1)<br>}, 500),<br>1<br>)</p><p><strong>防抖</strong><br>考虑一个场景，有一个按钮点击会触发网络请求，但是我们并不希望每次点击都发起网络请求，而是当用户点击按钮一段时间后没有再次点击的情况才去发起网络请求，对于这种情况我们就可以使用防抖。<br>理解了防抖的用途，我们就来实现下这个函数<br>自动检测<br>// func 是用户传入需要防抖的函数<br>// wait 是等待时间<br>const debounce = (func, wait = 50) =&gt; {<br>// 缓存一个定时器 id<br>let timer = 0<br>// 这里返回的函数是每次用户实际调用的防抖函数<br>// 如果已经设定过定时器了就清空上一次的定时器<br>// 开始一个新的定时器，延迟执行用户传入的方法<br>return function(…args) {<br>if (timer) clearTimeout(timer)<br>timer = setTimeout(() =&gt; {<br>func.apply(this, args)<br>}, wait)<br>}<br>}</p><p><strong>预加载</strong><br>在开发中，可能会遇到这样的情况。有些资源不需要马上用到，但是希望尽早获取，这时候就可以使用预加载。<br>预加载其实是声明式的 fetch ，强制浏览器请求资源，并且不会阻塞 onload 事件，可以使用以下代码开启预加载<br>自动检测</p><link rel="preload" href="http://example.com">预加载可以一定程度上降低首屏的加载时间，因为可以将一些不影响首屏但重要的文件延后加载，唯一缺点就是兼容性不好。<p><strong>预渲染</strong><br>可以通过预渲染将下载的文件预先在后台渲染，可以使用以下代码开启预渲染<br>自动检测</p><link rel="prerender" href="http://example.com"> 预渲染虽然可以提高页面的加载速度，但是要确保该页面大概率会被用户在之后打开，否则就是白白浪费资源去渲染。<p><strong>懒执行</strong><br>懒执行就是将某些逻辑延迟到使用时再计算。该技术可以用于首屏优化，对于某些耗时逻辑并不需要在首屏就使用的，就可以使用懒执行。懒执行需要唤醒，一般可以通过定时器或者事件的调用来唤醒。</p><p><strong>懒加载</strong><br>懒加载就是将不关键的资源延后加载。<br>懒加载的原理就是只加载自定义区域（通常是可视区域，但也可以是即将进入可视区域）内需要加载的东西。对于图片来说，先设置图片标签的 src 属性为一张占位图，将真实的图片资源放入一个自定义属性中，当进入自定义区域时，就将自定义属性替换为 src 属性，这样图片就会去下载资源，实现了图片懒加载。<br>懒加载不仅可以用于图片，也可以使用在别的资源上。比如进入可视区域才开始播放视频等等。</p><p><strong>CDN</strong><br>CDN 的原理是尽可能的在各个地方分布机房缓存数据，这样即使我们的根服务器远在国外，在国内的用户也可以通过国内的机房迅速加载资源。<br>因此，我们可以将静态资源尽量使用 CDN 加载，由于浏览器对于单个域名有并发请求上限，可以考虑使用多个 CDN 域名。并且对于 CDN 加载静态资源需要注意 CDN 域名要与主站不同，否则每次请求都会带上主站的 Cookie，平白消耗流量。</p><p><strong>计算图片大小</strong><br>对于一张 100 _ 100 像素的图片来说，图像上有 10000 个像素点，如果每个像素的值是 <strong>RGBA</strong> 存储的话，那么也就是说每个像素有 4 个通道，每个通道 1 个字节（8 位 = 1 个字节），所以该图片大小大概为 39KB（10000 _ 1 * 4 / 1024）。<br>但是在实际项目中，一张图片可能并不需要使用那么多颜色去显示，我们可以通过减少每个像素的调色板来相应缩小图片的大小。<br>了解了如何计算图片大小的知识，那么对于如何优化图片，想必大家已经有 2 个思路了：</p><ul><li><strong>减少像素点</strong></li><li><strong>减少每个像素点能够显示的颜色</strong></li></ul><p><strong>图片加载优化</strong></p><ol><li>不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片完全可以用 CSS 去代替。</li><li>对于移动端来说，屏幕宽度就那么点，完全没有必要去加载原图浪费带宽。一般图片都用 CDN 加载，可以计算出适配屏幕的宽度，然后去请求相应裁剪好的图片。</li><li>小图使用 base64 格式</li><li>将多个图标文件整合到一张图片中（雪碧图）</li><li>选择正确的图片格式：</li><li>对于能够显示 WebP 格式的浏览器尽量使用 WebP 格式。因为 WebP 格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好</li><li>小图使用 PNG，其实对于大部分图标这类图片，完全可以使用 SVG 代替</li><li>照片使用 JPEG</li></ol><p><strong>其他文件优化</strong><br>CSS 文件放在 head 中<br>服务端开启文件压缩功能<br>将 script 标签放在 body 底部，因为 JS 文件执行会阻塞渲染。当然也可以把 script 标签放在任意位置然后加上 defer ，表示该文件会并行下载，但是会放到 HTML 解析完成后顺序执行。对于没有任何依赖的 JS 文件可以加上 async ，表示加载和渲染后续文档元素的过程将和 JS 文件的加载与执行并行无序进行。<br>执行 JS 代码过长会卡住渲染，对于需要很多时间计算的代码可以考虑使用 Webworker。Webworker 可以让我们另开一个线程执行脚本而不影响渲染。</p><p><strong>使用 Webpack 优化项目</strong><br>对于 Webpack4，打包项目使用 production 模式，这样会自动开启代码压缩<br>使用 ES6 模块来开启 tree shaking，这个技术可以移除没有使用的代码<br>优化图片，对于小图可以使用 base64 的方式写入文件中<br>按照路由拆分代码，实现按需加载<br>给打包出来的文件名添加哈希，实现浏览器缓存文件</p><p><strong>性能优化怎么做</strong><br>上面提到的都是性能优化的单个点，性能优化项目具体实施起来，应该按照下面步骤推进：</p><ol><li>建立性能数据收集平台，摸底当前性能数据，通过性能打点，将上述整个页面打开过程消耗时间记录下来</li><li>分析耗时较长时间段原因，寻找优化点，确定优化目标</li><li>开始优化</li><li>通过数据收集平台记录优化效果</li><li>不断调整优化点和预期目标，循环 2~4 步骤</li></ol><p>性能优化是个长期的事情，不是一蹴而就的，应该本着先摸底、再分析、后优化的原则逐步来做。</p><h3 id="6，图片格式"><a href="#6，图片格式" class="headerlink" title="6，图片格式"></a>6，图片格式</h3><p><a href="https://juejin.im/post/5ce189e051882525ce3930ee">https://juejin.im/post/5ce189e051882525ce3930ee</a></p><h3 id="7，浏览器缓存"><a href="#7，浏览器缓存" class="headerlink" title="7，浏览器缓存"></a>7，浏览器缓存</h3><p>缓存可以说是性能优化中<strong>简单高效</strong>的一种优化方式了，它可以<strong>显著减少网络传输所带来的损耗</strong>。<br>对于一个数据请求来说，可以分为发起网络请求、后端处理、浏览器响应三个步骤。浏览器缓存可以帮助我们在第一和第三步骤中优化性能。比如说直接使用缓存而不发起请求，或者发起了请求但后端存储的数据和前端一致，那么就没有必要再将数据回传回来，这样就减少了响应数据。<br>接下来的内容中我们将通过以下几个部分来探讨浏览器缓存机制：</p><ul><li>缓存位置</li><li>缓存策略</li><li>实际场景应用缓存策略</li></ul><p><strong>缓存位置</strong><br>从缓存位置上来说分为四种，并且各自有<strong>优先级</strong>，当依次查找缓存且都没有命中的时候，才会去请求网络</p><ol><li>Service Worker</li><li>Memory Cache</li><li>Disk Cache</li><li>Push Cache</li><li>网络请求</li></ol><p><strong>Service Worker</strong><br>在上一章节中我们已经介绍了 Service Worker 的内容，这里就不演示相关的代码了。<br>Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们<strong>自由控制</strong>缓存哪些文件、如何匹配缓存、如何读取缓存，并且<strong>缓存是持续性的</strong>。<br>当 Service Worker 没有命中缓存的时候，我们需要去调用 fetch 函数获取数据。也就是说，如果我们没有在 Service Worker 命中缓存的话，会根据缓存查找优先级去查找数据。<strong>但是不管我们是从 Memory Cache 中还是从网络请求中获取的数据，浏览器都会显示我们是从 Service Worker 中获取的内容。</strong></p><p><strong>Memory Cache</strong><br>Memory Cache 也就是内存中的缓存，读取内存中的数据肯定比磁盘快。<strong>但是内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。</strong> 一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。<br>当我们访问过页面以后，再次刷新页面，可以发现很多数据都来自于内存缓存<br>从内存中读取缓存<br>那么既然内存缓存这么高效，我们是不是能让数据都存放在内存中呢？<br>先说结论，这是<strong>不可能</strong>的。首先计算机中的内存一定比硬盘容量小得多，操作系统需要精打细算内存的使用，所以能让我们使用的内存必然不多。内存中其实可以存储大部分的文件，比如说 JSS、HTML、CSS、图片等等。但是浏览器会把哪些文件丢进内存这个过程就很<strong>玄学</strong>了，我查阅了很多资料都没有一个定论。<br>当然，我通过一些实践和猜测也得出了一些结论：</p><ul><li>对于大文件来说，大概率是不存储在内存中的，反之优先</li><li>当前系统内存使用率高的话，文件优先存储进硬盘</li></ul><p><strong>Disk Cache</strong><br>Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache <strong>胜在容量和存储时效性上。</strong><br>在所有浏览器缓存中，Disk Cache 覆盖面基本是最大的。它会根据 HTTP Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。<strong>并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。</strong></p><p><strong>Push Cache</strong><br>Push Cache 是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。<strong>并且缓存时间也很短暂，只在会话（Session）中存在，一旦会话结束就被释放。</strong><br>Push Cache 在国内能够查到的资料很少，也是因为 HTTP/2 在国内不够普及，但是 HTTP/2 将会是日后的一个趋势。这里推荐阅读 <a href="https://link.juejin.im/?target=https://jakearchibald.com/2017/h2-push-tougher-than-i-thought/">HTTP/2 push is tougher than I thought</a> 这篇文章，但是内容是英文的，我翻译一下文章中的几个结论，有能力的同学还是推荐自己阅读</p><ul><li>所有的资源都能被推送，但是 Edge 和 Safari 浏览器兼容性不怎么好</li><li>可以推送 no-cache 和 no-store 的资源</li><li>一旦连接被关闭，Push Cache 就被释放</li><li>多个页面可以使用相同的 HTTP/2 连接，也就是说能使用同样的缓存</li><li>Push Cache 中的缓存只能被使用一次</li><li>浏览器可以拒绝接受已经存在的资源推送</li><li>你可以给其他域名推送资源</li></ul><p><strong>网络请求</strong><br>如果所有缓存都没有命中的话，那么只能发起请求来获取资源了。<br>那么为了性能上的考虑，大部分的接口都应该选择好缓存策略，接下来我们就来学习缓存策略这部分的内容。</p><p><strong>缓存策略</strong><br>通常浏览器缓存策略分为两种：<strong>强缓存</strong>和<strong>协商缓存</strong>，并且缓存策略都是通过设置 HTTP Header 来实现的。</p><p><strong>强缓存</strong><br>强缓存可以通过设置两种 HTTP Header 实现：Expires 和 Cache-Control 。强缓存表示在缓存期间不需要请求，state code 为 200。<br>Expires<br>Expires: Wed, 22 Oct 2019 08:41:00 GMT<br>Expires 是 HTTP/1 的产物，表示资源会在 Wed, 22 Oct 2019 08:41:00 GMT 后过期，需要再次请求。并且 Expires <strong>受限于本地时间</strong>，如果修改了本地时间，可能会造成缓存失效。<br>Cache-control<br>Cache-control: max-age=30<br>Cache-Control 出现于 HTTP/1.1，<strong>优先级高于 Expires</strong> 。该属性值表示资源会在 30 秒后过期，需要再次请求。<br>Cache-Control <strong>可以在请求头或者响应头中设置</strong>，并且可以组合使用多种指令<br>多种指令配合流程图<br>从图中我们可以看到，我们可以将<strong>多个指令配合起来一起使用</strong>，达到多个目的。比如说我们希望资源能被缓存下来，并且是客户端和代理服务器都能缓存，还能设置缓存失效时间等等。<br>接下来我们就来学习一些常见指令的作用<br>常见指令作用<br><strong>协商缓存</strong><br>如果缓存过期了，就需要发起请求验证资源是否有更新。协商缓存可以通过设置两种 HTTP Header 实现：Last-Modified 和 ETag 。<br>当浏览器发起请求验证资源时，如果资源没有做改变，那么服务端就会返回 304 状态码，并且更新浏览器缓存有效期。<br>协商缓存<br>Last-Modified 和 If-Modified-Since<br>Last-Modified 表示本地文件最后修改日期，If-Modified-Since 会将 Last-Modified 的值发送给服务器，询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来，否则返回 304 状态码。<br>但是 Last-Modified 存在一些弊端：</p><ul><li>如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 Last-Modified 被修改，服务端不能命中缓存导致发送相同的资源</li><li>因为 Last-Modified 只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源</li></ul><p>因为以上这些弊端，所以在 HTTP / 1.1 出现了 ETag 。<br>ETag 和 If-None-Match<br>ETag 类似于文件指纹，If-None-Match 会将当前 ETag 发送给服务器，询问该资源 ETag 是否变动，有变动的话就将新的资源发送回来。并且 ETag 优先级比 Last-Modified 高。<br>以上就是缓存策略的所有内容了，看到这里，不知道你是否存在这样一个疑问。<strong>如果什么缓存策略都没设置，那么浏览器会怎么处理？</strong><br>对于这种情况，浏览器会采用一个启发式的算法，通常会取响应头中的 Date 减去 Last-Modified 值的 10% 作为缓存时间。</p><p><strong>实际场景应用缓存策略</strong><br>单纯了解理论而不付诸于实践是没有意义的，接下来我们来通过几个场景学习下如何使用这些理论。</p><p><strong>频繁变动的资源</strong><br>对于频繁变动的资源，首先需要使用 Cache-Control: no-cache 使浏览器每次都请求服务器，然后配合 ETag 或者 Last-Modified 来验证资源是否有效。这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。</p><p><strong>代码文件</strong><br>这里特指除了 HTML 外的代码文件，因为 HTML 文件一般不缓存或者缓存时间很短。<br>一般来说，现在都会使用工具来打包代码，那么我们就可以对文件名进行哈希处理，只有当代码修改后才会生成新的文件名。基于此，我们就可以给代码文件设置缓存有效期一年 Cache-Control: max-age=31536000，这样只有当 HTML 文件中引入的文件名发生了改变才会去下载最新的代码文件，否则就一直使用缓存。</p><h2 id="前端安全"><a href="#前端安全" class="headerlink" title="前端安全"></a><strong>前端安全</strong></h2><h3 id="1，XSS（Cross-Site-Scripting，跨站脚本攻击）"><a href="#1，XSS（Cross-Site-Scripting，跨站脚本攻击）" class="headerlink" title="1，XSS（Cross Site Scripting，跨站脚本攻击）"></a><strong>1，XSS（Cross Site Scripting，跨站脚本攻击）</strong></h3><p>这是前端最常见的攻击方式，很多大型网站（如 Facebook）都被 XSS 攻击过。</p><p>举一个例子，我在一个博客网站正常发表一篇文章，输入汉字、英文和图片，完全没有问题。但是如果我写的是恶意的 JS 脚本，例如获取到 document.cookie 然后传输到自己的服务器上，那我这篇博客的每一次浏览都会执行这个脚本，都会把访客 cookie 中的信息偷偷传递到我的服务器上来。</p><p>其实原理上就是黑客通过某种方式（发布文章、发布评论等）将一段特定的 JS 代码隐蔽地输入进去。然后别人再看这篇文章或者评论时，之前注入的这段 JS 代码就执行了。JS 代码一旦执行，那可就不受控制了，因为它跟网页原有的 JS 有同样的权限，例如可以获取 server 端数据、可以获取 cookie 等。于是，攻击就这样发生了。</p><p>XSS 的危害<br>XSS 的危害相当大，如果页面可以随意执行别人不安全的 JS 代码，轻则会让页面错乱、功能缺失，重则会造成用户的信息泄露。</p><p>比如早些年社交网站经常爆出 XSS 蠕虫，通过发布的文章内插入 JS，用户访问了感染不安全 JS 注入的文章，会自动重新发布新的文章，这样的文章会通过推荐系统进入到每个用户的文章列表面前，很快就会造成大规模的感染。</p><p>还有利用获取 cookie 的方式，将 cookie 传入入侵者的服务器上，入侵者就可以模拟 cookie 登录网站，对用户的信息进行篡改。</p><p>XSS 的预防<br>那么如何预防 XSS 攻击呢？—— 最根本的方式，就是对用户输入的内容进行验证和替换，需要替换的字符有：</p><p>&amp; 替换为：&amp;<br>&lt; 替换为：&lt;</p><blockquote><p>替换为：&gt;<br>” 替换为：”<br>‘ 替换为：’<br>/ 替换为：/<br>替换了这些字符之后，黑客输入的攻击代码就会失效，XSS 攻击将不会轻易发生。</p></blockquote><p>除此之外，还可以通过对 cookie 进行较强的控制，比如对敏感的 cookie 增加 http-only 限制，让 JS 获取不到 cookie 的内容。</p><h3 id="2，CSRF（Cross-site-request-forgery，跨站请求伪造）"><a href="#2，CSRF（Cross-site-request-forgery，跨站请求伪造）" class="headerlink" title="2，CSRF（Cross-site request forgery，跨站请求伪造）"></a><strong>2，CSRF（Cross-site request forgery，跨站请求伪造）</strong></h3><p>CSRF 是借用了当前操作者的权限来偷偷地完成某个操作，而不是拿到用户的信息。</p><p>例如，一个支付类网站，给他人转账的接口是<a href="http://buy.com/pay?touid=999&money=100">http://buy.com/pay?touid=999&amp;money=100</a>，而这个接口在使用时没有任何密码或者 token 的验证，只要打开访问就直接给他人转账。一个用户已经登录了<a href="http://buy.com/">http://buy.com</a>，在选择商品时，突然收到一封邮件，而这封邮件正文有这么一行代码<img src="[http://buy.com/pay?touid=999&money=100](http://buy.com/pay?touid=999&money=100)"/ loading="lazy">，他访问了邮件之后，其实就已经完成了购买。</p><p>CSRF 的发生其实是借助了一个 cookie 的特性。我们知道，登录了<a href="http://buy.com/">http://buy.com</a>之后，cookie 就会有登录过的标记了，此时请求<a href="http://buy.com/pay?touid=999&money=100">http://buy.com/pay?touid=999&amp;money=100</a>是会带着 cookie 的，因此 server 端就知道已经登录了。而如果在<a href="http://buy.com/">http://buy.com</a>去请求其他域名的 API 例如<a href="http://abc.com/api">http://abc.com/api</a>时，是不会带 cookie 的，这是浏览器的同源策略的限制。但是 —— 此时在其他域名的页面中，请求<a href="http://buy.com/pay?touid=999&money=100">http://buy.com/pay?touid=999&amp;money=100</a>，会带着<a href="http://buy.com/">buy.com</a>的 cookie ，这是发生 CSRF 攻击的理论基础。</p><p>预防 CSRF 就是加入各个层级的权限验证，例如现在的购物网站，只要涉及现金交易，肯定要输入密码或者指纹才行。除此之外，敏感的接口使用 POST 请求而不是 GET 也是很重要的。</p><h3 id="3，XSS"><a href="#3，XSS" class="headerlink" title="3，XSS"></a>3，XSS</h3><p>涉及面试题：什么是 XSS 攻击？如何防范 XSS 攻击？什么是 CSP？<br>XSS 简单点来说，就是攻击者想尽一切办法将可以执行的代码注入到网页中。<br>XSS 可以分为多种类型，但是总体上我认为分为两类：<strong>持久型和非持久型</strong>。<br>持久型也就是攻击的代码被服务端写入进<strong>数据库</strong>中，这种攻击危害性很大，因为如果网站访问量很大的话，就会导致大量正常访问页面的用户都受到攻击。<br>举个例子，对于评论功能来说，就得防范持久型 XSS 攻击，因为我可以在评论中输入以下内容<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601449633815-94ba5c50-88df-4b41-bd04-339671101aef.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"><br>这种情况如果前后端没有做好防御的话，这段评论就会被存储到数据库中，这样每个打开该页面的用户都会被攻击到。<br>非持久型相比于前者危害就小的多了，一般通过<strong>修改 URL 参数</strong>的方式加入攻击代码，诱导用户访问链接从而进行攻击。<br>举个例子，如果页面需要从 URL 中获取某些参数作为内容的话，不经过过滤就会导致攻击代码被执行</p><!-- [http://www.domain.com?name=](http://www.domain.com/?name=)<script>alert(1)</script> --><div></div>                                                  但是对于这种攻击方式来说，如果用户使用 Chrome 这类浏览器的话，浏览器就能自动帮助用户防御攻击。但是我们不能因此就不防御此类攻击了，因为我不能确保用户都使用了该类浏览器。![](https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601449633825-af1a5fd6-d680-40d3-ae09-e205d5bc6144.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15)对于 XSS 攻击来说，通常有两种方式可以用来防御。<p><strong>转义字符</strong><br>首先，对于用户的输入应该是永远不信任的。最普遍的做法就是转义输入输出的内容，对于引号、尖括号、斜杠进行转义<br>自动检测<br>function escape(str) {<br>str = str.replace(/&amp;/g, ‘&amp;’)<br>str = str.replace(/&lt;/g, ‘&lt;’)<br>str = str.replace(/&gt;/g, ‘&gt;’)<br>str = str.replace(/“/g, ‘&quto;’)<br>str = str.replace(/‘/g, ‘’’)<br>str = str.replace(/<code>/g, &#39;</code>‘)<br>str = str.replace(///g, ‘/‘)<br>return str<br>}<br>通过转义可以将攻击代码 <script>alert(1)</script> 变成<br>// -&gt; <script>alert(1)</script><br>escape(‘<script>alert(1)</script>‘)</p><p>但是对于显示富文本来说，显然不能通过上面的办法来转义所有字符，因为这样会把需要的格式也过滤掉。对于这种情况，通常采用白名单过滤的办法，当然也可以通过黑名单过滤，但是考虑到需要过滤的标签和标签属性实在太多，更加推荐使用白名单的方式。<br>自动检测<br>const xss = require(‘xss’)<br>let html = xss(‘<h1 id="title">XSS Demo</h1><script>alert("xss");</script>‘)<br>// -&gt; <h1>XSS Demo</h1><script>alert("xss");</script><br>console.log(html)</p><p>以上示例使用了 js-xss 来实现，可以看到在输出中保留了 h1 标签且过滤了 script 标签。</p><h3 id="4，CSP"><a href="#4，CSP" class="headerlink" title="4，CSP"></a>4，CSP</h3><p>CSP 本质上就是建立白名单，开发者明确告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截是由浏览器自己实现的。我们可以通过这种方式来尽量减少 XSS 攻击。<br>通常可以通过两种方式来开启 CSP：</p><ol><li>设置 HTTP Header 中的 Content-Security-Policy</li><li>设置 meta 标签的方式 <meta http-equiv="Content-Security-Policy"></li></ol><p>这里以设置 HTTP Header 来举例<br>只允许加载本站资源</p><ul><li>Content-Security-Policy: default-src ‘self’</li></ul><p>只允许加载 HTTPS 协议图片</p><ul><li>Content-Security-Policy: img-src https://*</li></ul><p>允许加载任何来源框架</p><ul><li>Content-Security-Policy: child-src ‘none’</li></ul><p>当然可以设置的属性远不止这些，你可以通过查阅 <a href="https://link.juejin.im/?target=https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">文档</a> 的方式来学习，这里就不过多赘述其他的属性了。<br>对于这种方式来说，只要开发者配置了正确的规则，那么即使网站存在漏洞，攻击者也不能执行它的攻击代码，并且 CSP 的兼容性也不错。<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601449633985-f87f543b-df4c-4b74-939a-46b42b1136d7.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"></p><h3 id="5，CSRF"><a href="#5，CSRF" class="headerlink" title="5，CSRF"></a>5，CSRF</h3><p>涉及面试题：什么是 CSRF 攻击？如何防范 CSRF 攻击？<br>CSRF 中文名为跨站请求伪造。原理就是攻击者构造出一个后端请求地址，诱导用户点击或者通过某些途径自动发起请求。如果用户是在登录状态下的话，后端就以为是用户在操作，从而进行相应的逻辑。<br>举个例子，假设网站中有一个通过 GET 请求提交用户评论的接口，那么攻击者就可以在钓鱼网站中加入一个图片，图片的地址就是评论接口<br><img src="http://www.domain.com/xxx?comment='attack'"/ loading="lazy"><br>那么你是否会想到使用 POST 方式提交请求是不是就没有这个问题了呢？其实并不是，使用这种方式也不是百分百安全的，攻击者同样可以诱导用户进入某个页面，在页面中通过表单提交 POST 请求。</p><p><strong>如何防御</strong><br>防范 CSRF 攻击可以遵循以下几种规则：</p><ol><li>Get 请求不对数据进行修改</li><li>不让第三方网站访问到用户 Cookie</li><li>阻止第三方网站请求接口</li><li>请求时附带验证信息，比如验证码或者 Token</li></ol><p>SameSite<br>可以对 Cookie 设置 SameSite 属性。该属性表示 Cookie 不随着跨域请求发送，可以很大程度减少 CSRF 的攻击，但是该属性目前并不是所有浏览器都兼容。<br>验证 Referer<br>对于需要防范 CSRF 的请求，我们可以通过验证 Referer 来判断该请求是否为第三方网站发起的。<br>Token<br>服务器下发一个随机 Token，每次发起请求时将 Token 携带上，服务器验证 Token 是否有效。</p><h3 id="6，点击劫持"><a href="#6，点击劫持" class="headerlink" title="6，点击劫持"></a>6，点击劫持</h3><p>涉及面试题：什么是点击劫持？如何防范点击劫持？<br>点击劫持是一种视觉欺骗的攻击手段。攻击者将需要攻击的网站通过 iframe 嵌套的方式嵌入自己的网页中，并将 iframe 设置为透明，在页面中透出一个按钮诱导用户点击。<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601449633803-172f0a99-7241-4f8c-ac2f-1ee151922d7e.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"><br>对于这种攻击方式，推荐防御的方法有两种。</p><h3 id="1，X-FRAME-OPTIONS"><a href="#1，X-FRAME-OPTIONS" class="headerlink" title="1，X-FRAME-OPTIONS"></a><strong>1，X-FRAME-OPTIONS</strong></h3><p>X-FRAME-OPTIONS 是一个 HTTP 响应头，在现代浏览器有一个很好的支持。这个 HTTP 响应头 就是为了防御用 iframe 嵌套的点击劫持攻击。<br>该响应头有三个值可选，分别是</p><ul><li>DENY，表示页面不允许通过 iframe 的方式展示</li><li>SAMEORIGIN，表示页面可以在相同域名下通过 iframe 的方式展示</li><li>ALLOW-FROM，表示页面可以在指定来源的 iframe 中展示</li></ul><h3 id="2，-JS-防御"><a href="#2，-JS-防御" class="headerlink" title="2， JS 防御"></a>2， JS 防御</h3><p>对于某些远古浏览器来说，并不能支持上面的这种方式，那我们只有通过 JS 的方式来防御点击劫持了。<br>自动检测</p><head><style id="click-jack">html {display: none !important;}</style></head><body><script>if (self == top) {var style = document.getElementById('click-jack')document.body.removeChild(style)} else {top.location = self.location}</script></body><p>以上代码的作用就是当通过 iframe 的方式加载页面时，攻击者的网页直接不显示所有内容了。</p><h3 id="9，中间人攻击"><a href="#9，中间人攻击" class="headerlink" title="9，中间人攻击"></a>9，中间人攻击</h3><p>涉及面试题：什么是中间人攻击？如何防范中间人攻击？<br>中间人攻击是攻击方同时与服务端和客户端建立起了连接，并让对方认为连接是安全的，但是实际上整个通信过程都被攻击者控制了。攻击者不仅能获得双方的通信信息，还能修改通信信息。<br>通常来说不建议使用公共的 Wi-Fi，因为很可能就会发生中间人攻击的情况。如果你在通信的过程中涉及到了某些敏感信息，就完全暴露给攻击方了。<br>当然防御中间人攻击其实并不难，只需要增加一个安全通道来传输信息。HTTPS 就可以用来防御中间人攻击，但是并不是说使用了 HTTPS 就可以高枕无忧了，因为如果你没有完全关闭 HTTP 访问的话，攻击方可以通过某些方式将 HTTPS 降级为 HTTP 从而实现中间人攻击。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="前端常遇见的数据结构："><a href="#前端常遇见的数据结构：" class="headerlink" title="前端常遇见的数据结构："></a>前端常遇见的数据结构：</h3><ul><li>简单数据结构（必须理解掌握）</li><li>有序数据结构：栈、队列、链表，有序数据结构省空间（存储空间小）</li><li>无序数据结构：集合、字典、散列表，无序数据结构省时间（读取时间快）</li><li>复杂数据结构</li><li>树、堆</li><li>图</li></ul><p>对于简单数据结构，在 ES 中对应的是数组（Array）和对象（Object）。可以想一下，数组的存储是有序的，对象的存储是无序的，但是我要在对象中根据 key 找到一个值是立即返回的，数组则需要查找的过程。<br>这里我通过一个真实面试题目来说明介绍下数据结构设计。<br>题目：使用 ECMAScript（JS）代码实现一个事件类 Event，包含下面功能：绑定事件、解绑事件和派发事件。<br>在稍微复杂点的页面中，比如组件化开发的页面，同一个页面由两三个人来开发，为了保证组件的独立性和降低组件间耦合度，我们往往使用「订阅发布模式」，即组件间通信使用事件监听和派发的方式，而不是直接相互调用组件方法，这就是题目要求写的 Event 类。<br>这个题目的核心是一个事件类型对应回调函数的数据设计。为了实现绑定事件，我们需要一个_cache 对象来记录绑定了哪些事件。而事件发生的时候，我们需要从_cache 中读取出来事件回调，依次执行它们。一般页面中事件派发（读）要比事件绑定（写）多。所以我们设计的数据结构应该尽量地能够在事件发生时，更加快速地找到对应事件的回调函数们，然后执行。<br>经过这样一番考虑，我简单写了下代码实现：<br>自动检测<br>class Event {<br>constructor() {<br>// 存储事件的数据结构<br>// 为了查找迅速，使用了对象（字典）<br>this._cache = {};<br>}<br>// 绑定<br>on(type, callback) {<br>// 为了按类查找方便和节省空间，<br>// 将同一类型事件放到一个数组中<br>// 这里的数组是队列，遵循先进先出<br>// 即先绑定的事件先触发<br>let fns = (this._cache[type] = this._cache[type] || []);<br>if (fns.indexOf(callback) === -1) {<br>fns.push(callback);<br>}<br>return this;<br>}<br>// 触发<br>trigger(type, data) {<br>let fns = this._cache[type];<br>if (Array.isArray(fns)) {<br>fns.forEach((fn) =&gt; {<br>fn(data);<br>});<br>}<br>return this;<br>}<br>// 解绑<br>off(type, callback) {<br>let fns = this._cache[type];<br>if (Array.isArray(fns)) {<br>if (callback) {<br>let index = fns.indexOf(callback);<br>if (index !== -1) {<br>fns.splice(index, 1);<br>}<br>} else {<br>//全部清空<br>fns.length = 0;<br>}<br>}<br>return this;<br>}<br>}<br>// 测试用例<br>const event = new Event();<br>event.on(‘test’, (a) =&gt; {<br>console.log(a);<br>});<br>event.trigger(‘test’, ‘hello world’);<br>event.off(‘test’);<br>event.trigger(‘test’, ‘hello world’);<br>类似于树、堆、图这些高级数据结构，前端一般也不会考查太多，但是它们的查找方法却常考，后面介绍。高级数据应该平时多积累，好好理解，比如理解了堆是什么样的数据结构，在面试中遇见的「查找最大的 K 个数」这类算法问题，就会迎刃而解。</p><h3 id="算法的效率是通过算法复杂度来衡量的（大-O-表示法）"><a href="#算法的效率是通过算法复杂度来衡量的（大-O-表示法）" class="headerlink" title="算法的效率是通过算法复杂度来衡量的（大 O 表示法）"></a>算法的效率是通过算法复杂度来衡量的（大 O 表示法）</h3><p>算法的好坏可以通过算法复杂度来衡量，算法复杂度包括时间复杂度和空间复杂度两个。时间复杂度由于好估算、好评估等特点，是面试中考查的重点。空间复杂度在面试中考查得不多。<br>常见的时间复杂度有：</p><ul><li>常数阶 O(1)</li><li>对数阶 O(logN)</li><li>线性阶 O(n)</li><li>线性对数阶 O(nlogN)</li><li>平方阶 O(n^2)</li><li>立方阶 O(n^3)</li><li>!k 次方阶 O(n^k)</li><li>指数阶 O(2^n)</li></ul><p>随着问题规模 n 的不断增大，上述时间复杂度不断增大，算法的执行效率越低。<br>一般做算法复杂度分析的时候，遵循下面的技巧：</p><ol><li>看看有几重循环，一般来说一重就是 O(n)，两重就是 O(n^2)，以此类推</li><li>如果有二分，则为 O(logN)</li><li>保留最高项，去除常数项</li></ol><p>题目：分析下面代码的算法复杂度（为了方便，我已经在注释中加了代码分析）<br>自动检测<br>let i =0; // 语句执行一次<br>while (i &lt; n) { // 语句执行 n 次<br>console.log(<code>Current i is $&#123;i&#125;</code>); //语句执行 n 次<br>i++; // 语句执行 n 次<br>}<br>根据注释可以得到，算法复杂度为 1 + n + n + n = 1 + 3n，去除常数项，为 O(n)。<br>自动检测<br>let number = 1; // 语句执行一次<br>while (number &lt; n) { // 语句执行 logN 次<br>number _= 2; // 语句执行 logN 次<br>}<br>上面代码 while 的跳出判断条件是 number&lt;n，而循环体内 number 增长速度是(2^n)，所以循环代码实际执行 logN 次，复杂度为：1 + 2 _ logN = O(logN)<br>自动检测<br>for (let i = 0; i &lt; n; i++) {// 语句执行 n 次<br>for (let j = 0; j &lt; n; j++) {// 语句执行 n^2 次<br>console.log(‘I am here!’); // 语句执行 n^2 次<br>}<br>}<br>上面代码是两个 for 循环嵌套，很容易得出复杂度为：O(n^2)</p><h3 id="人人都要掌握的基础算法"><a href="#人人都要掌握的基础算法" class="headerlink" title="人人都要掌握的基础算法"></a>人人都要掌握的基础算法</h3><p>枚举(迭代)和递归是最最简单的算法，也是复杂算法的基础，人人都应该掌握！枚举相对比较简单，我们重点说下递归。<br>递归由下面两部分组成：</p><ol><li>递归主体，就是要循环解决问题的代码</li><li>递归的跳出条件，递归不能一直递归下去，需要完成一定条件后跳出</li></ol><h3 id="1，浅拷贝-vs-深拷贝"><a href="#1，浅拷贝-vs-深拷贝" class="headerlink" title="1，浅拷贝 vs 深拷贝"></a><strong>1，浅拷贝 vs 深拷贝</strong></h3><p>拷贝其实就是对象复制，为了解决对象复制是产生的引用类型问题</p><p>浅拷贝：利用迭代器，循环对象将对象中的所有可枚举属性复制到另一个对象上，但是浅拷贝的有一个问题就是只是拷贝了对象的一级，其他级还如果是引用类型的值的话依旧解决不了</p><p>深拷贝：深拷贝解决了浅拷贝的问题，利用递归的形势便利对象的每一级，实现起来较为复杂，得判断值是数组还是对象，简单的说就是，在内存中存在两个数据结构完全相同又相互独立的数据，将引用型类型进行复制，而不是只复制其引用关系。</p><p><strong>深拷贝：</strong><br>这个问题通常可以通过 JSON.parse(JSON.stringify(object))来解决。<br>自动检测<br>let a = {<br>age: 1,<br>jobs: {<br>first: ‘FE’<br>}<br>}<br>let b = JSON.parse(JSON.stringify(a))<br>a.jobs.first = ‘native’<br>console.log(b.jobs.first) // FE</p><p>但是该方法也是有局限性的：</p><ul><li>会忽略 undefined</li><li>会忽略 symbol</li><li>不能序列化函数</li><li>不能解决循环引用的对象</li></ul><p>自动检测<br>let obj = {<br>a: 1,<br>b: {<br>c: 2,<br>d: 3,<br>},<br>}<br>obj.c = obj.b<br>obj.e = obj.a<br>obj.b.c = obj.c<br>obj.b.d = obj.b<br>obj.b.e = obj.b.c<br>let newObj = JSON.parse(JSON.stringify(obj))<br>console.log(newObj)</p><p>如果你有这么一个循环引用对象，你会发现你不能通过该方法深拷贝<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1601449633813-0ac1cc67-733e-4191-a205-6ccfea5a6c2f.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15" loading="lazy"><br>在遇到函数、 undefined 或者 symbol 的时候，该对象也不能正常的序列化<br>自动检测<br>let a = {<br>age: undefined,<br>sex: Symbol(‘male’),<br>jobs: function() {},<br>name: ‘yck’<br>}<br>let b = JSON.parse(JSON.stringify(a))<br>console.log(b) // {name: “yck”}</p><p>你会发现在上述情况中，该方法会忽略掉函数和 undefined。<br>但是在通常情况下，复杂数据都是可以序列化的，所以这个函数可以解决大部分问题，并且该函数是内置函数中处理深拷贝性能最快的。当然如果你的数据中含有以上三种情况下，可以使用 <a href="https://link.juejin.im/?target=https://lodash.com/docs%23cloneDeep">lodash 的深拷贝函数</a>。<br>如果你所需拷贝的对象含有内置类型并且不包含函数，可以使用 MessageChannel<br>自动检测<br>function structuralClone(obj) {<br>return new Promise(resolve =&gt; {<br>const {port1, port2} = new MessageChannel();<br>port2.onmessage = ev =&gt; resolve(ev.data);<br>port1.postMessage(obj);<br>});<br>}<br>var obj = {a: 1, b: {<br>c: b<br>}}<br>// 注意该方法是异步的<br>// 可以处理 undefined 和循环引用对象<br>(async () =&gt; {<br>const clone = await structuralClone(obj)<br>})()<br>或者：<br>自动检测<br>function deepClone(o1, o2) {<br>for (let k in o2) {<br>if (typeof o2[k] === ‘object’) {<br>o1[k] = {};<br>deepClone(o1[k], o2[k]);<br>} else {<br>o1[k] = o2[k];<br>}<br>}<br>}<br>// 测试用例<br>let obj = {<br>a: 1,<br>b: [1, 2, 3],<br>c: {}<br>};<br>let emptyObj = Object.create(null);<br>deepClone(emptyObj, obj);<br>console.log(emptyObj.a == obj.a);<br>console.log(emptyObj.b == obj.b);</p><h3 id="2，常见的几种数组排序算法-JS-实现"><a href="#2，常见的几种数组排序算法-JS-实现" class="headerlink" title="2，常见的几种数组排序算法 JS 实现"></a><strong>2，常见的几种数组排序算法 JS 实现</strong></h3><p>**1，快速排序 **<br>从给定的数据中，随机抽出一项，这项的左边放所有比它小的，右边放比它大的，然后再分别这两边执行上述操作，采用的是递归的思想，总结出来就是 实现一层，分别给两边递归，设置好出口<br>自动检测<br>function fastSort(array,head,tail){<br>//考虑到给每个分区操作的时候都是在原有的数组中进行操作的，所以这里 head,tail 来确定分片的位置<br>/<em>生成随机项</em>/<br>var randomnum = Math.floor(ranDom(head,tail));<br>var random = array[randomnum];<br>/<em>将小于 random 的项放置在其左边 策略就是通过一个临时的数组来储存分好区的结果，再到原数组中替换</em>/<br>var arrayTemp = [];<br>var unshiftHead = 0;<br>for(var i = head;i &lt;= tail;i++){<br>if(array[i]&lt;random){<br>arrayTemp.unshift(array[i]);<br>unshiftHead++;<br>}else if(array[i]&gt;random){<br>arrayTemp.push(array[i]);<br>}<br>/<em>当它等于的时候放哪，这里我想选择放到队列的前面，也就是从 unshift 后的第一个位置放置</em>/<br>if(array[i]===random){<br>arrayTemp.splice(unshiftHead,0,array[i]);<br>}<br>}<br>/<em>将对应项覆盖原来的记录</em>/<br>for(var j = head , u=0;j &lt;= tail;j++,u++){<br>array.splice(j,1,arrayTemp[u]);<br>}<br>/<em>寻找中间项所在的 index</em>/<br>var nowIndex = array.indexOf(random);<br>/<em>设置出口，当要放进去的片段只有 2 项的时候就可以收工了</em>/<br>if(arrayTemp.length &lt;= 2){<br>return;<br>}<br>/<em>递归，同时应用其左右两个区域</em>/<br>fastSort(array,head,nowIndex);<br>fastSort(array,nowIndex+1,tail);<br>}</p><p>**2，插入排序 **<br>思想就是在已经排好序的数组中插入到相应的位置，以从小到大排序为例，扫描已经排好序的片段的每一项，如大于，则继续往后，直到他小于一项时，将其插入到这项的前面<br>自动检测<br>function insertSort(array){<br>/<em>start 根据已排列好的项数决定</em>/<br>var start=1;<br>/<em>按顺序，每一项检查已排列好的序列</em>/<br>for(var i=start; i&lt;array.length; start++,i++){<br>/<em>跟已排好序的序列做对比，并插入到合适的位置</em>/<br>for(var j=0; j&lt;start; j++){<br>/<em>小于或者等于时（我们是升序）插入到该项前面</em>/<br>if(array[i]&lt;=array[j]){<br>console.log(array[i]+’ ‘+array[j]);<br>array.splice(j,0,array[i]);<br>/<em>删除原有项</em>/<br>array.splice(i+1,1);<br>break;<br>}<br>}<br>}<br>}</p><p>**3，冒泡排序 **<br>故名思意 ，就是一个个冒泡到最前端或者最后端，主要是通过两两依次比较，以升序为例，如果前一项比后一项大则交换顺序，一直比到最后一对<br>自动检测<br>function bubbleSort(array){<br>/<em>给每个未确定的位置做循环</em>/<br>for(var unfix=array.length-1; unfix&gt;0; unfix–){<br>/<em>给进度做个记录，比到未确定位置</em>/<br>for(var i=0; i&lt;unfix;i++){<br>if(array[i]&gt;array[i+1]){<br>var temp = array[i];<br>array.splice(i,1,array[i+1]);<br>array.splice(i+1,1,temp);<br>}<br>}<br>}<br>}</p><p>**4，选择排序 **<br>将当前未确定块的 min 或者 max 取出来插到最前面或者后面<br>自动检测<br>function selectSort(array){<br>/<em>给每个插入后的未确定的范围循环，初始是从 0 开始</em>/<br>for(var unfixed=0; unfixed&lt;array.length; unfixed++){<br>/_设置当前范围的最小值和其索引_/<br>var min = array[unfixed];<br>var minIndex = unfixed;<br>/_在该范围内选出最小值_/<br>for(var j=unfixed+1; j&lt;array.length; j++){<br>if(min&gt;array[j]){<br>min = array[j];<br>minIndex = j;<br>}<br>}<br>/<em>将最小值插入到 unfixed，并且把它所在的原有项替换成</em>/<br>array.splice(unfixed,0,min);<br>array.splice(minIndex+1,1);<br>}<br>}</p><p><strong>3，写一个数组去重的方法</strong><br>自动检测<br>/** 方法一：</p><ul><li>1.构建一个新的数组存放结果</li><li>2.for 循环中每次从原数组中取出一个元素，用这个元素循环与结果数组对比</li><li>3.若结果数组中没有该元素，则存到结果数组中</li><li>缺陷：不能去重数组中得引用类型的值和 NaN<br>*/<br>function unique(array){<br>var result = [];<br>for(var i = 0;i &lt; array.length; i++){<br>if(result.indexOf(array[i]) == -1) {<br>result.push(array[i]);<br>}<br>}<br>return result;<br>}<br>// [1,2,1,2,’1’,’2’,0,’1’,’你好’,’1’,’你好’,NaN,NaN] =&gt; [1, 2, “1”, “2”, 0, “你好”,NaN,NaN]<br>// [{id: ‘1’}, {id: ‘1’}] =&gt; [{id: ‘1’}, {id: ‘1’}]</li></ul><p>//方法二：ES6<br>自动检测<br>Array.from(new Set(array))<br>// [1,2,1,2,’1’,’2’,0,’1’,’你好’,’1’,’你好’,NaN,NaN] =&gt; [1, 2, “1”, “2”, 0, “你好”, NaN]</p><h3 id="4，说一下-js-模板引擎"><a href="#4，说一下-js-模板引擎" class="headerlink" title="4，说一下 js 模板引擎"></a><strong>4，说一下 js 模板引擎</strong></h3><p>模板引擎原理总结起来就是：先获取 html 中对应的 id 下得 innerHTML，利用开始标签和关闭标签进行字符串切分，其实是将模板划分成两部份内容，一部分是 html 部分，一部分是逻辑部分，通过区别一些特殊符号比如 each、if 等来将字符串拼接成函数式的字符串,将两部分各自经过处理后，再次拼接到一起，最后将拼接好的字符串采用 new Function()的方式转化成所需要的函数。<br>常用的模版引擎主要有，Template.js，handlebars.js</p><h3 id="5，是否了解公钥加密和私钥加密。"><a href="#5，是否了解公钥加密和私钥加密。" class="headerlink" title="5，是否了解公钥加密和私钥加密。"></a><strong>5，是否了解公钥加密和私钥加密。</strong></h3><p>一般情况下是指私钥用于对数据进行签名，公钥用于对签名进行验证;<br>HTTP 网站在浏览器端用公钥加密敏感数据，然后在服务器端再用私钥解密。</p><h3 id="6，二分查找"><a href="#6，二分查找" class="headerlink" title="6，二分查找"></a>6，二分查找</h3><p>二分查找法主要是解决「在一堆有序的数中找出指定的数」这类问题，不管这些数是一维数组还是多维数组，只要有序，就可以用二分查找来优化。<br>二分查找是一种「分治」思想的算法，大概流程如下：</p><ol><li>数组中排在中间的数字 A，与要找的数字比较大小</li><li>因为数组是有序的，所以： a) A 较大则说明要查找的数字应该从前半部分查找 b) A 较小则说明应该从查找数字的后半部分查找</li><li>这样不断查找缩小数量级（扔掉一半数据），直到找完数组为止</li></ol><p>题目：在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。<br>自动检测<br>function Find(target, array) {<br>let i = 0;<br>let j = array[i].length - 1;<br>while (i &lt; array.length &amp;&amp; j &gt;= 0) {<br>if (array[i][j] &lt; target) {<br>i++;<br>} else if (array[i][j] &gt; target) {<br>j–;<br>} else {<br>return true;<br>}<br>}<br>return false;<br>}<br>//测试用例<br>console.log(Find(10, [<br>[1, 2, 3, 4],<br>[5, 9, 10, 11],<br>[13, 20, 21, 23]<br>])<br>);<br>另外笔者在面试中遇见过下面的问题：<br>题目：现在我有一个 1~1000 区间中的正整数，需要你猜下这个数字是几，你只能问一个问题：大了还是小了？问需要猜几次才能猜对？<br>拿到这个题目，笔者想到的就是电视上面有个「猜价格」的购物节目，在规定时间内猜对价格就可以把实物抱回家。所以问题就是让面试官不停地回答我猜的数字比这个数字大了还是小了。这就是二分查找！<br>猜几次呢？其实这个问题就是个二分查找的算法时间复杂度问题，二分查找的时间复杂度是 O(logN)，所以求 log1000 的解就是猜的次数。我们知道 2^10=1024，所以可以快速估算出：log1000 约等于 10，最多问 10 次就能得到这个数！</p><h3 id="7，数组降维（数组扁平化）"><a href="#7，数组降维（数组扁平化）" class="headerlink" title="7，数组降维（数组扁平化）"></a>7，数组降维（数组扁平化）</h3><p>自动检测<br>[1, [2], 3].flatMap((v) =&gt; v + 1)<br>// -&gt; [2, 3, 4]</p><dl><dt>如果想将一个多维数组彻底的降维，可以这样实现<br>自动检测<br>const flattenDeep = (arr) =&gt; Array.isArray(arr)<br>? arr.reduce( (a, b) =&gt; […a, …flattenDeep(b)] , [])</dt><dd>[arr]<br>flattenDeep([1, [[2], [3, [4]], 5]])</dd></dl><h3 id="8，防抖"><a href="#8，防抖" class="headerlink" title="8，防抖"></a>8，防抖</h3><p>你是否在日常开发中遇到一个问题，在滚动事件中需要做个复杂计算或者实现一个按钮的防二次点击操作。<br>这些需求都可以通过函数防抖动来实现。尤其是第一个需求，如果在频繁的事件回调中做复杂计算，很有可能导致页面卡顿，不如将多次计算合并为一次计算，只在一个精确点做操作。<br>PS：防抖和节流的作用都是防止函数多次调用。区别在于，假设一个用户一直触发这个函数，且每次触发函数的间隔小于 wait，防抖的情况下只会调用一次，而节流的 情况会每隔一定时间（参数 wait）调用函数。<br>我们先来看一个袖珍版的防抖理解一下防抖的实现：<br>自动检测<br>// func 是用户传入需要防抖的函数<br>// wait 是等待时间<br>const debounce = (func, wait = 50) =&gt; {<br>// 缓存一个定时器 id<br>let timer = 0<br>// 这里返回的函数是每次用户实际调用的防抖函数<br>// 如果已经设定过定时器了就清空上一次的定时器<br>// 开始一个新的定时器，延迟执行用户传入的方法<br>return function(…args) {<br>if (timer) clearTimeout(timer)<br>timer = setTimeout(() =&gt; {<br>func.apply(this, args)<br>}, wait)<br>}<br>}<br>// 不难看出如果用户调用该函数的间隔小于 wait 的情况下，上一次的时间还未到就被清除了，并不会执行函数</p><p>这是一个简单版的防抖，但是有缺陷，这个防抖只能在最后调用。一般的防抖会有 immediate 选项，表示是否立即调用。这两者的区别，举个栗子来说：</p><ul><li>例如在搜索引擎搜索问题的时候，我们当然是希望用户输入完最后一个字才调用查询接口，这个时候适用延迟执行的防抖函数，它总是在一连串（间隔小于 wait 的）函数触发之后调用。</li><li>例如用户给 interviewMap 点 star 的时候，我们希望用户点第一下的时候就去调用接口，并且成功之后改变 star 按钮的样子，用户就可以立马得到反馈是否 star 成功了，这个情况适用立即执行的防抖函数，它总是在第一次调用，并且下一次调用必须与前一次调用的时间间隔大于 wait 才会触发。</li></ul><p>下面我们来实现一个带有立即执行选项的防抖函数<br>自动检测<br>// 这个是用来获取当前时间戳的<br>function now() {<br>return +new Date()<br>}<br>/**</p><ul><li>防抖函数，返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行</li><li></li><li>@param {function} func 回调函数</li><li>@param {number} wait 表示时间窗口的间隔</li><li>@param {boolean} immediate 设置为 ture 时，是否立即调用函数</li><li>@return {function} 返回客户调用函数<br>*/<br>function debounce (func, wait = 50, immediate = true) {<br>let timer, context, args<br>// 延迟执行函数<br>const later = () =&gt; setTimeout(() =&gt; {<br>// 延迟函数执行完毕，清空缓存的定时器序号<br>timer = null<br>// 延迟执行的情况下，函数会在延迟函数中执行<br>// 使用到之前缓存的参数和上下文<br>if (!immediate) {<br>func.apply(context, args)<br>context = args = null<br>}<br>}, wait)<br>// 这里返回的函数是每次实际调用的函数<br>return function(…params) {<br>// 如果没有创建延迟执行函数（later），就创建一个<br>if (!timer) {<br>timer = later()<br>// 如果是立即执行，调用函数<br>// 否则缓存参数和调用上下文<br>if (immediate) {<br>func.apply(this, params)<br>} else {<br>context = this<br>args = params<br>}<br>// 如果已有延迟执行函数（later），调用的时候清除原来的并重新设定一个<br>// 这样做延迟函数会重新计时<br>} else {<br>clearTimeout(timer)<br>timer = later()<br>}<br>}<br>}</li></ul><p>整体函数实现的不难，总结一下。</p><ul><li>对于按钮防点击来说的实现：如果函数是立即执行的，就立即调用，如果函数是延迟执行的，就缓存上下文和参数，放到延迟函数中去执行。一旦我开始一个定时器，只要我定时器还在，你每次点击我都重新计时。一旦你点累了，定时器时间到，定时器重置为 null，就可以再次点击了。</li><li>对于延时执行函数来说的实现：清除定时器 ID，如果是延迟调用就调用函数</li></ul><h3 id="9，手写-call、apply-及-bind-函数"><a href="#9，手写-call、apply-及-bind-函数" class="headerlink" title="9，手写 call、apply 及 bind 函数"></a>9，手写 call、apply 及 bind 函数</h3><p>涉及面试题：call、apply 及 bind 函数内部实现是怎么样的？<br>首先从以下几点来考虑如何实现这几个函数</p><ul><li>不传入第一个参数，那么上下文默认为 window</li><li>改变了 this 指向，让新的对象可以执行该函数，并能接受参数</li></ul><p>那么我们先来实现 call<br>自动检测<br>Function.prototype.myCall = function(context) {<br>if (typeof this !== ‘function’) {<br>throw new TypeError(‘Error’)<br>}<br>context = context || window<br>context.fn = this<br>const args = […arguments].slice(1)<br>const result = context.fn(…args)<br>delete context.fn<br>return result<br>}<br>以下是对实现的分析：</p><ul><li>首先 context 为可选参数，如果不传的话默认上下文为 window</li><li>接下来给 context 创建一个 fn 属性，并将值设置为需要调用的函数</li><li>因为 call 可以传入多个参数作为调用函数的参数，所以需要将参数剥离出来</li><li>然后调用函数并将对象上的函数删除</li></ul><p>以上就是实现 call 的思路，apply 的实现也类似，区别在于对参数的处理，所以就不一一分析思路了<br>自动检测<br>Function.prototype.myApply = function(context) {<br>if (typeof this !== ‘function’) {<br>throw new TypeError(‘Error’)<br>}<br>context = context || window<br>context.fn = this<br>let result<br>// 处理参数和 call 有区别<br>if (arguments[1]) {<br>result = context.fn(…arguments[1])<br>} else {<br>result = context.fn()<br>}<br>delete context.fn<br>return result<br>}<br>bind 的实现对比其他两个函数略微地复杂了一点，因为 bind 需要返回一个函数，需要判断一些边界问题，以下是 bind 的实现<br>自动检测<br>Function.prototype.myBind = function (context) {<br>if (typeof this !== ‘function’) {<br>throw new TypeError(‘Error’)<br>}<br>const _this = this<br>const args = […arguments].slice(1)<br>// 返回一个函数<br>return function F() {<br>// 因为返回了一个函数，我们可以 new F()，所以需要判断<br>if (this instanceof F) {<br>return new _this(…args, …arguments)<br>}<br>return _this.apply(context, args.concat(…arguments))<br>}<br>}<br>以下是对实现的分析：</p><ul><li>前几步和之前的实现差不多，就不赘述了</li><li>bind 返回了一个函数，对于函数来说有两种方式调用，一种是直接调用，一种是通过 new 的方式，我们先来说直接调用的方式</li><li>对于直接调用来说，这里选择了 apply 的方式实现，但是对于参数需要注意以下情况：因为 bind 可以实现类似这样的代码 f.bind(obj, 1)(2)，所以我们需要将两边的参数拼接起来，于是就有了这样的实现 args.concat(…arguments)</li><li>最后来说通过 new 的方式，在之前的章节中我们学习过如何判断 this，对于 new 的情况来说，不会被任何方式改变 this，所以对于这种情况我们需要忽略传入的 this</li></ul><h3 id="10，为什么-0-1-0-2-0-3？如何解决这个问题？"><a href="#10，为什么-0-1-0-2-0-3？如何解决这个问题？" class="headerlink" title="10，为什么 0.1 + 0.2 != 0.3？如何解决这个问题？"></a>10，为什么 0.1 + 0.2 != 0.3？如何解决这个问题？</h3><p>先说原因，因为 JS 采用 IEEE 754 双精度版本（64 位），并且只要采用 IEEE 754 的语言都有该问题。</p><p>我们都知道计算机是通过二进制来存储东西的，那么 0.1 在二进制中会表示为</p><p>// (0011) 表示循环<br>0.1 = 2^-4 * 1.10011(0011)<br>我们可以发现，0.1 在二进制中是无限循环的一些数字，其实不只是 0.1，其实很多十进制小数用二进制表示都是无限循环的。这样其实没什么问题，但是 JS 采用的浮点数标准却会裁剪掉我们的数字。</p><p>IEEE 754 双精度版本（64 位）将 64 位分为了三段</p><p>第一位用来表示符号<br>接下去的 11 位用来表示指数<br>其他的位数用来表示有效位，也就是用二进制表示 0.1 中的 10011(0011)<br>那么这些循环的数字被裁剪了，就会出现精度丢失的问题，也就造成了 0.1 不再是 0.1 了，而是变成了 0.100000000000000002</p><p>0.100000000000000002 === 0.1 // true<br>那么同样的，0.2 在二进制也是无限循环的，被裁剪后也失去了精度变成了 0.200000000000000002</p><p>0.200000000000000002 === 0.2 // true<br>所以这两者相加不等于 0.3 而是 0.300000000000000004</p><p>0.1 + 0.2 === 0.30000000000000004 // true<br>那么可能你又会有一个疑问，既然 0.1 不是 0.1，那为什么 console.log(0.1) 却是正确的呢？</p><p>因为在输入内容的时候，二进制被转换为了十进制，十进制又被转换为了字符串，在这个转换的过程中发生了取近似值的过程，所以打印出来的其实是一个近似值，你也可以通过以下代码来验证</p><p>console.log(0.100000000000000002) // 0.1<br>那么说完了为什么，最后来说说怎么解决这个问题吧。其实解决的办法有很多，这里我们选用原生提供的方式来最简单的解决问题</p><p>parseFloat((0.1 + 0.2).toFixed(10)) === 0.3 // true</p><h3 id="11，求斐波那契数列（兔子数列）中的第-n-项"><a href="#11，求斐波那契数列（兔子数列）中的第-n-项" class="headerlink" title="11，求斐波那契数列（兔子数列）中的第 n 项"></a>11，求斐波那契数列（兔子数列）中的第 n 项</h3><p>斐波那契数列就是从 0 和 1 开始，后面的数都是前两个数之和<br>0，1，1，2，3，5，8，13，21，34，55，89….</p><p>下面的代码中 count 记录递归的次数，我们看下两种差异性的代码中的 count 的值：<br>自动检测<br>let count = 0;<br>function fn(n) {<br>let cache = {};<br>function _fn(n) {<br>if (cache[n]) {<br>return cache[n];<br>}<br>count++;<br>if (n == 1 || n == 2) {<br>return 1;<br>}<br>let prev = _fn(n - 1);<br>cache[n - 1] = prev;<br>let next = _fn(n - 2);<br>cache[n - 2] = next;<br>return prev + next;<br>}<br>return _fn(n);<br>}<br>let count2 = 0;<br>function fn2(n) {<br>count2++;<br>if (n == 1 || n == 2) {<br>return 1;<br>}<br>return fn2(n - 1) + fn2(n - 2);<br>}<br>console.log(fn(20), count); // 6765 20<br>console.log(fn2(20), count2); // 6765 13529</p><h2 id="业务场景-编程实现"><a href="#业务场景-编程实现" class="headerlink" title="业务场景/编程实现"></a>业务场景/编程实现</h2><h3 id="1，有一个需求，需要把后端的更新日志展示出来，后端会不定时的更新日志，前端需要实时更新到页面上，但是前端的页面上每次都只显示-20-条数据，像一个竖向轮播一样一直持续更新"><a href="#1，有一个需求，需要把后端的更新日志展示出来，后端会不定时的更新日志，前端需要实时更新到页面上，但是前端的页面上每次都只显示-20-条数据，像一个竖向轮播一样一直持续更新" class="headerlink" title="1，有一个需求，需要把后端的更新日志展示出来，后端会不定时的更新日志，前端需要实时更新到页面上，但是前端的页面上每次都只显示 20 条数据，像一个竖向轮播一样一直持续更新"></a>1，有一个需求，需要把后端的更新日志展示出来，后端会不定时的更新日志，前端需要实时更新到页面上，但是前端的页面上每次都只显示 20 条数据，像一个竖向轮播一样一直持续更新</h3><p>这个类需求可以看字眼实时，记住和实时相关那么我们就向使用 scoket，对于这个需求我们可以回调，通过 scoket 接受实时数据并且将实时数据添加到日志数组的前面进行实时展示</p><h3 id="2，防抖和节流应用场景"><a href="#2，防抖和节流应用场景" class="headerlink" title="2，防抖和节流应用场景"></a>2，防抖和节流应用场景</h3><p>添加购物车时，如果用户多次点击添加购物车按钮，这时候会不断的向后端发送数据，如果用户连续点击了好几十次甚至上百次，服务器的压力是很巨大的，怎么防止这个问题</p><p>给你一个 input 框，实现一个搜索功能，需要注意哪些问题？</p><h3 id="3，购物车实现"><a href="#3，购物车实现" class="headerlink" title="3，购物车实现"></a>3，购物车实现</h3><h3 id="4，实现一个兼容的-sticky"><a href="#4，实现一个兼容的-sticky" class="headerlink" title="4，实现一个兼容的 sticky"></a>4，实现一个兼容的 sticky</h3><p><a href="https://juejin.im/post/5c871e025188257e5d0ecfc8">https://juejin.im/post/5c871e025188257e5d0ecfc8</a></p><h3 id="5，前端如何进行-seo-优化"><a href="#5，前端如何进行-seo-优化" class="headerlink" title="5，前端如何进行 seo 优化"></a>5，前端如何进行 seo 优化</h3><ul><li>合理的 title、description、keywords：搜索对着三项的权重逐个减小，title 值强调重点即可；description 把页面内容高度概括，不可过分堆砌关键词；keywords 列举出重要关键词。</li><li>语义化的 HTML 代码，符合 W3C 规范：语义化代码让搜索引擎容易理解网页</li><li>重要内容 HTML 代码放在最前：搜索引擎抓取 HTML 顺序是从上到下，保证重要内容一定会被抓取</li><li>重要内容不要用 js 输出：爬虫不会执行 js 获取内容</li><li>少用 iframe：搜索引擎不会抓取 iframe 中的内容</li><li>非装饰性图片必须加 alt</li><li>提高网站速度：网站速度是搜索引擎排序的一个重要指标</li></ul><h3 id="6，登录实现"><a href="#6，登录实现" class="headerlink" title="6，登录实现"></a>6，登录实现</h3><p>登录的目的主要是为了区分客户端用户，在客户端一般都需要用到路由拦截判断用户的登录状态，一般都是通过 token 的形式，token 一般都可以使用 jsonwebtoken 进行生成，常见的几种实现方法是<br>1，公共参数<br>登录通过账号密码换取 token，并且存储在客户端本地存储中，之后所有 ajax 请求都会携带一个公共的 header 参数 token，将登录换取 token 发送到服务端，服务端验证 token 的正确性</p><p>2，cookie 形式<br>cookie 形式比较简单，客户端无需做什么操作，服务端直接操作 cookie，生成 token，因为 cookie 会通过 ajax 请求自动发送到服务端</p><p>登录体验优化的几个场景<br>1，登录后的回调页面，一般登录后需要跳转到其他页面，而其他页面决定于用户是在哪一步操作跳转到的登录页面，这个时候我们应该在登录页面的路由上传递一个登录成功的回调地址</p><p>2，登录回退，一般我门在操作过程中需要登录的时候才登录这个时候登录后，用户后退不应该让用户退回到登录页面</p><h3 id="7，如何处理-ajax-错误状态"><a href="#7，如何处理-ajax-错误状态" class="headerlink" title="7，如何处理 ajax 错误状态"></a>7，如何处理 ajax 错误状态</h3><p>在项目开发中我们一般情况下错误状态都有统一规范，前端的话为了统一，一般我们都需要做公共的错误处理，可以封装 ajax 请求拦截器，在请求失败的回调中，通过状态码，判断错误类型，并且弹出对应的错误提示内容</p><h2 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h2><h3 id="1，使用-localStorage-封装一个-Storage-对象，达到如下效果："><a href="#1，使用-localStorage-封装一个-Storage-对象，达到如下效果：" class="headerlink" title="1，使用 localStorage 封装一个 Storage 对象，达到如下效果："></a><strong>1，使用 localStorage 封装一个 Storage 对象，达到如下效果：</strong></h3><p>自动检测<br>Storage.set(‘name’, 哈哈哈’) // 设置 name 字段存储的值为’哈哈哈’。<br>Storage.set(‘age’, 2, 30);<br>Storage.set(‘people’, [‘Oli’, ‘Aman’, ‘Dante’], 60)<br>Storage.get(‘name’) // ‘前端一万小时’<br>Storage.get(‘age’) // 如果不超过 30 秒，返回数字类型的 2；如果超过 30 秒，返回 undefined，并且 localStorage 里清除 age 字段。<br>Storage.get(‘people’) // 如果不超过 60 秒，返回数组； 如果超过 60 秒，返回 undefined。</p><h3 id="2，补全如下函数，判断用户的浏览器类型。"><a href="#2，补全如下函数，判断用户的浏览器类型。" class="headerlink" title="2，补全如下函数，判断用户的浏览器类型。"></a>2，补全如下函数，判断用户的浏览器类型。</h3><p>自动检测<br>function isAndroid(){<br>// 补全<br>}<br>function isIphone(){<br>// 补全<br>}<br>function isIpad(){<br>// 补全<br>}<br>function isIOS(){<br>// 补全<br>}</p><h3 id="3，写一个函数，参数为时间对象毫秒数的字符串格式，返回值为字符串。假设参数为时间对象毫秒数-t，"><a href="#3，写一个函数，参数为时间对象毫秒数的字符串格式，返回值为字符串。假设参数为时间对象毫秒数-t，" class="headerlink" title="3，写一个函数，参数为时间对象毫秒数的字符串格式，返回值为字符串。假设参数为时间对象毫秒数 t，"></a>3，写一个函数，参数为时间对象毫秒数的字符串格式，返回值为字符串。假设参数为时间对象毫秒数 t，</h3><p>根据 t 的时间分别返回如下字符串：</p><ul><li>刚刚（ t 距当前时间不到 1 分钟时间间隔）；</li><li>3 分钟前（t 距当前时间大于等于 1 分钟，小于 1 小时）；</li><li>8 小时前（t 距离当前时间大于等于 1 小时，小于 24 小时）；</li><li>3 天前（t 距离当前时间大于等于 24 小时，小于 30 天）；</li><li>2 个月前（t 距离当前时间大于等于 30 天小于 12 个月）；</li><li>8 年前（t 距离当前时间大于等于 12 个月）。<br>自动检测<br>function friendlyDate(time){<br>// 补充<br>}<br>var str = friendlyDate( ‘1556286683394’ ) //–&gt; x 分钟前（以当前时间为准）<br>var str2 = friendlyDate(‘1555521999999’) //–&gt; x 天前（以当前时间为准）</li></ul><h3 id="4，一道经典笔试题"><a href="#4，一道经典笔试题" class="headerlink" title="4，一道经典笔试题"></a>4，一道经典笔试题</h3><p>自动检测<br>function Foo() {<br>getName = function() { alert(1); }<br>return this<br>}<br>Foo.getName = function() { alert(2); }<br>Foo.prototype.getName = function() { alert(3); }<br>var getName = function () { alert(4); }<br>function getName() { alert(5); }<br>// 输出值？<br>Foo.getName();<br>getName();<br>Foo().getName();<br>getName();<br>new Foo.getName()<br>new Foo().getName()<br>new new Foo().getName()</p><h3 id="5-写一个函数，操作数组，返回一个新数组，新数组中只包含正数。"><a href="#5-写一个函数，操作数组，返回一个新数组，新数组中只包含正数。" class="headerlink" title="5. 写一个函数，操作数组，返回一个新数组，新数组中只包含正数。"></a>5. 写一个函数，操作数组，返回一个新数组，新数组中只包含正数。</h3><p>自动检测<br>function filterPositive(arr){<br>}<br>var arr = [3, -1, 2, true]<br>filterPositive(arr)<br>console.log(filterPositive(arr)) //–&gt;[3, 2]</p><h3 id="6-补全代码，实现数组按姓名、年纪、任意字段排序。"><a href="#6-补全代码，实现数组按姓名、年纪、任意字段排序。" class="headerlink" title="6. 补全代码，实现数组按姓名、年纪、任意字段排序。"></a>6. 补全代码，实现数组按姓名、年纪、任意字段排序。</h3><p>自动检测<br>var users = [<br>{ name: “John”, age: 20, company: “Baidu” },<br>{ name: “Pete”, age: 18, company: “Alibaba” },<br>{ name: “Ann”, age: 19, company: “Tecent” }<br>]<br>users.sort(byField(‘age’))<br>users.sort(byField(‘company’))</p><h3 id="7-用-splice-函数分别实现-push、pop、shift、unshift-方法。"><a href="#7-用-splice-函数分别实现-push、pop、shift、unshift-方法。" class="headerlink" title="7. 用 splice 函数分别实现 push、pop、shift、unshift 方法。"></a>7. 用 splice 函数分别实现 push、pop、shift、unshift 方法。</h3><p>如:<br>自动检测<br>function push(arr, value){<br>arr.splice(arr.length, 0, value)<br>return arr.length<br>}<br>var arr = [3, 4, 5]<br>arr.push(10) // arr 变成[3,4,5,10]，返回 4</p><h3 id="8，简单实现-async-await-中的-async-函数"><a href="#8，简单实现-async-await-中的-async-函数" class="headerlink" title="8，简单实现 async/await 中的 async 函数"></a>8，简单实现 async/await 中的 async 函数</h3><p>sync 函数的实现原理，就是将 Generator 函数和自动执行器，包装在一个函数里</p><h3 id="9，简单实现-promise-函数"><a href="#9，简单实现-promise-函数" class="headerlink" title="9，简单实现 promise 函数"></a>9，简单实现 promise 函数</h3><p><a href="https://juejin.im/post/59dd8b3851882578e04aa05e?from=singlemessage">https://juejin.im/post/59dd8b3851882578e04aa05e?from=singlemessage</a></p><h3 id="10，高级扩展"><a href="#10，高级扩展" class="headerlink" title="10，高级扩展"></a>10，高级扩展</h3><p><a href="https://juejin.im/post/5cb0315f518825215e61ec14#heading-3">https://juejin.im/post/5cb0315f518825215e61ec14#heading-3</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js汇总2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - 遍历方法</title>
      <link href="/2019/03/03/grb145/"/>
      <url>/2019/03/03/grb145/</url>
      
        <content type="html"><![CDATA[<h3 id="数组遍历方法"><a href="#数组遍历方法" class="headerlink" title="数组遍历方法"></a>数组遍历方法</h3><p><strong>1.for 循环</strong><br>使用临时变量，将长度缓存起来，避免重复获取数组长度，当数组较大时优化效果才会比较明显</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i); <span class="comment">//0,1,2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.foreach 循环</strong><br>遍历数组中的每一项，没有返回值，对原数组没有影响，不支持 IE</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1 没有返回值</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">arr.forEach(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item, index, array);</span><br><span class="line">  <span class="comment">//1 0 (5) [1, 3, 4, 5, 6]</span></span><br><span class="line">  <span class="comment">//3 1 (5) [1, 3, 4, 5, 6]</span></span><br><span class="line">  <span class="comment">// 4 2 (5) [1, 3, 4, 5, 6]</span></span><br><span class="line">  <span class="comment">// 5 3 (5) [1, 3, 4, 5, 6]</span></span><br><span class="line">  <span class="comment">// 6 4 (5) [1, 3, 4, 5, 6]</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//参数：value数组中的当前项, index当前项的索引, array原始数组；</span></span><br><span class="line"><span class="comment">//数组中有几项，那么传递进去的匿名回调函数就需要执行几次；</span></span><br></pre></td></tr></table></figure><p><strong>3.map 循环</strong><br>有返回值，可以 return 出来<br>map 的回调函数中支持 return 返回值；return 的是啥，相当于把数组中的这一项变为啥（并不影响原来的数组，只是相当于把原数组克隆一份，把克隆的这一份的数组中的对应项改变了）；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> aa = arr.map(<span class="function">(<span class="params">item, index, ary</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(aa); <span class="comment">//(5) [2, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure><p><strong>4.filter 遍历</strong><br>不会改变原始数组,返回新数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item === <span class="number">4</span>)); <span class="comment">//[4]</span></span><br></pre></td></tr></table></figure><p><strong>5.every 遍历</strong><br>every()是对数组中的每一项运行给定函数，如果该函数对每一项返回 true,则返回 true。全符合才返回 true，否则 false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  arr.every(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">3</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  arr.every(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><strong>6.some 遍历</strong><br>some()是对数组中每一项运行指定函数，如果该函数对任一项返回 true，则返回 true。与 every 相反</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  arr.some(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">3</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><strong>7.reduce</strong><br>reduce() 方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始缩减，最终为一个值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b); <span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>reduce 接受一个函数，函数有四个参数，分别是：上一次的值，当前值，当前值的索引，数组<br>reduce 还有第二个参数，我们可以把这个参数作为第一次调用 callback 时的第一个参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> aa = arr.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> pre + cur;</span><br><span class="line">&#125;, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(aa); <span class="comment">//31</span></span><br></pre></td></tr></table></figure><p><strong>8.find</strong><br>find()方法返回数组中符合测试函数条件的第一个元素。否则返回 undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> brr = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;ls&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">5</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;xz&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">3</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> aa = brr.find(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item.name === <span class="string">&quot;zs&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(aa); <span class="comment">// &#123;name: &quot;zs&quot;, age: 1&#125;</span></span><br></pre></td></tr></table></figure><p><strong>9.findIndex</strong><br>对于数组中的每个元素，<strong>findIndex</strong> 方法都会调用一次回调函数（采用升序索引顺序），直到有元素返回 <strong>true</strong>。只要有一个元素返回 true，<strong>findIndex</strong> 立即返回该返回 true 的元素的索引值。如果数组中没有任何元素返回 true，则 <strong>findIndex</strong> 返回 -1。<br><strong>findIndex</strong> 不会改变数组对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].findIndex(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  x == <span class="number">2</span>;</span><br><span class="line">&#125;); <span class="comment">//1</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].findIndex(<span class="function">(<span class="params">x</span>) =&gt;</span> x == <span class="number">4</span>); <span class="comment">//-1</span></span><br></pre></td></tr></table></figure><p><strong>10.keys，values，entries</strong><br>ES6 提供三个新的方法 —— entries()，keys()和 values() —— 用于遍历数组。它们都返回一个遍历器对象，可以用 for…of 循环进行遍历，唯一的区别是 keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>].keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>].values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#x27;a&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;b&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] <span class="keyword">of</span> [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>].entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index, elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 &quot;a&quot;</span></span><br><span class="line"><span class="comment">// 1 &quot;b&quot;</span></span><br></pre></td></tr></table></figure><h2 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h2><p><strong>1.for in</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, obj[key]);</span><br><span class="line">&#125; <span class="comment">//id 1</span></span><br><span class="line"><span class="comment">// name zhangsan</span></span><br><span class="line"><span class="comment">//age 18</span></span><br></pre></td></tr></table></figure><p><strong>2.Object.keys(),Object.values() Object.entries();</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// obj对象的key组成的数组</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj)); <span class="comment">//[&quot;id&quot;, &quot;name&quot;, &quot;age&quot;]</span></span><br><span class="line"><span class="comment">//obj对象的value组成的数组</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(obj)); <span class="comment">// [1, &quot;zhangsan&quot;, 18]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 遍历方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 - Symbol</title>
      <link href="/2019/03/02/wggs6k/"/>
      <url>/2019/03/02/wggs6k/</url>
      
        <content type="html"><![CDATA[<h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><p>es6 新增的基本数据类型，通过 Symbol 声明得变量具有唯一性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sym1 = <span class="built_in">Symbol</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> sym2 = <span class="built_in">Symbol</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sym1 === sym2); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="判断类型"><a href="#判断类型" class="headerlink" title="判断类型"></a>判断类型</h2><p>因为 Symbol 是基本数据类型，我们可以通过 typeof 来判断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="built_in">Symbol</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str); <span class="comment">// &quot;symbol&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Symbol-在对象中的使用"><a href="#Symbol-在对象中的使用" class="headerlink" title="Symbol 在对象中的使用"></a>Symbol 在对象中的使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 对象赋值</span></span><br><span class="line">obj.name = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="comment">// 对象添加属性并赋值</span></span><br><span class="line">obj[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;lisi&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#x27;lisi&#x27;</span></span><br></pre></td></tr></table></figure><p>通过上面得例子我们可以得知，对象得属性具有唯一性，重新设置值会覆盖原有得值，所以在学习了 Symbol 类型之后，有了我们下面得代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> snmae = <span class="built_in">Symbol</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">// symbol 赋值</span></span><br><span class="line">obj[snmae] = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name);</span><br><span class="line"><span class="comment">// symbol取值</span></span><br><span class="line"><span class="built_in">console</span>.log(obj[snmae]);</span><br></pre></td></tr></table></figure><p>Tps:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Symbol</span> 作为对象属性名时不能用.运算符，要用方括号。因为.运算符后面是字符串，所以取到的是字符串 sy 属性，而不是 <span class="built_in">Symbol</span> 值 sy 属性。</span><br></pre></td></tr></table></figure><p>Symbol 查找<br>for<br>用来定义便于查找得 symbol 类型得值,找到返回该 Symbol 值,没有则新建并返回一个以该字符串参数为名称的 Symbol 值，并登记在全局环境中供搜索.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str1 = <span class="built_in">Symbol</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="comment">// for会在全局环境中查找</span></span><br><span class="line"><span class="keyword">const</span> str2 = <span class="built_in">Symbol</span>.for(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> str3 = <span class="built_in">Symbol</span>.for(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str1 === str2); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(str2 === str3); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(str2)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>keyFor</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str1 = <span class="built_in">Symbol</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> str2 = <span class="built_in">Symbol</span>.for(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(str1)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(str2)); <span class="comment">// trues</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> Symbol </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 - Promise 实现原理</title>
      <link href="/2019/03/01/sfy1ld/"/>
      <url>/2019/03/01/sfy1ld/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">global</span>.Promise = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">callback</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.val = <span class="literal">undefined</span>;</span><br><span class="line">      <span class="built_in">this</span>.status = <span class="string">&quot;pending&quot;</span>;</span><br><span class="line">      <span class="built_in">this</span>.init(callback);</span><br><span class="line">    &#125;</span><br><span class="line">    onReject = <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.val = err;</span><br><span class="line">      <span class="built_in">this</span>.status = <span class="string">&quot;reject&quot;</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;onReject is call&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    onResolve = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.val = val;</span><br><span class="line">      <span class="built_in">this</span>.status = <span class="string">&quot;fulfilled&quot;</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;onResolve is call&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="title">init</span>(<span class="params">callback</span>)</span> &#123;</span><br><span class="line">      callback(<span class="built_in">this</span>.onResolve, <span class="built_in">this</span>.onReject);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">then</span>(<span class="params">resolve, reject</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&quot;fulfilled&quot;</span>) &#123;</span><br><span class="line">        resolve(<span class="built_in">this</span>.val);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&quot;reject&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!reject === <span class="literal">undefined</span>) reject(<span class="built_in">this</span>.val);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">finally</span>(<span class="params">cb</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&quot;fulfilled&quot;</span> || <span class="built_in">this</span>.status === <span class="string">&quot;reject&quot;</span>) &#123;</span><br><span class="line">        cb();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(cb) &#123;</span><br><span class="line">      cb(<span class="built_in">this</span>.val);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Promise</span>.reject = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  <span class="built_in">Promise</span>.resolve = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getApi</span>(<span class="params">flag = <span class="literal">true</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">      resolve(<span class="number">123</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;你错了！&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">getApi(<span class="literal">true</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 - Promise</title>
      <link href="/2019/03/01/duw2vt/"/>
      <url>/2019/03/01/duw2vt/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h3 id="抽象表达"><a href="#抽象表达" class="headerlink" title="抽象表达"></a>抽象表达</h3><ul><li>promise 是用来解决异步编程（callback）回调地狱（callback hell）的一个解决方案</li></ul><h3 id="具体表达"><a href="#具体表达" class="headerlink" title="具体表达"></a>具体表达</h3><ul><li>从语法上来说:promise 是一个构造函数</li><li>从功能上来说:promise 是对象封装了一个异步操作并且能获取到其结果</li></ul><h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><p>Promise 三种状态</p><ul><li>pending</li><li>fulfilled</li><li>rejected</li></ul><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1631153119406-7a254f51-9827-4e06-8d06-2195b56f3e1d.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=YqZeC&originHeight=290&originWidth=324&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"><br>有了 Promise 对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数<br><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1600350705493-46ac1eb0-e9bd-483e-a8df-1ebf44f4b7e0.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=ln1Do&originHeight=409&originWidth=1165&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h2 id="基础-api"><a href="#基础-api" class="headerlink" title="基础 api"></a>基础 api</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//new Promise 实例</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//开始执行异步操作</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//获取当前时间</span></span><br><span class="line">    <span class="keyword">let</span> time = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="comment">//判断偶数</span></span><br><span class="line">    <span class="keyword">if</span> (time % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      resolve(<span class="string">&quot;成功的回调&quot;</span>, time);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      reject(<span class="string">&quot;失败的回调&quot;</span>, time);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过.then 来指示成功和失败的结果</span></span><br><span class="line">p.then(</span><br><span class="line">  <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value, <span class="string">&quot;成功的数据&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(reason, <span class="string">&quot;失败的数据&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li>then</li><li>catch</li><li>all</li><li>any</li><li>finally</li><li>resolve 构造方法</li><li>reject 构造方法</li></ul><h3 id="all"><a href="#all" class="headerlink" title="all"></a>all</h3><p>Promise.all([p1,p2,p..])<br>接收一个由 promise 组成的数组，成功将返回所有 promise 成功的结果，有一个状态是 reject 将执行 catch</p><h3 id="race"><a href="#race" class="headerlink" title="race"></a>race</h3><p>Promise.race([p1,p2,p…])<br>接收一个由 promise 组成的数组，有一个 promise 状态是 resolve,那么就返回第一个状态是 resolve 的 promise 的结果</p><h2 id="为什么使用-Promise"><a href="#为什么使用-Promise" class="headerlink" title="为什么使用 Promise"></a>为什么使用 Promise</h2><p><strong>1、指定回调函数的方式更加灵活、</strong></p><ul><li>旧的:必须在启动异步任务前指定</li><li>promise:启动异步任务 =&gt; 返回 promise 对象 =&gt; 给 promise 对象绑定回调函数(甚至可以异步任务结束后指定/多个)</li></ul><p><strong>2、支持链式调用，可以解决回调地狱问题</strong></p><ul><li>什么是回调地狱 ? 回调函数嵌套调用， 外部回调函数异步执行的结果是嵌套的回调函数执行的条件</li><li>回调地狱的缺点 ? 不便于阅读 / 不便于异常处理</li><li>解决方案 ? promise 链式调用</li><li>终极解决方案 ？async/await</li></ul>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript - 数组</title>
      <link href="/2019/02/26/mz10aa/"/>
      <url>/2019/02/26/mz10aa/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么需要数组？"><a href="#为什么需要数组？" class="headerlink" title="为什么需要数组？"></a>为什么需要数组？</h2><p>基本数据类型的数据结构比较单一，不能够满足我们的开发所需，而且我们需要保存一系列的数据，需要用到数组。</p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><p>由于我的爱好广泛，想展示我的个人爱好，需要通过多个变量来定义非常的繁琐，这个时候如果能够将一组值保存到一起就太好了。</p><h2 id="什么是数组？"><a href="#什么是数组？" class="headerlink" title="什么是数组？"></a>什么是数组？</h2><h2 id="数组方法汇总："><a href="#数组方法汇总：" class="headerlink" title="数组方法汇总："></a>数组方法汇总：</h2><p>es5:</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>concat()</td><td>链接两个过着更多的数组，并返回结果</td></tr><tr><td>join(x)</td><td>将数组以 x 分隔符分割为字符串</td></tr><tr><td>pop()</td><td>删除并且返回数组的最后一个元素</td></tr><tr><td>push()</td><td>数组末尾添加元素</td></tr><tr><td>reverse()</td><td>点到数组中元素的顺序</td></tr><tr><td>shift()</td><td>删除并返回数组的第一个元素</td></tr><tr><td>slice()</td><td>对某个已有的数组返回选定的元素</td></tr><tr><td>sort()</td><td>对元素进行排序</td></tr><tr><td>splice()</td><td>删除元素，并向数组添加新元素</td></tr><tr><td>toSource()</td><td>返回该对象的源代码</td></tr><tr><td>toString()</td><td>把数组转换为字符串，并返回结果</td></tr><tr><td>toLocaleSting()</td><td>把数组转换为贝蒂数组，并返回结果</td></tr><tr><td>unshift</td><td>在数组开头添加一个或者更多元素，返回新的数组</td></tr><tr><td>indexOf</td><td>查找数据在数组中是否存在，返回下标</td></tr></tbody></table><h3 id="es6-数组新增方法"><a href="#es6-数组新增方法" class="headerlink" title="es6 数组新增方法"></a>es6 数组新增方法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>…</td><td>扩展运算符可以展开数组、对象</td></tr><tr><td>apply</td><td>将数组转换为函数的参数</td></tr><tr><td>form</td><td>将类数组转换为真正的数组</td></tr><tr><td>of</td><td>用于将一组值转换为数组</td></tr><tr><td>copyWithin</td><td>数组实例的方法，将指定位置成员复制到其他位置，会覆盖原有成员，然后返回当前数组</td></tr><tr><td>find</td><td>返回满足条件的第一个项</td></tr><tr><td>findIndex</td><td>返回满足条件的第一个项的下标</td></tr><tr><td>entries</td><td>返回一个二维数组 [ key:[val]]</td></tr><tr><td>keys</td><td>找到数组中所有项的键</td></tr><tr><td>values</td><td>找到数组中所有项的值</td></tr><tr><td>includes</td><td>返回一个布尔值，表示某个数组是否包含给定的值</td></tr><tr><td>flat()</td><td>降维，只降低一维</td></tr><tr><td>flatMap()</td><td>对每个原数组成员执行一个函数</td></tr><tr><td>forEach</td><td>数组遍历</td></tr><tr><td>filter</td><td>过滤数组</td></tr><tr><td>every</td><td>一假为假，全真为真</td></tr><tr><td>reduce</td><td>求和等</td></tr><tr><td>some</td><td>全假为假，一真为真</td></tr><tr><td>map</td><td>遍历返回新数组</td></tr></tbody></table><h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><h3 id="arrayObject-slice-start-end"><a href="#arrayObject-slice-start-end" class="headerlink" title="arrayObject.slice(start,end)"></a>arrayObject.slice(start,end)</h3><p>slice() 方法可从已有的数组中返回选定的元素。<br>请注意，该方法并不会修改数组，而是返回一个子数组。如果想删除数组中的一段元素，应该使用方法 Array.splice()。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> newArr = arr.slice(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// arr= [1, 2, 3, 4, 5]   原数组保持不变</span></span><br><span class="line"><span class="comment">// newArr = [2, 3, 4, 5] 返回新数组</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="arrayObject-map"><a href="#arrayObject-map" class="headerlink" title="arrayObject.map()"></a>arrayObject.map()</h3><p>将数组中的每个元素调用一个提供的函数，结果作为一个新的数组返回，不改变原来的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> newArr = arr.map(<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>)</span><br><span class="line"><span class="comment">// arr= [1, 2, 3, 4, 5]   原数组保持不变</span></span><br><span class="line"><span class="comment">// newArr = [2, 4, 6, 8, 10] 返回新数组</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="arrayObject-forEach"><a href="#arrayObject-forEach" class="headerlink" title="arrayObject.forEach()"></a>arrayObject.forEach()</h3><p>将数组中的每个元素调用一个提供的函数，没有返回值，返回值为 undefined，不会改变原数组，注意和 map 方法区分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">arr.forEach(<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>)</span><br><span class="line"><span class="comment">// arr = [1, 2, 3, 4, 5]  原数组不改变,注意和map区分</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="arrayObject-filter"><a href="#arrayObject-filter" class="headerlink" title="arrayObject.filter()"></a>arrayObject.filter()</h3><p>将所有元素进行判断，将满足条件的元素作为一个新的数组返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> newArr = arr.filter(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x &gt;= <span class="number">3</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 箭头函数加了&#123;&#125; 就需要加上return 不然返回undefined</span></span><br><span class="line"><span class="comment">// 箭头函数不加&#123;&#125; 就可以不加return</span></span><br><span class="line"><span class="keyword">let</span> newArr = arr.filter(<span class="function"><span class="params">x</span> =&gt;</span> x &gt;= <span class="number">3</span>)</span><br><span class="line"><span class="comment">//newNum = [3, 4, 5] 满足条件的元素返回为一个新的数组</span></span><br><span class="line"><span class="comment">//数组去重</span></span><br><span class="line"><span class="keyword">let</span> myArr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(myArr.filter(<span class="function">(<span class="params">value,index,arr</span>)=&gt;</span>arr.indexOf(value)===index));</span><br><span class="line"><span class="comment">//[ 1, 3, 4, 5, 6, 7 ]</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br><span class="line">• <span class="number">5</span></span><br><span class="line">• <span class="number">6</span></span><br><span class="line">• <span class="number">7</span></span><br><span class="line">• <span class="number">8</span></span><br><span class="line">• <span class="number">9</span></span><br><span class="line">• <span class="number">10</span></span><br><span class="line">• <span class="number">11</span></span><br><span class="line">• <span class="number">12</span></span><br><span class="line">• <span class="number">13</span></span><br></pre></td></tr></table></figure><h3 id="arrayObject-every"><a href="#arrayObject-every" class="headerlink" title="arrayObject.every()"></a>arrayObject.every()</h3><p>将所有元素进行判断返回一个布尔值，如果所有元素都满足判断条件，则返回 true，否则为 false：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> isLessThan4 = <span class="function"><span class="params">value</span> =&gt;</span> value &lt; <span class="number">4</span></span><br><span class="line"><span class="keyword">const</span> isLessThan6 = <span class="function"><span class="params">value</span> =&gt;</span> value &lt; <span class="number">6</span></span><br><span class="line">arr.every(isLessThan4 ) <span class="comment">//false</span></span><br><span class="line">arr.every(isLessThan6 ) <span class="comment">//true</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br><span class="line">• <span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="arrayObject-some"><a href="#arrayObject-some" class="headerlink" title="arrayObject.some()"></a>arrayObject.some()</h3><p>将所有元素进行判断返回一个布尔值，如果存在元素都满足判断条件，则返回 true，若所有元素都不满足判断条件，则返回 false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr= [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> isLessThan4 = <span class="function"><span class="params">value</span> =&gt;</span> value &lt; <span class="number">4</span></span><br><span class="line"><span class="keyword">const</span> isLessThan6 = <span class="function"><span class="params">value</span> =&gt;</span> value &gt; <span class="number">6</span></span><br><span class="line">arr.some(isLessThan4 ) <span class="comment">//true</span></span><br><span class="line">arr.some(isLessThan6 ) <span class="comment">//false</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br><span class="line">• <span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="arrayObject-reduce"><a href="#arrayObject-reduce" class="headerlink" title="arrayObject.reduce()"></a>arrayObject.reduce()</h3><p>将所有元素调用返回函数，返回值为最后结果,传入的值必须是函数类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;a:&quot;</span> + a + <span class="string">&quot;;b:&quot;</span> + b)</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> sum = arr.reduce(add)</span><br><span class="line"><span class="comment">// a:1;b:2</span></span><br><span class="line"><span class="comment">// a:3;b:3</span></span><br><span class="line"><span class="comment">// a:6;b:4</span></span><br><span class="line"><span class="comment">// a:10;b:5</span></span><br><span class="line"><span class="comment">// console.log(sum) // 15  相当于累加的效果</span></span><br><span class="line"><span class="comment">// 与之相对应的还有一个 Array.reduceRight() 方法，区别是这个是从右向左操作的</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br><span class="line">• <span class="number">5</span></span><br><span class="line">• <span class="number">6</span></span><br><span class="line">• <span class="number">7</span></span><br><span class="line">• <span class="number">8</span></span><br><span class="line">• <span class="number">9</span></span><br><span class="line">• <span class="number">10</span></span><br><span class="line">• <span class="number">11</span></span><br><span class="line">• <span class="number">12</span></span><br></pre></td></tr></table></figure><h3 id="arrayObject-push"><a href="#arrayObject-push" class="headerlink" title="arrayObject.push()"></a>arrayObject.push()</h3><p>在数组的后面添加新加元素，此方法改变了数组的长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">arr.push(<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8]</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="arrayObject-pop"><a href="#arrayObject-pop" class="headerlink" title="arrayObject.pop()"></a>arrayObject.pop()</h3><p>此方法删除数组最后一个元素，并返回数组，此方法改变了数组的长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">arr.pop()</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">//[1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.length) <span class="comment">//4</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="arrayObject-shift"><a href="#arrayObject-shift" class="headerlink" title="arrayObject.shift()"></a>arrayObject.shift()</h3><p>此方法删除数组第一个元素，并返回数组，此方法改变了数组的长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">arr.shift()</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [2, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.length) <span class="comment">// 4</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="arrayObject-unshift"><a href="#arrayObject-unshift" class="headerlink" title="arrayObject.unshift()"></a>arrayObject.unshift()</h3><p>此方法是将一个或多个元素添加到数组的开头，并返回新数组的长度：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">arr.unshift(<span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">//[6, 7, 1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.length) <span class="comment">//7</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h3><p>判断一个对象是不是数组，返回的是布尔值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>]</span><br><span class="line"><span class="built_in">Array</span>.isArray(str1) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(arr1) <span class="comment">// true</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="arrayObject-concat"><a href="#arrayObject-concat" class="headerlink" title="arrayObject.concat()"></a>arrayObject.concat()</h3><p>此方法可以将多个数组拼接成一个数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr2 = [<span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> arr = arr1.concat(arr2)</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//[1, 2, 3, 4, 5]</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat">concat</a><br>如果 concat 方法的参数是一个元素，该元素会被直接插入到新数组中；如果参数是一个数组，该数组的各个元素将被插入到新数组中；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr2 = [<span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> arr = arr1.concat(arr2)</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//[1, 2, 3, 4, 5]</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br></pre></td></tr></table></figure><p>二维数组降维</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], <span class="number">7</span>, <span class="number">8</span>, [<span class="number">9</span>, <span class="number">10</span>]];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduceDimen</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> reduce = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    reduce = reduce.concat(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> reduce;</span><br><span class="line">&#125;</span><br><span class="line">reduceDimen(arr); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br><span class="line">• <span class="number">5</span></span><br><span class="line">• <span class="number">6</span></span><br><span class="line">• <span class="number">7</span></span><br><span class="line">• <span class="number">8</span></span><br><span class="line">• <span class="number">9</span></span><br></pre></td></tr></table></figure><h3 id="arrayObject-toString"><a href="#arrayObject-toString" class="headerlink" title="arrayObject.toString()"></a>arrayObject.toString()</h3><p>此方法将数组转化为字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> str = arr.toString()</span><br><span class="line"><span class="built_in">console</span>.log(str)<span class="comment">// 1,2,3,4,5</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="arrayObject-join"><a href="#arrayObject-join" class="headerlink" title="arrayObject.join()"></a>arrayObject.join()</h3><p>此方法也是将数组转化为字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> str1 = arr.toString()</span><br><span class="line"><span class="keyword">let</span> str2 = arr.toString(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> str3 = arr.toString(<span class="string">&#x27;##&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(str1)<span class="comment">// 12345</span></span><br><span class="line"><span class="built_in">console</span>.log(str2)<span class="comment">// 1,2,3,4,5</span></span><br><span class="line"><span class="built_in">console</span>.log(str3)<span class="comment">// 1##2##3##4##5</span></span><br><span class="line"><span class="comment">// 可以跟toString()对比</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br><span class="line">• <span class="number">5</span></span><br><span class="line">• <span class="number">6</span></span><br><span class="line">• <span class="number">7</span></span><br><span class="line">• <span class="number">8</span></span><br></pre></td></tr></table></figure><h3 id="arrayObject-splice-开始删除的位置，-删除的个数，删除后新插入的元素"><a href="#arrayObject-splice-开始删除的位置，-删除的个数，删除后新插入的元素" class="headerlink" title="arrayObject.splice(开始删除的位置， 删除的个数，删除后新插入的元素)"></a>arrayObject.splice(开始删除的位置， 删除的个数，删除后新插入的元素)</h3><p>这方法可以实现增删改：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.splice(<span class="number">2</span>, <span class="number">0</span> <span class="string">&#x27;haha&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> arr2 = arr.splice(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.splice(<span class="number">2</span>, <span class="number">1</span> <span class="string">&#x27;haha&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr1) <span class="comment">//[1, 2, &#x27;haha&#x27;, 3, 4, 5]新增一个元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2) <span class="comment">//[1, 2] 删除三个元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr3) <span class="comment">//[1, 2, &#x27;haha&#x27;, 4, 5] 替换一个元素</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br><span class="line">• <span class="number">5</span></span><br><span class="line">• <span class="number">6</span></span><br><span class="line">• <span class="number">7</span></span><br></pre></td></tr></table></figure><h3 id="arrayObject-sort"><a href="#arrayObject-sort" class="headerlink" title="arrayObject.sort()"></a>arrayObject.sort()</h3><p>这方法可以将数组元素排序,传进一个函数,函数带两个参数<br>第一参数 a, 第二参数 b<br>a-b 升序 b-a 降序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 升序</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">77</span>, <span class="number">99</span>, <span class="number">115</span>, <span class="number">135</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">197</span>, <span class="number">219</span>, <span class="number">221</span>, <span class="number">227</span>, <span class="number">229</span>, <span class="number">233</span>, <span class="number">237</span>, <span class="number">269</span>, <span class="number">30</span>, <span class="number">189</span>, <span class="number">63</span>, <span class="number">87</span>, <span class="number">121</span>, <span class="number">143</span>, <span class="number">201</span>, <span class="number">211</span>, <span class="number">243</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">9</span>, <span class="number">171</span>, <span class="number">279</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">31</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">37</span>, <span class="number">53</span>, <span class="number">55</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">71</span>, <span class="number">75</span>, <span class="number">89</span>, <span class="number">91</span>, <span class="number">95</span>, <span class="number">107</span>, <span class="number">109</span>, <span class="number">123</span>, <span class="number">137</span>, <span class="number">139</span>, <span class="number">149</span>, <span class="number">165</span>, <span class="number">173</span>, <span class="number">175</span>, <span class="number">185</span>, <span class="number">205</span>, <span class="number">213</span>, <span class="number">217</span>, <span class="number">225</span>, <span class="number">239</span>, <span class="number">293</span>, <span class="number">294</span>, <span class="number">275</span>, <span class="number">296</span>, <span class="number">297</span>]</span><br><span class="line">arr.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a - b</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"><span class="comment">// [9, 12, 17, 23, 24, 30, 31, 34, 35, 37, 53, 55, 59, 60, 61, 62, 63, 67, 68, 71, 75, 77, 87, 89, 91, 95, 99, 107, 109, 115, 121, 123, 135, 137, 139, 143, 147, 149, 165, 171, 173, 175, 185, 189, 191, 197, 201, 205, 211, 213, 217, 219, 221, 225, 227, 229, 233, 237, 239, 243, 269, 275, 279, 293, 294, 296, 297]</span></span><br><span class="line"><span class="comment">// 降序</span></span><br><span class="line">arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> b - a</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"><span class="comment">// [297, 296, 294, 293, 279, 275, 269, 243, 239, 237, 233, 229, 227, 225, 221, 219, 217, 213, 211, 205, 201, 197, 191, 189, 185, 175, 173, 171, 165, 149, 147, 143, 139, 137, 135, 123, 121, 115, 109, 107, 99, 95, 91, 89, 87, 77, 75, 71, 68, 67, 63, 62, 61, 60, 59, 55, 53, 37, 35, 34, 31, 30, 24, 23, 17, 12, 9]</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br><span class="line">• <span class="number">5</span></span><br><span class="line">• <span class="number">6</span></span><br><span class="line">• <span class="number">7</span></span><br><span class="line">• <span class="number">8</span></span><br><span class="line">• <span class="number">9</span></span><br><span class="line">• <span class="number">10</span></span><br><span class="line">• <span class="number">11</span></span><br><span class="line">• <span class="number">12</span></span><br><span class="line">• <span class="number">13</span></span><br><span class="line">• <span class="number">14</span></span><br></pre></td></tr></table></figure><h3 id="arrayObject-find"><a href="#arrayObject-find" class="headerlink" title="arrayObject.find()"></a>arrayObject.find()</h3><p>此方法返回通过函数判断的数组第一个元素的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> str = arr1.find(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x &gt; <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(str ) <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 如果没有符合条件的元素 返回undefined</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br><span class="line">• <span class="number">5</span></span><br><span class="line">• <span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="arrayObject-findIndex"><a href="#arrayObject-findIndex" class="headerlink" title="arrayObject.findIndex()"></a>arrayObject.findIndex()</h3><p>findIndex()与 find()的使用方法相同，只是当条件为 true 时 findIndex()返回的是索引值，而 find()返回的是元素。如果没有符合条件元素时 findIndex()返回的是-1，而 find()返回的是 undefined。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bookArr=[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">bookName</span>:<span class="string">&quot;三国演义&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>:<span class="number">2</span>,</span><br><span class="line">        <span class="attr">bookName</span>:<span class="string">&quot;水浒传&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>:<span class="number">3</span>,</span><br><span class="line">        <span class="attr">bookName</span>:<span class="string">&quot;红楼梦&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>:<span class="number">4</span>,</span><br><span class="line">        <span class="attr">bookName</span>:<span class="string">&quot;西游记&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> i=bookArr.findIndex(<span class="function">(<span class="params">value</span>)=&gt;</span>value.id==<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(i);<span class="comment">// 3</span></span><br><span class="line"><span class="keyword">var</span> i2=bookArr.findIndex(<span class="function">(<span class="params">value</span>)=&gt;</span>value.id==<span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(i2);<span class="comment">// -1</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br><span class="line">• <span class="number">5</span></span><br><span class="line">• <span class="number">6</span></span><br><span class="line">• <span class="number">7</span></span><br><span class="line">• <span class="number">8</span></span><br><span class="line">• <span class="number">9</span></span><br><span class="line">• <span class="number">10</span></span><br><span class="line">• <span class="number">11</span></span><br><span class="line">• <span class="number">12</span></span><br><span class="line">• <span class="number">13</span></span><br><span class="line">• <span class="number">14</span></span><br><span class="line">• <span class="number">15</span></span><br><span class="line">• <span class="number">16</span></span><br><span class="line">• <span class="number">17</span></span><br><span class="line">• <span class="number">18</span></span><br><span class="line">• <span class="number">19</span></span><br><span class="line">• <span class="number">20</span></span><br><span class="line">• <span class="number">21</span></span><br><span class="line">• <span class="number">22</span></span><br></pre></td></tr></table></figure><h3 id="arrayObject-includes"><a href="#arrayObject-includes" class="headerlink" title="arrayObject.includes()"></a>arrayObject.includes()</h3><p>用来判断一个数组是否包含一个指定的值，如果是返回 true，否则 false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> site = [<span class="string">&#x27;runoob&#x27;</span>, <span class="string">&#x27;google&#x27;</span>, <span class="string">&#x27;taobao&#x27;</span>]</span><br><span class="line">site.includes(<span class="string">&#x27;runoob&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">site.includes(<span class="string">&#x27;baidu&#x27;</span>)  <span class="comment">// false</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="arrayObject-reverse"><a href="#arrayObject-reverse" class="headerlink" title="arrayObject.reverse()"></a>arrayObject.reverse()</h3><p>用于颠倒数组中元素的顺序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>)</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">&quot;George&quot;</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">&quot;John&quot;</span></span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">&quot;Thomas&quot;</span></span><br><span class="line"><span class="built_in">document</span>.write(arr + <span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span>) <span class="comment">// George,John,Thomas</span></span><br><span class="line"><span class="built_in">document</span>.write(arr.reverse()) <span class="comment">// Thomas,John,George</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br><span class="line">• <span class="number">5</span></span><br><span class="line">• <span class="number">6</span></span><br><span class="line">• <span class="number">7</span></span><br></pre></td></tr></table></figure><h3 id="arrayObject-fill-value-start-end"><a href="#arrayObject-fill-value-start-end" class="headerlink" title="arrayObject.fill(value, start, end)"></a>arrayObject.fill(value, start, end)</h3><p>fill() 方法用于将一个固定值替换数组的元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">value必需。填充的值。</span><br><span class="line">start可选。开始填充位置。</span><br><span class="line">end 可选。停止填充位置 (默认为 array.length)</span><br><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line">fruits.fill(<span class="string">&quot;Runoob&quot;</span>, <span class="number">2</span>, <span class="number">4</span>); <span class="comment">// [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Runoob&quot;, &quot;Runoob&quot;]</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br><span class="line">• <span class="number">5</span></span><br><span class="line">• <span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h3><p>Array.from()就是将一个类数组对象或者可遍历对象转换成一个真正的数组。(ES6)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="string">&#x27;65&#x27;</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="number">3</span>: [<span class="string">&#x27;jane&#x27;</span>,<span class="string">&#x27;john&#x27;</span>,<span class="string">&#x27;Mary&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;length&#x27;</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(arrayLike)</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [&#x27;tom&#x27;,&#x27;65&#x27;,&#x27;男&#x27;,[&#x27;jane&#x27;,&#x27;john&#x27;,&#x27;Mary&#x27;]]</span></span><br><span class="line">• <span class="number">1</span></span><br><span class="line">• <span class="number">2</span></span><br><span class="line">• <span class="number">3</span></span><br><span class="line">• <span class="number">4</span></span><br><span class="line">• <span class="number">5</span></span><br><span class="line">• <span class="number">6</span></span><br><span class="line">• <span class="number">7</span></span><br><span class="line">• <span class="number">8</span></span><br><span class="line">• <span class="number">9</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 - Map &amp; Set</title>
      <link href="/2019/02/24/kd9ska/"/>
      <url>/2019/02/24/kd9ska/</url>
      
        <content type="html"><![CDATA[<p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1631088439626-623d28f6-1039-4c6f-bb0d-f994193a0f4b.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=xcK1s&originHeight=332&originWidth=801&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p><img src="https://oss-peng.oss-cn-beijing.aliyuncs.com/blog/1631088456366-c05edccf-14eb-4038-9c3a-a29a2e4585c6.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_6auY5b2p6bmP,color_ef9191,size_30,shadow_100,x_15,y_15#id=vqzy9&originHeight=307&originWidth=793&originalType=binary%E2%88%B6=1&status=done&style=none" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> Map </tag>
            
            <tag> Set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 - 字符串</title>
      <link href="/2019/02/14/re4n48/"/>
      <url>/2019/02/14/re4n48/</url>
      
        <content type="html"><![CDATA[<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ul><li>JSON.stringify() 增强</li><li>增加了 interator 遍历器接口，通过 for of 来遍历</li><li>模板字符串</li><li>标签模板</li></ul><p>es5 的字符串方法：</p><p>方法 描述</p><table><thead><tr><th>charAt</th><th>将字符转为 unicode 字符</th></tr></thead><tbody><tr><td>charCodeAt</td><td>将字符转为 unicode 字符</td></tr><tr><td>indexOf</td><td>返回字符串中检索指定字符第一次出现的下标，不存在返回-1</td></tr><tr><td>lastIndexOf</td><td>返回字符串中检索指定字符最后一次出现</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p>subStr 从起始位置截取指定数量<br>subString 从起始位置截取到结束位置<br>slice 提取字符串片段并在新的字符串返回被提取的部分<br>split 将字符串分割成数组<br>replace 替换与正则表达式匹配的字符串<br>search 检索与正则表达式相匹配的值<br>concat 连接多个字符串返回一个新的字符串<br>charAt str.charAt(<index>) 传入字符串下标，返回指定索引的字符<br>charCodeAt 返回指定索引位置字符的 Unicode<br>toLocaleLowerCase 根据主机的语言环境把字符串转为小写<br>toLocaleYpperCase 根据主机语言环境把字符串转为大写<br>toString 返回字符串对象值<br>trim 一处字符串首尾空白</p><p>es6 字符串方法：<br>方法 描述</p><table><thead><tr><th>fromCodePoint</th><th>将字符转为 unicode 字符</th></tr></thead><tbody><tr><td>charCodeAt</td><td>将字符转为 unicode 字符</td></tr><tr><td>indexOf</td><td>返回字符串中检索指定字符第一次出现的下标，不存在返回-1</td></tr><tr><td>lastIndexOf</td><td>返回字符串中检索指定字符最后一次出现</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p>用于从 Unicode 码点返回对应字符<br>codePointAt 将字符转为 unicode 字符<br>includes 返回布尔值，表示是否找到了参数字符串<br>startWith 返回布尔值，表示参数字符串是否在原字符串的头部<br>endsWith 返回布尔值，表示参数字符串是否在原字符串的尾部<br>repeat(n) 返回新字符串，表示被重复 n 次<br>padStart(n,str) 补全头部长度为 n，用 str 循环补充<br>padEnd(n,str) 不全尾部 n 下标之后，用 str 循环补充<br>trimStart 去除头部空格<br>trimEnd 去除尾部空格<br>matchAll 但会一个正则表达式在当前字符串的所有匹配<br>replaceAll 一次更换所有匹配，返回一个新的字符串</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 - 数组</title>
      <link href="/2019/02/13/dogxgb/"/>
      <url>/2019/02/13/dogxgb/</url>
      
        <content type="html"><![CDATA[<h1 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h1><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>concat()</td><td>链接两个过着更多的数组，并返回结果</td></tr><tr><td>join(x)</td><td>将数组以 x 分隔符分割为字符串</td></tr><tr><td>pop()</td><td>删除并且返回数组的最后一个元素</td></tr><tr><td>push()</td><td>数组末尾添加元素</td></tr><tr><td>reverse()</td><td>点到数组中元素的顺序</td></tr><tr><td>shift()</td><td>删除并返回数组的第一个元素</td></tr><tr><td>slice()</td><td>对某个已有的数组返回选定的元素</td></tr><tr><td>sort()</td><td>对元素进行排序</td></tr><tr><td>splice()</td><td>删除元素，并向数组添加新元素</td></tr><tr><td>toSource()</td><td>返回该对象的源代码</td></tr><tr><td>toString()</td><td>把数组转换为字符串，并返回结果</td></tr><tr><td>toLocaleSting()</td><td>把数组转换为贝蒂数组，并返回结果</td></tr><tr><td>unshift</td><td>在数组开头添加一个或者更多元素，返回新的数组</td></tr><tr><td>indexOf</td><td>查找数据在数组中是否存在，返回下标</td></tr></tbody></table><h1 id="es6-数组新增方法"><a href="#es6-数组新增方法" class="headerlink" title="es6 数组新增方法"></a>es6 数组新增方法</h1><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>…</td><td>扩展运算符可以展开数组、对象</td></tr><tr><td>apply</td><td>将数组转换为函数的参数</td></tr><tr><td>form</td><td>将类数组转换为真正的数组</td></tr><tr><td>of</td><td>用于将一组值转换为数组</td></tr><tr><td>copyWithin</td><td>数组实例的方法，将指定位置成员复制到其他位置，会覆盖原有成员，然后返回当前数组</td></tr><tr><td>find</td><td>返回满足条件的第一个项</td></tr><tr><td>findIndex</td><td>返回满足条件的第一个项的下标</td></tr><tr><td>entries</td><td>返回一个二维数组 [ key:[val]]</td></tr><tr><td>keys</td><td>找到数组中所有项的键</td></tr><tr><td>values</td><td>找到数组中所有项的值</td></tr><tr><td>includes</td><td>返回一个布尔值，表示某个数组是否包含给定的值</td></tr><tr><td>flat()</td><td>降维，只降低一维</td></tr><tr><td>flatMap()</td><td>对每个原数组成员执行一个函数</td></tr><tr><td>forEach</td><td>数组遍历</td></tr><tr><td>filter</td><td>过滤数组</td></tr><tr><td>every</td><td>一假为假，全真为真</td></tr><tr><td>reduce</td><td>求和等</td></tr><tr><td>some</td><td>全假为假，一真为真</td></tr><tr><td>map</td><td>遍历返回新数组</td></tr></tbody></table><h2 id="二维数组转一维数组"><a href="#二维数组转一维数组" class="headerlink" title="二维数组转一维数组"></a>二维数组转一维数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]];</span><br></pre></td></tr></table></figure><p>方式一：<br>利用 Array.protype.flat()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.flat();</span><br></pre></td></tr></table></figure><p>方式二：<br>使用 reduce 遍历数组做数组合并</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newArr = str.reduce(<span class="function">(<span class="params">total, val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> total.concat(val);</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure><p>方式三：<br>利用字符串的特性实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.join().split();</span><br></pre></td></tr></table></figure><p>方式四：<br>递归遍历二维数组，判断项是否是数组，然后合并到新的数组当中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatArray</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [].concat(</span><br><span class="line">    ...array.map(<span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(arr) ? flatArray(arr) : arr;</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式五：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatArray</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.concat.apply([], array);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 - 对象</title>
      <link href="/2019/02/12/mned93/"/>
      <url>/2019/02/12/mned93/</url>
      
        <content type="html"><![CDATA[<h2 id="方法描述"><a href="#方法描述" class="headerlink" title="方法描述"></a>方法描述</h2><p>assign() 将所有可枚举的自身属性的值从一个或多个源对象复制到目标对象<br>is() 比较两个值是否相同<br>keys() 返回一个数组，包含给定对象所有可枚举字符串类型的名称<br>values 返回一个数组，该数组包含给定对象自己所有可枚举字符串对应的值<br>entries() 返回一个包含[key,value]给定对象自己的可枚举字符串属性的所有对的数组<br>formEntries() 从可迭代的[key,value]返回一个新的对象</p><h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h2><p>Object.assign()方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(target, source1, source2);</span><br><span class="line">target; <span class="comment">// &#123;a:1, b:2, c:3&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is"></a>Object.is</h2><p>ES6 提出“Same-value equality”（同值相等）算法，用来解决这个问题。Object.is 就是部署这个算法的新方法。它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。</p><p>ES6 允许字面量定义对象时，用方法二（表达式）作为对象的属性名，即把表达式放在方括号内。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> propKey = <span class="string">&quot;foo&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [propKey]: <span class="literal">true</span>,</span><br><span class="line">  [<span class="string">&quot;a&quot;</span> + <span class="string">&quot;bc&quot;</span>]: <span class="number">123</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="属性值使用表达式"><a href="#属性值使用表达式" class="headerlink" title="属性值使用表达式"></a>属性值使用表达式</h4><p>表达式还可以用于定义方法名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [<span class="string">&quot;h&quot;</span> + <span class="string">&quot;ello&quot;</span>]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.hello(); <span class="comment">// hi</span></span><br></pre></td></tr></table></figure><p>注意：属性名表达式与简洁表示法，不能同时使用，会报错。<br>属性名表达式如果是一个对象，默认情况下会自动将对象转为字符串[object Object]，这一点要特别小心</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> 对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 - 变量&amp;常量</title>
      <link href="/2019/02/11/hts3w4/"/>
      <url>/2019/02/11/hts3w4/</url>
      
        <content type="html"><![CDATA[<h2 id="ES6-amp-Javascript"><a href="#ES6-amp-Javascript" class="headerlink" title="ES6 &amp; Javascript"></a>ES6 &amp; Javascript</h2><p>es 和 js 的关系： 前者是后者的规格，后者是前者的实现<br>通过 es-checker 检查当前 node 环境对于 es6 的支持情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g es-checker</span><br><span class="line">es-checker</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">λ es-checker</span><br><span class="line"></span><br><span class="line">ECMAScript 6 Feature Detection (v1.4.2)</span><br><span class="line"></span><br><span class="line">Variables</span><br><span class="line">  √ let and const</span><br><span class="line">  √ TDZ error for too-early access of let or const declarations</span><br><span class="line">  √ Redefinition of const declarations not allowed</span><br><span class="line">  √ destructuring assignments/declarations for arrays and objects</span><br><span class="line">  √ ... operator</span><br><span class="line"></span><br><span class="line">Data Types</span><br><span class="line">  √ For...of loop</span><br><span class="line">  √ Map, Set, WeakMap, WeakSet</span><br><span class="line">  √ Symbol</span><br><span class="line">  √ Symbols cannot be implicitly coerced</span><br><span class="line"></span><br><span class="line">Number</span><br><span class="line">  √ Octal (e.g. 0o1 ) and binary (e.g. 0b10 ) literal forms</span><br><span class="line">  √ Old octal literal invalid now (e.g. 01 )</span><br><span class="line">  √ Static functions added to Math (e.g. Math.hypot(), Math.acosh(), Math.imul() )</span><br><span class="line">  √ Static functions added to Number (Number.isNaN(), Number.isInteger() )</span><br><span class="line"></span><br><span class="line">String</span><br><span class="line">  √ Methods added to String.prototype (String.prototype.includes(), String.prototype.repeat() )</span><br><span class="line">  √ Unicode code-point escape form in string literals (e.g. \u&#123;20BB7&#125; )</span><br><span class="line">  √ Unicode code-point escape form in identifier names (e.g. var \u&#123;20BB7&#125; = 42; )</span><br><span class="line">  √ Unicode code-point escape form in regular expressions (e.g. var regexp = /\u&#123;20BB7&#125;/u; )</span><br><span class="line">  √ y flag for sticky regular expressions (e.g. /b/y )</span><br><span class="line">  √ Template String Literals</span><br><span class="line"></span><br><span class="line">Function</span><br><span class="line">  √ arrow function</span><br><span class="line">  √ default function parameter values</span><br><span class="line">  √ destructuring for function parameters</span><br><span class="line">  √ Inferences for function name property for anonymous functions</span><br><span class="line">  × Tail-call optimization for function calls and recursion</span><br><span class="line"></span><br><span class="line">Array</span><br><span class="line">  √ Methods added to Array.prototype ([].fill(), [].find(), [].findIndex(), [].entries(), [].keys(), [].values() )</span><br><span class="line">  √ Static functions added to Array (Array.from(), Array.of() )</span><br><span class="line">  √ TypedArrays like Uint8Array, ArrayBuffer, Int8Array(), Int32Array(), Float64Array()</span><br><span class="line">  √ Some Array methods (e.g. Int8Array.prototype.slice(), Int8Array.prototype.join(), Int8Array.prototype.forEach() ) added to the TypedArray prototypes</span><br><span class="line">  √ Some Array statics (e.g. Uint32Array.from(), Uint32Array.of() ) added to the TypedArray constructors</span><br><span class="line"></span><br><span class="line">Object</span><br><span class="line">  √ __proto__ in object literal definition sets [[Prototype]] link</span><br><span class="line">  √ Static functions added to Object (Object.getOwnPropertySymbols(), Object.assign() )</span><br><span class="line">  √ Object Literal Computed Property</span><br><span class="line">  √ Object Literal Property Shorthands</span><br><span class="line">  √ Proxies</span><br><span class="line">  √ Reflect</span><br><span class="line"></span><br><span class="line">Generator and Promise</span><br><span class="line">  √ Generator function</span><br><span class="line">  √ Promises</span><br><span class="line"></span><br><span class="line">Class</span><br><span class="line">  √ Class</span><br><span class="line">  √ super allowed in object methods</span><br><span class="line">  √ class ABC extends Array &#123; .. &#125;</span><br><span class="line"></span><br><span class="line">Module</span><br><span class="line">  × Module export command</span><br><span class="line">  × Module import command</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">=========================================</span><br><span class="line">Passes 39 feature Detections</span><br><span class="line">Your runtime supports 92% of ECMAScript 6</span><br><span class="line">=========================================</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>es6 中我们可以通过 let 定义变量</p><h3 id="不能重复声明"><a href="#不能重复声明" class="headerlink" title="不能重复声明"></a>不能重复声明</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;123&quot;</span>;</span><br></pre></td></tr></table></figure><p>变量重复定义：<br>Identifier ‘str’ has already been declared</p><h3 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h3><p>在变量声明之前调用了该变量，就会形成这个变量的暂时性死区。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><p>声明之前调的语法错误<br>Cannot access ‘str’ before initialization</p><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过var 定义了一个变量str并在声明之前调用</span></span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量提升在内存中的执行时，会将str前置</span></span><br><span class="line"><span class="keyword">var</span> str;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line">str = <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="块及作用域"><a href="#块及作用域" class="headerlink" title="块及作用域"></a>块及作用域</h3><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><ul><li>全局作用域</li><li>块级作用域</li></ul><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>es6 中我们可以通过 const 定义常量</p><h3 id="不能重复声明-1"><a href="#不能重复声明-1" class="headerlink" title="不能重复声明"></a>不能重复声明</h3><h3 id="暂时性死区-1"><a href="#暂时性死区-1" class="headerlink" title="暂时性死区"></a>暂时性死区</h3><h3 id="没有变量提升"><a href="#没有变量提升" class="headerlink" title="没有变量提升"></a>没有变量提升</h3><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><h3 id="恒定的值"><a href="#恒定的值" class="headerlink" title="恒定的值"></a>恒定的值</h3><p>通过 const 定义的变量的值（数据类型和引用）不可以重新赋值。</p><ul><li>数据类型不可改</li><li>不可以对 const 的值进行重新赋值的操作</li><li>可以修改数据的项，不可以修改数据的指针</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">123</span>;</span><br><span class="line">a = <span class="number">456</span>;</span><br><span class="line"><span class="comment">// 常量的值不可以被修改</span></span><br><span class="line"><span class="comment">// const a = 123;</span></span><br><span class="line"><span class="comment">// a = 456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新赋值</span></span><br><span class="line"><span class="comment">// const arr = [1, 23, , 5, , 6, 6];</span></span><br><span class="line"><span class="comment">// arr = [1, 23, , 5, , 6, 6];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用相同，重新赋值不可</span></span><br><span class="line"><span class="comment">// const temp = [1, 23, , 5, , 6, 6];</span></span><br><span class="line"><span class="comment">// const arr = temp;</span></span><br><span class="line"><span class="comment">// arr = temp;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组特殊情况</span></span><br><span class="line"><span class="comment">// const temp = [1, 23, , 5, , 6, 6];</span></span><br><span class="line"><span class="comment">// temp[3] = 123;</span></span><br><span class="line"><span class="comment">// temp.push(132)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象的特殊情况</span></span><br><span class="line"><span class="keyword">var</span> temp = &#123; <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span> &#125;;</span><br><span class="line">temp.name = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">temp.age = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(temp);</span><br><span class="line"><span class="comment">// const obj = temp;</span></span><br><span class="line"><span class="comment">// obj = temp;</span></span><br></pre></td></tr></table></figure><h2 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h2><ul><li>syntax error 语法错误</li><li>Reference Error 引用错误</li><li>type error 类型错误</li></ul>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 变量 </tag>
            
            <tag> 常量 </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 - class</title>
      <link href="/2019/02/10/cfddix/"/>
      <url>/2019/02/10/cfddix/</url>
      
        <content type="html"><![CDATA[<h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Zoo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.zoo = <span class="string">&quot;动物园&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">panda</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">panda.prototype = <span class="keyword">new</span> Zoo();</span><br><span class="line"><span class="keyword">var</span> animal = <span class="keyword">new</span> panda(<span class="string">&quot;熊猫&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(animal.zoo + <span class="string">&quot;里面有一只&quot;</span> + animal.name);</span><br></pre></td></tr></table></figure><p>缺点: 不能向父类构造函数（Zoo）传递参数</p><h2 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h2><p>——在子类型构造函数的内部调用父类构造函数，使用 apply()和 call()方法将 this 指向子类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Zoo</span>(<span class="params">zoo</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.zoo = zoo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">panda</span>(<span class="params">zoo, name</span>) </span>&#123;</span><br><span class="line">  Zoo.call(<span class="built_in">this</span>, zoo); <span class="comment">// 把 Zoo的this 指向panda</span></span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> animal = <span class="keyword">new</span> panda(<span class="string">&quot;动物园&quot;</span>, <span class="string">&quot;熊猫&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(animal.zoo + <span class="string">&quot;里面有一只&quot;</span> + animal.name);</span><br></pre></td></tr></table></figure><p>缺点: 无法调用父类原型上的方法 例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Zoo.prototype.sleep = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;要睡觉觉了！&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(animal.sleep()); <span class="comment">// TypeError: animal.sleep is not a function</span></span><br></pre></td></tr></table></figure><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><p>——将原型链继承和构造函数继承组合到一起。使用原型链继承实现对原型属性和方法的继承，用借用构造函数继承实现对父实例属性的继承。这样既通过在原型上定义方法实现了函数复用，又能保证每个实例都有自己的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Zoo</span>(<span class="params">zoo</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.zoo = zoo;</span><br><span class="line">&#125;</span><br><span class="line">Zoo.prototype.sleep = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;要睡觉觉了！&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">panda</span>(<span class="params">zoo, name</span>) </span>&#123;</span><br><span class="line">  Zoo.call(<span class="built_in">this</span>, zoo); <span class="comment">// 把 Zoo的this 指向panda</span></span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">panda.prototype = <span class="keyword">new</span> Zoo();</span><br><span class="line"><span class="keyword">var</span> animal = <span class="keyword">new</span> panda(<span class="string">&quot;动物园&quot;</span>, <span class="string">&quot;熊猫&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(animal.zoo + <span class="string">&quot;里面有一只&quot;</span> + animal.name);</span><br><span class="line">animal.sleep();</span><br></pre></td></tr></table></figure><p>缺点: 会调用两次超类型构造函数，一次是在创建子类型原型的时候，一次是在子类型构造函数的内部，占用内存。</p><h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><p>——寄生组合式继承是对组合继承的进一步优化。我们先看一下为什么要写这个语句。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">panda.prototype = <span class="keyword">new</span> Zoo();</span><br></pre></td></tr></table></figure><p><strong>我们无非是想让 panda 继承 Zoo 的原型。但是我们为什么不直接写成这样呢？</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">panda.prototype = Zoo.prototype;</span><br></pre></td></tr></table></figure><p>——这样写确实可以实现子类对象对父类对象原型的继承。但是这样写的话：所有继承该父类的子类对象的原型都指向同一个了。也就是说 SubType 不能有自己的原型了。这显然不是我们想要的。<br>——既然不能直接继承，那可不可以间接继承 Zoo.prototype 呢。这就是最终的解决方案：间接组合式继承。<br>——我们让一个对象去指向 Zoo.prototype，然后让 panda.prototype 指向这个函数产生的对象不就可以了嘛。<br>——核心函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">indirect</span>(<span class="params">son, father</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> target = <span class="built_in">Object</span>.create(father.prototype); <span class="comment">// 也可以直接写var target = father.prototype; father.prototype本身就是一个对象，万物皆对象</span></span><br><span class="line">  target.constructor = son;</span><br><span class="line">  son.prototype = target;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Zoo</span>(<span class="params">zoo</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.zoo = zoo;</span><br><span class="line">&#125;</span><br><span class="line">Zoo.prototype.sleep = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;要睡觉觉了！&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">panda</span>(<span class="params">zoo, name</span>) </span>&#123;</span><br><span class="line">  Zoo.call(<span class="built_in">this</span>, zoo); <span class="comment">// 把 Zoo的this 指向panda</span></span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">indirect(panda, Zoo);</span><br><span class="line"><span class="keyword">var</span> animal = <span class="keyword">new</span> panda(<span class="string">&quot;动物园&quot;</span>, <span class="string">&quot;熊猫&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(animal.zoo + <span class="string">&quot;里面有一只&quot;</span> + animal.name);</span><br><span class="line">animal.sleep();</span><br></pre></td></tr></table></figure><p>优点: 只调用了一次 Zoo 构造函数，因此避免在 panda.prototype 上创建不必要的，多余的属性，与此同时，原型链还能保持不变，还能正常使用 instanceof 和 isPrototypeOf()，因此，寄生组合式继承被认为是引用类型最理想的继承范式。</p><h2 id="ES6-继承"><a href="#ES6-继承" class="headerlink" title="ES6 继承"></a>ES6 继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zoo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">zoo</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.zoo = zoo;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sleep</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;要睡觉觉了！&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">animal</span> <span class="keyword">extends</span> <span class="title">Zoo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">zoo, age</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(zoo);</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;吃完饭饭&quot;</span> + <span class="built_in">super</span>.sleep()); <span class="comment">// 这里的super指代的是父亲构造函数 Zoo 的原型上的方法 Zoo.prototype</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> panda = <span class="keyword">new</span> animal(<span class="string">&quot;上野动物园&quot;</span>, <span class="string">&quot;5&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(panda.zoo); <span class="comment">// 上野动物园</span></span><br><span class="line">panda.eat(); <span class="comment">// 吃完饭饭要睡觉觉了！</span></span><br></pre></td></tr></table></figure><p>——Class 可以通过 extends 关键字实现继承<br>——子类必须在 constructor 方法中调用 super 方法，否则新建实例时会报错。<br>——这是因为子类自己的 this 对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用 super 方法，子类就得不到 this 对象。<br>—— super(zoo)里的参数 zoo 是父亲的属性 要是用父类属性需要加上参数</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> class </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
